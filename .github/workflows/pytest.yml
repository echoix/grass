---
name: pytest

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:

jobs:
  pytest:
    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}-${{
        matrix.os }}-${{ matrix.python-version }}
      cancel-in-progress: true

    strategy:
      matrix:
        os:
          - ubuntu-22.04
          #- ubuntu-24.04
        python-version:
          - '3.8'
          - '3.10'
          - '3.12'
         # - '3.13'
      fail-fast: false #true

    runs-on: ${{ matrix.os }}
    env:
      FORCE_COLOR: 1 # for software including pip: https://force-color.org/
      CLICOLOR_FORCE: 1 # for other software including ninja: https://bixense.com/clicolors/

    steps:
      - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install non-Python dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget git gawk findutils
          xargs -a <(awk '! /^ *(#|$)/' ".github/workflows/apt.txt") -r -- \
              sudo apt-get install -y --no-install-recommends --no-install-suggests

      - uses: rui314/setup-mold@8de9eea54963d01c1a6c200606257d65bd53bea1 # v1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/python_requirements.txt
          pip install -r .github/workflows/optional_requirements.txt
          pip install pytest pytest-timeout pytest-github-actions-annotate-failures pytest-xdist pytest-randomly

      - name: Create installation directory
        run: |
          mkdir $HOME/install

      - name: Set number of cores for compilation
        run: |
          echo "MAKEFLAGS=-j$(nproc)" >> $GITHUB_ENV

      - name: Build
        run: .github/workflows/build_${{ matrix.os }}.sh $HOME/install

      - name: Add the bin directory to PATH
        run: |
          echo "$HOME/install/bin" >> $GITHUB_PATH

      - name: Test executing of the grass command
        run: .github/workflows/test_simple.sh

      - run: |
          grass --tmp-location XY --exec \
            g.download.location url=https://grass.osgeo.org/sampledata/north_carolina/nc_spm_full_v2alpha2.tar.gz path=$HOME
          cd $HOME
          grass --tmp-location XY --exec pytest --verbose --color=yes --durations=0 --durations-min=0.005 --numprocesses auto -ra . -m 'not serial' --tb=line  -o console_output_style=count -o faulthandler_timeout=45
        continue-on-error: true

      - run: |
          cd $HOME
          grass --tmp-location XY --exec pytest --verbose --color=yes --durations=0 --durations-min=0.005 -ra . -m 'not serial' --tb=line  -o console_output_style=count -o faulthandler_timeout=45
        continue-on-error: true
      - name: Run pytest
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
          pytest --verbose --color=yes --durations=0 --durations-min=0.5 --numprocesses auto -ra . -m 'not serial'
      - name: Run pytest (serial-only test)
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
          pytest --verbose --color=yes --durations=0 --durations-min=0.5 --numprocesses 1 -ra . -m 'serial'
      - name: Run pytest (serial-only test)
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
          pytest --verbose --color=yes --durations=0 --durations-min=0.5 -ra . -m 'serial'

      - name: Print installed versions
        if: always()
        run: .github/workflows/print_versions.sh
  pytest-success:
    name: pytest Result
    needs:
      - pytest
    if: ${{ always() }}
    uses: ./.github/workflows/verify-success.yml
    with:
      needs_context: ${{ toJson(needs) }}
