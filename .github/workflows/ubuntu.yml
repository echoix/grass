---
name: Ubuntu

# Build and run tests on Ubuntu

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:

jobs:
  ubuntu:
    concurrency:
      group: >-
        ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}-${{
        '' }}${{ matrix.name }}-${{ matrix.os }}-${{ matrix.extra-include }}
      cancel-in-progress: true

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name:
          - "22.04"
          - minimum config

        # Only run tests for these folders in this matrix job.
        extra-include:
          # All root folders that could contain tests are:
          #   db display doc docker general gui
          #   imagery lib misc ps python raster raster3d scripts
          #   temporal testsuite utils vector visualization
          #
          # In order to split test executions, all these root folders are
          # added as excluded folders, then items included for this matrix
          # job are removed from that exclusion list.
          #
          # Using folded YAML multiline string block chomping (>-) to replace
          # newlines with spaces, and strip newline at end.
          # See https://yaml-multiline.info/
          - db
          - temporal
          - >-
            db display doc docker general gui
            imagery lib misc ps python raster raster3d scripts
            testsuite utils vector visualization

        include:
          - name: "22.04"
            os: ubuntu-22.04
            config: ubuntu-22.04
          # This is without optional things but it still keeps things useful,
          # so, e.g., without OpenMP, but with PDAL. Code or tests should be written
          # so that test pass even when these optional things are not present.
          - name: minimum config
            os: ubuntu-22.04
            config: ubuntu-22.04_without_x
      fail-fast: false

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Invert inclusion list to an exclusion list
        id: get-exclude
        run: |
          array=(db display doc docker general gui \
          imagery lib misc ps python raster raster3d scripts \
          temporal testsuite utils vector visualization)
          echo "Complete set of folders that can be included:"
          echo "${array[@]}"
          delete=( ${{ env.DELETE_ARRAY }} )
          echo "Included folders to remove from the complete set:"
          echo "${delete[@]}"
          for target in "${delete[@]}"; do
            for i in "${!array[@]}"; do
              if [[ ${array[i]} = "$target" ]]; then
                unset 'array[i]'
              fi
            done
          done
          unset new_array
          for i in "${!array[@]}"; do
            new_array+=( "${array[i]}" )
          done
          echo "Excluded folders:"
          echo "${new_array[@]}"
          printf -v extra_exclude './%s/* ' "${new_array[@]}"
          echo "Exclusion string to add to gunittest config"
          echo "${extra_exclude}"
          echo "extra-exclude=${extra_exclude}" >> "${GITHUB_OUTPUT}"
          echo "Inclusion string for tags"
          printf -v extra_include_tag ' %s' "${delete[@]}"
          extra_include_tag="${extra_include_tag:1}" # trim extra first space
          extra_include_tag=${extra_include_tag// /-} # replace spaces by hyphens
          echo "${extra_include_tag}"
          echo "extra-include-tag=${extra_include_tag}" >> "${GITHUB_OUTPUT}"
          echo "Truncated string for codecov upload"
          max_flag_len=45
          max_flag_prefix_len=33 # gunittest-ubuntu-22.04_without_x-
          max_flag_suffix_len=$((max_flag_len - max_flag_prefix_len))
          extra_include_tag_len=${#extra_include_tag} # string's length
          extra_include_tag_len_len=${#extra_include_tag_len} # length of string's length
          if [[ "${extra_include_tag_len}" -gt "${max_flag_suffix_len}" ]]; then
            # Extra include too long
            extra_include_tag_trunc="${extra_include_tag:0:$max_flag_suffix_len-1-$extra_include_tag_len_len}.${extra_include_tag_len}"
          else
            extra_include_tag_trunc="${extra_include_tag}"
          fi
          echo "${extra_include_tag_trunc}"
          echo "extra-include-tag-trunc=${extra_include_tag_trunc}" >> "${GITHUB_OUTPUT}"
        env:
          DELETE_ARRAY: ${{ matrix.extra-include }}

      - name: Add extra exclusions to a gunittest config file
        run: |
          sed 's:exclude =:exclude = ${{
            steps.get-exclude.outputs.extra-exclude
          }}:g' .gunittest.cfg > .gunittest.extra.cfg
          cat .gunittest.extra.cfg
      - name: Set up Python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: '3.10'
          
      - run: python -m site --user-site
      - run: python -m site

      - name: Get dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget git gawk findutils
          xargs -a <(awk '! /^ *(#|$)/' ".github/workflows/apt.txt") -r -- \
              sudo apt-get install -y --no-install-recommends --no-install-suggests
      - name: Install python coverage tool
        run: pip install coverage pytest-cov

      - name: Create installation directory
        run: |
          mkdir $HOME/install

      - name: Set number of cores for compilation
        run: |
          echo "MAKEFLAGS=-j$(nproc)" >> $GITHUB_ENV

      - name: Set LD_LIBRARY_PATH for compilation
        run: |
          echo "LD_LIBRARY_PATH=$HOME/install/lib" >> $GITHUB_ENV

      - name: Print build environment variables
        shell: bash -el {0}
        run: |
          printenv | sort
          gcc --version
          ldd --version

      - name: Build
        env:
          # TODO: -pedantic-errors here won't go through ./configure (with GNU C)
          CFLAGS: -fPIC -Wvla
          # TODO: -pedantic-errors here won't compile
          CXXFLAGS: -fPIC
        run: .github/workflows/build_${{ matrix.config }}.sh $HOME/install -Werror

      - name: Add the bin directory to PATH
        run: |
          echo "$HOME/install/bin" >> $GITHUB_PATH

      - name: Print installed versions
        if: always()
        run: .github/workflows/print_versions.sh

      - name: Test executing of the grass command
        run: .github/workflows/test_simple.sh
      - name: Place a sitecustomize.py file enabling subprocess code coverage
        run: |
          mkdir -p $(python -m site --user-site)
          printf "import coverage\ncoverage.process_startup()" \
            > "$(python -m site --user-site)/sitecustomize.py"

      - name: Set COVERAGE_PROCESS_START env variable
        run: |
          echo "COVERAGE_PROCESS_START=${PWD}/.coveragerc" >> $GITHUB_ENV
          echo "COVERAGE_RCFILE=${PWD}/.coveragerc" >> $GITHUB_ENV
      
      - name: Run tests
        run: |
          export COVERAGE_PROCESS_START=${PWD}/.coveragerc
          export COVERAGE_RCFILE=${PWD}/.coveragerc
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          printenv | sort
          #.github/workflows/test_thorough.sh --config .gunittest.extra.cfg
          coverage debug sys
          coverage debug config
          #coverage debug data
          #coverage debug
          grass --tmp-project XY --exec \
            g.download.location url=https://grass.osgeo.org/sampledata/north_carolina/nc_spm_full_v2alpha2.tar.gz path=$HOME
          printenv | sort
          #delete=( ${{ env.DELETE_ARRAY }} )
          #for target in "${delete[@]}"; do
            #cd "${{ github.workspace }}/$target"
            # ${PYTHON} -m grass.gunittest.main \
            grass --tmp-project XY --exec \
            coverage run --concurrency=multiprocessing,thread --timid --debug=sys --debug=data \
              -m grass.gunittest.main \
            --grassdata $HOME --location nc_spm_full_v2alpha2 --location-type nc \
            --min-success 100 --config .gunittest.extra.cfg #--config "${{ github.workspace }}/.gunittest.extra.cfg"
            ls -la
            # coverage combine
            ls -la
          #done
          coverage debug data
        env:
          PYTHON: coverage run --concurrency=multiprocessing,thread --timid --debug=sys --debug=data
          # DELETE_ARRAY: ${{ matrix.extra-include }}
          GRASS_PYTHON: coverage run

      - run: ls -la db/
      - run: ls -la -R

      - name: Fix non-standard installed script paths in coverage data
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage combine --debug=pathmap
          python utils/coverage_mapper.py
          coverage combine --debug=pathmap

      - name: Show python coverage report summary
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage report
      - name: Generate HTML coverage report
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage html
      - name: Make HTML test report available
        if: ${{ always() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: >-
            testreport-${{ matrix.os }}-${{ matrix.config }}-${{
            '' }}${{ steps.get-exclude.outputs.extra-include-tag }}
          path: '**/testreport'
          retention-days: 3
      - name: Make python-only code coverage test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: >-
            python-codecoverage-report-${{ matrix.os }}-${{ matrix.config }}-${{
            '' }}${{ steps.get-exclude.outputs.extra-include-tag }}
          path: '**/coverage_html_report'
          retention-days: 1

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          verbose: true
          flags: >-
            gunittest,gunittest-${{ matrix.config }},gunittest-${{ matrix.config }}-${{
            '' }}${{ steps.get-exclude.outputs.extra-include-tag-trunc }}
          name: gunittest-${{ matrix.config }}-${{ steps.get-exclude.outputs.extra-include-tag-trunc }}
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-test-success:
    name: Build & Test Result
    needs:
      - ubuntu
    if: ${{ always() }}
    uses: ./.github/workflows/verify-success.yml
    with:
      needs_context: ${{ toJson(needs) }}
