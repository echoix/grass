---
name: macOS

# Build and run tests on macOS

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:
env:
  CACHE_NUMBER: 0
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  macos_build:
    name: macOS build
    runs-on: macos-14
    env:
      PYTHONWARNINGS: always
    steps:
      - name: Info
        run: |
          echo "macOS version $(sw_vers -productVersion)"
          echo "architecture $(uname -a)"
      - name: Disabling Spotlight
        run: sudo mdutil -a -i off
      - name: Uninstalling Homebrew
        run: |
          echo "Moving directories..."
          sudo mkdir /opt/local-off /opt/homebrew-off
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/local-off/ \;
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/homebrew-off/ \;
          echo "Removing files..."
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          # Rehash to forget about the deleted files
          hash -r
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get current date cache key segment
        id: date
        # Year and week of year so cache key changes weekly
        run: echo "date=$(date +%Y-%U)" >> "${GITHUB_OUTPUT}"
      - name: Prepare Conda environment file
        env:
          test_dependencies: |
            ipython
            pytest
            pytest-github-actions-annotate-failures
            pytest-timeout
            pytest-xdist
            pyyaml
        run: |
          cp ./macos/files/conda-requirements-dev-arm64.txt "${RUNNER_TEMP}/macos_dependencies.txt"
          echo "$test_dependencies" | sed "s/ /\n/g" >> "${RUNNER_TEMP}/macos_dependencies.txt"
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@b09ef9b599704322748535812ca03efb2625677b # v2.0.5
        with:
          init-shell: bash
          environment-file: ${{ runner.temp }}/macos_dependencies.txt
          environment-name: grass-env
          # Persist on the same period (date).
          cache-environment-key: environment-${{ steps.date.outputs.date }}

      - name: Environment info
        shell: bash -el {0}
        run: |
          printenv | sort
          $CC --version
      - name: Create installation directory
        run: mkdir $HOME/install
      - name: Build and install
        shell: micromamba-shell {0}
        run: source ./.github/workflows/macos_install.sh $HOME/install
      - name: Add the bin directory to PATH
        run: echo "$HOME/install/bin" >> $GITHUB_PATH
      - name: Check installed version
        if: ${{ !cancelled() }}
        shell: micromamba-shell {0}
        run: source ./.github/workflows/print_versions.sh
      - name: Place a usercustomize.py file enabling subprocess code coverage
        shell: bash -el {0}
        run: |
          mkdir -p $(python -m site --user-site)
          printf "import coverage\ncoverage.process_startup()" \
            > "$(python -m site --user-site)/usercustomize.py"
      - name: Set COVERAGE_PROCESS_START env variable
        shell: bash -el {0}
        run: |
          echo "COVERAGE_PROCESS_START=${PWD}/.coveragerc" >> $GITHUB_ENV
          echo "COVERAGE_RCFILE=${PWD}/.coveragerc" >> $GITHUB_ENV

      - name: Run pytest with multiple workers in parallel
        shell: micromamba-shell {0}
        run: |
          export PYTHONPATH=$(grass --config python_path):$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_parallel.txt \
            -k 'not testsuite'
      - name: Run pytest with a single worker (for tests marked with needs_solo_run)
        shell: micromamba-shell {0}
        run: |
          export PYTHONPATH=$(grass --config python_path):$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_not_parallel.txt \
            -k 'not testsuite'
      - name: Run pytest with a single worker (for gunittest-based tests)
        shell: micromamba-shell {0}
        run: |
          export PYTHONPATH=$(grass --config python_path):$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_gunittest.txt

      - name: Cache GRASS Sample Dataset
        id: cached-data
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: sample-data/nc_spm_full_v2alpha2.tar.gz
          key: nc_spm_full_v2alpha2.tar.gz
          enableCrossOsArchive: true

      - name: Download GRASS Sample Dataset
        if: steps.cached-data.outputs.cache-hit != 'true'
        run: |
          mkdir -p sample-data
          curl -L "$SAMPLE_DATA" -o sample-data/nc_spm_full_v2alpha2.tar.gz
        env:
          SAMPLE_DATA: "https://grass.osgeo.org/sampledata/north_carolina/\
            nc_spm_full_v2alpha2.tar.gz"

      - name: Run gunittest tests
        shell: micromamba-shell {0}
        run: |
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          grass --tmp-project XY --exec \
              g.download.location url=${{ env.SAMPLE_DATA_URL }} path=$HOME
          grass --tmp-project XY --exec \
              ${PYTHON}  -m grass.gunittest.main \
              --grassdata $HOME --location nc_spm_full_v2alpha2 --location-type nc \
              --min-success 100 --config .github/workflows/macos_gunittest.cfg
        env:
          SAMPLE_DATA_URL: "file://${{ github.workspace }}/sample-data/\
            nc_spm_full_v2alpha2.tar.gz"
          PYTHON: coverage run
      - name: Fix non-standard installed script paths in coverage data
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          # export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage combine
          python utils/coverage_mapper.py
          coverage combine
      - name: Show python coverage report summary
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          # export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage report
          coverage json
      - name: Generate HTML coverage report
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          # export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          coverage html
      - name: Make HTML test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: testreport-${{ runner.os }}
          path: testreport
          retention-days: 3
      - name: Make python-only code coverage test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: >-
            python-codecoverage-report-${{ 'macos-14' }}
          path: coverage_html_report
          retention-days: 1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          verbose: true
          flags: gunittest-${{ 'macos-14' }}
          name: gunittest-${{ 'macos-14' }}
          token: ${{ secrets.CODECOV_TOKEN }}
