---
name: macOS

# Build and run tests on macOS

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:
env:
  CACHE_NUMBER: 0
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  macos_build:
    name: macOS build
    runs-on: macos-15
    env:
      PYTHONWARNINGS: always
      # renovate: datasource=github-tags depName=codecov/codecov-action
      CODECOV_ACTION_VERSION: "5a1091511ad55cbe89839c7260b706298ca349f7" # v5.5.1
    steps:
      - name: Info
        run: |
          echo "macOS version $(sw_vers -productVersion)"
          echo "architecture $(uname -a)"
      - name: Disabling Spotlight
        run: sudo mdutil -a -i off
      - name: Uninstalling Homebrew
        run: |
          echo "Moving directories..."
          sudo mkdir /opt/local-off /opt/homebrew-off
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/local-off/ \;
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/homebrew-off/ \;
          echo "Removing files..."
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          # Rehash to forget about the deleted files
          hash -r
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          repository: codecov/codecov-action
          ref: ${{ env.CODECOV_ACTION_VERSION }}
          path: codecov-action
          sparse-checkout: |
            dist/codecov.sh
          sparse-checkout-cone-mode: false

      - name: Get current date cache key segment
        id: date
        # Year and week of year so cache key changes weekly
        run: echo "date=$(date +%Y-%U)" >> "${GITHUB_OUTPUT}"
      - name: Prepare Conda environment file
        env:
          test_dependencies: |
            gnupg
            ipython
            pytest
            coverage
            pytest-cov
            pytest-github-actions-annotate-failures
            pytest-timeout
            pytest-xdist
            pyyaml
        run: |
          cp ./macos/files/conda-requirements-dev-arm64.txt "${RUNNER_TEMP}/macos_dependencies.txt"
          echo "${test_dependencies// /\n}" >> "${RUNNER_TEMP}/macos_dependencies.txt"
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@add3a49764cedee8ee24e82dfde87f5bc2914462 # v2.0.7
        with:
          init-shell: bash
          environment-file: ${{ runner.temp }}/macos_dependencies.txt
          environment-name: grass-env
          # Persist on the same period (date).
          cache-environment-key: environment-${{ steps.date.outputs.date }}

      - name: Environment info
        shell: bash -el {0}
        run: |
          printenv | sort
          $CC --version
      - name: Create installation directory
        run: mkdir "${HOME}/install"
      - name: Build and install
        shell: micromamba-shell {0}
        run: source ./.github/workflows/macos_install.sh "${HOME}/install"
      - name: Add the bin directory to PATH
        run: echo "${HOME}/install/bin" >> "${GITHUB_PATH}"
      - name: Check installed version
        if: ${{ !cancelled() }}
        shell: micromamba-shell {0}
        run: source ./.github/workflows/print_versions.sh

      - name: Run pytest with multiple workers in parallel
        shell: micromamba-shell {0}
        run: |
          PYTHONPATH="$(grass --config python_path):${PYTHONPATH}"
          LD_LIBRARY_PATH="$(grass --config path)/lib:${LD_LIBRARY_PATH}"
          export PYTHONPATH
          export LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_parallel.txt \
            --junitxml=pytest.xdist.junit.xml \
            -k 'not testsuite'
      - name: Run pytest with a single worker (for tests marked with needs_solo_run)
        shell: micromamba-shell {0}
        run: |
          PYTHONPATH="$(grass --config python_path):${PYTHONPATH}"
          LD_LIBRARY_PATH="$(grass --config path)/lib:${LD_LIBRARY_PATH}"
          INITIAL_GISBASE="$(grass --config path)"
          INITIAL_PWD="${PWD}"
          export PYTHONPATH
          export LD_LIBRARY_PATH
          export INITIAL_GISBASE
          export INITIAL_PWD
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_cov.txt \
            @.github/workflows/pytest_args_not_parallel.txt \
            --junitxml=pytest.needs_solo_run.junit.xml \
            -k 'not testsuite'
      - name: Run pytest with a single worker (for gunittest-based tests)
        shell: micromamba-shell {0}
        run: |
          PYTHONPATH="$(grass --config python_path):${PYTHONPATH}"
          LD_LIBRARY_PATH="$(grass --config path)/lib:${LD_LIBRARY_PATH}"
          export PYTHONPATH
          export LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_gunittest.txt \
            --junitxml=pytest.gunittest.junit.xml
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          exclude: gui
          flags: macos-pytest-python
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Fix non-standard installed script paths in coverage data
        shell: micromamba-shell {0}
        run: |
          PYTHONPATH="$(grass --config python_path):${PYTHONPATH}"
          LD_LIBRARY_PATH="$(grass --config path)/lib:${LD_LIBRARY_PATH}"
          INITIAL_GISBASE="$(grass --config path)"
          INITIAL_PWD="${PWD}"
          export PYTHONPATH
          export LD_LIBRARY_PATH
          export INITIAL_GISBASE
          export INITIAL_PWD
          python utils/coverage_mapper.py
          coverage combine
          coverage html
          coverage json
      - name: Make python-only code coverage test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: >-
            python-codecoverage-report-macos
          path: coverage_html_report
          retention-days: 1
      - name: Set fork
        shell: bash
        run: |
          CC_FORK="false"
          if [ -n "$GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME" ] && [ "$GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME" != "$GITHUB_REPOSITORY" ];
          then
            echo -e "\033[0;32m==>\033[0m Fork detected"
            CC_FORK="true"
          fi
          echo "CC_FORK=$CC_FORK" >> "$GITHUB_ENV"
        env:
          GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME: ${{ github.event.pull_request.head.repo.full_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      - name: Override branch for forks
        shell: bash
        run: |
          if [ -z "$CC_BRANCH" ] && [ -z "$CC_TOKEN" ] && [ "$CC_FORK" == 'true' ]
          then
            echo -e "\033[0;32m==>\033[0m Fork detected, setting branch to $GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
            TOKENLESS="$GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
            CC_BRANCH="$GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL"
            echo "TOKENLESS=$TOKENLESS" >> "$GITHUB_ENV"
          fi

          echo "CC_BRANCH=$CC_BRANCH" >> "$GITHUB_ENV"
        env:
          CC_BRANCH: #${{ inputs.override_branch }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FULL_NAME: ${{ github.event.pull_request.head.repo.full_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      - name: Override commits and pr for pull requests
        shell: bash
        run: |
          if [ -z "$CC_SHA" ];
          then
            CC_SHA="$GITHUB_EVENT_PULL_REQUEST_HEAD_SHA"
          fi
          if [ -z "$CC_PR" ] && [ "$CC_FORK" == 'true' ];
          then
            CC_PR="$GITHUB_EVENT_NUMBER"
          fi

          echo "CC_SHA=$CC_SHA" >> "$GITHUB_ENV"
          echo "CC_PR=$CC_PR" >> "$GITHUB_ENV"
        env:
          CC_PR: #${{ inputs.override_pr }}
          CC_SHA: #${{ inputs.override_commit }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      - name: Upload coverage reports to Codecov
        shell: micromamba-shell {0}
        run: |
          ./codecov-action/dist/codecov.sh
            --flag pytest-macos \
            -f pytest-macos
          #curl -Os https://cli.codecov.io/latest/macos/codecov
          #sudo chmod +x codecov
          #./codecov --help || true
          #./codecov --version || true
          #./codecov --verbose upload-process \
          #  -t ${{ secrets.CODECOV_TOKEN }} \
          #  --flag pytest-macos \
          #  -f pytest-macos 
         env:
           CC_TOKEN: ${{ secrets.CODECOV_TOKEN }}
           CC_FLAGS: pytest-macos
           CC_NAME: pytest-macos
           

      - name: Cache GRASS Sample Dataset
        id: cached-data
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: sample-data/nc_spm_full_v2alpha2.tar.gz
          key: nc_spm_full_v2alpha2.tar.gz
          enableCrossOsArchive: true

      - name: Download GRASS Sample Dataset
        if: steps.cached-data.outputs.cache-hit != 'true'
        run: |
          mkdir -p sample-data
          curl -L "$SAMPLE_DATA" -o sample-data/nc_spm_full_v2alpha2.tar.gz
        env:
          SAMPLE_DATA: "https://grass.osgeo.org/sampledata/north_carolina/\
            nc_spm_full_v2alpha2.tar.gz"

      - name: Save GRASS Sample Dataset to cache
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        if: steps.cached-data.outputs.cache-hit != 'true'
        with:
          path: sample-data/nc_spm_full_v2alpha2.tar.gz
          key: nc_spm_full_v2alpha2.tar.gz

      - name: Run gunittest tests
        shell: micromamba-shell {0}
        run: .github/workflows/test_thorough.sh --config .github/workflows/macos_gunittest.cfg
        env:
          SAMPLE_DATA_URL: "file://${{ github.workspace }}/sample-data/\
            nc_spm_full_v2alpha2.tar.gz"

      - name: Make HTML test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: testreport-macOS
          path: testreport
          retention-days: 3
