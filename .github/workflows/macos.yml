---
name: macOS

# Build and run tests on macOS

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:
env:
  CACHE_NUMBER: 0
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true
jobs:
  macos_build:
    name: macOS build
    runs-on: macos-14
    steps:
      - name: Info
        run: |
          echo "macOS version $(sw_vers -productVersion)"
          echo "architecture $(uname -a)"
      # - run: which gpg
      # - run: brew install gnupg tree
      # - run: tree -a /opt/homebrew
      # - run: tree /opt/homebrew
      - name: Disabling Spotlight
        run: sudo mdutil -a -i off
      - name: Uninstalling Homebrew
        run: |
          echo "Moving directories..."
          sudo mkdir /opt/off
          sudo mkdir /opt/offLocal
          /usr/bin/sudo /usr/bin/find /usr/local -mindepth 1 -maxdepth 1 \
            -type d -print -exec /bin/mv {} /opt/offLocal/ \;
          /usr/bin/sudo /usr/bin/find /opt/homebrew -mindepth 1 -maxdepth 1 \
            -type d -print -exec /bin/mv {} /opt/off/ \;
          echo "Removing files..."
          /usr/bin/sudo /usr/bin/find /usr/local /opt/homebrew -mindepth 1 -maxdepth 1 \
            -type f -print -delete
          hash -r
      # - run: brew install tree
      # - run: tree -a /opt
      # - run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      # - run: brew install tree
      # - run: tree /opt/homebrew
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@f8b8a1e23a26f60a44c853292711bacfd3eac822 # v1.9.0
        with:
          init-shell: bash
          environment-file: .github/workflows/macos_dependencies.txt
          environment-name: grass-env
          cache-environment: true
      - name: Environment info
        shell: bash -el {0}
        run: |
          printenv | sort
          $CC --version
      # - run: brew install gnupg
      # - run: which gpg
      - name: Create installation directory
        run: mkdir $HOME/install
      - name: Build and install
        shell: bash -l {0}
        run: source ./.github/workflows/macos_install.sh $HOME/install
      - name: Add the bin directory to PATH
        run: echo "$HOME/install/bin" >> $GITHUB_PATH
      - name: Check installed version
        if: ${{ !cancelled() }}
        shell: bash -l {0}
        run: source ./.github/workflows/print_versions.sh

      - name: Run pytest with multiple workers in parallel
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          pytest --verbose --color=yes --durations=0 --durations-min=0.5 \
            --numprocesses auto \
            --cov \
            --cov-context=test \
            -ra . \
            -m 'not needs_solo_run'
      - name: Run pytest with a single worker (for tests marked with needs_solo_run)
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          pytest --verbose --color=yes --durations=0 --durations-min=0.5 \
            --cov \
            --cov-context=test \
            --cov-append \
            -ra . \
            -m 'needs_solo_run'
      - name: Fix non-standard installed script paths in coverage data
        shell: bash -el {0}
        run: |
          export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          export INITIAL_GISBASE="$(grass --config path)"
          export INITIAL_PWD="${PWD}"
          python utils/coverage_mapper.py
          coverage combine
          coverage html
      - run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - run: brew install gnupg
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          verbose: true
          flags: pytest-python-${{ runner.os }}
          name: pytest-python-${{ runner.os }}
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Make python-only code coverage test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
        with:
          name: python-codecoverage-report-${{ runner.os }}
          path: coverage_html_report
          retention-days: 1
      - name: Remove coverage data and reports
        shell: bash -el {0}
        run: |
          coverage erase
          rm -rf ./coverage_html_report

      - name: Run gunittest tests
        shell: bash -el {0}
        run: |
          grass --tmp-project XY --exec \
              g.download.location url=${{ env.SampleData }} path=$HOME
          grass --tmp-project XY --exec \
              python3 -m grass.gunittest.main \
              --grassdata $HOME --location nc_spm_full_v2alpha2 --location-type nc \
              --min-success 100 --config .github/workflows/macos_gunittest.cfg
        env:
          SampleData: "https://grass.osgeo.org/sampledata/north_carolina/\
            nc_spm_full_v2alpha2.tar.gz"
      - name: Make HTML test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
        with:
          name: testreport-macOS
          path: testreport
          retention-days: 3
