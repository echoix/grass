---
name: macOS

# Build and run tests on macOS

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:
env:
  CACHE_NUMBER: 0
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  macos_build:
    name: macOS build
    runs-on: macos-14
    env:
      PYTHONWARNINGS: always
      # LLVM_PROFILE_FILE: "grass-prof-%9m.profraw"
    steps:
      - name: Info
        run: |
          echo "macOS version $(sw_vers -productVersion)"
          echo "architecture $(uname -a)"
      - name: Disabling Spotlight
        run: sudo mdutil -a -i off
      - name: Uninstalling Homebrew
        run: |
          echo "Moving directories..."
          sudo mkdir /opt/local-off /opt/homebrew-off
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/local-off/ \;
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type d -print -exec /bin/mv {} \
            /opt/homebrew-off/ \;
          echo "Removing files..."
          test ! -d /usr/local || /usr/bin/sudo /usr/bin/find /usr/local \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          test ! -d /opt/homebrew || /usr/bin/sudo /usr/bin/find /opt/homebrew \
            -mindepth 1 -maxdepth 1 -type f -print -delete
          # Rehash to forget about the deleted files
          hash -r
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get current date cache key segment
        id: date
        # Year and week of year so cache key changes weekly
        run: echo "date=$(date +%Y-%U)" >> "${GITHUB_OUTPUT}"
      - name: Prepare Conda environment file
        env:
          test_dependencies: |
            findutils
            ipython
            pytest
            pytest-github-actions-annotate-failures
            pytest-timeout
            pytest-xdist
            pyyaml
        run: |
          cp ./macos/files/conda-requirements-dev-arm64.txt "${RUNNER_TEMP}/macos_dependencies.txt"
          echo "$test_dependencies" | sed "s/ /\n/g" >> "${RUNNER_TEMP}/macos_dependencies.txt"
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@0dea6379afdaffa5d528b3d1dabc45da37f443fc # v2.0.4
        with:
          init-shell: bash
          environment-file: ${{ runner.temp }}/macos_dependencies.txt
          environment-name: grass-env
          # Persist on the same period (date).
          cache-environment-key: environment-${{ steps.date.outputs.date }}
      - name: Set profile file name env var
        run: echo "LLVM_PROFILE_FILE=${{ github.workspace }}/grass-prof-%9m.profraw" >> $GITHUB_ENV
      - name: Environment info
        shell: bash -el {0}
        run: |
          printenv | sort
          $CC --version
      - name: Create installation directory
        run: mkdir $HOME/install
      - name: Build and install
        shell: micromamba-shell {0}
        run: source ./.github/workflows/macos_install.sh $HOME/install
      - name: Add the bin directory to PATH
        run: echo "$HOME/install/bin" >> $GITHUB_PATH
      - name: Check installed version
        if: ${{ !cancelled() }}
        shell: micromamba-shell {0}
        run: source ./.github/workflows/print_versions.sh
      - name: Print config
        shell: micromamba-shell {0}
        run: grass --config
      - run: ls -la bin.*-*-*
      - run: ls -la dist.*-*-*/bin
      - run: ls -la "$HOME/install"
      - run: ls -la "$HOME/install/bin"
      - run: ls -la "$HOME"/install/grass*/lib
      - name: Run pytest with multiple workers in parallel
        shell: micromamba-shell {0}
        run: |
          export PYTHONPATH=$(grass --config python_path):$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_parallel.txt
      - name: Run pytest with a single worker (for tests marked with needs_solo_run)
        shell: micromamba-shell {0}
        run: |
          export PYTHONPATH=$(grass --config python_path):$PYTHONPATH
          export LD_LIBRARY_PATH=$(grass --config path)/lib:$LD_LIBRARY_PATH
          pytest \
            @.github/workflows/pytest_args_ci.txt \
            @.github/workflows/pytest_args_not_parallel.txt
      - run: find . -type f \( -executable -o -name "*.dylib" \)
        shell: micromamba-shell {0}
      - run: find "$HOME/install" -type f \( -executable -o -name "*.dylib" \)
        shell: micromamba-shell {0}
      - run: |
          find "$HOME/install" -type f \( -executable -o -name "*.dylib" \) -exec file {} + | grep -E 'Mach-O|ELF' | cut -d: -f1
        shell: micromamba-shell {0}
      - name: Merge and index profile data
        shell: micromamba-shell {0}
        run: llvm-profdata merge -sparse *.profraw -o merged.profdata
      - name: Show merged profile data
        shell: micromamba-shell {0}
        continue-on-error: true
        run: llvm-profdata show --binary-ids merged.profdata
      - name: Show merged profile data (only covered)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: llvm-profdata show --binary-ids --covered --all-functions merged.profdata
      - run: ls -la "$HOME/install"
      - run: ls -la "$HOME/install/bin"
      - name: Create a line-oriented coverage report (libgrass_gis)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          llvm-cov show -check-binary-ids -use-color -instr-profile=merged.profdata \
            /Users/runner/install/grass85/lib/libgrass_gis.8.5.dylib
      - name: Create a line-oriented coverage report
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          llvm-cov show -check-binary-ids -use-color -instr-profile=merged.profdata \
            /Users/runner/install/grass85/lib/*.dylib
      - name: Export coverage report with llvm-cov export (libgrass_gis, json)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          llvm-cov export -format=text -instr-profile=merged.profdata \
            /Users/runner/install/grass85/lib/libgrass_gis.8.5.dylib \
            | tee coverage.libgrass_gis.json
      - name: Export coverage report with llvm-cov export (all libs, json)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          llvm-cov export -format=text -instr-profile=merged.profdata \
            /Users/runner/install/grass85/lib/*.dylib \
            | tee coverage.libs.json
      - name: Export coverage report with llvm-cov export (all libs, lcov)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          llvm-cov export -format=lcov -instr-profile=merged.profdata \
            /Users/runner/install/grass85/lib/*.dylib \
            | tee coverage.libs.lcov
      - name: Export coverage report with llvm-cov export (all, json)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          binaries_and_libs=$(find . -type f \( -executable -o -name "*.dylib" \) \
            -exec file {} + | grep -E 'Mach-O|ELF' | cut -d: -f1)
          llvm-cov export -check-binary-ids -format=text -instr-profile=merged.profdata $binaries_and_libs \
            | tee coverage.bin_and_dylib.json
      - name: Export coverage report with llvm-cov export (all, lcov)
        shell: micromamba-shell {0}
        continue-on-error: true
        run: |
          binaries_and_libs=$(find . -type f \( -executable -o -name "*.dylib" \) \
            -exec file {} + | grep -E 'Mach-O|ELF' | cut -d: -f1)
          llvm-cov export -check-binary-ids -format=lcov -instr-profile=merged.profdata $binaries_and_libs \
            | tee coverage.bin_and_dylib.lcov
      - name: Make profile data available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: >-
            profile-data-${{ 'macos-14' }}
          path: |
            *.prof*
            *coverage*
          retention-days: 1
      - run: find . -type f \( -name "*.o" -or -name "*.prof*" \)
      - run: find . -type f \( -name "*.profraw" -or -name "*.profdata" \)
      - run: find $HOME/install -type f \( -name "*.o" -or -name "*.prof*" \)
      - run: ls -la
      - run: ls -la "$HOME/install"
      - run: ls -la "$HOME/install/bin"
      - run: ls -la -R "$HOME/install"
      - run: ls -la -R "$HOME"/install/grass*/lib
      - run: ls -la -R .
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        with:
          verbose: true
          flags: pytest-macos-14
          name: pytest-macos-14
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Cache GRASS Sample Dataset
        id: cached-data
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: sample-data/nc_spm_full_v2alpha2.tar.gz
          key: nc_spm_full_v2alpha2.tar.gz
          enableCrossOsArchive: true

      - name: Download GRASS Sample Dataset
        if: steps.cached-data.outputs.cache-hit != 'true'
        run: |
          mkdir -p sample-data
          curl -L "$SAMPLE_DATA" -o sample-data/nc_spm_full_v2alpha2.tar.gz
        env:
          SAMPLE_DATA: "https://grass.osgeo.org/sampledata/north_carolina/\
            nc_spm_full_v2alpha2.tar.gz"

      - name: Run gunittest tests
        shell: micromamba-shell {0}
        run: .github/workflows/test_thorough.sh --config .github/workflows/macos_gunittest.cfg
        env:
          SAMPLE_DATA_URL: "file://${{ github.workspace }}/sample-data/\
            nc_spm_full_v2alpha2.tar.gz"

      - name: Make HTML test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: testreport-macOS
          path: testreport
          retention-days: 3
