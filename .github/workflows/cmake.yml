---
name: CMake

on:
  push:
    paths-ignore:
      - "doc/**"
    branches:
      - main
      - releasebranch_*
  pull_request:
    paths-ignore:
      - "doc/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  CMAKE_UNITY_BUILD: OFF

permissions:
  contents: read

jobs:
  build-cmake:
    runs-on: ubuntu-22.04
    env:
      CMakeVersion: "3.22.0"
      CC: clang-${{ matrix.llvm-version }}
      CXX: clang++-${{ matrix.llvm-version }}
      ASAN_OPTIONS: detect_leaks=0

    strategy:
      matrix:
        llvm-version: [19]
    steps:
      - name: Checkout GRASS
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Install CMake
        run: |
          cd ${GITHUB_WORKSPACE}
          arch=$(echo $(uname -s)-$(uname -m) | awk '{print tolower($0)}')
          v=v${{ env.CMakeVersion }}/cmake-${{ env.CMakeVersion }}-${arch}.tar.gz
          wget https://github.com/Kitware/CMake/releases/download/$v
          tar xzf cmake-${{ env.CMakeVersion }}-${arch}.tar.gz
          echo "CMAKE_DIR=$GITHUB_WORKSPACE/cmake-${{ env.CMakeVersion }}-${arch}/bin" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/cmake-${{ env.CMakeVersion }}-${arch}/bin" >> $GITHUB_PATH
      - run: |
          cmake --version
      - name: Apt LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.llvm-version }}
          sudo apt-get update
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget git gawk findutils ninja-build libpq-dev \
            clang-${{ matrix.llvm-version }} clang-tools-${{ matrix.llvm-version }} \
            libomp-${{ matrix.llvm-version }}-dev lld-${{ matrix.llvm-version }} \
            llvm-${{ matrix.llvm-version }} \
            gettext unixodbc-dev libnetcdf-dev
          xargs -a <(awk '! /^ *(#|$)/' ".github/workflows/apt.txt") -r -- \
              sudo apt-get install -y --no-install-recommends --no-install-suggests
      - name: Print build environment variables
        shell: bash -el {0}
        run: |
          printenv | sort
          gcc --version
          ldd --version
      - name: Create installation directory
        run: |
          mkdir $HOME/install
      - name: Configure
        run: |
          cmake ${CMAKE_OPTIONS} -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build -G Ninja \
            -DCMAKE_INSTALL_PREFIX=$HOME/install -DWITH_NLS=ON -DWITH_GUI=OFF -DWITH_DOCS=OFF \
            -DWITH_READLINE=ON -DWITH_ODBC=ON -DWITH_NETCDF=ON -DWITH_BZLIB=ON \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_COMPILER=clang-${{ matrix.llvm-version }} -DCMAKE_CXX_COMPILER=clang++-${{ matrix.llvm-version }}
      - name: Print CMakeCache.txt
        shell: bash -el {0}
        run: |
          cat ${GITHUB_WORKSPACE}/build/CMakeCache.txt
      - name: Build
        run: |
          cmake --build build --verbose -j$(nproc)
      - name: Install
        run: |
          cmake --install $GITHUB_WORKSPACE/build --verbose
      - name: Add the bin directory to PATH
        run: |
          echo "$HOME/install/bin" >> $GITHUB_PATH
      - name: Set profile file name env var
        run: echo "LLVM_PROFILE_FILE=${{ github.workspace }}/grass-prof-%p-%4m.profraw" >> $GITHUB_ENV
      - name: Print installed versions
        if: always()
        run: .github/workflows/print_versions.sh
      - name: Test executing of the grass command
        run: .github/workflows/test_simple.sh
      - name: Run tests
        run: .github/workflows/test_thorough.sh --config .gunittest.cfg --min-success 98
      - name: Make HTML test report available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: testreport-CMake
          path: testreport
          retention-days: 3
      - name: Use llvm's coverage script
        if: ${{ !cancelled() }}
        run: |
          WORKSPACE=$GITHUB_WORKSPACE

          BUILD_DIR=$(pwd)/dist*
          FAST_BUILD_DIR=$(pwd)/clang-build
          REPORT_DIR=$(pwd)/coverage-reports
          HOST=
          LLVM_PROFDATA=llvm-profdata-${{ matrix.llvm-version }}
          LLVM_COV=llvm-cov-${{ matrix.llvm-version }}
          ARTIFACT_PREP_SCRIPT=$WORKSPACE/utils/prepare-code-coverage-artifact.py

          PROFILES_DIR=$WORKSPACE

          COV_BINARIES=$(find ./build/output/ -type f \( -executable -o -name "*.dylib" -o -name "*.so*" \) \
            -exec file {} + | grep -E 'Mach-O|ELF' | cut -d':' -f1)

          rm -rf $REPORT_DIR
          mkdir -p $REPORT_DIR
          python $ARTIFACT_PREP_SCRIPT $LLVM_PROFDATA $LLVM_COV \
            $PROFILES_DIR $REPORT_DIR $COV_BINARIES \
            --unified-report \
            --lcov=grass.llvm-source.coverage.lcov
      - name: Make profile data available
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: >-
            profile-data-${{ 'cmake' }}
          path: |
            *.prof*
            *coverage*
            llvm_coverage*/**
          retention-days: 1
      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          verbose: true
          flags: linux-cmake
          name: linux-cmake
          token: ${{ secrets.CODECOV_TOKEN }}
