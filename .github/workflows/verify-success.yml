---
name: Verify Success reusable workflow

on:
  workflow_call:
    inputs:
      needs_context:
        type: string
        required: true
        description: In the calling job that defines all the needed jobs, use $ {{ '$ {{toJson(needs)}}' }}
      fail_if_failure:
        type: boolean
        default: true
        description: If true, this workflow will fail if any job from 'needs_context was failed
      fail_if_cancelled:
        type: boolean
        default: true
        description: If true, this workflow will fail if any job from 'needs_context' was cancelled
      fail_if_skipped:
        type: boolean
        default: false
        description: If true, this workflow will fail if any job from 'needs_context' was skipped
      require_success:
        type: boolean
        default: true
        description: If true, this workflow will fail if no job from 'needs_context' was successful
      

jobs:
  verify-success:
    name: Success
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      NEEDS: ${{ toJSON(fromJson(inputs.needs_context)) }}
      NEEDS_RESULT: ${{ toJson(fromJson(inputs.needs_context).*.result) }}
      P1: '::error ::' # Common message prefix if step will fail
      P2: 'Ignored: ' # Common message prefix if step will not fail
      M1: 'Some jobs' # Common message if result is true
      M2: 'No jobs' # Common message if result is false
    steps:
      - name: Contexts of needed jobs
        run: echo "Contexts of needed jobs:" && echo "$NEEDS" && echo "Results of needed jobs:" && echo "$NEEDS_RESULT"
      - name: Set the value in bash
        id: step_one
        run: |
          {
            echo 'JSON_RESPONSE<<EOF'
            curl https://example.com
            echo EOF
          } >> "$GITHUB_ENV"
      - name: Set the value in bash
        id: step_one1
        run: |
          {
            echo 'JSON_RESPONSE<<EOF'
            curl https://example.com
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Set color
        id: color-selector
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"
      - name: Create needs outputs
        id: needs
        run: |
          {
            echo 'needs_result1<<EOF
            ${{ fromJson(inputs.needs_context).*.result }}
            EOF
          } >> "$GITHUB_OUTPUT"
        # echo "needs_result1='$ {{ toJson(fromJson(inputs.needs_context).*.result) }}'" >> $GITHUB_OUTPUT
        # echo "needs=$ {{ toJSON(fromJson(inputs.needs_context)) }}" >> $GITHUB_OUTPUT
        # echo "needs_result=$ {{ toJson(fromJson(inputs.needs_context).*.result) }}" >> $GITHUB_OUTPUT
        # # echo "a step is $ {{ steps.needs.outputs.needs_result}}"
      - run: echo "Needs result"
        env:
          NEEDS_RESULT1: ${{ steps.needs.outputs.needs_result1}}
      - name: Check for failed jobs
        run: |
          echo "${{ format('{0}{1} were failed', inputs.fail_if_failure && env.RESULT && env.P1 || env.P2, env.RESULT && env.M1 || env.M2) }}" 
          exit ${{ inputs.fail_if_failure && env.RESULT && 1 || 0 }}
        env:
          RESULT: ${{ contains(env.NEEDS_RESULT, 'failure') }}
      - name: Check for cancelled jobs
        run: |
          echo "${{ format('{0}{1} were cancelled', inputs.fail_if_cancelled && env.RESULT && env.P1 || env.P2, env.RESULT && env.M1 || env.M2) }}" 
          exit ${{ inputs.fail_if_cancelled && env.RESULT && 1 || 0 }}
        env:
          RESULT: ${{ contains(env.NEEDS_RESULT, 'cancelled') }}
      - name: Check for skipped jobs
        run: |
          echo "${{ format('{0}{1} were skipped', inputs.fail_if_skipped && env.RESULT && env.P1 || env.P2, env.RESULT && env.M1 || env.M2) }}" 
          exit ${{ inputs.fail_if_skipped && env.RESULT && 1 || 0 }}
        env:
          RESULT: ${{ contains(env.NEEDS_RESULT, 'skipped') }}
      - name: Check for successful jobs
        # if: ${{ !contains(env.NEEDS_RESULT, 'success') }}
        # run: echo "::error ::No job results were successful" && exit 1
        run: |
          echo "${{ format('{0}{1} were successfull', inputs.require_success && env.RESULT && env.P1 || env.P2, env.RESULT && env.M1 || env.M2) }}" 
          exit ${{ inputs.require_success && env.RESULT && 1 || 0 }}
        env:
          RESULT: ${{ !contains(env.NEEDS_RESULT, 'success') }}
      - run: echo "Checks passed successfully"
        if: ${{ success() }}
      - run: echo "Checks failed"
        if: ${{ !success() }}
