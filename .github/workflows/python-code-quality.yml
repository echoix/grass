---
name: Python Code Quality

on:
  push:
    branches:
      - main
      - releasebranch_*
  pull_request:
    branches:
      - main
      - releasebranch_*

jobs:
  python-checks:
    name: Python Code Quality Checks

    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}-${{
        matrix.pylint-version }}
      cancel-in-progress: true

    # Using matrix just to get variables which are not environmental variables
    # and also to sync with other workflows which use matrix.
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            python-version: '3.10'
            min-python-version: '3.7'
            black-version: '23.1.0'
            flake8-version: '3.9.2'
            pylint-version: '2.12.2'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Versions
        run: |
          echo OS: ${{ matrix.os }}
          echo Python: ${{ matrix.python-version }}
          echo Minimimal Python version: ${{ matrix.min-python-version }}
          echo Black: ${{ matrix.black-version }}
          echo Flake8: ${{ matrix.flake8-version }}
          echo Pylint: ${{ matrix.pylint-version }}

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install non-Python dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget git gawk findutils
          xargs -a <(awk '! /^ *(#|$)/' ".github/workflows/apt.txt") -r -- \
              sudo apt-get install -y --no-install-recommends --no-install-suggests

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/python_requirements.txt
          pip install -r .github/workflows/optional_requirements.txt
          pip install black==${{ matrix.black-version }}
          pip install flake8==${{ matrix.flake8-version }}
          pip install pylint==${{ matrix.pylint-version }} pytest-github-actions-annotate-failures

      - name: Run Black
        run: |
          black --check --diff .

      - name: Run Flake8
        run: |
          flake8 --count --statistics --show-source --jobs=$(nproc) .

      - name: Run Flake8 on additional files
        run: |
          flake8 --count --statistics --show-source --jobs=$(nproc) python/grass/{script,jupyter}/testsuite/

      - name: Create installation directory
        run: |
          mkdir $HOME/install

      - name: Set number of cores for compilation
        run: |
          echo "MAKEFLAGS=-j$(nproc)" >> $GITHUB_ENV

      # - name: Build
      #   run: .github/workflows/build_${{ matrix.os }}.sh $HOME/install

      # - name: Add the bin directory to PATH
      #   run: |
      #     echo "$HOME/install/bin" >> $GITHUB_PATH

      # - name: Test executing of the grass command
      #   run: .github/workflows/test_simple.sh

      # - name: Run Pylint on grass package
      #   run: |
      #     export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
      #     export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
      #     cd python
      #     pylint --persistent=no --py-version=${{ matrix.min-python-version }} --jobs=$(nproc) grass

      # - name: Run Pylint on wxGUI
      #   run: |
      #     export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
      #     export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
      #     cd gui/wxpython
      #     pylint --persistent=no --py-version=${{ matrix.min-python-version }} --jobs=$(nproc) *

      # - name: Run Pylint on other files using pytest
      #   run: |
      #     pip install pytest pytest-pylint==0.19
      #     echo "::warning file=.github/workflows/python-code-quality.yml,line=116,col=42,endColumn=48::\
      #       Temporarily downgraded pytest-pylint to allow merging other PRs. The errors reported\
      #       with a newer version seem legitimite and should be fixed (2023-10-18,\
      #       see https://github.com/OSGeo/grass/pull/3205)"
      #     export PYTHONPATH=`grass --config python_path`:$PYTHONPATH
      #     export LD_LIBRARY_PATH=$HOME/install/grass84/lib:$LD_LIBRARY_PATH
      #     pytest --pylint -m pylint --pylint-rcfile=.pylintrc --pylint-jobs=$(nproc) \
      #       --pylint-ignore-patterns="${{ env.PylintIgnore }}"
      #   env:
      #     PylintIgnore: "python/.*,gui/wxpython/.*,doc/.*,man/.*,utils/.*,locale/.*,raster/.*,\
      #       imagery/.*,scripts/r.in.wms/wms_drv.py,scripts/g.extension/g.extension.py,\
      #       temporal/t.rast.accdetect/t.rast.accdetect.py,temporal/t.rast.accumulate/t.rast.accumulate.py,\
      #       scripts/d.rast.edit/d.rast.edit.py"

      # - name: Test compiling example modules
      #   run: |
      #     ( cd doc/raster/r.example/ && make )
      #     ( cd doc/vector/v.example/ && make )

      # - name: Run Sphinx to check API documentation build
      #   run: |
      #     pip install sphinx
      #     make sphinxdoclib
      #     ARCH=$(cat include/Make/Platform.make | grep ^ARCH | cut -d'=' -f2 | xargs)
      #     cp -rp dist.$ARCH/docs/html/libpython sphinx-grass

      # - name: Make Sphinx documentation available
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: sphinx-grass
      #     path: sphinx-grass
      #     retention-days: 3
  python-other:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Should run"
      - run: echo "Skipped"
        if: ${{ false }}
      - run: exit 1
      - run: echo "Shouldn't be run"
  python-other2:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Should run"
      - run: echo "Skipped"
        if: ${{ false }}
      - run: exit 1
      - run: echo "Shouldn't be run"
  python-skip:
    runs-on: ubuntu-latest
    if: 1 != 1
    steps:
      - run: exit 1
  python-skip2:
    runs-on: ubuntu-latest
    if: 1 != 1
    steps:
      - run: exit 1
  python-pass1:
    runs-on: ubuntu-latest
    steps:
      - run: exit 0
  python-success2:
    name: Python Code Quality Result
    needs: 
      - python-checks
      - python-other
      - python-skip
      - python-skip2
      - python-other2
      - python-pass1
    if: ${{ always() }}
    uses: ./.github/workflows/verify-success.yml
    with:
      needs_context: ${{ toJson(needs) }}
  python-success:
    name: Python Code Quality Success
    needs: 
      - python-checks
      # - python-other
      # - python-skip
      # - python-skip2
      # - python-other2
      - python-pass1
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Contexts of needed jobs
        run: echo "Contexts of needed jobs:" && echo "$NEEDS" && echo "Results of needed jobs:" && echo "$NEEDS_RESULT"
        env:
          NEEDS: ${{ toJSON(needs) }}
          NEEDS_RESULT: ${{ toJson(needs.*.result) }}
      - name: Results of needed jobs
        run: echo "Results of needed jobs:" && echo "$NEEDS_RESULT"
        env:
          NEEDS_RESULT: ${{ toJson(needs.*.result) }}
      - name: Check for failed jobs
        if: ${{ contains(needs.*.result, 'failure') }}
        run: echo "Some jobs failed" && exit 1
      - name: Check for cancelled jobs
        if: ${{ contains(needs.*.result, 'cancelled') }}
        run: echo "Some jobs were cancelled" && exit 1
      - name: Check for skipped jobs
        if: ${{ contains(needs.*.result, 'skipped') }}
        run: echo "Some jobs were skipped" && exit 1
      - name: Check for successful jobs
        if: ${{ !contains(needs.*.result, 'success') }}
        run: echo "No job results were successful" && exit 1
      - run: echo "Checks passed successfully"
        if: ${{ success() }}
      - run: echo "Checks failed"
        if: ${{ !success() }}