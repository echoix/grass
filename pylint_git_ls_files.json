{
    "messages": [
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'path' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "render_cmd",
            "obj": "read_stdin",
            "line": 155,
            "column": 50,
            "endLine": 155,
            "endColumn": 54,
            "path": "display/d.mon/render_cmd.py",
            "absolutePath": "/workspace/grass/display/d.mon/render_cmd.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "ExampleMapPanel.__init__",
            "line": 66,
            "column": 4,
            "endLine": 66,
            "endColumn": 16,
            "path": "doc/gui/wxpython/example/frame.py",
            "absolutePath": "/workspace/grass/doc/gui/wxpython/example/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'ExampleMapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "ExampleMapPanel.AddToolbar",
            "line": 198,
            "column": 4,
            "endLine": 198,
            "endColumn": 18,
            "path": "doc/gui/wxpython/example/frame.py",
            "absolutePath": "/workspace/grass/doc/gui/wxpython/example/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "m.distance",
            "obj": "",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 27,
            "path": "doc/python/m.distance.py",
            "absolutePath": "/workspace/grass/doc/python/m.distance.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "m.distance",
            "obj": "main",
            "line": 68,
            "column": 7,
            "endLine": 68,
            "endColumn": 12,
            "path": "doc/python/m.distance.py",
            "absolutePath": "/workspace/grass/doc/python/m.distance.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "m.distance",
            "obj": "main",
            "line": 79,
            "column": 17,
            "endLine": 79,
            "endColumn": 24,
            "path": "doc/python/m.distance.py",
            "absolutePath": "/workspace/grass/doc/python/m.distance.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "raster_example_ctypes",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 21,
            "endColumn": 27,
            "path": "doc/python/raster_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/raster_example_ctypes.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.raster",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "raster_example_ctypes",
            "obj": "",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 30,
            "path": "doc/python/raster_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/raster_example_ctypes.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'type_name' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "raster_example_ctypes",
            "obj": "",
            "line": 55,
            "column": 57,
            "endLine": 55,
            "endColumn": 66,
            "path": "doc/python/raster_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/raster_example_ctypes.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ptype' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "raster_example_ctypes",
            "obj": "",
            "line": 59,
            "column": 34,
            "endLine": 59,
            "endColumn": 39,
            "path": "doc/python/raster_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/raster_example_ctypes.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vector_example_ctypes",
            "obj": "",
            "line": 11,
            "column": 0,
            "endLine": 11,
            "endColumn": 27,
            "path": "doc/python/vector_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/vector_example_ctypes.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vector_example_ctypes",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 30,
            "path": "doc/python/vector_example_ctypes.py",
            "absolutePath": "/workspace/grass/doc/python/vector_example_ctypes.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "test",
            "obj": "main",
            "line": 40,
            "column": 13,
            "endLine": 40,
            "endColumn": 18,
            "path": "general/g.parser/test.py",
            "absolutePath": "/workspace/grass/general/g.parser/test.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "test",
            "obj": "main",
            "line": 41,
            "column": 14,
            "endLine": 41,
            "endColumn": 21,
            "path": "general/g.parser/test.py",
            "absolutePath": "/workspace/grass/general/g.parser/test.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.wms",
            "obj": "main",
            "line": 197,
            "column": 4,
            "endLine": 197,
            "endColumn": 11,
            "path": "gui/scripts/d.wms.py",
            "absolutePath": "/workspace/grass/gui/scripts/d.wms.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'wms' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.wms",
            "obj": "main",
            "line": 210,
            "column": 15,
            "endLine": 210,
            "endColumn": 18,
            "path": "gui/scripts/d.wms.py",
            "absolutePath": "/workspace/grass/gui/scripts/d.wms.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.wms",
            "obj": "main",
            "line": 210,
            "column": 35,
            "endLine": 210,
            "endColumn": 40,
            "path": "gui/scripts/d.wms.py",
            "absolutePath": "/workspace/grass/gui/scripts/d.wms.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'decImage' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "animation.controller",
            "obj": "AnimationController._export",
            "line": 619,
            "column": 28,
            "endLine": 619,
            "endColumn": 36,
            "path": "gui/wxpython/animation/controller.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/controller.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (26/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "animation.controller",
            "obj": "AnimationController",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 25,
            "path": "gui/wxpython/animation/controller.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/controller.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.controller",
            "obj": "",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 32,
            "path": "gui/wxpython/animation/controller.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/controller.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (29/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "animation.data",
            "obj": "AnimationData",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 19,
            "path": "gui/wxpython/animation/data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/data.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.data",
            "obj": "",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 43,
            "path": "gui/wxpython/animation/data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/data.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "",
            "line": 1335,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2148/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'delta' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "animation.dialogs",
            "obj": "SpeedDialog._timedelta",
            "line": 331,
            "column": 15,
            "endLine": 331,
            "endColumn": 20,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (26/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "InputDialog",
            "line": 338,
            "column": 0,
            "endLine": 338,
            "endColumn": 17,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "error",
            "symbol": "redundant-keyword-arg",
            "message": "Argument 'message' passed by position and keyword in constructor call",
            "messageId": "E1124",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "EditDialog.OnAdd",
            "line": 854,
            "column": 12,
            "endLine": 857,
            "endColumn": 13,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-set-comprehension",
            "message": "Consider using a set comprehension",
            "messageId": "R1718",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "EditDialog.OnOk",
            "line": 904,
            "column": 18,
            "endLine": 904,
            "endColumn": 72,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (29/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "ExportDialog",
            "line": 924,
            "column": 0,
            "endLine": 924,
            "endColumn": 18,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 38,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 35,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.dialogs",
            "obj": "",
            "line": 66,
            "column": 0,
            "endLine": 71,
            "endColumn": 1,
            "path": "gui/wxpython/animation/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "animation.frame",
            "obj": "AnimationFrame.OnPreferences.<lambda>",
            "line": 356,
            "column": 38,
            "endLine": 356,
            "endColumn": 80,
            "path": "gui/wxpython/animation/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "animation.frame",
            "obj": "AnimationFrame",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 20,
            "path": "gui/wxpython/animation/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'frames' has been renamed to 'count' in overriding 'SimpleAnimationSlider._setFrames' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "animation.frame",
            "obj": "SimpleAnimationSlider._setFrames",
            "line": 532,
            "column": 4,
            "endLine": 532,
            "endColumn": 18,
            "path": "gui/wxpython/animation/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'frames' has been renamed to 'timeLabels' in overriding 'TimeAnimationSlider._setFrames' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "animation.frame",
            "obj": "TimeAnimationSlider._setFrames",
            "line": 592,
            "column": 4,
            "endLine": 592,
            "endColumn": 18,
            "path": "gui/wxpython/animation/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.frame",
            "obj": "",
            "line": 31,
            "column": 0,
            "endLine": 31,
            "endColumn": 42,
            "path": "gui/wxpython/animation/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "animation.nviztask",
            "obj": "NvizTask.GetCommandSeries",
            "line": 310,
            "column": 12,
            "endLine": 310,
            "endColumn": 18,
            "path": "gui/wxpython/animation/nviztask.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/nviztask.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for constructor call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "animation.nviztask",
            "obj": "test",
            "line": 350,
            "column": 11,
            "endLine": 350,
            "endColumn": 52,
            "path": "gui/wxpython/animation/nviztask.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/nviztask.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.nviztask",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 38,
            "path": "gui/wxpython/animation/nviztask.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/nviztask.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.temporal_manager",
            "obj": "DataMode",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 14,
            "path": "gui/wxpython/animation/temporal_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/temporal_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.temporal_manager",
            "obj": "GranularityMode",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 21,
            "path": "gui/wxpython/animation/temporal_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/temporal_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'gran' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "animation.temporal_manager",
            "obj": "TemporalManager._getLabelsAndMaps",
            "line": 270,
            "column": 69,
            "endLine": 270,
            "endColumn": 73,
            "path": "gui/wxpython/animation/temporal_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/temporal_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "animation.temporal_manager",
            "obj": "TemporalManager._getLabelsAndMaps",
            "line": 302,
            "column": 28,
            "endLine": 309,
            "endColumn": 42,
            "path": "gui/wxpython/animation/temporal_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/temporal_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "animation.toolbars",
            "obj": "",
            "line": 24,
            "column": 0,
            "endLine": 24,
            "endColumn": 49,
            "path": "gui/wxpython/animation/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.utils",
            "obj": "TemporalMode",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 18,
            "path": "gui/wxpython/animation/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.utils",
            "obj": "TemporalType",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 18,
            "path": "gui/wxpython/animation/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.utils",
            "obj": "Orientation",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 17,
            "path": "gui/wxpython/animation/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "animation.utils",
            "obj": "ReplayMode",
            "line": 56,
            "column": 0,
            "endLine": 56,
            "endColumn": 16,
            "path": "gui/wxpython/animation/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/animation/utils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'reason' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "core.gcmd",
            "obj": "GError.__init__",
            "line": 109,
            "column": 69,
            "endLine": 109,
            "endColumn": 75,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.gcmd",
            "obj": "GError",
            "line": 86,
            "column": 0,
            "endLine": 86,
            "endColumn": 12,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.gcmd",
            "obj": "GWarning",
            "line": 117,
            "column": 0,
            "endLine": 117,
            "endColumn": 14,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.gcmd",
            "obj": "GMessage",
            "line": 124,
            "column": 0,
            "endLine": 124,
            "endColumn": 14,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'why' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "core.gcmd",
            "obj": "Popen.send",
            "line": 268,
            "column": 19,
            "endLine": 268,
            "endColumn": 22,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "core.gcmd",
            "obj": "recv_some",
            "line": 316,
            "column": 16,
            "endLine": 316,
            "endColumn": 40,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "core.gcmd",
            "obj": "Command.__ProcessStdErr",
            "line": 489,
            "column": 21,
            "endLine": 489,
            "endColumn": 37,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.gcmd",
            "obj": "Command",
            "line": 326,
            "column": 0,
            "endLine": 326,
            "endColumn": 13,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "core.gcmd",
            "obj": "_formatMsg",
            "line": 648,
            "column": 8,
            "endLine": 659,
            "endColumn": 42,
            "path": "gui/wxpython/core/gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gcmd.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'imp'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "core.gconsole",
            "obj": "GConsole.RunCmd",
            "line": 588,
            "column": 24,
            "endLine": 588,
            "endColumn": 34,
            "path": "gui/wxpython/core/gconsole.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gconsole.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.gconsole",
            "obj": "",
            "line": 49,
            "column": 0,
            "endLine": 49,
            "endColumn": 28,
            "path": "gui/wxpython/core/gconsole.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gconsole.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.gconsole",
            "obj": "",
            "line": 52,
            "column": 0,
            "endLine": 52,
            "endColumn": 41,
            "path": "gui/wxpython/core/gconsole.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/gconsole.py"
        },
        {
            "type": "refactor",
            "symbol": "useless-option-value",
            "message": "Useless option value for 'disable', 'R0921' was removed from pylint, see https://pylint.readthedocs.io/en/latest/whatsnew/1/1.4.html#what-s-new-in-pylint-1-4-3.",
            "messageId": "R0022",
            "confidence": "HIGH",
            "module": "core.giface",
            "obj": "",
            "line": 26,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/core/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/giface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.giface",
            "obj": "Notification",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 18,
            "path": "gui/wxpython/core/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/giface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.giface",
            "obj": "Layer",
            "line": 43,
            "column": 0,
            "endLine": 43,
            "endColumn": 11,
            "path": "gui/wxpython/core/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/giface.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassInterface.RunCmd' and is now 10 in overriding 'StandaloneGrassInterface.RunCmd' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "core.giface",
            "obj": "StandaloneGrassInterface.RunCmd",
            "line": 281,
            "column": 4,
            "endLine": 281,
            "endColumn": 14,
            "path": "gui/wxpython/core/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/giface.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'StandaloneGrassInterface.RunCmd' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "core.giface",
            "obj": "StandaloneGrassInterface.RunCmd",
            "line": 281,
            "column": 4,
            "endLine": 281,
            "endColumn": 14,
            "path": "gui/wxpython/core/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/giface.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'wx' (imported line 120)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "core.globalvar",
            "obj": "CheckForWx",
            "line": 99,
            "column": 8,
            "endLine": 99,
            "endColumn": 17,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "core.globalvar",
            "obj": "",
            "line": 131,
            "column": 0,
            "endLine": 134,
            "endColumn": 3,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "core.globalvar",
            "obj": "",
            "line": 242,
            "column": 0,
            "endLine": 242,
            "endColumn": 53,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "core.globalvar",
            "obj": "",
            "line": 247,
            "column": 0,
            "endLine": 247,
            "endColumn": 24,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "core.globalvar",
            "obj": "",
            "line": 254,
            "column": 7,
            "endLine": 254,
            "endColumn": 51,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.globalvar",
            "obj": "",
            "line": 126,
            "column": 8,
            "endLine": 126,
            "endColumn": 44,
            "path": "gui/wxpython/core/globalvar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/globalvar.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "core.layerlist",
            "obj": "",
            "line": 284,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/core/layerlist.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/layerlist.py"
        },
        {
            "type": "warning",
            "symbol": "format-string-without-interpolation",
            "message": "Using formatting for a string that does not have any interpolated variables",
            "messageId": "W1310",
            "confidence": "UNDEFINED",
            "module": "core.menutree",
            "obj": "",
            "line": 276,
            "column": 21,
            "endLine": 276,
            "endColumn": 64,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'menudata' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "core.menutree",
            "obj": "",
            "line": 279,
            "column": 8,
            "endLine": 279,
            "endColumn": 16,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "warning",
            "symbol": "format-string-without-interpolation",
            "message": "Using formatting for a string that does not have any interpolated variables",
            "messageId": "W1310",
            "confidence": "UNDEFINED",
            "module": "core.menutree",
            "obj": "",
            "line": 289,
            "column": 21,
            "endLine": 289,
            "endColumn": 68,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.menutree",
            "obj": "",
            "line": 253,
            "column": 8,
            "endLine": 253,
            "endColumn": 43,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package lmgr are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.menutree",
            "obj": "",
            "line": 260,
            "column": 8,
            "endLine": 260,
            "endColumn": 56,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.menutree",
            "obj": "",
            "line": 261,
            "column": 8,
            "endLine": 261,
            "endColumn": 43,
            "path": "gui/wxpython/core/menutree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/menutree.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderLayerMgr.Render",
            "line": 443,
            "column": 19,
            "endLine": 443,
            "endColumn": 37,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderLayerMgr.Render",
            "line": 444,
            "column": 16,
            "endLine": 444,
            "endColumn": 34,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderLayerMgr.Render",
            "line": 445,
            "column": 30,
            "endLine": 445,
            "endColumn": 48,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderLayerMgr.Render",
            "line": 446,
            "column": 26,
            "endLine": 446,
            "endColumn": 44,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderLayerMgr.Render",
            "line": 447,
            "column": 58,
            "endLine": 447,
            "endColumn": 76,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderMapMgr.OnRenderDone",
            "line": 727,
            "column": 34,
            "endLine": 727,
            "endColumn": 47,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderMapMgr.OnRenderDone",
            "line": 728,
            "column": 30,
            "endLine": 728,
            "endColumn": 43,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'layer'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "RenderMapMgr.ReportProgress",
            "line": 790,
            "column": 12,
            "endLine": 790,
            "endColumn": 17,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "core.render",
            "obj": "Map.SetRegion",
            "line": 1198,
            "column": 16,
            "endLine": 1239,
            "endColumn": 70,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "Map.DeleteLayer",
            "line": 1456,
            "column": 34,
            "endLine": 1456,
            "endColumn": 47,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _legrow of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "Map.DeleteLayer",
            "line": 1457,
            "column": 30,
            "endLine": 1457,
            "endColumn": 43,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (30/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "core.render",
            "obj": "Map",
            "line": 819,
            "column": 0,
            "endLine": 819,
            "endColumn": 9,
            "path": "gui/wxpython/core/render.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/render.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'o' has been renamed to 'obj' in overriding 'SettingsJSONEncoder.default' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "core.settings",
            "obj": "SettingsJSONEncoder.default",
            "line": 42,
            "column": 4,
            "endLine": 42,
            "endColumn": 15,
            "path": "gui/wxpython/core/settings.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/settings.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'JSONEncoder.iterencode' and is now 2 in overriding 'SettingsJSONEncoder.iterencode' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "core.settings",
            "obj": "SettingsJSONEncoder.iterencode",
            "line": 49,
            "column": 4,
            "endLine": 49,
            "endColumn": 18,
            "path": "gui/wxpython/core/settings.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/settings.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(subkey, (type(()), type([])))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "core.settings",
            "obj": "Settings.Get",
            "line": 1068,
            "column": 19,
            "endLine": 1068,
            "endColumn": 79,
            "path": "gui/wxpython/core/settings.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/settings.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(subkey, (type(()), type([])))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "core.settings",
            "obj": "Settings.Set",
            "line": 1105,
            "column": 19,
            "endLine": 1105,
            "endColumn": 79,
            "path": "gui/wxpython/core/settings.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/settings.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'recv_some' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "test_gcmd",
            "obj": "Recv_SomeTest.test_decode",
            "line": 27,
            "column": 8,
            "endLine": 27,
            "endColumn": 17,
            "path": "gui/wxpython/core/testsuite/test_gcmd.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/testsuite/test_gcmd.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'elem'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.toolboxes",
            "obj": "_indent",
            "line": 345,
            "column": 12,
            "endLine": 345,
            "endColumn": 16,
            "path": "gui/wxpython/core/toolboxes.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/toolboxes.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'node'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.toolboxes",
            "obj": "_expandItems",
            "line": 587,
            "column": 12,
            "endLine": 587,
            "endColumn": 16,
            "path": "gui/wxpython/core/toolboxes.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/toolboxes.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'DictNode.match' and is now 3 in overriding 'DictFilterNode.match' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "core.treemodel",
            "obj": "DictFilterNode.match",
            "line": 249,
            "column": 4,
            "endLine": 249,
            "endColumn": 13,
            "path": "gui/wxpython/core/treemodel.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/treemodel.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'key'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.treemodel",
            "obj": "ModuleNode.match",
            "line": 312,
            "column": 12,
            "endLine": 312,
            "endColumn": 15,
            "path": "gui/wxpython/core/treemodel.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/treemodel.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'key'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.utils",
            "obj": "StoreEnvVariable",
            "line": 881,
            "column": 8,
            "endLine": 881,
            "endColumn": 11,
            "path": "gui/wxpython/core/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'value'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "core.utils",
            "obj": "StoreEnvVariable",
            "line": 881,
            "column": 13,
            "endLine": 881,
            "endColumn": 18,
            "path": "gui/wxpython/core/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/utils.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2057/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "ProcessWorkspaceFile",
            "line": 38,
            "column": 0,
            "endLine": 38,
            "endColumn": 26,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "unnecessary-list-index-lookup",
            "message": "Unnecessary list index lookup, use 'plane' instead",
            "messageId": "R1736",
            "confidence": "HIGH",
            "module": "core.workspace",
            "obj": "WriteWorkspaceFile.__writeNvizState",
            "line": 1618,
            "column": 51,
            "endLine": 1618,
            "endColumn": 65,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "unnecessary-list-index-lookup",
            "message": "Unnecessary list index lookup, use 'plane' instead",
            "messageId": "R1736",
            "confidence": "HIGH",
            "module": "core.workspace",
            "obj": "WriteWorkspaceFile.__writeNvizState",
            "line": 1620,
            "column": 39,
            "endLine": 1620,
            "endColumn": 53,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "unnecessary-list-index-lookup",
            "message": "Unnecessary list index lookup, use 'plane' instead",
            "messageId": "R1736",
            "confidence": "HIGH",
            "module": "core.workspace",
            "obj": "WriteWorkspaceFile.__writeNvizState",
            "line": 1623,
            "column": 29,
            "endLine": 1623,
            "endColumn": 43,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "WriteWorkspaceFile",
            "line": 856,
            "column": 0,
            "endLine": 856,
            "endColumn": 24,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "ProcessGrcFile.read",
            "line": 1778,
            "column": 12,
            "endLine": 1778,
            "endColumn": 28,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "ProcessGrcFile.read",
            "line": 1781,
            "column": 12,
            "endLine": 1781,
            "endColumn": 28,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (60/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "ProcessGrcFile.process_line",
            "line": 1785,
            "column": 4,
            "endLine": 1785,
            "endColumn": 20,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "error",
            "symbol": "access-member-before-definition",
            "message": "Access to member 'inGridline' before its definition line 1817",
            "messageId": "E0203",
            "confidence": "UNDEFINED",
            "module": "core.workspace",
            "obj": "ProcessGrcFile.process_line",
            "line": 1816,
            "column": 17,
            "endLine": 1816,
            "endColumn": 32,
            "path": "gui/wxpython/core/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/workspace.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "core.ws",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 42,
            "path": "gui/wxpython/core/ws.py",
            "absolutePath": "/workspace/grass/gui/wxpython/core/ws.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _useLazyLoading of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "datacatalog.catalog",
            "obj": "DataCatalog._loadingDone",
            "line": 148,
            "column": 56,
            "endLine": 148,
            "endColumn": 81,
            "path": "gui/wxpython/datacatalog/catalog.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/catalog.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "datacatalog.catalog",
            "obj": "DataCatalog",
            "line": 43,
            "column": 0,
            "endLine": 43,
            "endColumn": 17,
            "path": "gui/wxpython/datacatalog/catalog.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/catalog.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package datacatalog are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.catalog",
            "obj": "",
            "line": 26,
            "column": 0,
            "endLine": 26,
            "endColumn": 58,
            "path": "gui/wxpython/datacatalog/catalog.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/catalog.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.catalog",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 30,
            "path": "gui/wxpython/datacatalog/catalog.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/catalog.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.catalog",
            "obj": "",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 38,
            "path": "gui/wxpython/datacatalog/catalog.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/catalog.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (18/15)",
            "messageId": "R0913",
            "confidence": "UNDEFINED",
            "module": "datacatalog.dialogs",
            "obj": "CatalogReprojectionDialog.__init__",
            "line": 27,
            "column": 4,
            "endLine": 27,
            "endColumn": 16,
            "path": "gui/wxpython/datacatalog/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.dialogs",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 21,
            "endColumn": 54,
            "path": "gui/wxpython/datacatalog/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "datacatalog.frame",
            "obj": "DataCatalogFrame",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 22,
            "path": "gui/wxpython/datacatalog/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/frame.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2270/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (32/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "DataCatalogTree",
            "line": 201,
            "column": 0,
            "endLine": 201,
            "endColumn": 21,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{**item}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "datacatalog.tree",
            "obj": "DataCatalogTree._populateMapsetItem",
            "line": 761,
            "column": 60,
            "endLine": 761,
            "endColumn": 72,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "datacatalog.tree",
            "obj": "DataCatalogTree.OnPasteMap.<lambda>",
            "line": 1383,
            "column": 27,
            "endLine": 1391,
            "endColumn": 17,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmd' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "datacatalog.tree",
            "obj": "DataCatalogTree.OnMetadata",
            "line": 1898,
            "column": 12,
            "endLine": 1898,
            "endColumn": 15,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (56/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "DataCatalogTree",
            "line": 201,
            "column": 0,
            "endLine": 201,
            "endColumn": 21,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 48,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 38,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "datacatalog.tree",
            "obj": "",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 38,
            "path": "gui/wxpython/datacatalog/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/datacatalog/tree.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (4110/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "dbmgr.base",
            "obj": "VirtualAttributeList.LoadData",
            "line": 340,
            "column": 16,
            "endLine": 340,
            "endColumn": 33,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "VirtualAttributeList",
            "line": 94,
            "column": 0,
            "endLine": 94,
            "endColumn": 26,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'keyId' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "dbmgr.base",
            "obj": "DbMgrBrowsePage.OnDataItemEdit",
            "line": 1536,
            "column": 25,
            "endLine": 1536,
            "endColumn": 30,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "DbMgrBrowsePage",
            "line": 1109,
            "column": 0,
            "endLine": 1109,
            "endColumn": 21,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 48,
            "column": 8,
            "endLine": 48,
            "endColumn": 44,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 72,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package dbmgr are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 61,
            "column": 0,
            "endLine": 61,
            "endColumn": 86,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 62,
            "column": 0,
            "endLine": 62,
            "endColumn": 28,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package dbmgr are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 60,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 64,
            "column": 0,
            "endLine": 64,
            "endColumn": 38,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 65,
            "column": 0,
            "endLine": 76,
            "endColumn": 1,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.base",
            "obj": "",
            "line": 77,
            "column": 0,
            "endLine": 77,
            "endColumn": 26,
            "path": "gui/wxpython/dbmgr/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/base.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cat' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "dbmgr.dialogs",
            "obj": "DisplayAttributesDialog.GetSQLString",
            "line": 288,
            "column": 51,
            "endLine": 288,
            "endColumn": 54,
            "path": "gui/wxpython/dbmgr/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/dialogs.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'nselected' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "dbmgr.dialogs",
            "obj": "DisplayAttributesDialog.UpdateDialog",
            "line": 481,
            "column": 19,
            "endLine": 481,
            "endColumn": 28,
            "path": "gui/wxpython/dbmgr/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (49/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "dbmgr.dialogs",
            "obj": "DisplayAttributesDialog.UpdateDialog",
            "line": 385,
            "column": 4,
            "endLine": 385,
            "endColumn": 20,
            "path": "gui/wxpython/dbmgr/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "dbmgr.dialogs",
            "obj": "ModifyTableRecord.__init__",
            "line": 653,
            "column": 16,
            "endLine": 668,
            "endColumn": 21,
            "path": "gui/wxpython/dbmgr/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.manager",
            "obj": "",
            "line": 35,
            "column": 8,
            "endLine": 35,
            "endColumn": 44,
            "path": "gui/wxpython/dbmgr/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.manager",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 30,
            "path": "gui/wxpython/dbmgr/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (29/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilder",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 16,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilder.__init__",
            "line": 56,
            "column": 4,
            "endLine": 56,
            "endColumn": 16,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "refactor",
            "symbol": "unnecessary-dict-index-lookup",
            "message": "Unnecessary dictionary index lookup, use 'value' instead",
            "messageId": "R1733",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilder._doLayout",
            "line": 189,
            "column": 12,
            "endLine": 189,
            "endColumn": 31,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'btns' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilder.OnAddMark",
            "line": 457,
            "column": 26,
            "endLine": 457,
            "endColumn": 30,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'SQLBuilder._doLayout' and is now 2 in overriding 'SQLBuilderSelect._doLayout' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilderSelect._doLayout",
            "line": 500,
            "column": 4,
            "endLine": 500,
            "endColumn": 17,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'SQLBuilder._doLayout' and is now 2 in overriding 'SQLBuilderUpdate._doLayout' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilderUpdate._doLayout",
            "line": 663,
            "column": 4,
            "endLine": 663,
            "endColumn": 17,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "refactor",
            "symbol": "unnecessary-dict-index-lookup",
            "message": "Unnecessary dictionary index lookup, use 'value' instead",
            "messageId": "R1733",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "SQLBuilderUpdate._doLayout",
            "line": 699,
            "column": 12,
            "endLine": 699,
            "endColumn": 36,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "dbmgr.sqlbuilder",
            "obj": "",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 50,
            "path": "gui/wxpython/dbmgr/sqlbuilder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/dbmgr/sqlbuilder.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3590/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "gcp.manager",
            "obj": "",
            "line": 76,
            "column": 0,
            "endLine": 76,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "gcp.manager",
            "obj": "",
            "line": 77,
            "column": 0,
            "endLine": 77,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "gcp.manager",
            "obj": "",
            "line": 78,
            "column": 0,
            "endLine": 78,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'p' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gcp.manager",
            "obj": "DispMapPage.OnSrcSelection",
            "line": 896,
            "column": 15,
            "endLine": 896,
            "endColumn": 16,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "DispMapPage.GetWebServiceLayers",
            "line": 1025,
            "column": 21,
            "endLine": 1025,
            "endColumn": 40,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (42/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GCPPanel",
            "line": 1037,
            "column": 0,
            "endLine": 1037,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GCPPanel.__init__",
            "line": 1043,
            "column": 4,
            "endLine": 1043,
            "endColumn": 16,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GCPPanel.__init__",
            "line": 1215,
            "column": 8,
            "endLine": 1215,
            "endColumn": 45,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GCPPanel.__init__",
            "line": 1224,
            "column": 8,
            "endLine": 1224,
            "endColumn": 45,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __init__. Instantiate class directly.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gcp.manager",
            "obj": "GCPPanel.InitMapDisplay",
            "line": 1284,
            "column": 8,
            "endLine": 1284,
            "endColumn": 47,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ret' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gcp.manager",
            "obj": "GCPPanel.GetNewExtent",
            "line": 2214,
            "column": 11,
            "endLine": 2214,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (37/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GCPPanel",
            "line": 1037,
            "column": 0,
            "endLine": 1037,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "gcp.manager",
            "obj": "GCPList._Create",
            "line": 2469,
            "column": 11,
            "endLine": 2469,
            "endColumn": 12,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.__init__",
            "line": 2938,
            "column": 8,
            "endLine": 2941,
            "endColumn": 11,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3549,
            "column": 16,
            "endLine": 3549,
            "endColumn": 32,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3550,
            "column": 16,
            "endLine": 3550,
            "endColumn": 32,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3557,
            "column": 16,
            "endLine": 3557,
            "endColumn": 32,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3558,
            "column": 16,
            "endLine": 3558,
            "endColumn": 32,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "GrSettingsDialog.OnSave",
            "line": 3578,
            "column": 8,
            "endLine": 3578,
            "endColumn": 27,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 42,
            "column": 4,
            "endLine": 42,
            "endColumn": 29,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 49,
            "column": 0,
            "endLine": 49,
            "endColumn": 22,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 60,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 36,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.manager",
            "obj": "",
            "line": 58,
            "column": 0,
            "endLine": 69,
            "endColumn": 1,
            "path": "gui/wxpython/gcp/manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gcp.mapdisplay",
            "obj": "MapPanel.__init__",
            "line": 46,
            "column": 4,
            "endLine": 46,
            "endColumn": 16,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'MapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gcp.mapdisplay",
            "obj": "MapPanel.AddToolbar",
            "line": 227,
            "column": 4,
            "endLine": 227,
            "endColumn": 18,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'win' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gcp.mapdisplay",
            "obj": "MapPanel.OnErase",
            "line": 432,
            "column": 8,
            "endLine": 432,
            "endColumn": 11,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gcp.mapdisplay",
            "obj": "MapPanel",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 14,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package mapdisp are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.mapdisplay",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 39,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gcp.mapdisplay",
            "obj": "",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 30,
            "path": "gui/wxpython/gcp/mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gcp/mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __del__. Use del keyword.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gmodeler.canvas",
            "obj": "ModelCanvas.RemoveShapes",
            "line": 88,
            "column": 12,
            "endLine": 88,
            "endColumn": 27,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __del__. Use del keyword.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gmodeler.canvas",
            "obj": "ModelCanvas.RemoveShapes",
            "line": 91,
            "column": 16,
            "endLine": 91,
            "endColumn": 30,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnLeftClick",
            "line": 171,
            "column": 42,
            "endLine": 171,
            "endColumn": 70,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(shape, (ModelAction, ModelLoop))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnRightClick",
            "line": 324,
            "column": 11,
            "endLine": 324,
            "endColumn": 73,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(shape, (ModelAction, ModelComment))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnRightClick",
            "line": 331,
            "column": 11,
            "endLine": 331,
            "endColumn": 76,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(shape, (ModelAction, ModelComment))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnRightClick",
            "line": 336,
            "column": 11,
            "endLine": 336,
            "endColumn": 76,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnRightClick",
            "line": 367,
            "column": 15,
            "endLine": 367,
            "endColumn": 33,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(shape, (ModelAction, ModelData, ModelLoop))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnRightClick",
            "line": 382,
            "column": 12,
            "endLine": 384,
            "endColumn": 43,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnHasDisplay",
            "line": 497,
            "column": 16,
            "endLine": 497,
            "endColumn": 34,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnHasDisplay",
            "line": 505,
            "column": 25,
            "endLine": 505,
            "endColumn": 43,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.canvas",
            "obj": "ModelEvtHandler.OnHasDisplay",
            "line": 509,
            "column": 20,
            "endLine": 509,
            "endColumn": 38,
            "path": "gui/wxpython/gmodeler/canvas.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/canvas.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gmodeler.dialogs",
            "obj": "ModelSearchDialog.__init__.<lambda>",
            "line": 210,
            "column": 12,
            "endLine": 210,
            "endColumn": 56,
            "path": "gui/wxpython/gmodeler/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.dialogs",
            "obj": "ModelListCtrl.__init__",
            "line": 728,
            "column": 4,
            "endLine": 728,
            "endColumn": 16,
            "path": "gui/wxpython/gmodeler/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.dialogs",
            "obj": "",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 28,
            "path": "gui/wxpython/gmodeler/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.dialogs",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 68,
            "path": "gui/wxpython/gmodeler/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.dialogs",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 48,
            "endColumn": 1,
            "path": "gui/wxpython/gmodeler/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.frame",
            "obj": "ModelerFrame",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 18,
            "path": "gui/wxpython/gmodeler/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/frame.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3805/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "Model.LoadModel",
            "line": 332,
            "column": 26,
            "endLine": 332,
            "endColumn": 37,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (29/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "Model",
            "line": 68,
            "column": 0,
            "endLine": 68,
            "endColumn": 11,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 2 in 'ModelObject.SetLabel' and is now 1 in overriding 'ModelData.SetLabel' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelData.SetLabel",
            "line": 1554,
            "column": 4,
            "endLine": 1554,
            "endColumn": 16,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __init__. Instantiate class directly.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gmodeler.model",
            "obj": "ModelDataSingle._defineShape",
            "line": 1594,
            "column": 8,
            "endLine": 1594,
            "endColumn": 54,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __init__. Instantiate class directly.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gmodeler.model",
            "obj": "ModelDataSeries._defineShape",
            "line": 1609,
            "column": 8,
            "endLine": 1609,
            "endColumn": 41,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelItem.__init__",
            "line": 1727,
            "column": 4,
            "endLine": 1727,
            "endColumn": 16,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'newId' has been renamed to 'id' in overriding 'ModelItem.SetId' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelItem.SetId",
            "line": 1744,
            "column": 4,
            "endLine": 1744,
            "endColumn": 13,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelLoop.__init__",
            "line": 1772,
            "column": 4,
            "endLine": 1772,
            "endColumn": 16,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelCondition.__init__",
            "line": 1852,
            "column": 4,
            "endLine": 1852,
            "endColumn": 16,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "error",
            "symbol": "invalid-unary-operand-type",
            "message": "bad operand type for unary -: NoneType",
            "messageId": "E1130",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelCondition.__init__",
            "line": 1884,
            "column": 20,
            "endLine": 1884,
            "endColumn": 32,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "error",
            "symbol": "invalid-unary-operand-type",
            "message": "bad operand type for unary -: NoneType",
            "messageId": "E1130",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ModelCondition.__init__",
            "line": 1887,
            "column": 17,
            "endLine": 1887,
            "endColumn": 28,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'not test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ProcessModelFile._processData",
            "line": 2169,
            "column": 27,
            "endLine": 2169,
            "endColumn": 79,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'not test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ProcessModelFile._processData",
            "line": 2171,
            "column": 22,
            "endLine": 2171,
            "endColumn": 69,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "duplicate-key",
            "message": "Duplicate key 'text' in dictionary",
            "messageId": "W0109",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ProcessModelFile._processComments",
            "line": 2302,
            "column": 16,
            "endLine": 2308,
            "endColumn": 17,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "ProcessModelFile",
            "line": 1994,
            "column": 0,
            "endLine": 1994,
            "endColumn": 22,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteModelFile",
            "line": 2312,
            "column": 0,
            "endLine": 2312,
            "endColumn": 20,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteScriptFile._writeItem",
            "line": 2651,
            "column": 4,
            "endLine": 2651,
            "endColumn": 18,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(item, (ModelCondition, ModelLoop))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteScriptFile._writeItem",
            "line": 2660,
            "column": 13,
            "endLine": 2660,
            "endColumn": 76,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteScriptFile",
            "line": 2638,
            "column": 0,
            "endLine": 2638,
            "endColumn": 21,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteActiniaFile._getPythonAction",
            "line": 2815,
            "column": 4,
            "endLine": 2815,
            "endColumn": 24,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WriteActiniaFile._getPythonActionCmd",
            "line": 2824,
            "column": 4,
            "endLine": 2824,
            "endColumn": 27,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePyWPSFile._writePythonAction",
            "line": 3121,
            "column": 4,
            "endLine": 3121,
            "endColumn": 26,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePyWPSFile._getPythonActionCmd",
            "line": 3218,
            "column": 4,
            "endLine": 3218,
            "endColumn": 27,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "duplicate-string-formatting-argument",
            "message": "Duplicate string formatting argument 'out', consider passing as named argument",
            "messageId": "W1308",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePyWPSFile._getPythonActionCmd",
            "line": 3276,
            "column": 19,
            "endLine": 3278,
            "endColumn": 13,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePyWPSFile",
            "line": 2909,
            "column": 0,
            "endLine": 2909,
            "endColumn": 20,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePythonFile._writePythonAction",
            "line": 3558,
            "column": 4,
            "endLine": 3558,
            "endColumn": 26,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePythonFile._getPythonActionCmd",
            "line": 3608,
            "column": 4,
            "endLine": 3608,
            "endColumn": 27,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gmodeler.model",
            "obj": "WritePythonFile",
            "line": 3320,
            "column": 0,
            "endLine": 3320,
            "endColumn": 21,
            "path": "gui/wxpython/gmodeler/model.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/model.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "ModelerPanel.__init__.<lambda>",
            "line": 160,
            "column": 12,
            "endLine": 160,
            "endColumn": 55,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __del__. Use del keyword.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "gmodeler.panels",
            "obj": "ModelerPanel.GetOptData",
            "line": 545,
            "column": 28,
            "endLine": 545,
            "endColumn": 42,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (45/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "ModelerPanel",
            "line": 97,
            "column": 0,
            "endLine": 97,
            "endColumn": 18,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'fn_wildcard' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gmodeler.panels",
            "obj": "PythonPanel.SaveAs",
            "line": 1754,
            "column": 21,
            "endLine": 1754,
            "endColumn": 32,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "PythonPanel.OnRun",
            "line": 1818,
            "column": 16,
            "endLine": 1818,
            "endColumn": 37,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "PythonPanel.OnRun",
            "line": 1823,
            "column": 12,
            "endLine": 1823,
            "endColumn": 33,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "",
            "line": 37,
            "column": 8,
            "endLine": 37,
            "endColumn": 44,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.panels",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 78,
            "path": "gui/wxpython/gmodeler/panels.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/panels.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'PreferencesBaseDialog.OnSave' and is now 2 in overriding 'PreferencesDialog.OnSave' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gmodeler.preferences",
            "obj": "PreferencesDialog.OnSave",
            "line": 671,
            "column": 4,
            "endLine": 671,
            "endColumn": 14,
            "path": "gui/wxpython/gmodeler/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.preferences",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 38,
            "path": "gui/wxpython/gmodeler/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gmodeler.preferences",
            "obj": "",
            "line": 24,
            "column": 0,
            "endLine": 24,
            "endColumn": 75,
            "path": "gui/wxpython/gmodeler/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gmodeler/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2628/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (26/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "GroupDialog",
            "line": 689,
            "column": 0,
            "endLine": 689,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (31/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "GroupDialog",
            "line": 689,
            "column": 0,
            "endLine": 689,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "SqlQueryFrame.__init__",
            "line": 2033,
            "column": 4,
            "endLine": 2033,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "HyperlinkDialog",
            "line": 2310,
            "column": 0,
            "endLine": 2310,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 38,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.dialogs",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 67,
            "endColumn": 1,
            "path": "gui/wxpython/gui_core/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3440/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (66/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "UpdateThread.run",
            "line": 164,
            "column": 4,
            "endLine": 164,
            "endColumn": 11,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "TaskFrame.__init__.<lambda>",
            "line": 572,
            "column": 16,
            "endLine": 572,
            "endColumn": 59,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "error",
            "symbol": "assignment-from-none",
            "message": "Assigning result of a function call, where the function returns None",
            "messageId": "E1128",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "TaskFrame.OnRun",
            "line": 870,
            "column": 16,
            "endLine": 870,
            "endColumn": 68,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (129/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 981,
            "column": 4,
            "endLine": 981,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 981,
            "column": 4,
            "endLine": 981,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'task'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 1007,
            "column": 12,
            "endLine": 1007,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 1137,
            "column": 8,
            "endLine": 2373,
            "endColumn": 34,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "error",
            "symbol": "assignment-from-no-return",
            "message": "Assigning result of a function call, where the function has no return",
            "messageId": "E1111",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 2538,
            "column": 12,
            "endLine": 2540,
            "endColumn": 13,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (231/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 981,
            "column": 4,
            "endLine": 981,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (764/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "CmdPanel.__init__",
            "line": 981,
            "column": 4,
            "endLine": 981,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'myIndex' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gui_core.forms",
            "obj": "CmdPanel.OnCheckBoxMulti",
            "line": 2878,
            "column": 38,
            "endLine": 2878,
            "endColumn": 45,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 95,
            "column": 0,
            "endLine": 95,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 98,
            "column": 0,
            "endLine": 103,
            "endColumn": 1,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 104,
            "column": 0,
            "endLine": 104,
            "endColumn": 62,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 105,
            "column": 0,
            "endLine": 105,
            "endColumn": 39,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.forms",
            "obj": "",
            "line": 118,
            "column": 0,
            "endLine": 118,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/forms.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/forms.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'title'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "gui_core.ghelp",
            "obj": "AboutWindow.__init__",
            "line": 75,
            "column": 12,
            "endLine": 75,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/ghelp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/ghelp.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'grass.script' (imported line 40)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "gui_core.ghelp",
            "obj": "AboutWindow._pageCitation",
            "line": 333,
            "column": 12,
            "endLine": 333,
            "endColumn": 42,
            "path": "gui/wxpython/gui_core/ghelp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/ghelp.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.ghelp",
            "obj": "HelpFrame",
            "line": 691,
            "column": 0,
            "endLine": 691,
            "endColumn": 15,
            "path": "gui/wxpython/gui_core/ghelp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/ghelp.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.ghelp",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/ghelp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/ghelp.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.goutput",
            "obj": "",
            "line": 216,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/goutput.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/goutput.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.goutput",
            "obj": "GConsoleFrame",
            "line": 661,
            "column": 0,
            "endLine": 661,
            "endColumn": 19,
            "path": "gui/wxpython/gui_core/goutput.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/goutput.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.goutput",
            "obj": "",
            "line": 47,
            "column": 0,
            "endLine": 47,
            "endColumn": 38,
            "path": "gui/wxpython/gui_core/goutput.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/goutput.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1989,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1990,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1991,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1992,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1993,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3254/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "Select.__init__",
            "line": 91,
            "column": 4,
            "endLine": 91,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "LayerSelect.__init__",
            "line": 947,
            "column": 4,
            "endLine": 947,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "DriverSelect",
            "line": 1009,
            "column": 0,
            "endLine": 1009,
            "endColumn": 18,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "TableSelect.__init__",
            "line": 1047,
            "column": 4,
            "endLine": 1047,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "DbaseSelect",
            "line": 1225,
            "column": 0,
            "endLine": 1225,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (28/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "GdalSelect",
            "line": 1424,
            "column": 0,
            "endLine": 1424,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "SignatureTypeSelect",
            "line": 3183,
            "column": 0,
            "endLine": 3183,
            "endColumn": 25,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "SeparatorSelect",
            "line": 3194,
            "column": 0,
            "endLine": 3194,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 32,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 72,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 75,
            "column": 0,
            "endLine": 75,
            "endColumn": 45,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.gselect",
            "obj": "",
            "line": 87,
            "column": 0,
            "endLine": 87,
            "endColumn": 42,
            "path": "gui/wxpython/gui_core/gselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/gselect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (43/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gui_core.mapdisp",
            "obj": "MapPanelBase",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 18,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'AddToolbar' is abstract in class 'MapPanelBase' but is not overridden in child class 'SingleMapPanel'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "gui_core.mapdisp",
            "obj": "SingleMapPanel",
            "line": 506,
            "column": 0,
            "endLine": 506,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'GetMapToolbar' is abstract in class 'MapPanelBase' but is not overridden in child class 'SingleMapPanel'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "gui_core.mapdisp",
            "obj": "SingleMapPanel",
            "line": 506,
            "column": 0,
            "endLine": 506,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'AddToolbar' is abstract in class 'MapPanelBase' but is not overridden in child class 'DoubleMapPanel'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "gui_core.mapdisp",
            "obj": "DoubleMapPanel",
            "line": 577,
            "column": 0,
            "endLine": 577,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'GetMapToolbar' is abstract in class 'MapPanelBase' but is not overridden in child class 'DoubleMapPanel'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "gui_core.mapdisp",
            "obj": "DoubleMapPanel",
            "line": 577,
            "column": 0,
            "endLine": 577,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (23/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gui_core.mapdisp",
            "obj": "DoubleMapPanel",
            "line": 577,
            "column": 0,
            "endLine": 577,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.menu",
            "obj": "SearchModuleWindow.__init__.<lambda>",
            "line": 230,
            "column": 41,
            "endLine": 230,
            "endColumn": 68,
            "path": "gui/wxpython/gui_core/menu.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/menu.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2451/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "gui_core.preferences",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'code' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "gui_core.preferences",
            "obj": "PreferencesDialog.OnSetEpsgCode",
            "line": 2087,
            "column": 58,
            "endLine": 2087,
            "endColumn": 62,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "gui_core.preferences",
            "obj": "PreferencesDialog.OnSetOutputFont",
            "line": 2189,
            "column": 8,
            "endLine": 2189,
            "endColumn": 73,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'PreferencesBaseDialog.OnSave' and is now 2 in overriding 'PreferencesDialog.OnSave' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gui_core.preferences",
            "obj": "PreferencesDialog.OnSave",
            "line": 2278,
            "column": 4,
            "endLine": 2278,
            "endColumn": 14,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.preferences",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": 55,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.preferences",
            "obj": "",
            "line": 56,
            "column": 0,
            "endLine": 65,
            "endColumn": 1,
            "path": "gui/wxpython/gui_core/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/preferences.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.prompt",
            "obj": "GPromptSTC.__init__.<lambda>",
            "line": 171,
            "column": 16,
            "endLine": 171,
            "endColumn": 69,
            "path": "gui/wxpython/gui_core/prompt.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/prompt.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.prompt",
            "obj": "GPromptSTC.__init__.<lambda>",
            "line": 174,
            "column": 16,
            "endLine": 174,
            "endColumn": 74,
            "path": "gui/wxpython/gui_core/prompt.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/prompt.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.prompt",
            "obj": "GPromptSTC.GetWordLeft.<lambda>",
            "line": 436,
            "column": 30,
            "endLine": 436,
            "endColumn": 46,
            "path": "gui/wxpython/gui_core/prompt.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/prompt.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (23/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "gui_core.pyedit",
            "obj": "PyEditController",
            "line": 271,
            "column": 0,
            "endLine": 271,
            "endColumn": 22,
            "path": "gui/wxpython/gui_core/pyedit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/pyedit.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.pyedit",
            "obj": "",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 26,
            "path": "gui/wxpython/gui_core/pyedit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/pyedit.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.pyedit",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 47,
            "path": "gui/wxpython/gui_core/pyedit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/pyedit.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.pyedit",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/pyedit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/pyedit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'styleBefore' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "gui_core.pystc",
            "obj": "PyStc.OnUpdateUI",
            "line": 290,
            "column": 16,
            "endLine": 290,
            "endColumn": 27,
            "path": "gui/wxpython/gui_core/pystc.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/pystc.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'node'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "gui_core.query",
            "obj": "QueryDialog.ShowContextMenu",
            "line": 123,
            "column": 16,
            "endLine": 123,
            "endColumn": 20,
            "path": "gui/wxpython/gui_core/query.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/query.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.simplelmgr",
            "obj": "TestFrame",
            "line": 541,
            "column": 0,
            "endLine": 541,
            "endColumn": 15,
            "path": "gui/wxpython/gui_core/simplelmgr.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/simplelmgr.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.simplelmgr",
            "obj": "",
            "line": 31,
            "column": 0,
            "endLine": 31,
            "endColumn": 30,
            "path": "gui/wxpython/gui_core/simplelmgr.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/simplelmgr.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "gui_core.toolbars",
            "obj": "ToolbarController.EnableLongHelp",
            "line": 174,
            "column": 16,
            "endLine": 177,
            "endColumn": 47,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "gui_core.toolbars",
            "obj": "ToolbarController.EnableLongHelp",
            "line": 179,
            "column": 16,
            "endLine": 182,
            "endColumn": 44,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _default of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "ToolbarController.SelectDefault",
            "line": 205,
            "column": 24,
            "endLine": 205,
            "endColumn": 44,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "gui_core.toolbars",
            "obj": "ToolbarController.Enable",
            "line": 232,
            "column": 12,
            "endLine": 232,
            "endColumn": 18,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _toolbarData of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "ToolbarController.EnableAll",
            "line": 241,
            "column": 20,
            "endLine": 241,
            "endColumn": 44,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 6 in 'ToolbarController._defineTool' and is now 5 in overriding 'AuiToolbarController._defineTool' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "AuiToolbarController._defineTool",
            "line": 309,
            "column": 4,
            "endLine": 309,
            "endColumn": 19,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 8 in 'ToolbarController.CreateTool' and is now 7 in overriding 'AuiToolbarController.CreateTool' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "AuiToolbarController.CreateTool",
            "line": 323,
            "column": 4,
            "endLine": 323,
            "endColumn": 18,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'ToolBar' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "gui_core.toolbars",
            "obj": "BaseToolbar.__init__",
            "line": 352,
            "column": 4,
            "endLine": 352,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'group'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "ToolSwitcher.IsToolInGroup",
            "line": 501,
            "column": 12,
            "endLine": 501,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.toolbars",
            "obj": "",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 33,
            "path": "gui/wxpython/gui_core/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.treeview",
            "obj": "",
            "line": 22,
            "column": 4,
            "endLine": 22,
            "endColumn": 42,
            "path": "gui/wxpython/gui_core/treeview.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/treeview.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.treeview",
            "obj": "",
            "line": 29,
            "column": 8,
            "endLine": 29,
            "endColumn": 74,
            "path": "gui/wxpython/gui_core/treeview.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/treeview.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.treeview",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 46,
            "path": "gui/wxpython/gui_core/treeview.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/treeview.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.treeview",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 42,
            "path": "gui/wxpython/gui_core/treeview.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/treeview.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "gui_core.vselect",
            "obj": "VectorSelectBase",
            "line": 377,
            "column": 4,
            "endLine": 393,
            "endColumn": 7,
            "path": "gui/wxpython/gui_core/vselect.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/vselect.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "gui_core.widgets",
            "obj": "StaticWrapText.__init__",
            "line": 573,
            "column": 4,
            "endLine": 573,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/widgets.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "gui_core.widgets",
            "obj": "SearchModuleWidget._searchModule.<lambda>",
            "line": 1338,
            "column": 23,
            "endLine": 1338,
            "endColumn": 68,
            "path": "gui/wxpython/gui_core/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/widgets.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.widgets",
            "obj": "",
            "line": 91,
            "column": 0,
            "endLine": 91,
            "endColumn": 26,
            "path": "gui/wxpython/gui_core/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/widgets.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "CheckListCtrlMixin",
            "line": 472,
            "column": 4,
            "endLine": 472,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "CheckListCtrlMixin",
            "line": 483,
            "column": 4,
            "endLine": 483,
            "endColumn": 28,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "gui_core.wrap",
            "obj": "DragImage.__init__",
            "line": 633,
            "column": 4,
            "endLine": 633,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "DragImage",
            "line": 629,
            "column": 0,
            "endLine": 629,
            "endColumn": 15,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "gui_core.wrap",
            "obj": "PseudoDC.__init__",
            "line": 641,
            "column": 4,
            "endLine": 641,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "gui_core.wrap",
            "obj": "ClientDC.__init__",
            "line": 686,
            "column": 4,
            "endLine": 686,
            "endColumn": 16,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "TextEntryDialog",
            "line": 752,
            "column": 0,
            "endLine": 752,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "Dialog",
            "line": 810,
            "column": 0,
            "endLine": 810,
            "endColumn": 12,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "Notebook",
            "line": 818,
            "column": 0,
            "endLine": 818,
            "endColumn": 14,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "FileBrowseButton",
            "line": 871,
            "column": 0,
            "endLine": 871,
            "endColumn": 22,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "DirBrowseButton",
            "line": 879,
            "column": 0,
            "endLine": 879,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "ExpandoTextCtrl",
            "line": 887,
            "column": 0,
            "endLine": 887,
            "endColumn": 21,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "ColourPickerCtrl",
            "line": 897,
            "column": 0,
            "endLine": 897,
            "endColumn": 22,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "gui_core.wrap",
            "obj": "",
            "line": 36,
            "column": 4,
            "endLine": 36,
            "endColumn": 17,
            "path": "gui/wxpython/gui_core/wrap.py",
            "absolutePath": "/workspace/grass/gui/wxpython/gui_core/wrap.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "tree",
            "obj": "HistoryBrowserTree.__init__.<lambda>",
            "line": 141,
            "column": 12,
            "endLine": 141,
            "endColumn": 51,
            "path": "gui/wxpython/history/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/history/tree.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "tree",
            "obj": "HistoryBrowserTree.__init__.<lambda>",
            "line": 144,
            "column": 12,
            "endLine": 144,
            "endColumn": 51,
            "path": "gui/wxpython/history/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/history/tree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tree",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 52,
            "path": "gui/wxpython/history/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/history/tree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tree",
            "obj": "",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 39,
            "path": "gui/wxpython/history/tree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/history/tree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'label' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "iclass.dialogs",
            "obj": "IClassMapDialog._layout",
            "line": 273,
            "column": 55,
            "endLine": 273,
            "endColumn": 60,
            "path": "gui/wxpython/iclass/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.digit",
            "obj": "",
            "line": 28,
            "column": 4,
            "endLine": 28,
            "endColumn": 34,
            "path": "gui/wxpython/iclass/digit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/digit.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vedit",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.digit",
            "obj": "",
            "line": 29,
            "column": 4,
            "endLine": 29,
            "endColumn": 33,
            "path": "gui/wxpython/iclass/digit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/digit.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 502,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import ctypes",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 20,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.imagery",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 30,
            "column": 4,
            "endLine": 30,
            "endColumn": 35,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 31,
            "column": 4,
            "endLine": 31,
            "endColumn": 34,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "IClassMapPanel.__init__",
            "line": 84,
            "column": 4,
            "endLine": 84,
            "endColumn": 16,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "IClassMapPanel.__init__.<lambda>",
            "line": 142,
            "column": 12,
            "endLine": 144,
            "endColumn": 37,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'IClassMapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "IClassMapPanel.AddToolbar",
            "line": 292,
            "column": 4,
            "endLine": 292,
            "endColumn": 18,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (48/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "IClassMapPanel",
            "line": 73,
            "column": 0,
            "endLine": 73,
            "endColumn": 20,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 49,
            "column": 0,
            "endLine": 49,
            "endColumn": 45,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 70,
            "column": 0,
            "endLine": 70,
            "endColumn": 42,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) DEFAULT_MODE, create_string_buffer, c_buffer, CFUNCTYPE, WINFUNCTYPE, py_object, c_short, c_ushort, c_long, c_ulong, c_int, c_uint, c_float, c_double, c_longdouble, c_longlong, c_ulonglong, c_ubyte, c_byte, c_char, c_char_p, c_void_p, c_voidp, c_bool, c_wchar_p, c_wchar, create_unicode_buffer, SetPointerType, ARRAY, CDLL, PyDLL, WinDLL, HRESULT, OleDLL, LibraryLoader, cdll, pydll, pythonapi, windll, oledll, GetLastError, WinError, c_size_t, c_ssize_t, memmove, memset, PYFUNCTYPE, cast, string_at, wstring_at, DllGetClassObject, DllCanUnloadNow, c_int8, c_uint8, kind, c_int16, c_int32, c_int64, c_uint16, c_uint32, c_uint64, c_time_t, Union, Structure, Array, RTLD_LOCAL, RTLD_GLOBAL, ArgumentError, SIZEOF_TIME_T, FormatError, sizeof, addressof, alignment, resize, get_errno, set_errno, POINTER, get_last_error, set_last_error, BigEndianStructure, LittleEndianStructure, BigEndianUnion and LittleEndianUnion from wildcard import of ctypes",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "iclass.frame",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 20,
            "path": "gui/wxpython/iclass/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "iclass.plots",
            "obj": "PlotPanel",
            "line": 25,
            "column": 0,
            "endLine": 25,
            "endColumn": 15,
            "path": "gui/wxpython/iclass/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/plots.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import ctypes",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.statistics",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 21,
            "endColumn": 20,
            "path": "gui/wxpython/iclass/statistics.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/statistics.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.imagery",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iclass.statistics",
            "obj": "",
            "line": 26,
            "column": 4,
            "endLine": 26,
            "endColumn": 35,
            "path": "gui/wxpython/iclass/statistics.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/statistics.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) DEFAULT_MODE, create_string_buffer, c_buffer, CFUNCTYPE, WINFUNCTYPE, py_object, c_short, c_ushort, c_long, c_ulong, c_uint, c_double, c_longdouble, c_longlong, c_ulonglong, c_ubyte, c_byte, c_char, c_void_p, c_voidp, c_bool, c_wchar_p, c_wchar, create_unicode_buffer, SetPointerType, ARRAY, CDLL, PyDLL, WinDLL, HRESULT, OleDLL, LibraryLoader, cdll, pydll, pythonapi, windll, oledll, GetLastError, WinError, c_size_t, c_ssize_t, memmove, memset, PYFUNCTYPE, cast, string_at, wstring_at, DllGetClassObject, DllCanUnloadNow, c_int8, c_uint8, kind, c_int16, c_int32, c_int64, c_uint16, c_uint32, c_uint64, c_time_t, Union, Structure, Array, RTLD_LOCAL, RTLD_GLOBAL, ArgumentError, SIZEOF_TIME_T, FormatError, sizeof, addressof, alignment, resize, get_errno, set_errno, POINTER, pointer, get_last_error, set_last_error, BigEndianStructure, LittleEndianStructure, BigEndianUnion and LittleEndianUnion from wildcard import of ctypes",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "iclass.statistics",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 21,
            "endColumn": 20,
            "path": "gui/wxpython/iclass/statistics.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/statistics.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iclass.toolbars",
            "obj": "",
            "line": 26,
            "column": 0,
            "endLine": 26,
            "endColumn": 30,
            "path": "gui/wxpython/iclass/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iclass/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (34/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "GRASSStartup",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 18,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "GRASSStartup",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 18,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "GListBox.__init__",
            "line": 1202,
            "column": 4,
            "endLine": 1202,
            "endColumn": 16,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "GListBox._LoadData",
            "line": 1219,
            "column": 4,
            "endLine": 1219,
            "endColumn": 17,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "GListBox.InsertItems",
            "line": 1238,
            "column": 4,
            "endLine": 1238,
            "endColumn": 19,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set",
            "obj": "",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 64,
            "path": "gui/wxpython/image2target/ii2t_gis_set.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-join",
            "message": "Consider using str.join(sequence) for concatenating strings from an iterable",
            "messageId": "R1713",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_gis_set_error",
            "obj": "main",
            "line": 27,
            "column": 12,
            "endLine": 27,
            "endColumn": 20,
            "path": "gui/wxpython/image2target/ii2t_gis_set_error.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_gis_set_error.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3510/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 82,
            "column": 0,
            "endLine": 82,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 83,
            "column": 0,
            "endLine": 83,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 84,
            "column": 0,
            "endLine": 84,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'p' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "image2target.ii2t_manager",
            "obj": "DispMapPage.OnSrcSelection",
            "line": 900,
            "column": 15,
            "endLine": 900,
            "endColumn": 16,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (41/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel",
            "line": 1014,
            "column": 0,
            "endLine": 1014,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel.__init__",
            "line": 1020,
            "column": 4,
            "endLine": 1020,
            "endColumn": 16,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel.__init__",
            "line": 1200,
            "column": 8,
            "endLine": 1200,
            "endColumn": 45,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel.__init__",
            "line": 1209,
            "column": 8,
            "endLine": 1209,
            "endColumn": 45,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __init__. Instantiate class directly.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel.InitMapDisplay",
            "line": 1269,
            "column": 8,
            "endLine": 1269,
            "endColumn": 47,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ret' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel.GetNewExtent",
            "line": 2152,
            "column": 11,
            "endLine": 2152,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (37/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GCPPanel",
            "line": 1014,
            "column": 0,
            "endLine": 1014,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "image2target.ii2t_manager",
            "obj": "GCPList._Create",
            "line": 2407,
            "column": 11,
            "endLine": 2407,
            "endColumn": 12,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.__init__",
            "line": 2886,
            "column": 8,
            "endLine": 2889,
            "endColumn": 11,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3469,
            "column": 16,
            "endLine": 3469,
            "endColumn": 32,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3470,
            "column": 16,
            "endLine": 3470,
            "endColumn": 32,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3477,
            "column": 16,
            "endLine": 3477,
            "endColumn": 32,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 3478,
            "column": 16,
            "endLine": 3478,
            "endColumn": 32,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "GrSettingsDialog.OnSave",
            "line": 3498,
            "column": 8,
            "endLine": 3498,
            "endColumn": 27,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 48,
            "column": 4,
            "endLine": 48,
            "endColumn": 29,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": 55,
            "endColumn": 22,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 60,
            "column": 0,
            "endLine": 60,
            "endColumn": 60,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 36,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_manager",
            "obj": "",
            "line": 64,
            "column": 0,
            "endLine": 75,
            "endColumn": 1,
            "path": "gui/wxpython/image2target/ii2t_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "MapPanel.__init__",
            "line": 46,
            "column": 4,
            "endLine": 46,
            "endColumn": 16,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'MapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "MapPanel.AddToolbar",
            "line": 230,
            "column": 4,
            "endLine": 230,
            "endColumn": 18,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'win' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "MapPanel.OnErase",
            "line": 425,
            "column": 8,
            "endLine": 425,
            "endColumn": 11,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "MapPanel",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 14,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package mapdisp are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 39,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "image2target.ii2t_mapdisplay",
            "obj": "",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 30,
            "path": "gui/wxpython/image2target/ii2t_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/image2target/ii2t_mapdisplay.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (28/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "ScattsManager",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 19,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-swap-variables",
            "message": "Consider using tuple unpacking for swapping variables",
            "messageId": "R1712",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "ScattsManager.AddScattPlot",
            "line": 275,
            "column": 20,
            "endLine": 275,
            "endColumn": 34,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _tree of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "IMapDispConnection.UpdateCategoryRaster",
            "line": 1011,
            "column": 12,
            "endLine": 1011,
            "endColumn": 44,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "IMapDispConnection.UpdateCategoryRaster",
            "line": 1014,
            "column": 12,
            "endLine": 1014,
            "endColumn": 30,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _tree of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "IMapDispConnection.RenderCatRast",
            "line": 1025,
            "column": 20,
            "endLine": 1025,
            "endColumn": 52,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "iscatt.controllers",
            "obj": "IClassConnection.UpdateCategoryRaster",
            "line": 1089,
            "column": 12,
            "endLine": 1089,
            "endColumn": 30,
            "path": "gui/wxpython/iscatt/controllers.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/controllers.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import ctypes",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iscatt.core_c",
            "obj": "",
            "line": 18,
            "column": 0,
            "endLine": 18,
            "endColumn": 20,
            "path": "gui/wxpython/iscatt/core_c.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/core_c.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.imagery",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "iscatt.core_c",
            "obj": "",
            "line": 21,
            "column": 4,
            "endLine": 21,
            "endColumn": 35,
            "path": "gui/wxpython/iscatt/core_c.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/core_c.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.core_c",
            "obj": "MergeArrays",
            "line": 67,
            "column": 8,
            "endLine": 67,
            "endColumn": 72,
            "path": "gui/wxpython/iscatt/core_c.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/core_c.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iscatt.core_c",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 31,
            "path": "gui/wxpython/iscatt/core_c.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/core_c.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) DEFAULT_MODE, create_string_buffer, c_buffer, CFUNCTYPE, WINFUNCTYPE, py_object, c_short, c_ushort, c_long, c_ulong, c_uint, c_float, c_longdouble, c_longlong, c_ulonglong, c_ubyte, c_byte, c_char, c_void_p, c_voidp, c_bool, c_wchar_p, c_wchar, create_unicode_buffer, SetPointerType, ARRAY, CDLL, PyDLL, WinDLL, HRESULT, OleDLL, LibraryLoader, cdll, pydll, pythonapi, windll, oledll, GetLastError, WinError, c_size_t, c_ssize_t, memmove, memset, PYFUNCTYPE, cast, string_at, wstring_at, DllGetClassObject, DllCanUnloadNow, c_int8, kind, c_int16, c_int32, c_int64, c_uint16, c_uint32, c_uint64, c_time_t, Union, Structure, Array, RTLD_LOCAL, RTLD_GLOBAL, ArgumentError, SIZEOF_TIME_T, FormatError, sizeof, byref, addressof, alignment, resize, get_errno, set_errno, get_last_error, set_last_error, BigEndianStructure, LittleEndianStructure, BigEndianUnion and LittleEndianUnion from wildcard import of ctypes",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "iscatt.core_c",
            "obj": "",
            "line": 18,
            "column": 0,
            "endLine": 18,
            "endColumn": 20,
            "path": "gui/wxpython/iscatt/core_c.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/core_c.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "iscatt.dialogs",
            "obj": "",
            "line": 565,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/iscatt/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iscatt.dialogs",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 34,
            "path": "gui/wxpython/iscatt/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iscatt.dialogs",
            "obj": "",
            "line": 30,
            "column": 0,
            "endLine": 30,
            "endColumn": 41,
            "path": "gui/wxpython/iscatt/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-swap-variables",
            "message": "Consider using tuple unpacking for swapping variables",
            "messageId": "R1712",
            "confidence": "UNDEFINED",
            "module": "iscatt.frame",
            "obj": "ScatterPlotsPanel._creteCaption",
            "line": 386,
            "column": 12,
            "endLine": 386,
            "endColumn": 21,
            "path": "gui/wxpython/iscatt/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "iscatt.frame",
            "obj": "",
            "line": 42,
            "column": 4,
            "endLine": 42,
            "endColumn": 32,
            "path": "gui/wxpython/iscatt/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/frame.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "Core.ComputeCatsScatts",
            "line": 142,
            "column": 12,
            "endLine": 142,
            "endColumn": 63,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "CatRastUpdater._updateCatRast",
            "line": 276,
            "column": 16,
            "endLine": 276,
            "endColumn": 81,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "CatRastUpdater._rasterize",
            "line": 298,
            "column": 12,
            "endLine": 298,
            "endColumn": 54,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "CatRastUpdater._rasterize",
            "line": 318,
            "column": 12,
            "endLine": 318,
            "endColumn": 56,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "AnalyzedData.Create",
            "line": 385,
            "column": 12,
            "endLine": 385,
            "endColumn": 40,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "iscatt.iscatt_core",
            "obj": "AnalyzedData.Create",
            "line": 393,
            "column": 16,
            "endLine": 393,
            "endColumn": 62,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'ScattPlotsCondsData.AddScattPlot' and is now 2 in overriding 'ScattPlotsData.AddScattPlot' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "iscatt.iscatt_core",
            "obj": "ScattPlotsData.AddScattPlot",
            "line": 601,
            "column": 4,
            "endLine": 601,
            "endColumn": 20,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "iscatt.iscatt_core",
            "obj": "",
            "line": 733,
            "column": 0,
            "endLine": 760,
            "endColumn": 3,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-swap-variables",
            "message": "Consider using tuple unpacking for swapping variables",
            "messageId": "R1712",
            "confidence": "UNDEFINED",
            "module": "iscatt.iscatt_core",
            "obj": "idBandsToidScatt",
            "line": 781,
            "column": 8,
            "endLine": 781,
            "endColumn": 23,
            "path": "gui/wxpython/iscatt/iscatt_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/iscatt_core.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-swap-variables",
            "message": "Consider using tuple unpacking for swapping variables",
            "messageId": "R1712",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "ScatterPlotWidget.ZoomRectangle",
            "line": 368,
            "column": 12,
            "endLine": 368,
            "endColumn": 20,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-swap-variables",
            "message": "Consider using tuple unpacking for swapping variables",
            "messageId": "R1712",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "ScatterPlotWidget.ZoomRectangle",
            "line": 373,
            "column": 12,
            "endLine": 373,
            "endColumn": 20,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "MergeImg",
            "line": 491,
            "column": 28,
            "endLine": 491,
            "endColumn": 37,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "MergeImg",
            "line": 519,
            "column": 8,
            "endLine": 542,
            "endColumn": 11,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'full_extend' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "iscatt.plots",
            "obj": "MergeImg",
            "line": 546,
            "column": 34,
            "endLine": 546,
            "endColumn": 45,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "iscatt.plots",
            "obj": "_renderCat",
            "line": 570,
            "column": 4,
            "endLine": 571,
            "endColumn": 19,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _init of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 586,
            "column": 8,
            "endLine": 586,
            "endColumn": 18,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 587,
            "column": 8,
            "endLine": 587,
            "endColumn": 17,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 587,
            "column": 22,
            "endLine": 587,
            "endColumn": 31,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _init of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 592,
            "column": 8,
            "endLine": 592,
            "endColumn": 18,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 593,
            "column": 8,
            "endLine": 593,
            "endColumn": 17,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 593,
            "column": 22,
            "endLine": 593,
            "endColumn": 31,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 594,
            "column": 8,
            "endLine": 594,
            "endColumn": 17,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 595,
            "column": 8,
            "endLine": 595,
            "endColumn": 17,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lut of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "_getColorMap",
            "line": 596,
            "column": 8,
            "endLine": 596,
            "endColumn": 17,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "iscatt.plots",
            "obj": "PolygonDrawer._deleteVertex",
            "line": 817,
            "column": 12,
            "endLine": 822,
            "endColumn": 24,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "ModestImage.__init__",
            "line": 922,
            "column": 4,
            "endLine": 922,
            "endColumn": 16,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (17/15)",
            "messageId": "R0913",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "imshow",
            "line": 1008,
            "column": 0,
            "endLine": 1008,
            "endColumn": 10,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _set_artist_props of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "imshow",
            "line": 1065,
            "column": 4,
            "endLine": 1065,
            "endColumn": 26,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _remove_method of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "imshow",
            "line": 1084,
            "column": 4,
            "endLine": 1084,
            "endColumn": 21,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "iscatt.plots",
            "obj": "imshow.<lambda>",
            "line": 1084,
            "column": 24,
            "endLine": 1084,
            "endColumn": 55,
            "path": "gui/wxpython/iscatt/plots.py",
            "absolutePath": "/workspace/grass/gui/wxpython/iscatt/plots.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2369/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (30/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame",
            "line": 89,
            "column": 0,
            "endLine": 89,
            "endColumn": 13,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame._createDataCatalog.<lambda>",
            "line": 393,
            "column": 12,
            "endLine": 393,
            "endColumn": 55,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame._createSearchModule.<lambda>",
            "line": 416,
            "column": 16,
            "endLine": 416,
            "endColumn": 59,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame._createConsole.<lambda>",
            "line": 438,
            "column": 12,
            "endLine": 438,
            "endColumn": 55,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame._createHistoryBrowser.<lambda>",
            "line": 453,
            "column": 16,
            "endLine": 453,
            "endColumn": 59,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame._addPagesToNotebook.<lambda>",
            "line": 641,
            "column": 12,
            "endLine": 641,
            "endColumn": 63,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame.RunMenuCmd",
            "line": 1151,
            "column": 4,
            "endLine": 1151,
            "endColumn": 18,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame.OnMenuCmd",
            "line": 1157,
            "column": 4,
            "endLine": 1157,
            "endColumn": 17,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "invalid-envvar-default",
            "message": "os.getenv default type is builtins.list. Expected str or None.",
            "messageId": "W1508",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame.OnRunScript",
            "line": 1270,
            "column": 20,
            "endLine": 1270,
            "endColumn": 53,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (107/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "GMFrame",
            "line": 89,
            "column": 0,
            "endLine": 89,
            "endColumn": 13,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 50,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 52,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 55,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 56,
            "column": 0,
            "endLine": 56,
            "endColumn": 54,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 67,
            "column": 0,
            "endLine": 67,
            "endColumn": 28,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package lmgr are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 68,
            "column": 0,
            "endLine": 68,
            "endColumn": 60,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 77,
            "column": 0,
            "endLine": 77,
            "endColumn": 30,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.frame",
            "obj": "",
            "line": 85,
            "column": 0,
            "endLine": 85,
            "endColumn": 51,
            "path": "gui/wxpython/lmgr/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/frame.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.DeleteLayer",
            "line": 115,
            "column": 26,
            "endLine": 115,
            "endColumn": 38,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.CheckLayer",
            "line": 120,
            "column": 29,
            "endLine": 120,
            "endColumn": 41,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.SelectLayer",
            "line": 124,
            "column": 30,
            "endLine": 124,
            "endColumn": 42,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _pydata of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 129,
            "column": 12,
            "endLine": 129,
            "endColumn": 25,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _pydata of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 132,
            "column": 16,
            "endLine": 132,
            "endColumn": 29,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _pydata of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 134,
            "column": 12,
            "endLine": 134,
            "endColumn": 25,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _pydata of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 136,
            "column": 12,
            "endLine": 136,
            "endColumn": 25,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 138,
            "column": 31,
            "endLine": 138,
            "endColumn": 43,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 139,
            "column": 31,
            "endLine": 139,
            "endColumn": 43,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 140,
            "column": 31,
            "endLine": 140,
            "endColumn": 43,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getLayerName of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 140,
            "column": 45,
            "endLine": 140,
            "endColumn": 69,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.ChangeLayer",
            "line": 140,
            "column": 70,
            "endLine": 140,
            "endColumn": 82,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _layer of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerList.IsLayerChecked",
            "line": 144,
            "column": 40,
            "endLine": 144,
            "endColumn": 52,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.RunCmd",
            "line": 233,
            "column": 8,
            "endLine": 233,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.WriteLog",
            "line": 242,
            "column": 8,
            "endLine": 242,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.WriteCmdLog",
            "line": 245,
            "column": 8,
            "endLine": 245,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.WriteWarning",
            "line": 248,
            "column": 8,
            "endLine": 248,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.WriteError",
            "line": 251,
            "column": 8,
            "endLine": 251,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.giface",
            "obj": "LayerManagerGrassInterface.GetLog",
            "line": 254,
            "column": 15,
            "endLine": 254,
            "endColumn": 34,
            "path": "gui/wxpython/lmgr/giface.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/giface.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2439/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmd' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.OnMetadata",
            "line": 935,
            "column": 8,
            "endLine": 935,
            "endColumn": 11,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "LayerTree.OnPopupGroupOpacityLevel.<lambda>",
            "line": 1251,
            "column": 33,
            "endLine": 1251,
            "endColumn": 79,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "LayerTree.OnPopupOpacityLevel.<lambda>",
            "line": 1291,
            "column": 33,
            "endLine": 1291,
            "endColumn": 79,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "LayerTree.AddLayer",
            "line": 1532,
            "column": 21,
            "endLine": 1532,
            "endColumn": 47,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'layer' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.AddLayer",
            "line": 1541,
            "column": 30,
            "endLine": 1541,
            "endColumn": 35,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'data' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.RecreateItem",
            "line": 2082,
            "column": 84,
            "endLine": 2082,
            "endColumn": 88,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'newItem' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.RecreateItem",
            "line": 2115,
            "column": 23,
            "endLine": 2115,
            "endColumn": 30,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'chk' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.ChangeLayer",
            "line": 2302,
            "column": 19,
            "endLine": 2302,
            "endColumn": 22,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'hidden' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.ChangeLayer",
            "line": 2303,
            "column": 19,
            "endLine": 2303,
            "endColumn": 25,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'opac' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.layertree",
            "obj": "LayerTree.ChangeLayer",
            "line": 2304,
            "column": 20,
            "endLine": 2304,
            "endColumn": 24,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (65/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "LayerTree",
            "line": 90,
            "column": 0,
            "endLine": 90,
            "endColumn": 15,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 50,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "lmgr.layertree",
            "obj": "",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 41,
            "path": "gui/wxpython/lmgr/layertree.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/layertree.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'lcmd' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "lmgr.pyshell",
            "obj": "PyShellWindow.AddLayer",
            "line": 138,
            "column": 59,
            "endLine": 138,
            "endColumn": 63,
            "path": "gui/wxpython/lmgr/pyshell.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/pyshell.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.New",
            "line": 99,
            "column": 8,
            "endLine": 99,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.Open",
            "line": 124,
            "column": 8,
            "endLine": 124,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'reason'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager._tryToSwitchMapsetFromWorkspaceFile",
            "line": 136,
            "column": 12,
            "endLine": 136,
            "endColumn": 18,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'details'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager._tryToSwitchMapsetFromWorkspaceFile",
            "line": 137,
            "column": 12,
            "endLine": 137,
            "endColumn": 19,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.SaveAs",
            "line": 400,
            "column": 8,
            "endLine": 400,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.Save",
            "line": 422,
            "column": 16,
            "endLine": 422,
            "endColumn": 35,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.Close",
            "line": 503,
            "column": 8,
            "endLine": 503,
            "endColumn": 27,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _setTitle of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "lmgr.workspace",
            "obj": "WorkspaceManager.OpenRecentFile",
            "line": 562,
            "column": 12,
            "endLine": 562,
            "endColumn": 31,
            "path": "gui/wxpython/lmgr/workspace.py",
            "absolutePath": "/workspace/grass/gui/wxpython/lmgr/workspace.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (39/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "location_wizard.dialogs",
            "obj": "RegionDef",
            "line": 32,
            "column": 0,
            "endLine": 32,
            "endColumn": 15,
            "path": "gui/wxpython/location_wizard/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2819/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 78,
            "column": 0,
            "endLine": 78,
            "endColumn": 15,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 79,
            "column": 0,
            "endLine": 79,
            "endColumn": 12,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 80,
            "column": 0,
            "endLine": 80,
            "endColumn": 12,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 81,
            "column": 0,
            "endLine": 81,
            "endColumn": 11,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 82,
            "column": 0,
            "endLine": 82,
            "endColumn": 11,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 83,
            "column": 0,
            "endLine": 83,
            "endColumn": 17,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 84,
            "column": 0,
            "endLine": 84,
            "endColumn": 15,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 85,
            "column": 0,
            "endLine": 85,
            "endColumn": 16,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "location_wizard.wizard",
            "obj": "ProjParamsPage.OnPageChange",
            "line": 910,
            "column": 20,
            "endLine": 913,
            "endColumn": 66,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ret' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "location_wizard.wizard",
            "obj": "SummaryPage.OnEnterPage",
            "line": 2348,
            "column": 15,
            "endLine": 2348,
            "endColumn": 18,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'err' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "location_wizard.wizard",
            "obj": "SummaryPage.OnEnterPage",
            "line": 2354,
            "column": 23,
            "endLine": 2354,
            "endColumn": 26,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (28/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "location_wizard.wizard",
            "obj": "LocationWizard",
            "line": 2401,
            "column": 0,
            "endLine": 2401,
            "endColumn": 20,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "location_wizard.wizard",
            "obj": "WizardWithHelpButton",
            "line": 2809,
            "column": 0,
            "endLine": 2809,
            "endColumn": 26,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "location_wizard.wizard",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": 55,
            "endColumn": 22,
            "path": "gui/wxpython/location_wizard/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/location_wizard/wizard.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2463/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (33/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame",
            "line": 107,
            "column": 0,
            "endLine": 107,
            "endColumn": 13,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame._createDataCatalog.<lambda>",
            "line": 335,
            "column": 12,
            "endLine": 335,
            "endColumn": 55,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame._createSearchModule.<lambda>",
            "line": 359,
            "column": 16,
            "endLine": 359,
            "endColumn": 59,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame._createConsole.<lambda>",
            "line": 381,
            "column": 12,
            "endLine": 381,
            "endColumn": 55,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame._createConsole.<lambda>",
            "line": 384,
            "column": 12,
            "endLine": 384,
            "endColumn": 62,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame._createHistoryBrowser.<lambda>",
            "line": 399,
            "column": 16,
            "endLine": 399,
            "endColumn": 59,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame.RunMenuCmd",
            "line": 1302,
            "column": 4,
            "endLine": 1302,
            "endColumn": 18,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame.OnMenuCmd",
            "line": 1308,
            "column": 4,
            "endLine": 1308,
            "endColumn": 17,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "invalid-envvar-default",
            "message": "os.getenv default type is builtins.list. Expected str or None.",
            "messageId": "W1508",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame.OnRunScript",
            "line": 1421,
            "column": 20,
            "endLine": 1421,
            "endColumn": 53,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (112/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "GMFrame",
            "line": 107,
            "column": 0,
            "endLine": 107,
            "endColumn": 13,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 50,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 60,
            "column": 0,
            "endLine": 60,
            "endColumn": 38,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 61,
            "column": 0,
            "endLine": 61,
            "endColumn": 55,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 54,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 73,
            "column": 0,
            "endLine": 73,
            "endColumn": 28,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package lmgr are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 60,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 83,
            "column": 0,
            "endLine": 83,
            "endColumn": 30,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "frame",
            "obj": "",
            "line": 91,
            "column": 0,
            "endLine": 91,
            "endColumn": 51,
            "path": "gui/wxpython/main_window/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/frame.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _closePageNoEvent of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "page",
            "obj": "MainPageBase.SetUpPage",
            "line": 68,
            "column": 33,
            "endLine": 68,
            "endColumn": 57,
            "path": "gui/wxpython/main_window/page.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/page.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _renamePageNoEvent of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "page",
            "obj": "MainPageBase.SetUpPage",
            "line": 69,
            "column": 34,
            "endLine": 69,
            "endColumn": 59,
            "path": "gui/wxpython/main_window/page.py",
            "absolutePath": "/workspace/grass/gui/wxpython/main_window/page.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 1035,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel.__init__",
            "line": 71,
            "column": 4,
            "endLine": 71,
            "endColumn": 16,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel._addToolbarVDigit.<lambda>",
            "line": 327,
            "column": 16,
            "endLine": 329,
            "endColumn": 41,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel._addToolbarVDigit.<lambda>",
            "line": 370,
            "column": 16,
            "endLine": 370,
            "endColumn": 52,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _onUpdateOverlays of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel.AddNviz",
            "line": 519,
            "column": 51,
            "endLine": 519,
            "endColumn": 85,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _onUpdateOverlays of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel.RemoveNviz",
            "line": 580,
            "column": 12,
            "endLine": 580,
            "endColumn": 46,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 3 in overriding 'MapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel.AddToolbar",
            "line": 588,
            "column": 4,
            "endLine": 588,
            "endColumn": 18,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'name' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "mapdisp.frame",
            "obj": "MapPanel.DOutFile",
            "line": 794,
            "column": 37,
            "endLine": 794,
            "endColumn": 41,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'extType' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "mapdisp.frame",
            "obj": "MapPanel.DOutFile",
            "line": 796,
            "column": 32,
            "endLine": 796,
            "endColumn": 39,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'vect' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "mapdisp.frame",
            "obj": "MapPanel.Query",
            "line": 1033,
            "column": 28,
            "endLine": 1033,
            "endColumn": 45,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel._onMeasure.<lambda>",
            "line": 1251,
            "column": 12,
            "endLine": 1251,
            "endColumn": 49,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (56/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "MapPanel",
            "line": 66,
            "column": 0,
            "endLine": 66,
            "endColumn": 14,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 50,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 28,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 39,
            "column": 0,
            "endLine": 39,
            "endColumn": 55,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 30,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": 55,
            "endColumn": 36,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 56,
            "column": 0,
            "endLine": 56,
            "endColumn": 70,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package mapdisp are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.frame",
            "obj": "",
            "line": 58,
            "column": 0,
            "endLine": 58,
            "endColumn": 35,
            "path": "gui/wxpython/mapdisp/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/frame.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'OnBeginDocument'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "mapdisp.gprint",
            "obj": "MapPrint.OnBeginDocument",
            "line": 29,
            "column": 4,
            "endLine": 29,
            "endColumn": 23,
            "path": "gui/wxpython/mapdisp/gprint.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/gprint.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'OnEndDocument'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "mapdisp.gprint",
            "obj": "MapPrint.OnEndDocument",
            "line": 32,
            "column": 4,
            "endLine": 32,
            "endColumn": 21,
            "path": "gui/wxpython/mapdisp/gprint.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/gprint.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'OnBeginPrinting'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "mapdisp.gprint",
            "obj": "MapPrint.OnBeginPrinting",
            "line": 35,
            "column": 4,
            "endLine": 35,
            "endColumn": 23,
            "path": "gui/wxpython/mapdisp/gprint.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/gprint.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'OnEndPrinting'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "mapdisp.gprint",
            "obj": "MapPrint.OnEndPrinting",
            "line": 38,
            "column": 4,
            "endLine": 38,
            "endColumn": 21,
            "path": "gui/wxpython/mapdisp/gprint.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/gprint.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'OnPreparePrinting'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "mapdisp.gprint",
            "obj": "MapPrint.OnPreparePrinting",
            "line": 41,
            "column": 4,
            "endLine": 41,
            "endColumn": 25,
            "path": "gui/wxpython/mapdisp/gprint.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/gprint.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __next__. Use next built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "mapdisp.main",
            "obj": "LayerList.next",
            "line": 373,
            "column": 15,
            "endLine": 373,
            "endColumn": 30,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mapframe of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.main",
            "obj": "MapApp.CreateMapDisplay",
            "line": 559,
            "column": 8,
            "endLine": 559,
            "endColumn": 30,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapdisp.main",
            "obj": "MapApp.CreateMapDisplay.<lambda>",
            "line": 582,
            "column": 36,
            "endLine": 582,
            "endColumn": 77,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapdisp.main",
            "obj": "MapApp.CreateMapDisplay.<lambda>",
            "line": 583,
            "column": 33,
            "endLine": 583,
            "endColumn": 73,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.main",
            "obj": "",
            "line": 49,
            "column": 0,
            "endLine": 49,
            "endColumn": 22,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.main",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": 55,
            "endColumn": 28,
            "path": "gui/wxpython/mapdisp/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/main.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'value' has been renamed to 'mode' in overriding 'RBShowInStatusbar._setValue' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "mapdisp.properties",
            "obj": "RBShowInStatusbar._setValue",
            "line": 305,
            "column": 4,
            "endLine": 305,
            "endColumn": 17,
            "path": "gui/wxpython/mapdisp/properties.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/properties.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "mapdisp.properties",
            "obj": "MapDisplayPropertiesDialog",
            "line": 328,
            "column": 0,
            "endLine": 328,
            "endColumn": 32,
            "path": "gui/wxpython/mapdisp/properties.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/properties.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'nsres' has been renamed to 'ewres' in overriding 'SbCompRegionExtent._formatRegion' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "mapdisp.statusbar",
            "obj": "SbCompRegionExtent._formatRegion",
            "line": 962,
            "column": 4,
            "endLine": 962,
            "endColumn": 21,
            "path": "gui/wxpython/mapdisp/statusbar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/statusbar.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'ewres' has been renamed to 'nsres' in overriding 'SbCompRegionExtent._formatRegion' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "mapdisp.statusbar",
            "obj": "SbCompRegionExtent._formatRegion",
            "line": 962,
            "column": 4,
            "endLine": 962,
            "endColumn": 21,
            "path": "gui/wxpython/mapdisp/statusbar.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/statusbar.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'GetProgress' is abstract in class 'StandaloneGrassInterface' but is not overridden in child class 'MapdispGrassInterface'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "mapdisp.test_mapdisp",
            "obj": "MapdispGrassInterface",
            "line": 73,
            "column": 0,
            "endLine": 73,
            "endColumn": 27,
            "path": "gui/wxpython/mapdisp/test_mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/test_mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'grass.script' (imported line 56)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "mapdisp.test_mapdisp",
            "obj": "main",
            "line": 359,
            "column": 8,
            "endLine": 359,
            "endColumn": 37,
            "path": "gui/wxpython/mapdisp/test_mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/test_mapdisp.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapdisp.test_mapdisp",
            "obj": "",
            "line": 67,
            "column": 0,
            "endLine": 67,
            "endColumn": 27,
            "path": "gui/wxpython/mapdisp/test_mapdisp.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/test_mapdisp.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.toolbars",
            "obj": "MapToolbar.InsertTool",
            "line": 274,
            "column": 8,
            "endLine": 274,
            "endColumn": 24,
            "path": "gui/wxpython/mapdisp/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.toolbars",
            "obj": "MapToolbar.InsertTool",
            "line": 275,
            "column": 8,
            "endLine": 275,
            "endColumn": 24,
            "path": "gui/wxpython/mapdisp/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.toolbars",
            "obj": "MapToolbar.RemoveTool",
            "line": 283,
            "column": 8,
            "endLine": 283,
            "endColumn": 24,
            "path": "gui/wxpython/mapdisp/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/toolbars.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapdisp.toolbars",
            "obj": "MapToolbar.RemoveTool",
            "line": 284,
            "column": 8,
            "endLine": 284,
            "endColumn": 24,
            "path": "gui/wxpython/mapdisp/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapdisp/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapswipe.dialogs",
            "obj": "",
            "line": 26,
            "column": 0,
            "endLine": 26,
            "endColumn": 30,
            "path": "gui/wxpython/mapswipe/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapswipe.dialogs",
            "obj": "",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 65,
            "path": "gui/wxpython/mapswipe/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "",
            "line": 738,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "",
            "line": 938,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'name'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel.__init__",
            "line": 57,
            "column": 12,
            "endLine": 57,
            "endColumn": 16,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel.__init__.<lambda>",
            "line": 88,
            "column": 48,
            "endLine": 88,
            "endColumn": 81,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel.__init__.<lambda>",
            "line": 89,
            "column": 49,
            "endLine": 89,
            "endColumn": 82,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'SwipeMapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel.AddToolbar",
            "line": 249,
            "column": 4,
            "endLine": 249,
            "endColumn": 18,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method '__init__' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel._saveToFile._onDone.__init__",
            "line": 549,
            "column": 12,
            "endLine": 549,
            "endColumn": 24,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method '__call__' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel._saveToFile._onDone.__call__",
            "line": 552,
            "column": 12,
            "endLine": 552,
            "endColumn": 24,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'process' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel._saveToFile._onDone.process",
            "line": 557,
            "column": 12,
            "endLine": 557,
            "endColumn": 23,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mode of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel._saveToFile._onDone.process",
            "line": 563,
            "column": 19,
            "endLine": 563,
            "endColumn": 29,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel.Query.<lambda>",
            "line": 789,
            "column": 16,
            "endLine": 789,
            "endColumn": 60,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (33/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "SwipeMapPanel",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 19,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 28,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapswipe.frame",
            "obj": "",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 59,
            "path": "gui/wxpython/mapswipe/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/frame.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "mapswipe.mapwindow",
            "obj": "SwipeBufferedWindow.Draw",
            "line": 121,
            "column": 4,
            "endLine": 121,
            "endColumn": 12,
            "path": "gui/wxpython/mapswipe/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapswipe/mapwindow.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'handlers' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "mapwin.base",
            "obj": "MapWindowBase.UnregisterAllHandlers",
            "line": 311,
            "column": 20,
            "endLine": 311,
            "endColumn": 44,
            "path": "gui/wxpython/mapwin/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/base.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'handlers' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "mapwin.base",
            "obj": "MapWindowBase.UnregisterAllHandlers",
            "line": 321,
            "column": 20,
            "endLine": 321,
            "endColumn": 44,
            "path": "gui/wxpython/mapwin/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/base.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2310/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (55/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 23,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'Window' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.__init__",
            "line": 74,
            "column": 4,
            "endLine": 74,
            "endColumn": 16,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 324,
            "column": 4,
            "endLine": 324,
            "endColumn": 12,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'line' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 436,
            "column": 37,
            "endLine": 436,
            "endColumn": 41,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'line' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 436,
            "column": 46,
            "endLine": 436,
            "endColumn": 50,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'line' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 436,
            "column": 55,
            "endLine": 436,
            "endColumn": 59,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'line' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 436,
            "column": 64,
            "endLine": 436,
            "endColumn": 68,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unpacking-non-sequence",
            "message": "Attempting to unpack a non-sequence defined at line 330",
            "messageId": "E0633",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 444,
            "column": 28,
            "endLine": 444,
            "endColumn": 40,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "unpacking-non-sequence",
            "message": "Attempting to unpack a non-sequence defined at line 330",
            "messageId": "E0633",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 449,
            "column": 28,
            "endLine": 449,
            "endColumn": 49,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "warning",
            "symbol": "unbalanced-tuple-unpacking",
            "message": "Possible unbalanced tuple unpacking with sequence defined at line 560: left side has 2 labels, right side has 3 values",
            "messageId": "W0632",
            "confidence": "INFERENCE",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 512,
            "column": 12,
            "endLine": 512,
            "endColumn": 47,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (45/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Draw",
            "line": 324,
            "column": 4,
            "endLine": 324,
            "endColumn": 12,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'begin' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.OnMouseWheel",
            "line": 1488,
            "column": 18,
            "endLine": 1488,
            "endColumn": 23,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'end' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.OnMouseWheel",
            "line": 1488,
            "column": 25,
            "endLine": 1488,
            "endColumn": 28,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"newreg != {}\" can be simplified to \"newreg\", if it is strictly a sequence, as an empty dict is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow.Zoom",
            "line": 1864,
            "column": 11,
            "endLine": 1864,
            "endColumn": 23,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (59/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "BufferedMapWindow",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 23,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "",
            "line": 47,
            "column": 0,
            "endLine": 47,
            "endColumn": 52,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package mapwin are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "",
            "line": 52,
            "column": 0,
            "endLine": 52,
            "endColumn": 39,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 32,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "mapwin.buffered",
            "obj": "",
            "line": 56,
            "column": 4,
            "endLine": 56,
            "endColumn": 34,
            "path": "gui/wxpython/mapwin/buffered.py",
            "absolutePath": "/workspace/grass/gui/wxpython/mapwin/buffered.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2142/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'labels' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "modules.colorrules",
            "obj": "VectorColorTable._createVectorAttrb",
            "line": 1139,
            "column": 65,
            "endLine": 1139,
            "endColumn": 71,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-len",
            "message": "Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty",
            "messageId": "C1802",
            "confidence": "HIGH",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.UpdateDialog",
            "line": 1352,
            "column": 11,
            "endLine": 1352,
            "endColumn": 38,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 2 in 'ColorTable.LoadTable' and is now 1 in overriding 'VectorColorTable.LoadTable' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.LoadTable",
            "line": 1559,
            "column": 4,
            "endLine": 1559,
            "endColumn": 17,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "error",
            "symbol": "bad-string-format-type",
            "message": "Argument 'builtins.NoneType' does not match format type 'f'",
            "messageId": "E1307",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.SetRangeLabel",
            "line": 1684,
            "column": 24,
            "endLine": 1688,
            "endColumn": 17,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "error",
            "symbol": "bad-string-format-type",
            "message": "Argument 'builtins.NoneType' does not match format type 'f'",
            "messageId": "E1307",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.SetRangeLabel",
            "line": 1684,
            "column": 24,
            "endLine": 1688,
            "endColumn": 17,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "error",
            "symbol": "bad-string-format-type",
            "message": "Argument 'builtins.NoneType' does not match format type 'd'",
            "messageId": "E1307",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.SetRangeLabel",
            "line": 1690,
            "column": 24,
            "endLine": 1694,
            "endColumn": 17,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "error",
            "symbol": "bad-string-format-type",
            "message": "Argument 'builtins.NoneType' does not match format type 'd'",
            "messageId": "E1307",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable.SetRangeLabel",
            "line": 1690,
            "column": 24,
            "endLine": 1694,
            "endColumn": 17,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (27/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "VectorColorTable",
            "line": 1053,
            "column": 0,
            "endLine": 1053,
            "endColumn": 22,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "",
            "line": 42,
            "column": 0,
            "endLine": 42,
            "endColumn": 27,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "",
            "line": 43,
            "column": 0,
            "endLine": 43,
            "endColumn": 30,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 37,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.colorrules",
            "obj": "",
            "line": 45,
            "column": 0,
            "endLine": 45,
            "endColumn": 48,
            "path": "gui/wxpython/modules/colorrules.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/colorrules.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GListCtrl.LoadData' and is now 1 in overriding 'CheckListExtension.LoadData' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "modules.extensions",
            "obj": "CheckListExtension.LoadData",
            "line": 549,
            "column": 4,
            "endLine": 549,
            "endColumn": 16,
            "path": "gui/wxpython/modules/extensions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/extensions.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.extensions",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 44,
            "path": "gui/wxpython/modules/extensions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/extensions.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.extensions",
            "obj": "",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 68,
            "path": "gui/wxpython/modules/extensions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/extensions.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "BufferedWindow.Draw",
            "line": 98,
            "column": 4,
            "endLine": 98,
            "endColumn": 12,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "BufferedWindow.Draw",
            "line": 104,
            "column": 16,
            "endLine": 104,
            "endColumn": 30,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "",
            "line": 30,
            "column": 0,
            "endLine": 30,
            "endColumn": 42,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "",
            "line": 31,
            "column": 0,
            "endLine": 31,
            "endColumn": 62,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 28,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.histogram",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 52,
            "path": "gui/wxpython/modules/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/histogram.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "modules.import_export",
            "obj": "GdalOutputDialog.__init__",
            "line": 710,
            "column": 4,
            "endLine": 710,
            "endColumn": 16,
            "path": "gui/wxpython/modules/import_export.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/import_export.py"
        },
        {
            "type": "convention",
            "symbol": "empty-docstring",
            "message": "Empty class docstring",
            "messageId": "C0112",
            "confidence": "HIGH",
            "module": "modules.import_export",
            "obj": "ReprojectionDialog",
            "line": 934,
            "column": 0,
            "endLine": 934,
            "endColumn": 24,
            "path": "gui/wxpython/modules/import_export.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/import_export.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.import_export",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 44,
            "path": "gui/wxpython/modules/import_export.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/import_export.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.import_export",
            "obj": "",
            "line": 32,
            "column": 0,
            "endLine": 32,
            "endColumn": 60,
            "path": "gui/wxpython/modules/import_export.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/import_export.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.import_export",
            "obj": "",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 40,
            "path": "gui/wxpython/modules/import_export.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/import_export.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (34/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "modules.mcalc_builder",
            "obj": "MapCalcFrame",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 18,
            "path": "gui/wxpython/modules/mcalc_builder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/mcalc_builder.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'title' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "modules.mcalc_builder",
            "obj": "MapCalcFrame.__init__",
            "line": 73,
            "column": 53,
            "endLine": 73,
            "endColumn": 58,
            "path": "gui/wxpython/modules/mcalc_builder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/mcalc_builder.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'mark' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "modules.mcalc_builder",
            "obj": "MapCalcFrame.AddMark",
            "line": 530,
            "column": 27,
            "endLine": 530,
            "endColumn": 31,
            "path": "gui/wxpython/modules/mcalc_builder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/mcalc_builder.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "modules.mcalc_builder",
            "obj": "",
            "line": 38,
            "column": 0,
            "endLine": 38,
            "endColumn": 38,
            "path": "gui/wxpython/modules/mcalc_builder.py",
            "absolutePath": "/workspace/grass/gui/wxpython/modules/mcalc_builder.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "nviz.animation",
            "obj": "Animation",
            "line": 25,
            "column": 0,
            "endLine": 25,
            "endColumn": 15,
            "path": "gui/wxpython/nviz/animation.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/animation.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2766/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'Cell2Pixel' is abstract in class 'MapWindowBase' but is not overridden in child class 'GLWindow'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "nviz.mapwindow",
            "obj": "GLWindow",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 14,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (42/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "GLWindow",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 14,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "error",
            "symbol": "bad-string-format-type",
            "message": "Argument 'builtins.bool' does not match format type 'd'",
            "messageId": "E1307",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "GLWindow.UpdateMap",
            "line": 1247,
            "column": 12,
            "endLine": 1248,
            "endColumn": 52,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'errorMsg' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "nviz.mapwindow",
            "obj": "GLWindow._loadRaster",
            "line": 1604,
            "column": 52,
            "endLine": 1604,
            "endColumn": 60,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'nvizType' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "nviz.mapwindow",
            "obj": "GLWindow._loadRaster",
            "line": 1611,
            "column": 50,
            "endLine": 1611,
            "endColumn": 58,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (65/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "GLWindow.NvizCmdCommand",
            "line": 2398,
            "column": 4,
            "endLine": 2398,
            "endColumn": 22,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (60/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "GLWindow.NvizCmdCommand",
            "line": 2398,
            "column": 4,
            "endLine": 2398,
            "endColumn": 22,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (87/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "GLWindow",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 14,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 38,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.mapwindow",
            "obj": "",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 41,
            "path": "gui/wxpython/nviz/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/mapwindow.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'PreferencesBaseDialog.OnSave' and is now 2 in overriding 'NvizPreferencesDialog.OnSave' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "nviz.preferences",
            "obj": "NvizPreferencesDialog.OnSave",
            "line": 743,
            "column": 4,
            "endLine": 743,
            "endColumn": 14,
            "path": "gui/wxpython/nviz/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/preferences.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _gconsole of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "nviz.preferences",
            "obj": "NvizPreferencesDialog.OnSave",
            "line": 754,
            "column": 8,
            "endLine": 754,
            "endColumn": 29,
            "path": "gui/wxpython/nviz/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 2991,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 3471,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (6005/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'useMap' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.OnMapObjUse",
            "line": 3660,
            "column": 65,
            "endLine": 3660,
            "endColumn": 71,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.OnSurfacePosition",
            "line": 4001,
            "column": 12,
            "endLine": 4007,
            "endColumn": 56,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'value' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.OnVolumeCheck",
            "line": 4558,
            "column": 68,
            "endLine": 4558,
            "endColumn": 73,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.OnVolumePosition",
            "line": 4834,
            "column": 12,
            "endLine": 4840,
            "endColumn": 56,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getDecorationSize of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.UpdatePage",
            "line": 5291,
            "column": 25,
            "endLine": 5291,
            "endColumn": 58,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'value' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "nviz.tools",
            "obj": "NvizToolWindow.UpdateVolumePage",
            "line": 5669,
            "column": 33,
            "endLine": 5669,
            "endColumn": 38,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (124/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "NvizToolWindow",
            "line": 84,
            "column": 0,
            "endLine": 84,
            "endColumn": 20,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 39,
            "column": 8,
            "endLine": 39,
            "endColumn": 45,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 50,
            "column": 0,
            "endLine": 50,
            "endColumn": 42,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 52,
            "column": 0,
            "endLine": 52,
            "endColumn": 38,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 53,
            "column": 0,
            "endLine": 59,
            "endColumn": 1,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "nviz.tools",
            "obj": "",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 28,
            "path": "gui/wxpython/nviz/tools.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/tools.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2272/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import ctypes",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 45,
            "column": 4,
            "endLine": 45,
            "endColumn": 24,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 50,
            "column": 4,
            "endLine": 50,
            "endColumn": 31,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.raster3d",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 51,
            "column": 4,
            "endLine": 51,
            "endColumn": 36,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 52,
            "column": 4,
            "endLine": 52,
            "endColumn": 34,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.ogsf",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 53,
            "column": 4,
            "endLine": 53,
            "endColumn": 32,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.nviz",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 54,
            "column": 4,
            "endLine": 54,
            "endColumn": 32,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.raster",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 55,
            "column": 4,
            "endLine": 55,
            "endColumn": 34,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ret' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "nviz.wxnviz",
            "obj": "Nviz.CheckColorTable",
            "line": 1132,
            "column": 11,
            "endLine": 1132,
            "endColumn": 14,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (117/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "Nviz",
            "line": 104,
            "column": 0,
            "endLine": 104,
            "endColumn": 10,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) DEFAULT_MODE, c_buffer, WINFUNCTYPE, py_object, c_short, c_ushort, c_long, c_ulong, c_uint, c_longdouble, c_longlong, c_ulonglong, c_byte, c_char, c_void_p, c_voidp, c_bool, c_wchar_p, c_wchar, create_unicode_buffer, SetPointerType, ARRAY, CDLL, PyDLL, WinDLL, HRESULT, OleDLL, LibraryLoader, cdll, pydll, pythonapi, windll, oledll, GetLastError, WinError, c_size_t, c_ssize_t, memmove, memset, PYFUNCTYPE, cast, string_at, wstring_at, DllGetClassObject, DllCanUnloadNow, c_int8, c_uint8, kind, c_int16, c_int32, c_int64, c_uint16, c_uint32, c_uint64, c_time_t, Union, Structure, Array, RTLD_LOCAL, RTLD_GLOBAL, ArgumentError, SIZEOF_TIME_T, FormatError, sizeof, addressof, alignment, resize, get_errno, set_errno, POINTER, get_last_error, set_last_error, BigEndianStructure, LittleEndianStructure, BigEndianUnion and LittleEndianUnion from wildcard import of ctypes",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "nviz.wxnviz",
            "obj": "",
            "line": 45,
            "column": 4,
            "endLine": 45,
            "endColumn": 24,
            "path": "gui/wxpython/nviz/wxnviz.py",
            "absolutePath": "/workspace/grass/gui/wxpython/nviz/wxnviz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'group' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.g.gui.photo2image",
            "obj": "main",
            "line": 128,
            "column": 14,
            "endLine": 128,
            "endColumn": 19,
            "path": "gui/wxpython/photo2image/g.gui.photo2image.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/g.gui.photo2image.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'raster' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.g.gui.photo2image",
            "obj": "main",
            "line": 129,
            "column": 15,
            "endLine": 129,
            "endColumn": 21,
            "path": "gui/wxpython/photo2image/g.gui.photo2image.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/g.gui.photo2image.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'camera' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.g.gui.photo2image",
            "obj": "main",
            "line": 131,
            "column": 15,
            "endLine": 131,
            "endColumn": 21,
            "path": "gui/wxpython/photo2image/g.gui.photo2image.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/g.gui.photo2image.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'order' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.g.gui.photo2image",
            "obj": "main",
            "line": 132,
            "column": 14,
            "endLine": 132,
            "endColumn": 19,
            "path": "gui/wxpython/photo2image/g.gui.photo2image.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/g.gui.photo2image.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'extension' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.g.gui.photo2image",
            "obj": "main",
            "line": 133,
            "column": 18,
            "endLine": 133,
            "endColumn": 27,
            "path": "gui/wxpython/photo2image/g.gui.photo2image.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/g.gui.photo2image.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2572/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 62,
            "column": 0,
            "endLine": 62,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 63,
            "column": 0,
            "endLine": 63,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 64,
            "column": 0,
            "endLine": 64,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (41/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel",
            "line": 296,
            "column": 0,
            "endLine": 296,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.__init__",
            "line": 302,
            "column": 4,
            "endLine": 302,
            "endColumn": 16,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'storeLine' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.__init__",
            "line": 449,
            "column": 30,
            "endLine": 449,
            "endColumn": 39,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'numberOfFiducial' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.__init__",
            "line": 481,
            "column": 31,
            "endLine": 481,
            "endColumn": 47,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.__init__",
            "line": 564,
            "column": 8,
            "endLine": 564,
            "endColumn": 45,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.__init__",
            "line": 573,
            "column": 8,
            "endLine": 573,
            "endColumn": 45,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __init__. Instantiate class directly.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.InitMapDisplay",
            "line": 633,
            "column": 8,
            "endLine": 633,
            "endColumn": 47,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ret' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel.GetNewExtent",
            "line": 1433,
            "column": 11,
            "endLine": 1433,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (37/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPPanel",
            "line": 296,
            "column": 0,
            "endLine": 296,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "photo2image.ip2i_manager",
            "obj": "GCPList._Create",
            "line": 1689,
            "column": 11,
            "endLine": 1689,
            "endColumn": 12,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.__init__",
            "line": 2006,
            "column": 8,
            "endLine": 2009,
            "endColumn": 11,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.__init__",
            "line": 2015,
            "column": 38,
            "endLine": 2015,
            "endColumn": 55,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.__CreateSymbologyPage",
            "line": 2276,
            "column": 39,
            "endLine": 2276,
            "endColumn": 56,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'cmdlist' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2491,
            "column": 52,
            "endLine": 2491,
            "endColumn": 59,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2504,
            "column": 41,
            "endLine": 2504,
            "endColumn": 58,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "unsupported-assignment-operation",
            "message": "'tgt_map' does not support item assignment",
            "messageId": "E1137",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2513,
            "column": 12,
            "endLine": 2513,
            "endColumn": 19,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2515,
            "column": 15,
            "endLine": 2515,
            "endColumn": 32,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2516,
            "column": 48,
            "endLine": 2516,
            "endColumn": 65,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2530,
            "column": 11,
            "endLine": 2530,
            "endColumn": 28,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2533,
            "column": 16,
            "endLine": 2533,
            "endColumn": 32,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2534,
            "column": 16,
            "endLine": 2534,
            "endColumn": 32,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2541,
            "column": 16,
            "endLine": 2541,
            "endColumn": 32,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.UpdateSettings",
            "line": 2542,
            "column": 16,
            "endLine": 2542,
            "endColumn": 32,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _giface of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "GrSettingsDialog.OnSave",
            "line": 2560,
            "column": 8,
            "endLine": 2560,
            "endColumn": 27,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 60,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_manager",
            "obj": "",
            "line": 47,
            "column": 0,
            "endLine": 57,
            "endColumn": 1,
            "path": "gui/wxpython/photo2image/ip2i_manager.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_manager.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "MapPanel.__init__",
            "line": 41,
            "column": 4,
            "endLine": 41,
            "endColumn": 16,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 1 in 'MapPanelBase.AddToolbar' and is now 2 in overriding 'MapPanel.AddToolbar' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "MapPanel.AddToolbar",
            "line": 224,
            "column": 4,
            "endLine": 224,
            "endColumn": 18,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'win' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "MapPanel.OnErase",
            "line": 417,
            "column": 8,
            "endLine": 417,
            "endColumn": 11,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "MapPanel",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 14,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package mapdisp are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 39,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "photo2image.ip2i_mapdisplay",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 30,
            "path": "gui/wxpython/photo2image/ip2i_mapdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/photo2image/ip2i_mapdisplay.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 1971,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 1984,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (6806/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.utils",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 90,
            "column": 0,
            "endLine": 90,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.instructions",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 91,
            "column": 0,
            "endLine": 91,
            "endColumn": 32,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "error",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.objectType is used in an iterating context",
            "messageId": "E1133",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "PsmapDialog.OnClose",
            "line": 543,
            "column": 24,
            "endLine": 543,
            "endColumn": 39,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 2 in 'PsmapDialog._layout' and is now 1 in overriding 'PageSetupDialog._layout' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "PageSetupDialog._layout",
            "line": 687,
            "column": 4,
            "endLine": 687,
            "endColumn": 15,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (35/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "MapFramePanel",
            "line": 903,
            "column": 0,
            "endLine": 903,
            "endColumn": 19,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.dialogs",
            "obj": "MapFramePanel.OnMap",
            "line": 1230,
            "column": 43,
            "endLine": 1230,
            "endColumn": 46,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.dialogs",
            "obj": "MapFramePanel.OnMap",
            "line": 1242,
            "column": 43,
            "endLine": 1242,
            "endColumn": 46,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.dialogs",
            "obj": "MapFramePanel.OnMap",
            "line": 1251,
            "column": 43,
            "endLine": 1251,
            "endColumn": 46,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (47/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "MapFramePanel.update",
            "line": 1361,
            "column": 4,
            "endLine": 1361,
            "endColumn": 14,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (61/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "VPropertiesDialog",
            "line": 2158,
            "column": 0,
            "endLine": 2158,
            "endColumn": 23,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (38/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "LegendDialog",
            "line": 3344,
            "column": 0,
            "endLine": 3344,
            "endColumn": 18,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "MapinfoDialog._mapinfoPanel",
            "line": 4636,
            "column": 12,
            "endLine": 4636,
            "endColumn": 52,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 48,
            "column": 4,
            "endLine": 48,
            "endColumn": 28,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 40,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 50,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 58,
            "column": 0,
            "endLine": 58,
            "endColumn": 41,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) Rect2DPS, GetMapBounds, ceil, floor, sin, cos and pi from wildcard import of psmap.utils",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 90,
            "column": 0,
            "endLine": 90,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) Instruction, InstructionObject, InitMap, PageSetup, strftime, localtime, cmdlist_to_tuple, GWarning, GetCmdString and wxNewId from wildcard import of psmap.instructions",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "psmap.dialogs",
            "obj": "",
            "line": 91,
            "column": 0,
            "endLine": 91,
            "endColumn": 32,
            "path": "gui/wxpython/psmap/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2755/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.dialogs",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 27,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.instructions",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 49,
            "column": 0,
            "endLine": 49,
            "endColumn": 32,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.utils",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 50,
            "column": 0,
            "endLine": 50,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (26/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "PsMapFrame",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 16,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'id'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "PsMapFrame.DialogDataChanged",
            "line": 1128,
            "column": 12,
            "endLine": 1128,
            "endColumn": 14,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (44/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "PsMapFrame",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 16,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (35/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "PsMapBufferedWindow",
            "line": 1362,
            "column": 0,
            "endLine": 1362,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.frame",
            "obj": "PsMapBufferedWindow.OnLeftUp",
            "line": 1807,
            "column": 31,
            "endLine": 1807,
            "endColumn": 34,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.frame",
            "obj": "PsMapBufferedWindow.OnLeftUp",
            "line": 1817,
            "column": 31,
            "endLine": 1817,
            "endColumn": 34,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "disallowed-name",
            "message": "Disallowed name \"foo\"",
            "messageId": "C0104",
            "confidence": "HIGH",
            "module": "psmap.frame",
            "obj": "PsMapBufferedWindow.OnLeftUp",
            "line": 1825,
            "column": 31,
            "endLine": 1825,
            "endColumn": 34,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (32/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "PsMapBufferedWindow",
            "line": 1362,
            "column": 0,
            "endLine": 1362,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 49,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 50,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 30,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package psmap are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 45,
            "column": 0,
            "endLine": 45,
            "endColumn": 40,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 42,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package psmap are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 27,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, fs, PSMAP_COLORS, TCValidator, PenStyleComboBox, CheckListCtrl, PsmapDialog, MapFramePanel, RasterPanel, VectorPanel, VPropertiesDialog, deepcopy, ListCtrlAutoWidthMixin, Validator, VectorDBInfo, Select, SymbolDialog, BitmapButton, BitmapComboBox, BitmapFromImage, Button, CheckBox, Choice, ColourPickerCtrl, Dialog, DirBrowseButton, ExpandoTextCtrl, FileBrowseButton, FloatSpin, ListBox, ListCtrl, Notebook, OwnerDrawnComboBox, Panel, RadioButton, ScrolledPanel, SpinCtrl, StaticBox, StaticText, TextCtrl, TextEntryDialog, EmptyImage, CheckListCtrlMixin, getRasterType, BBoxAfterRotation, ceil, floor, InstructionObject, MapFrame, Mapinfo, Text, Image, NorthArrow, Point, Line, Rectangle, Scalebar, RasterLegend, VectorLegend, Raster, Vector, VProperties, Labels, strftime, localtime, cmdlist_to_tuple, GWarning, GetCmdString and wxNewId from wildcard import of psmap.dialogs",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "psmap.frame",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 27,
            "path": "gui/wxpython/psmap/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/frame.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2285/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import psmap.utils",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "psmap.instructions",
            "obj": "Instruction.Read",
            "line": 197,
            "column": 12,
            "endLine": 320,
            "endColumn": 35,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (59/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "Instruction.Read",
            "line": 144,
            "column": 4,
            "endLine": 144,
            "endColumn": 12,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'isRegionComment' before assignment",
            "messageId": "E0601",
            "confidence": "INFERENCE",
            "module": "psmap.instructions",
            "obj": "MapFrame.Read",
            "line": 714,
            "column": 23,
            "endLine": 714,
            "endColumn": 38,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'Mapinfo.Read' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "Mapinfo.Read",
            "line": 910,
            "column": 4,
            "endLine": 910,
            "endColumn": 12,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'Raster.Read' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "Raster.Read",
            "line": 1920,
            "column": 4,
            "endLine": 1920,
            "endColumn": 12,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (45/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "VProperties.Read",
            "line": 2142,
            "column": 4,
            "endLine": 2142,
            "endColumn": 12,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) havePILImage, Rect2DPS, convertRGB, AutoAdjust, ComputeSetRegion, floor, sin, cos, pi, PILImage and RunCommand from wildcard import of psmap.utils",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "psmap.instructions",
            "obj": "",
            "line": 48,
            "column": 0,
            "endLine": 48,
            "endColumn": 25,
            "path": "gui/wxpython/psmap/instructions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/instructions.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'x_max' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "psmap.utils",
            "obj": "BBoxAfterRotation",
            "line": 451,
            "column": 25,
            "endLine": 451,
            "endColumn": 30,
            "path": "gui/wxpython/psmap/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/utils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'x_min' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "psmap.utils",
            "obj": "BBoxAfterRotation",
            "line": 451,
            "column": 38,
            "endLine": 451,
            "endColumn": 43,
            "path": "gui/wxpython/psmap/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/utils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'y_max' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "psmap.utils",
            "obj": "BBoxAfterRotation",
            "line": 452,
            "column": 26,
            "endLine": 452,
            "endColumn": 31,
            "path": "gui/wxpython/psmap/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/utils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'y_min' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "psmap.utils",
            "obj": "BBoxAfterRotation",
            "line": 452,
            "column": 39,
            "endLine": 452,
            "endColumn": 44,
            "path": "gui/wxpython/psmap/utils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/psmap/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (27/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "rdigit.controller",
            "obj": "RDigitController",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 22,
            "path": "gui/wxpython/rdigit/controller.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/controller.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-len",
            "message": "Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty",
            "messageId": "C1802",
            "confidence": "INFERENCE",
            "module": "rdigit.controller",
            "obj": "RDigitController.Undo",
            "line": 321,
            "column": 11,
            "endLine": 321,
            "endColumn": 25,
            "path": "gui/wxpython/rdigit/controller.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/controller.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "rdigit.g.gui.rdigit",
            "obj": "main.RDigitMapDisplay.__init__.<lambda>",
            "line": 142,
            "column": 46,
            "endLine": 142,
            "endColumn": 66,
            "path": "gui/wxpython/rdigit/g.gui.rdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/g.gui.rdigit.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rdigit.toolbars",
            "obj": "",
            "line": 21,
            "column": 0,
            "endLine": 21,
            "endColumn": 43,
            "path": "gui/wxpython/rdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rdigit.toolbars",
            "obj": "",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 34,
            "path": "gui/wxpython/rdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rdigit.toolbars",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 60,
            "path": "gui/wxpython/rdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rdigit/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "rlisetup.functions",
            "obj": "SamplingType",
            "line": 14,
            "column": 0,
            "endLine": 14,
            "endColumn": 18,
            "path": "gui/wxpython/rlisetup/functions.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/functions.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "Circle",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 12,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "MaskedArea",
            "line": 50,
            "column": 0,
            "endLine": 50,
            "endColumn": 16,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "RLiSetupMapPanel._rectangleDrawn",
            "line": 436,
            "column": 12,
            "endLine": 436,
            "endColumn": 58,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 21,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 27,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rlisetup.sampling_frame",
            "obj": "",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 30,
            "path": "gui/wxpython/rlisetup/sampling_frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/sampling_frame.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2223/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "rlisetup.wizard",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (33/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "rlisetup.wizard",
            "obj": "RLIWizard",
            "line": 56,
            "column": 0,
            "endLine": 56,
            "endColumn": 15,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'samtype' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "rlisetup.wizard",
            "obj": "RLIWizard.getSamplingType",
            "line": 322,
            "column": 15,
            "endLine": 322,
            "endColumn": 22,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _mgr of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "rlisetup.wizard",
            "obj": "RLIWizard._cleanup",
            "line": 487,
            "column": 16,
            "endLine": 487,
            "endColumn": 34,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _region of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "rlisetup.wizard",
            "obj": "DrawSampleFramePage.OnEnterPage",
            "line": 938,
            "column": 12,
            "endLine": 938,
            "endColumn": 33,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "rlisetup.wizard",
            "obj": "",
            "line": 53,
            "column": 0,
            "endLine": 53,
            "endColumn": 50,
            "path": "gui/wxpython/rlisetup/wizard.py",
            "absolutePath": "/workspace/grass/gui/wxpython/rlisetup/wizard.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "startup.guiutils",
            "obj": "",
            "line": 51,
            "column": 0,
            "endLine": 51,
            "endColumn": 45,
            "path": "gui/wxpython/startup/guiutils.py",
            "absolutePath": "/workspace/grass/gui/wxpython/startup/guiutils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'start_time' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "startup.locdownload",
            "obj": "reporthook",
            "line": 153,
            "column": 29,
            "endLine": 153,
            "endColumn": 39,
            "path": "gui/wxpython/startup/locdownload.py",
            "absolutePath": "/workspace/grass/gui/wxpython/startup/locdownload.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value LOCATIONS (builtins.list) as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "startup.locdownload",
            "obj": "LocationDownloadPanel.__init__",
            "line": 212,
            "column": 4,
            "endLine": 212,
            "endColumn": 16,
            "path": "gui/wxpython/startup/locdownload.py",
            "absolutePath": "/workspace/grass/gui/wxpython/startup/locdownload.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _download_in_progress of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "startup.locdownload",
            "obj": "LocationDownloadDialog.OnCancel",
            "line": 486,
            "column": 11,
            "endLine": 486,
            "endColumn": 43,
            "path": "gui/wxpython/startup/locdownload.py",
            "absolutePath": "/workspace/grass/gui/wxpython/startup/locdownload.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _change_download_btn_label of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "startup.locdownload",
            "obj": "LocationDownloadDialog.OnCancel",
            "line": 502,
            "column": 16,
            "endLine": 502,
            "endColumn": 53,
            "path": "gui/wxpython/startup/locdownload.py",
            "absolutePath": "/workspace/grass/gui/wxpython/startup/locdownload.py"
        },
        {
            "type": "error",
            "symbol": "redundant-keyword-arg",
            "message": "Argument 'message' passed by position and keyword in constructor call",
            "messageId": "E1124",
            "confidence": "UNDEFINED",
            "module": "timeline.frame",
            "obj": "TimelineFrame._getData",
            "line": 185,
            "column": 16,
            "endLine": 188,
            "endColumn": 17,
            "path": "gui/wxpython/timeline/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/timeline/frame.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "timeline.frame",
            "obj": "TimelineFrame._draw3dFigure.<lambda>",
            "line": 280,
            "column": 22,
            "endLine": 280,
            "endColumn": 33,
            "path": "gui/wxpython/timeline/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/timeline/frame.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "timeline.frame",
            "obj": "TimelineFrame._draw2dFigure.<lambda>",
            "line": 329,
            "column": 22,
            "endLine": 329,
            "endColumn": 33,
            "path": "gui/wxpython/timeline/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/timeline/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "timeline.frame",
            "obj": "",
            "line": 54,
            "column": 0,
            "endLine": 54,
            "endColumn": 26,
            "path": "gui/wxpython/timeline/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/timeline/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (68/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "TplotFrame",
            "line": 101,
            "column": 0,
            "endLine": 101,
            "endColumn": 16,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __del__. Use del keyword.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "tplot.frame",
            "obj": "TplotFrame.onClose",
            "line": 146,
            "column": 8,
            "endLine": 146,
            "endColumn": 22,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (11/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "TplotFrame.OnRedraw",
            "line": 1003,
            "column": 4,
            "endLine": 1003,
            "endColumn": 16,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "",
            "line": 52,
            "column": 0,
            "endLine": 52,
            "endColumn": 29,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "",
            "line": 56,
            "column": 0,
            "endLine": 56,
            "endColumn": 26,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 47,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "",
            "line": 64,
            "column": 4,
            "endLine": 64,
            "endColumn": 40,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "tplot.frame",
            "obj": "",
            "line": 69,
            "column": 0,
            "endLine": 69,
            "endColumn": 38,
            "path": "gui/wxpython/tplot/frame.py",
            "absolutePath": "/workspace/grass/gui/wxpython/tplot/frame.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"catList != []\" can be simplified to \"catList\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "vdigit.dialogs",
            "obj": "VDigitCategoryDialog.ApplyChanges",
            "line": 433,
            "column": 19,
            "endLine": 433,
            "endColumn": 32,
            "path": "gui/wxpython/vdigit/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "vdigit.dialogs",
            "obj": "VDigitZBulkDialog",
            "line": 605,
            "column": 0,
            "endLine": 605,
            "endColumn": 23,
            "path": "gui/wxpython/vdigit/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "vdigit.g.gui.vdigit",
            "obj": "main.VDigitMapDisplay.__init__.<lambda>",
            "line": 107,
            "column": 58,
            "endLine": 107,
            "endColumn": 78,
            "path": "gui/wxpython/vdigit/g.gui.vdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/g.gui.vdigit.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "vdigit.main",
            "obj": "IVDigit",
            "line": 27,
            "column": 4,
            "endLine": 27,
            "endColumn": 17,
            "path": "gui/wxpython/vdigit/main.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/main.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (18/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "vdigit.mapwindow",
            "obj": "VDigitWindow._onRightUp",
            "line": 1094,
            "column": 4,
            "endLine": 1094,
            "endColumn": 18,
            "path": "gui/wxpython/vdigit/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (46/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "vdigit.mapwindow",
            "obj": "VDigitWindow._onRightUp",
            "line": 1094,
            "column": 4,
            "endLine": 1094,
            "endColumn": 18,
            "path": "gui/wxpython/vdigit/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/mapwindow.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vdigit.mapwindow",
            "obj": "",
            "line": 26,
            "column": 0,
            "endLine": 26,
            "endColumn": 38,
            "path": "gui/wxpython/vdigit/mapwindow.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/mapwindow.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (30/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "vdigit.preferences",
            "obj": "VDigitSettingsDialog",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 26,
            "path": "gui/wxpython/vdigit/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/preferences.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package gui_core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vdigit.preferences",
            "obj": "",
            "line": 25,
            "column": 0,
            "endLine": 25,
            "endColumn": 86,
            "path": "gui/wxpython/vdigit/preferences.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/preferences.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "vdigit.toolbars",
            "obj": "VDigitToolbar.__init__",
            "line": 37,
            "column": 4,
            "endLine": 37,
            "endColumn": 16,
            "path": "gui/wxpython/vdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/toolbars.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (44/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "vdigit.toolbars",
            "obj": "VDigitToolbar",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 19,
            "path": "gui/wxpython/vdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vdigit.toolbars",
            "obj": "",
            "line": 31,
            "column": 0,
            "endLine": 31,
            "endColumn": 36,
            "path": "gui/wxpython/vdigit/toolbars.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/toolbars.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 368,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 1087,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 1853,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 1892,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2169/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 39,
            "column": 4,
            "endLine": 39,
            "endColumn": 31,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 40,
            "column": 4,
            "endLine": 40,
            "endColumn": 34,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vedit",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 41,
            "column": 4,
            "endLine": 41,
            "endColumn": 33,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.dbmi",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 42,
            "column": 4,
            "endLine": 42,
            "endColumn": 32,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'n_up_lines_old' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.MoveSelectedLines",
            "line": 893,
            "column": 27,
            "endLine": 893,
            "endColumn": 41,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.MoveSelectedLines",
            "line": 902,
            "column": 16,
            "endLine": 902,
            "endColumn": 74,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'n_up_lines_old' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.MoveSelectedVertex",
            "line": 969,
            "column": 27,
            "endLine": 969,
            "endColumn": 41,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'new_areas_cats' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.EditLine",
            "line": 1117,
            "column": 35,
            "endLine": 1117,
            "endColumn": 49,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.CopyLine",
            "line": 1221,
            "column": 4,
            "endLine": 1221,
            "endColumn": 16,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (8/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.CopyCats",
            "line": 1265,
            "column": 8,
            "endLine": 1389,
            "endColumn": 27,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (11/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit.CopyCats",
            "line": 1248,
            "column": 4,
            "endLine": 1248,
            "endColumn": 16,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'n_up_lines_old' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit._ModifyLineVertex",
            "line": 2032,
            "column": 27,
            "endLine": 2032,
            "endColumn": 41,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'old_bboxs' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit._ModifyLineVertex",
            "line": 2045,
            "column": 48,
            "endLine": 2045,
            "endColumn": 57,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'old_areas_cats' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit._ModifyLineVertex",
            "line": 2050,
            "column": 35,
            "endLine": 2050,
            "endColumn": 49,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (39/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "IVDigit",
            "line": 139,
            "column": 0,
            "endLine": 139,
            "endColumn": 13,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdigit",
            "obj": "",
            "line": 39,
            "column": 4,
            "endLine": 39,
            "endColumn": 31,
            "path": "gui/wxpython/vdigit/wxdigit.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdigit.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdisplay",
            "obj": "",
            "line": 829,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/vdigit/wxdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.gis",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdisplay",
            "obj": "",
            "line": 32,
            "column": 4,
            "endLine": 32,
            "endColumn": 31,
            "path": "gui/wxpython/vdigit/wxdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vector",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdisplay",
            "obj": "",
            "line": 33,
            "column": 4,
            "endLine": 33,
            "endColumn": 34,
            "path": "gui/wxpython/vdigit/wxdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdisplay.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import grass.lib.vedit",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "vdigit.wxdisplay",
            "obj": "",
            "line": 34,
            "column": 4,
            "endLine": 34,
            "endColumn": 33,
            "path": "gui/wxpython/vdigit/wxdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdisplay.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'key' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vdigit.wxdisplay",
            "obj": "DisplayDriver._definePen",
            "line": 406,
            "column": 11,
            "endLine": 406,
            "endColumn": 14,
            "path": "gui/wxpython/vdigit/wxdisplay.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vdigit/wxdisplay.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "vnet.dialogs",
            "obj": "VNETDialog._updateInputDbMgrData",
            "line": 643,
            "column": 16,
            "endLine": 650,
            "endColumn": 47,
            "path": "gui/wxpython/vnet/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "vnet.dialogs",
            "obj": "VNETDialog.OnToTreeBtn",
            "line": 684,
            "column": 11,
            "endLine": 684,
            "endColumn": 15,
            "path": "gui/wxpython/vnet/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (26/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "vnet.dialogs",
            "obj": "VNETDialog",
            "line": 82,
            "column": 0,
            "endLine": 82,
            "endColumn": 16,
            "path": "gui/wxpython/vnet/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/dialogs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "vnet.dialogs",
            "obj": "OutputVectorDialog",
            "line": 1665,
            "column": 0,
            "endLine": 1665,
            "endColumn": 24,
            "path": "gui/wxpython/vnet/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _saveAnInputToHist of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "VNETManager.RunAnalysis",
            "line": 140,
            "column": 8,
            "endLine": 140,
            "endColumn": 39,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "error",
            "symbol": "assignment-from-no-return",
            "message": "Assigning result of a function call, where the function has no return",
            "messageId": "E1111",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "VNETManager.RunAnalysis",
            "line": 142,
            "column": 8,
            "endLine": 144,
            "endColumn": 9,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "VNETManager",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 17,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "error",
            "symbol": "unexpected-keyword-arg",
            "message": "Unexpected keyword argument 'field' in function call",
            "messageId": "E1123",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "VNETAnalyses._runTurnsAn",
            "line": 529,
            "column": 20,
            "endLine": 534,
            "endColumn": 21,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'inpMap' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vnet.vnet_core",
            "obj": "VNETHistory._updateHistStepData",
            "line": 946,
            "column": 39,
            "endLine": 946,
            "endColumn": 45,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "error",
            "symbol": "access-member-before-definition",
            "message": "Access to member 'snapPts' before its definition line 1088",
            "messageId": "E0203",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "SnappingNodes.ComputeNodes",
            "line": 1060,
            "column": 16,
            "endLine": 1060,
            "endColumn": 28,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_core",
            "obj": "",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 42,
            "path": "gui/wxpython/vnet/vnet_core.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_core.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'mapName' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "vnet.vnet_data",
            "obj": "VNETAnalysisParameters._getInvalidParams",
            "line": 669,
            "column": 34,
            "endLine": 669,
            "endColumn": 41,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'vectMaps' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "vnet.vnet_data",
            "obj": "VNETAnalysisParameters._getInvalidParams",
            "line": 669,
            "column": 49,
            "endLine": 669,
            "endColumn": 57,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "error",
            "symbol": "invalid-sequence-index",
            "message": "Sequence index is not an int, slice, or instance with __index__",
            "messageId": "E1126",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_data",
            "obj": "VNETAnalysesProperties.__init__",
            "line": 828,
            "column": 16,
            "endLine": 828,
            "endColumn": 63,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "vnet.vnet_data",
            "obj": "History._savePreviousHist",
            "line": 1199,
            "column": 16,
            "endLine": 1204,
            "endColumn": 55,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_data",
            "obj": "",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 42,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package vnet are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "vnet.vnet_data",
            "obj": "",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 44,
            "path": "gui/wxpython/vnet/vnet_data.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/vnet_data.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "vnet.widgets",
            "obj": "PointsList._createCols",
            "line": 150,
            "column": 11,
            "endLine": 150,
            "endColumn": 12,
            "path": "gui/wxpython/vnet/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/widgets.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "vnet.widgets",
            "obj": "PointsList.ResizeColumns",
            "line": 351,
            "column": 4,
            "endLine": 351,
            "endColumn": 21,
            "path": "gui/wxpython/vnet/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/widgets.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "vnet.widgets",
            "obj": "PointsList",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 16,
            "path": "gui/wxpython/vnet/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/vnet/widgets.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (31/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "web_services.dialogs",
            "obj": "WSDialogBase",
            "line": 43,
            "column": 0,
            "endLine": 43,
            "endColumn": 18,
            "path": "gui/wxpython/web_services/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "web_services.dialogs",
            "obj": "WSDialogBase.OnClose",
            "line": 334,
            "column": 8,
            "endLine": 334,
            "endColumn": 26,
            "path": "gui/wxpython/web_services/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/dialogs.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "web_services.widgets",
            "obj": "",
            "line": 438,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "web_services.widgets",
            "obj": "",
            "line": 449,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (33/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "web_services.widgets",
            "obj": "WSPanel",
            "line": 74,
            "column": 0,
            "endLine": 74,
            "endColumn": 13,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'param' before assignment",
            "messageId": "E0601",
            "confidence": "INFERENCE",
            "module": "web_services.widgets",
            "obj": "WSPanel._advancedSettsPage",
            "line": 383,
            "column": 15,
            "endLine": 383,
            "endColumn": 20,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "web_services.widgets",
            "obj": "",
            "line": 35,
            "column": 8,
            "endLine": 35,
            "endColumn": 44,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "web_services.widgets",
            "obj": "",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 28,
            "path": "gui/wxpython/web_services/widgets.py",
            "absolutePath": "/workspace/grass/gui/wxpython/web_services/widgets.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "wxplot.base",
            "obj": "BasePlotFrame.__init__",
            "line": 50,
            "column": 4,
            "endLine": 50,
            "endColumn": 16,
            "path": "gui/wxpython/wxplot/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/base.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getXY of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "wxplot.base",
            "obj": "BasePlotFrame.OnMouseLeftDown",
            "line": 484,
            "column": 63,
            "endLine": 484,
            "endColumn": 81,
            "path": "gui/wxpython/wxplot/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/base.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getXY of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "wxplot.base",
            "obj": "BasePlotFrame.OnMotion",
            "line": 494,
            "column": 16,
            "endLine": 494,
            "endColumn": 34,
            "path": "gui/wxpython/wxplot/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/base.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "wxplot.base",
            "obj": "BasePlotFrame",
            "line": 47,
            "column": 0,
            "endLine": 47,
            "endColumn": 19,
            "path": "gui/wxpython/wxplot/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/base.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package core are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.base",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 27,
            "path": "gui/wxpython/wxplot/base.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/base.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (235/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "wxplot.dialogs",
            "obj": "OptDialog._do_layout",
            "line": 960,
            "column": 4,
            "endLine": 960,
            "endColumn": 18,
            "path": "gui/wxpython/wxplot/dialogs.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/dialogs.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "wxplot.histogram",
            "obj": "HistogramPlotFrame.__init__",
            "line": 34,
            "column": 4,
            "endLine": 34,
            "endColumn": 16,
            "path": "gui/wxpython/wxplot/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/histogram.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'freqflag' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wxplot.histogram",
            "obj": "HistogramPlotFrame.CreateDatalist",
            "line": 191,
            "column": 22,
            "endLine": 191,
            "endColumn": 30,
            "path": "gui/wxpython/wxplot/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.histogram",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 26,
            "path": "gui/wxpython/wxplot/histogram.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/histogram.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wxplot are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.profile",
            "obj": "",
            "line": 30,
            "column": 0,
            "endLine": 30,
            "endColumn": 62,
            "path": "gui/wxpython/wxplot/profile.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/profile.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.profile",
            "obj": "",
            "line": 34,
            "column": 4,
            "endLine": 34,
            "endColumn": 34,
            "path": "gui/wxpython/wxplot/profile.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/profile.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "wxplot.scatter",
            "obj": "ScatterFrame.__init__",
            "line": 35,
            "column": 4,
            "endLine": 35,
            "endColumn": 16,
            "path": "gui/wxpython/wxplot/scatter.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/scatter.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wx are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.scatter",
            "obj": "",
            "line": 23,
            "column": 0,
            "endLine": 23,
            "endColumn": 26,
            "path": "gui/wxpython/wxplot/scatter.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/scatter.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package wxplot are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "wxplot.scatter",
            "obj": "",
            "line": 27,
            "column": 0,
            "endLine": 27,
            "endColumn": 62,
            "path": "gui/wxpython/wxplot/scatter.py",
            "absolutePath": "/workspace/grass/gui/wxpython/wxplot/scatter.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "usage",
            "line": 38,
            "column": 4,
            "endLine": 38,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "usage",
            "line": 44,
            "column": 4,
            "endLine": 44,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "usage",
            "line": 49,
            "column": 4,
            "endLine": 49,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "refactor",
            "symbol": "literal-comparison",
            "message": "In 'i % 8 is 0', use '==' when comparing constant literals not 'is' ('i % 8 == 0')",
            "messageId": "R0123",
            "confidence": "HIGH",
            "module": "create_iwave",
            "obj": "pretty_print",
            "line": 183,
            "column": 11,
            "endLine": 183,
            "endColumn": 21,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "refactor",
            "symbol": "literal-comparison",
            "message": "In 'i is not 0', use '!=' when comparing constant literals not 'is not' ('i != 0')",
            "messageId": "R0123",
            "confidence": "HIGH",
            "module": "create_iwave",
            "obj": "pretty_print",
            "line": 184,
            "column": 15,
            "endLine": 184,
            "endColumn": 25,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "refactor",
            "symbol": "literal-comparison",
            "message": "In 'i is not 1', use '!=' when comparing constant literals not 'is not' ('i != 1')",
            "messageId": "R0123",
            "confidence": "HIGH",
            "module": "create_iwave",
            "obj": "pretty_print",
            "line": 189,
            "column": 15,
            "endLine": 189,
            "endColumn": 25,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "write_cpp",
            "line": 212,
            "column": 4,
            "endLine": 212,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'b' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "create_iwave",
            "obj": "write_cpp",
            "line": 234,
            "column": 45,
            "endLine": 234,
            "endColumn": 46,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "main",
            "line": 341,
            "column": 4,
            "endLine": 341,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "main",
            "line": 351,
            "column": 4,
            "endLine": 351,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "main",
            "line": 379,
            "column": 4,
            "endLine": 379,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "create_iwave",
            "obj": "main",
            "line": 392,
            "column": 4,
            "endLine": 392,
            "endColumn": 9,
            "path": "imagery/i.atcorr/create_iwave.py",
            "absolutePath": "/workspace/grass/imagery/i.atcorr/create_iwave.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass",
            "obj": "f",
            "line": 243,
            "column": 8,
            "endLine": 243,
            "endColumn": 86,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'mapset' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass",
            "obj": "set_mapset",
            "line": 846,
            "column": 38,
            "endLine": 846,
            "endColumn": 44,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass",
            "obj": "lock_mapset",
            "line": 1380,
            "column": 8,
            "endLine": 1380,
            "endColumn": 28,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'script' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass",
            "obj": "run_batch_job",
            "line": 1539,
            "column": 15,
            "endLine": 1539,
            "endColumn": 21,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'fh' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass",
            "obj": "sh_like_startup",
            "line": 1825,
            "column": 16,
            "endLine": 1825,
            "endColumn": 18,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'linesplat' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass",
            "obj": "print_params",
            "line": 1965,
            "column": 31,
            "endLine": 1965,
            "endColumn": 40,
            "path": "lib/init/grass.py",
            "absolutePath": "/workspace/grass/lib/init/grass.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_check",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_check.py",
            "absolutePath": "/workspace/grass/man/build_check.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header1_tmpl, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, cmd2_tmpl, desc1_tmpl, toc, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, moduletopics_tmpl, headertopics_tmpl, headerkeywords_tmpl, headerkey_tmpl, headerpso_tmpl, check_for_desc_override, write_file, try_mkdir, replace_file, copy_file, write_html_header, write_html_cmd_overview, write_html_footer, get_desc, to_title, arch_dist_dir, gisbase, grass_version, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_check",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_check.py",
            "absolutePath": "/workspace/grass/man/build_check.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_rest",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_check_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_check_rest.py",
            "absolutePath": "/workspace/grass/man/build_check_rest.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header2_tmpl, overview_tmpl, footer_tmpl, cmd1_tmpl, cmd2_tmpl, desc1_tmpl, sections, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, check_for_desc_override, write_file, try_mkdir, replace_file, copy_file, write_rest_header, write_rest_cmd_overview, write_rest_footer, get_desc, arch_dist_dir, gisbase, ver and grass_version from wildcard import of build_rest",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_check_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_check_rest.py",
            "absolutePath": "/workspace/grass/man/build_check_rest.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_class",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_class.py",
            "absolutePath": "/workspace/grass/man/build_class.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header1_tmpl, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, cmd2_tmpl, desc1_tmpl, toc, full_index_header, message_tmpl, moduletopics_tmpl, headertopics_tmpl, headerkeywords_tmpl, headerkey_tmpl, headerpso_tmpl, read_file, write_file, try_mkdir, copy_file, write_html_cmd_overview, arch_dist_dir, gisbase, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_class",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_class.py",
            "absolutePath": "/workspace/grass/man/build_class.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "build_class_graphical",
            "obj": "generate_page_for_category",
            "line": 173,
            "column": 8,
            "endLine": 177,
            "endColumn": 37,
            "path": "man/build_class_graphical.py",
            "absolutePath": "/workspace/grass/man/build_class_graphical.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_rest",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_class_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_class_rest.py",
            "absolutePath": "/workspace/grass/man/build_class_rest.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header2_tmpl, overview_tmpl, footer_tmpl, cmd1_tmpl, cmd2_tmpl, desc1_tmpl, sections, full_index_header, message_tmpl, read_file, write_file, try_mkdir, copy_file, write_rest_cmd_overview, arch_dist_dir, gisbase and ver from wildcard import of build_rest",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_class_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_class_rest.py",
            "absolutePath": "/workspace/grass/man/build_class_rest.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_full_index",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_full_index.py",
            "absolutePath": "/workspace/grass/man/build_full_index.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header1_tmpl, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, message_tmpl, moduletopics_tmpl, headertopics_tmpl, headerkeywords_tmpl, headerkey_tmpl, headerpso_tmpl, read_file, write_file, try_mkdir, copy_file, write_html_cmd_overview, arch_dist_dir, gisbase, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_full_index",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_full_index.py",
            "absolutePath": "/workspace/grass/man/build_full_index.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_rest",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_full_index_rest",
            "obj": "",
            "line": 11,
            "column": 0,
            "endLine": 11,
            "endColumn": 24,
            "path": "man/build_full_index_rest.py",
            "absolutePath": "/workspace/grass/man/build_full_index_rest.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header2_tmpl, overview_tmpl, footer_tmpl, cmd1_tmpl, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, message_tmpl, read_file, write_file, try_mkdir, copy_file, write_rest_cmd_overview, arch_dist_dir, gisbase and ver from wildcard import of build_rest",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_full_index_rest",
            "obj": "",
            "line": 11,
            "column": 0,
            "endLine": 11,
            "endColumn": 24,
            "path": "man/build_full_index_rest.py",
            "absolutePath": "/workspace/grass/man/build_full_index_rest.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-boolean-expressions",
            "message": "Too many boolean expressions in if statement (10/8)",
            "messageId": "R0916",
            "confidence": "UNDEFINED",
            "module": "build_html",
            "obj": "html_files",
            "line": 438,
            "column": 12,
            "endLine": 443,
            "endColumn": 79,
            "path": "man/build_html.py",
            "absolutePath": "/workspace/grass/man/build_html.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_index",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_index.py",
            "absolutePath": "/workspace/grass/man/build_index.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header1_tmpl, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, cmd2_tmpl, desc1_tmpl, toc, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, message_tmpl, moduletopics_tmpl, headertopics_tmpl, headerkeywords_tmpl, headerkey_tmpl, headerpso_tmpl, check_for_desc_override, read_file, write_file, try_mkdir, copy_file, html_files, get_desc, to_title, arch_dist_dir, gisbase, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_index",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_index.py",
            "absolutePath": "/workspace/grass/man/build_index.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_rest",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_index_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_index_rest.py",
            "absolutePath": "/workspace/grass/man/build_index_rest.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, header2_tmpl, overview_tmpl, footer_tmpl, cmd1_tmpl, cmd2_tmpl, desc1_tmpl, sections, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, message_tmpl, check_for_desc_override, read_file, write_file, try_mkdir, copy_file, rest_files, get_desc, arch_dist_dir, gisbase and ver from wildcard import of build_rest",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_index_rest",
            "obj": "",
            "line": 12,
            "column": 0,
            "endLine": 12,
            "endColumn": 24,
            "path": "man/build_index_rest.py",
            "absolutePath": "/workspace/grass/man/build_index_rest.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_keywords",
            "obj": "",
            "line": 24,
            "column": 0,
            "endLine": 24,
            "endColumn": 24,
            "path": "man/build_keywords.py",
            "absolutePath": "/workspace/grass/man/build_keywords.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, cmd2_tmpl, desc1_tmpl, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, message_tmpl, moduletopics_tmpl, headertopics_tmpl, headerkey_tmpl, headerpso_tmpl, check_for_desc_override, read_file, write_file, try_mkdir, replace_file, copy_file, html_files, write_html_header, write_html_cmd_overview, get_desc, to_title, arch_dist_dir, html_dir, gisbase, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_keywords",
            "obj": "",
            "line": 24,
            "column": 0,
            "endLine": 24,
            "endColumn": 24,
            "path": "man/build_keywords.py",
            "absolutePath": "/workspace/grass/man/build_keywords.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import build_html",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "build_topics",
            "obj": "",
            "line": 9,
            "column": 0,
            "endLine": 9,
            "endColumn": 24,
            "path": "man/build_topics.py",
            "absolutePath": "/workspace/grass/man/build_topics.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) string, exclude_mods, desc_override, macosx_tmpl, header2_tmpl, overview_tmpl, footer_tmpl, cmd2_tmpl, toc, modclass_intro_tmpl, modclass_tmpl, desc2_tmpl, full_index_header, message_tmpl, headerkeywords_tmpl, headerpso_tmpl, check_for_desc_override, read_file, write_file, try_mkdir, replace_file, copy_file, html_files, write_html_header, write_html_cmd_overview, get_desc, to_title, arch_dist_dir, html_dir, gisbase, grass_version_major, grass_version_minor, grass_mmver, macosx, default_year and datetime from wildcard import of build_html",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "build_topics",
            "obj": "",
            "line": 9,
            "column": 0,
            "endLine": 9,
            "endColumn": 24,
            "path": "man/build_topics.py",
            "absolutePath": "/workspace/grass/man/build_topics.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-set-comprehension",
            "message": "Consider using a set comprehension",
            "messageId": "R1718",
            "confidence": "UNDEFINED",
            "module": "parser_standard_options",
            "obj": "OptTable.__init__",
            "line": 119,
            "column": 30,
            "endLine": 119,
            "endColumn": 85,
            "path": "man/parser_standard_options.py",
            "absolutePath": "/workspace/grass/man/parser_standard_options.py"
        },
        {
            "type": "error",
            "symbol": "unexpected-keyword-arg",
            "message": "Unexpected keyword argument 'proxies' in function call",
            "messageId": "E1123",
            "confidence": "UNDEFINED",
            "module": "parser_standard_options",
            "obj": "",
            "line": 221,
            "column": 40,
            "endLine": 221,
            "endColumn": 71,
            "path": "man/parser_standard_options.py",
            "absolutePath": "/workspace/grass/man/parser_standard_options.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "grass.grassdb.manage",
            "obj": "split_mapset_path",
            "line": 111,
            "column": 8,
            "endLine": 113,
            "endColumn": 9,
            "path": "python/grass/grassdb/manage.py",
            "absolutePath": "/workspace/grass/python/grass/grassdb/manage.py"
        },
        {
            "type": "error",
            "symbol": "unsupported-membership-test",
            "message": "Value 'b_keys' doesn't support membership test",
            "messageId": "E1135",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.checkers",
            "obj": "keyvalue_equals",
            "line": 379,
            "column": 38,
            "endLine": 379,
            "endColumn": 44,
            "path": "python/grass/gunittest/checkers.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/checkers.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'regexp' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.gunittest.checkers",
            "obj": "text_file_md5",
            "line": 652,
            "column": 30,
            "endLine": 652,
            "endColumn": 36,
            "path": "python/grass/gunittest/checkers.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/checkers.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.multireport",
            "obj": "TestResultSummary",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 23,
            "path": "python/grass/gunittest/multireport.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/multireport.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for function call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.multirunner",
            "obj": "main",
            "line": 148,
            "column": 4,
            "endLine": 148,
            "endColumn": 51,
            "path": "python/grass/gunittest/multirunner.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/multirunner.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'tracurl'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "get_source_url",
            "line": 112,
            "column": 4,
            "endLine": 112,
            "endColumn": 11,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesHtmlReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesHtmlReporter.end_file_test",
            "line": 663,
            "column": 4,
            "endLine": 663,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesHtmlReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesHtmlReporter.end_file_test",
            "line": 663,
            "column": 4,
            "endLine": 663,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesKeyValueReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesKeyValueReporter.end_file_test",
            "line": 914,
            "column": 4,
            "endLine": 914,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesKeyValueReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesKeyValueReporter.end_file_test",
            "line": 914,
            "column": 4,
            "endLine": 914,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'start'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.start",
            "line": 980,
            "column": 4,
            "endLine": 980,
            "endColumn": 13,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesTextReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.end_file_test",
            "line": 1013,
            "column": 4,
            "endLine": 1013,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesTextReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.end_file_test",
            "line": 1013,
            "column": 4,
            "endLine": 1013,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "test_error",
            "obj": "TestError.test_something",
            "line": 10,
            "column": 8,
            "endLine": 10,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_error",
            "obj": "TestError.test_something",
            "line": 10,
            "column": 8,
            "endLine": 10,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_error",
            "obj": "TestErrorSetUp.test_something",
            "line": 20,
            "column": 8,
            "endLine": 20,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_error",
            "obj": "TestErrorTearDown.test_something",
            "line": 30,
            "column": 8,
            "endLine": 30,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_error",
            "obj": "TestErrorClassSetUp.test_something",
            "line": 41,
            "column": 8,
            "endLine": 41,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_error",
            "obj": "TestErrorClassTearDown.test_something",
            "line": 52,
            "column": 8,
            "endLine": 52,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_error.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertFalse with constant value 'This should not be called if we are testing failed import. It is all right if this fails and the wrong import is commented.'",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_import_error",
            "obj": "TestNeverCalled.test_something",
            "line": 13,
            "column": 8,
            "endLine": 18,
            "endColumn": 9,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_import_error.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_errors/testsuite/test_import_error.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_segfaut",
            "obj": "TestSegfault.test_something",
            "line": 17,
            "column": 8,
            "endLine": 17,
            "endColumn": 9,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_exiting/testsuite/test_segfaut.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_errors/subsubmodule_exiting/testsuite/test_segfaut.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value False",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_fail",
            "obj": "TestFail.test_something",
            "line": 9,
            "column": 8,
            "endLine": 9,
            "endColumn": 30,
            "path": "python/grass/gunittest/testsuite/data/samplecode/submodule_test_fail/testsuite/test_fail.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/submodule_test_fail/testsuite/test_fail.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_good_and_bad",
            "obj": "TestSuccessAndFailure.test_something",
            "line": 9,
            "column": 8,
            "endLine": 9,
            "endColumn": 78,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_good_and_bad",
            "obj": "TestSuccessAndFailure.test_something_else",
            "line": 12,
            "column": 8,
            "endLine": 12,
            "endColumn": 78,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value False",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_good_and_bad",
            "obj": "TestSuccessAndFailure.test_something_failing",
            "line": 15,
            "column": 8,
            "endLine": 15,
            "endColumn": 70,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "test_good_and_bad",
            "obj": "TestSuccessAndFailure.test_something_erroring",
            "line": 19,
            "column": 8,
            "endLine": 19,
            "endColumn": 78,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_good_and_bad",
            "obj": "TestSuccessAndFailure.test_something_erroring",
            "line": 19,
            "column": 8,
            "endLine": 19,
            "endColumn": 78,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_good_and_bad.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_python_unittest",
            "obj": "TestUnittestSuccessVerboseSetUp.test_something",
            "line": 14,
            "column": 8,
            "endLine": 14,
            "endColumn": 57,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value False",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_python_unittest",
            "obj": "TestUnittestSuccessVerboseSetUp.test_something_failing",
            "line": 17,
            "column": 8,
            "endLine": 17,
            "endColumn": 54,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_python_unittest",
            "obj": "TestUnittestSuccessVerboseClassSetUp.test_something",
            "line": 32,
            "column": 8,
            "endLine": 32,
            "endColumn": 57,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value False",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_python_unittest",
            "obj": "TestUnittestSuccessVerboseClassSetUp.test_something_failing",
            "line": 35,
            "column": 8,
            "endLine": 35,
            "endColumn": 54,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_python_unittest.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_success",
            "obj": "TestSuccessVerboseSetUp.test_something",
            "line": 15,
            "column": 8,
            "endLine": 15,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_success.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_success.py"
        },
        {
            "type": "warning",
            "symbol": "redundant-unittest-assert",
            "message": "Redundant use of assertTrue with constant value True",
            "messageId": "W1503",
            "confidence": "UNDEFINED",
            "module": "test_success",
            "obj": "TestSuccessVerboseClassSetUp.test_something",
            "line": 30,
            "column": 8,
            "endLine": 30,
            "endColumn": 29,
            "path": "python/grass/gunittest/testsuite/data/samplecode/testsuite/test_success.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/testsuite/data/samplecode/testsuite/test_success.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2gif",
            "obj": "GifWriter.getAppExt",
            "line": 216,
            "column": 11,
            "endLine": 216,
            "endColumn": 15,
            "path": "python/grass/imaging/images2gif.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2gif.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2gif",
            "obj": "GifWriter.writeGifToFile",
            "line": 445,
            "column": 15,
            "endLine": 445,
            "endColumn": 19,
            "path": "python/grass/imaging/images2gif.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2gif.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'ProcessTag' is abstract in class 'Tag' but is not overridden in child class 'ControlTag'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "ControlTag",
            "line": 456,
            "column": 0,
            "endLine": 456,
            "endColumn": 16,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'ControlTag' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "SetBackgroundTag.__init__",
            "line": 482,
            "column": 4,
            "endLine": 482,
            "endColumn": 16,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'ProcessTag' is abstract in class 'Tag' but is not overridden in child class 'DefinitionTag'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "DefinitionTag",
            "line": 526,
            "column": 0,
            "endLine": 526,
            "endColumn": 19,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.imaging.images2swf",
            "obj": "writeSwf",
            "line": 832,
            "column": 4,
            "endLine": 833,
            "endColumn": 13,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for 'disable', expected a valid pylint message and got 'redefined-variable-type'",
            "messageId": "W0012",
            "confidence": "HIGH",
            "module": "grass.imaging.operations",
            "obj": "",
            "line": 129,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/imaging/operations.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/operations.py"
        },
        {
            "type": "refactor",
            "symbol": "useless-option-value",
            "message": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
            "messageId": "R0022",
            "confidence": "HIGH",
            "module": "grass.jupyter.setup",
            "obj": "",
            "line": 75,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/jupyter/setup.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/setup.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _labels of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "seriesmap_test",
            "obj": "test_default_init",
            "line": 23,
            "column": 11,
            "endLine": 23,
            "endColumn": 22,
            "path": "python/grass/jupyter/tests/seriesmap_test.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/tests/seriesmap_test.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _filename of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "map_test",
            "obj": "TestMap.test_defaults",
            "line": 80,
            "column": 30,
            "endLine": 80,
            "endColumn": 54,
            "path": "python/grass/jupyter/testsuite/map_test.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/testsuite/map_test.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'dates' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.jupyter.timeseriesmap",
            "obj": "collect_layers",
            "line": 102,
            "column": 18,
            "endLine": 102,
            "endColumn": 23,
            "path": "python/grass/jupyter/timeseriesmap.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/timeseriesmap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "_Any",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 10,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "_Anonymous",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 16,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of send function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "send",
            "line": 306,
            "column": 0,
            "endLine": 306,
            "endColumn": 8,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of sendExact function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "sendExact",
            "line": 351,
            "column": 0,
            "endLine": 351,
            "endColumn": 13,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of sendRobust function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.robust",
            "obj": "sendRobust",
            "line": 7,
            "column": 0,
            "endLine": 7,
            "endColumn": 14,
            "path": "python/grass/pydispatch/robust.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/robust.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.robustapply",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pydispatch/robustapply.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/robustapply.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __new__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref.__new__",
            "line": 75,
            "column": 4,
            "endLine": 75,
            "endColumn": 15,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _allInstances of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref.__init__.remove",
            "line": 118,
            "column": 20,
            "endLine": 118,
            "endColumn": 48,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "refactor",
            "symbol": "no-classmethod-decorator",
            "message": "Consider using a decorator instead of calling classmethod",
            "messageId": "R0202",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref",
            "line": 150,
            "column": 4,
            "endLine": 150,
            "endColumn": 16,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'getenv' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "grass.pygrass.gis",
            "obj": "_check_raise",
            "line": 76,
            "column": 8,
            "endLine": 76,
            "endColumn": 46,
            "path": "python/grass/pygrass/gis/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.gis.region",
            "obj": "Region.items",
            "line": 373,
            "column": 20,
            "endLine": 373,
            "endColumn": 44,
            "path": "python/grass/pygrass/gis/region.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/region.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.gis.region",
            "obj": "",
            "line": 678,
            "column": 4,
            "endLine": 678,
            "endColumn": 51,
            "path": "python/grass/pygrass/gis/region.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/region.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.messages",
            "obj": "get_msgr",
            "line": 336,
            "column": 0,
            "endLine": 336,
            "endColumn": 12,
            "path": "python/grass/pygrass/messages/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/messages/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of get_msgr function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.messages",
            "obj": "get_msgr",
            "line": 336,
            "column": 0,
            "endLine": 336,
            "endColumn": 12,
            "path": "python/grass/pygrass/messages/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/messages/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "read_gisrc",
            "line": 125,
            "column": 14,
            "endLine": 127,
            "endColumn": 9,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "copy_groups",
            "line": 186,
            "column": 9,
            "endLine": 186,
            "endColumn": 44,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "cmd_exe",
            "line": 379,
            "column": 12,
            "endLine": 379,
            "endColumn": 54,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (16/15)",
            "messageId": "R0913",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.__init__",
            "line": 445,
            "column": 4,
            "endLine": 445,
            "endColumn": 16,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.__init__",
            "line": 445,
            "column": 4,
            "endLine": 445,
            "endColumn": 16,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.get_works",
            "line": 606,
            "column": 23,
            "endLine": 606,
            "endColumn": 74,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'rrasts' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.modules.grid.patch",
            "obj": "rpatch_map",
            "line": 103,
            "column": 12,
            "endLine": 103,
            "endColumn": 19,
            "path": "python/grass/pygrass/modules/grid/patch.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/patch.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.env",
            "obj": "get_env",
            "line": 17,
            "column": 14,
            "endLine": 22,
            "endColumn": 9,
            "path": "python/grass/pygrass/modules/interface/env.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/env.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.flag",
            "obj": "Flag.__init__",
            "line": 30,
            "column": 12,
            "endLine": 30,
            "endColumn": 84,
            "path": "python/grass/pygrass/modules/interface/flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/flag.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.flag",
            "obj": "Flag.__init__",
            "line": 35,
            "column": 33,
            "endLine": 35,
            "endColumn": 78,
            "path": "python/grass/pygrass/modules/interface/flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/flag.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 165,
            "column": 24,
            "endLine": 165,
            "endColumn": 67,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 166,
            "column": 24,
            "endLine": 166,
            "endColumn": 67,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'not test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 219,
            "column": 25,
            "endLine": 219,
            "endColumn": 76,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'keydescvals' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__doc__",
            "line": 356,
            "column": 26,
            "endLine": 356,
            "endColumn": 37,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "test_flag",
            "obj": "TestFlag.test_bool",
            "line": 42,
            "column": 24,
            "endLine": 42,
            "endColumn": 47,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_flag.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "test_flag",
            "obj": "TestFlag.test_bool",
            "line": 44,
            "column": 25,
            "endLine": 44,
            "endColumn": 48,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_flag.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_float_double",
            "line": 490,
            "column": 12,
            "endLine": 490,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_float_double",
            "line": 491,
            "column": 12,
            "endLine": 491,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_float_double",
            "line": 493,
            "column": 12,
            "endLine": 493,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_float_double",
            "line": 494,
            "column": 12,
            "endLine": 494,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 508,
            "column": 12,
            "endLine": 508,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 511,
            "column": 12,
            "endLine": 511,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 513,
            "column": 12,
            "endLine": 513,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 516,
            "column": 12,
            "endLine": 516,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 518,
            "column": 12,
            "endLine": 518,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 519,
            "column": 12,
            "endLine": 519,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 521,
            "column": 12,
            "endLine": 521,
            "endColumn": 24,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_float_double",
            "line": 522,
            "column": 12,
            "endLine": 522,
            "endColumn": 27,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_string",
            "line": 530,
            "column": 8,
            "endLine": 530,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_single_string",
            "line": 531,
            "column": 8,
            "endLine": 531,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_strings",
            "line": 539,
            "column": 8,
            "endLine": 539,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_strings",
            "line": 540,
            "column": 8,
            "endLine": 540,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_strings",
            "line": 542,
            "column": 8,
            "endLine": 542,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_multiple_strings",
            "line": 545,
            "column": 8,
            "endLine": 545,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 559,
            "column": 8,
            "endLine": 559,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 562,
            "column": 8,
            "endLine": 562,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 564,
            "column": 8,
            "endLine": 564,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 565,
            "column": 8,
            "endLine": 565,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _value of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 567,
            "column": 8,
            "endLine": 567,
            "endColumn": 20,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _rawvalue of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_parameter",
            "obj": "TestParameterGetBash.test_keydescvalues",
            "line": 568,
            "column": 8,
            "endLine": 568,
            "endColumn": 23,
            "path": "python/grass/pygrass/modules/interface/testsuite/test_parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/testsuite/test_parameter.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattr__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.modules.interface.typedict",
            "obj": "TypeDict.used",
            "line": 67,
            "column": 15,
            "endLine": 67,
            "endColumn": 36,
            "path": "python/grass/pygrass/modules/interface/typedict.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/typedict.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattr__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.modules.interface.typedict",
            "obj": "TypeDict.used",
            "line": 68,
            "column": 32,
            "endLine": 68,
            "endColumn": 53,
            "path": "python/grass/pygrass/modules/interface/typedict.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/typedict.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.raster",
            "obj": "RasterRow.__init__",
            "line": 133,
            "column": 4,
            "endLine": 133,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "RasterRow.__init__",
            "line": 133,
            "column": 4,
            "endLine": 133,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "RasterSegment.__init__",
            "line": 308,
            "column": 4,
            "endLine": 308,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "",
            "line": 755,
            "column": 4,
            "endLine": 755,
            "endColumn": 51,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "Info.items",
            "line": 250,
            "column": 20,
            "endLine": 250,
            "endColumn": 44,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.__init__",
            "line": 273,
            "column": 4,
            "endLine": 273,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.exist",
            "line": 435,
            "column": 23,
            "endLine": 435,
            "endColumn": 48,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.is_open",
            "line": 448,
            "column": 15,
            "endLine": 448,
            "endColumn": 72,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.set_region_from_rast",
            "line": 510,
            "column": 12,
            "endLine": 510,
            "endColumn": 17,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.set_region",
            "line": 529,
            "column": 12,
            "endLine": 529,
            "endColumn": 17,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.read_cats",
            "line": 584,
            "column": 8,
            "endLine": 584,
            "endColumn": 28,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.write_cats",
            "line": 589,
            "column": 8,
            "endLine": 589,
            "endColumn": 29,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase",
            "line": 259,
            "column": 0,
            "endLine": 259,
            "endColumn": 24,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "",
            "line": 637,
            "column": 4,
            "endLine": 637,
            "endColumn": 51,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'obj' has been renamed to 'out_arr' in overriding 'Buffer.__array_wrap__' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.buffer",
            "obj": "Buffer.__array_wrap__",
            "line": 47,
            "column": 4,
            "endLine": 47,
            "endColumn": 22,
            "path": "python/grass/pygrass/raster/buffer.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/buffer.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for unbound method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.buffer",
            "obj": "Buffer.__array_wrap__",
            "line": 55,
            "column": 15,
            "endLine": 55,
            "endColumn": 64,
            "path": "python/grass/pygrass/raster/buffer.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/buffer.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.__init__",
            "line": 56,
            "column": 4,
            "endLine": 56,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getitem__. Access item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.get_cat",
            "line": 198,
            "column": 15,
            "endLine": 198,
            "endColumn": 38,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.set_cat",
            "line": 203,
            "column": 21,
            "endLine": 203,
            "endColumn": 35,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __setitem__. Set item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.set_cat",
            "line": 204,
            "column": 12,
            "endLine": 204,
            "endColumn": 42,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category._write_cats",
            "line": 223,
            "column": 19,
            "endLine": 223,
            "endColumn": 34,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.ncats",
            "line": 275,
            "column": 15,
            "endLine": 275,
            "endColumn": 29,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.write_rules",
            "line": 330,
            "column": 23,
            "endLine": 330,
            "endColumn": 38,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package grass are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "test_numpy",
            "obj": "",
            "line": 10,
            "column": 0,
            "endLine": 10,
            "endColumn": 70,
            "path": "python/grass/pygrass/raster/testsuite/test_numpy.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_numpy.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_pygrass_raster",
            "obj": "RasterRowTestCase.test_row_range",
            "line": 84,
            "column": 12,
            "endLine": 84,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/testsuite/test_pygrass_raster.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_pygrass_raster.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_pygrass_raster",
            "obj": "RasterRowTestCase.test_row_range",
            "line": 88,
            "column": 12,
            "endLine": 88,
            "endColumn": 19,
            "path": "python/grass/pygrass/raster/testsuite/test_pygrass_raster.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_pygrass_raster.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import PyQt4.QtCore",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "test_raster_img",
            "obj": "",
            "line": 13,
            "column": 4,
            "endLine": 13,
            "endColumn": 30,
            "path": "python/grass/pygrass/raster/testsuite/test_raster_img.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_raster_img.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import PyQt4.QtGui",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "test_raster_img",
            "obj": "",
            "line": 14,
            "column": 4,
            "endLine": 14,
            "endColumn": 29,
            "path": "python/grass/pygrass/raster/testsuite/test_raster_img.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_raster_img.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_raster_region",
            "obj": "RasterRowRegionTestCase.test_resampling_2",
            "line": 68,
            "column": 8,
            "endLine": 77,
            "endColumn": 11,
            "path": "python/grass/pygrass/raster/testsuite/test_raster_region.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/testsuite/test_raster_region.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc",
            "obj": "RPCDefs",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 13,
            "path": "python/grass/pygrass/rpc/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc",
            "obj": "",
            "line": 479,
            "column": 4,
            "endLine": 479,
            "endColumn": 45,
            "path": "python/grass/pygrass/rpc/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.rpc.base",
            "obj": "dummy_server",
            "line": 40,
            "column": 12,
            "endLine": 40,
            "endColumn": 79,
            "path": "python/grass/pygrass/rpc/base.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/base.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc.base",
            "obj": "RPCServerBase._check_restart_server",
            "line": 156,
            "column": 12,
            "endLine": 158,
            "endColumn": 13,
            "path": "python/grass/pygrass/rpc/base.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/base.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.tests.benchmark",
            "obj": "",
            "line": 7,
            "column": 0,
            "endLine": 7,
            "endColumn": 15,
            "path": "python/grass/pygrass/tests/benchmark.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/benchmark.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'loc' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.tests.benchmark",
            "obj": "get_testdict",
            "line": 326,
            "column": 52,
            "endLine": 326,
            "endColumn": 55,
            "path": "python/grass/pygrass/tests/benchmark.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/benchmark.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.tests.set_mapset",
            "obj": "",
            "line": 10,
            "column": 0,
            "endLine": 10,
            "endColumn": 15,
            "path": "python/grass/pygrass/tests/set_mapset.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/set_mapset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'result' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.utils",
            "obj": "get_raster_for_points",
            "line": 337,
            "column": 16,
            "endLine": 337,
            "endColumn": 22,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "table_exist",
            "line": 440,
            "column": 11,
            "endLine": 440,
            "endColumn": 44,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "import-self",
            "message": "Module import itself",
            "messageId": "W0406",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "",
            "line": 598,
            "column": 4,
            "endLine": 598,
            "endColumn": 35,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "",
            "line": 607,
            "column": 4,
            "endLine": 607,
            "endColumn": 51,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "Vector.__init__",
            "line": 62,
            "column": 4,
            "endLine": 62,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __next__. Use next built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector",
            "obj": "Vector.next",
            "line": 111,
            "column": 15,
            "endLine": 111,
            "endColumn": 30,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "Vector.has_color_table",
            "line": 261,
            "column": 15,
            "endLine": 261,
            "endColumn": 46,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "VectorTopo.__init__",
            "line": 290,
            "column": 4,
            "endLine": 290,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "",
            "line": 977,
            "column": 4,
            "endLine": 977,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.__init__",
            "line": 74,
            "column": 4,
            "endLine": 74,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.exist",
            "line": 303,
            "column": 23,
            "endLine": 303,
            "endColumn": 48,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'openvect' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.open",
            "line": 413,
            "column": 11,
            "endLine": 413,
            "endColumn": 19,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "Bbox.items",
            "line": 142,
            "column": 20,
            "endLine": 142,
            "endColumn": 44,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "BoxList.append",
            "line": 220,
            "column": 15,
            "endLine": 220,
            "endColumn": 29,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "Ilist.append",
            "line": 342,
            "column": 12,
            "endLine": 342,
            "endColumn": 17,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "PointFinder.__init__",
            "line": 51,
            "column": 4,
            "endLine": 51,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "BboxFinder.__init__",
            "line": 400,
            "column": 4,
            "endLine": 400,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "PolygonFinder.__init__",
            "line": 668,
            "column": 4,
            "endLine": 668,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.find",
            "obj": "",
            "line": 685,
            "column": 4,
            "endLine": 685,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Point.__init__",
            "line": 462,
            "column": 24,
            "endLine": 462,
            "endColumn": 52,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getitem__. Access item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.pop",
            "line": 964,
            "column": 14,
            "endLine": 964,
            "endColumn": 36,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.remove",
            "line": 1034,
            "column": 37,
            "endLine": 1034,
            "endColumn": 52,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.to_list",
            "line": 1092,
            "column": 40,
            "endLine": 1092,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.to_wkt_p",
            "line": 1120,
            "column": 27,
            "endLine": 1120,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line",
            "line": 629,
            "column": 0,
            "endLine": 629,
            "endColumn": 10,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Node.to_wkb",
            "line": 1313,
            "column": 8,
            "endLine": 1313,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Isle.to_wkb",
            "line": 1526,
            "column": 8,
            "endLine": 1526,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Isles.isles_ids",
            "line": 1599,
            "column": 27,
            "endLine": 1599,
            "endColumn": 41,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "c_read_next_line",
            "line": 1882,
            "column": 8,
            "endLine": 1882,
            "endColumn": 13,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "",
            "line": 1974,
            "column": 4,
            "endLine": 1974,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.table",
            "obj": "Columns.__setitem__",
            "line": 220,
            "column": 8,
            "endLine": 220,
            "endColumn": 31,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.table",
            "obj": "Columns.update_odict",
            "line": 300,
            "column": 14,
            "endLine": 300,
            "endColumn": 28,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.table",
            "obj": "",
            "line": 1296,
            "column": 4,
            "endLine": 1296,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _select of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_select",
            "line": 27,
            "column": 25,
            "endLine": 27,
            "endColumn": 54,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _select of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_select",
            "line": 29,
            "column": 12,
            "endLine": 29,
            "endColumn": 49,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _select of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_select",
            "line": 32,
            "column": 12,
            "endLine": 32,
            "endColumn": 61,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _where of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_where",
            "line": 39,
            "column": 12,
            "endLine": 39,
            "endColumn": 53,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _orderby of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_order_by",
            "line": 44,
            "column": 25,
            "endLine": 44,
            "endColumn": 65,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _orderby of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_order_by",
            "line": 46,
            "column": 12,
            "endLine": 46,
            "endColumn": 64,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _limit of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_limit",
            "line": 52,
            "column": 25,
            "endLine": 52,
            "endColumn": 54,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _groupby of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_group_by",
            "line": 58,
            "column": 25,
            "endLine": 58,
            "endColumn": 65,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _groupby of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_group_by",
            "line": 60,
            "column": 12,
            "endLine": 60,
            "endColumn": 64,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _select of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "test_filters",
            "obj": "FiltersTestCase.test_get_sql",
            "line": 69,
            "column": 8,
            "endLine": 69,
            "endColumn": 28,
            "path": "python/grass/pygrass/vector/testsuite/test_filters.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_filters.py"
        },
        {
            "type": "refactor",
            "symbol": "comparison-with-itself",
            "message": "Redundant comparison - point0 == point0",
            "messageId": "R0124",
            "confidence": "UNDEFINED",
            "module": "test_geometry",
            "obj": "PointTestCase.test_eq",
            "line": 89,
            "column": 24,
            "endLine": 89,
            "endColumn": 40,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_geometry",
            "obj": "LineTestCase.tearDownClass",
            "line": 124,
            "column": 8,
            "endLine": 124,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_geometry",
            "obj": "LineTestCase.test_getitem",
            "line": 143,
            "column": 12,
            "endLine": 143,
            "endColumn": 19,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_geometry",
            "obj": "NodeTestCase.tearDownClass",
            "line": 214,
            "column": 8,
            "endLine": 214,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_geometry",
            "obj": "AreaTestCase.tearDownClass",
            "line": 271,
            "column": 8,
            "endLine": 271,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_geometry_attrs",
            "obj": "GeometryAttrsTestCase.tearDownClass",
            "line": 43,
            "column": 8,
            "endLine": 43,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry_attrs.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry_attrs.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_geometry_attrs",
            "obj": "GeometryAttrsTestCase.test_getitem",
            "line": 53,
            "column": 12,
            "endLine": 53,
            "endColumn": 50,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry_attrs.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry_attrs.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __setitem__. Set item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "test_geometry_attrs",
            "obj": "GeometryAttrsTestCase.test_setitem",
            "line": 63,
            "column": 8,
            "endLine": 63,
            "endColumn": 47,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry_attrs.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry_attrs.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __setitem__. Set item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "test_geometry_attrs",
            "obj": "GeometryAttrsTestCase.test_setitem",
            "line": 65,
            "column": 8,
            "endLine": 65,
            "endColumn": 49,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry_attrs.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry_attrs.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __setitem__. Set item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "test_geometry_attrs",
            "obj": "GeometryAttrsTestCase.test_setitem",
            "line": 67,
            "column": 8,
            "endLine": 67,
            "endColumn": 59,
            "path": "python/grass/pygrass/vector/testsuite/test_geometry_attrs.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_geometry_attrs.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'utils' (imported line 12)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "test_pygrass_vector_doctests",
            "obj": "load_tests",
            "line": 36,
            "column": 4,
            "endLine": 36,
            "endColumn": 35,
            "path": "python/grass/pygrass/vector/testsuite/test_pygrass_vector_doctests.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_pygrass_vector_doctests.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "test_table",
            "obj": "<lambda>",
            "line": 25,
            "column": 12,
            "endLine": 25,
            "endColumn": 39,
            "path": "python/grass/pygrass/vector/testsuite/test_table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_table.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'randstr' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "test_table",
            "obj": "<lambda>",
            "line": 26,
            "column": 32,
            "endLine": 26,
            "endColumn": 39,
            "path": "python/grass/pygrass/vector/testsuite/test_table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_table.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_vector",
            "obj": "VectorTopoTestCase.tearDownClass",
            "line": 33,
            "column": 8,
            "endLine": 33,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/testsuite/test_vector.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_vector.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "test_vector",
            "obj": "VectorTopoTestCase.test_getitem_raise",
            "line": 63,
            "column": 16,
            "endLine": 63,
            "endColumn": 29,
            "path": "python/grass/pygrass/vector/testsuite/test_vector.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/testsuite/test_vector.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2060/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.script.core",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ps' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.script.core",
            "obj": "create_project",
            "line": 1872,
            "column": 16,
            "endLine": 1872,
            "endColumn": 18,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "warning",
            "symbol": "duplicate-key",
            "message": "Duplicate key 'map' in dictionary",
            "messageId": "W0109",
            "confidence": "UNDEFINED",
            "module": "grass.script.raster",
            "obj": "raster_history",
            "line": 68,
            "column": 14,
            "endLine": 68,
            "endColumn": 38,
            "path": "python/grass/script/raster.py",
            "absolutePath": "/workspace/grass/python/grass/script/raster.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _create_location_xy of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass_script_core_location_test",
            "obj": "create_and_get_srid",
            "line": 31,
            "column": 4,
            "endLine": 31,
            "endColumn": 31,
            "path": "python/grass/script/tests/grass_script_core_location_test.py",
            "absolutePath": "/workspace/grass/python/grass/script/tests/grass_script_core_location_test.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _create_location_xy of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass_script_core_location_test",
            "obj": "test_with_different_path",
            "line": 96,
            "column": 4,
            "endLine": 96,
            "endColumn": 31,
            "path": "python/grass/script/tests/grass_script_core_location_test.py",
            "absolutePath": "/workspace/grass/python/grass/script/tests/grass_script_core_location_test.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _create_location_xy of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass_script_core_location_test",
            "obj": "test_files",
            "line": 144,
            "column": 4,
            "endLine": 144,
            "endColumn": 31,
            "path": "python/grass/script/tests/grass_script_core_location_test.py",
            "absolutePath": "/workspace/grass/python/grass/script/tests/grass_script_core_location_test.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _set_location_description of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass_script_core_location_test",
            "obj": "set_and_test_description",
            "line": 167,
            "column": 4,
            "endLine": 167,
            "endColumn": 37,
            "path": "python/grass/script/tests/grass_script_core_location_test.py",
            "absolutePath": "/workspace/grass/python/grass/script/tests/grass_script_core_location_test.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _create_location_xy of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass_script_setup_test",
            "obj": "test_init_as_context_manager_env_attribute.workload",
            "line": 174,
            "column": 8,
            "endLine": 174,
            "endColumn": 35,
            "path": "python/grass/script/tests/grass_script_setup_test.py",
            "absolutePath": "/workspace/grass/python/grass/script/tests/grass_script_setup_test.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'pid'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "script_using_temporary_region",
            "obj": "call_use_temp_region",
            "line": 12,
            "column": 4,
            "endLine": 12,
            "endColumn": 7,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'node'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "script_using_temporary_region",
            "obj": "call_use_temp_region",
            "line": 13,
            "column": 4,
            "endLine": 13,
            "endColumn": 8,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'size' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "script_using_temporary_region",
            "obj": "main",
            "line": 79,
            "column": 13,
            "endLine": 79,
            "endColumn": 17,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'remaining' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "script_using_temporary_region",
            "obj": "main",
            "line": 80,
            "column": 18,
            "endLine": 80,
            "endColumn": 27,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'nesting' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "script_using_temporary_region",
            "obj": "main",
            "line": 81,
            "column": 16,
            "endLine": 81,
            "endColumn": 23,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'map_name' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "script_using_temporary_region",
            "obj": "main",
            "line": 82,
            "column": 17,
            "endLine": 82,
            "endColumn": 25,
            "path": "python/grass/script/testsuite/data/script_using_temporary_region.py",
            "absolutePath": "/workspace/grass/python/grass/script/testsuite/data/script_using_temporary_region.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'node'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_node_pid",
            "line": 557,
            "column": 4,
            "endLine": 557,
            "endColumn": 8,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'pid'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_node_pid",
            "line": 558,
            "column": 4,
            "endLine": 558,
            "endColumn": 7,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'suffix'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_uuid",
            "line": 581,
            "column": 4,
            "endLine": 581,
            "endColumn": 10,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'suffix'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_random",
            "line": 622,
            "column": 4,
            "endLine": 622,
            "endColumn": 10,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'key_index' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.script.vector",
            "obj": "vector_db_select",
            "line": 286,
            "column": 30,
            "endLine": 286,
            "endColumn": 39,
            "path": "python/grass/script/vector.py",
            "absolutePath": "/workspace/grass/python/grass/script/vector.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (44/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_dataset",
            "obj": "AbstractDataset",
            "line": 25,
            "column": 0,
            "endLine": 25,
            "endColumn": 21,
            "path": "python/grass/temporal/abstract_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 4 in 'AbstractDataset.update' and is now 3 in overriding 'AbstractMapDataset.update' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.update",
            "line": 367,
            "column": 4,
            "endLine": 367,
            "endColumn": 14,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 4 in 'AbstractDataset.update_all' and is now 3 in overriding 'AbstractMapDataset.update_all' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.update_all",
            "line": 386,
            "column": 4,
            "endLine": 386,
            "endColumn": 18,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.get_registered_stds",
            "line": 1133,
            "column": 12,
            "endLine": 1133,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.add_stds_to_register",
            "line": 1169,
            "column": 16,
            "endLine": 1169,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.add_stds_to_register",
            "line": 1184,
            "column": 12,
            "endLine": 1184,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1211,
            "column": 16,
            "endLine": 1211,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1217,
            "column": 16,
            "endLine": 1217,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1232,
            "column": 12,
            "endLine": 1232,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (39/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 24,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3001/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 38,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (13/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.check_temporal_topology",
            "line": 550,
            "column": 4,
            "endLine": 550,
            "endColumn": 31,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-out-of-order",
            "message": "Positional arguments appear to be out of order",
            "messageId": "W1114",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.sample_by_dataset",
            "line": 795,
            "column": 8,
            "endLine": 795,
            "endColumn": 39,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset._update_where_statement_by_spatial_extent",
            "line": 1734,
            "column": 12,
            "endLine": 1734,
            "endColumn": 17,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'gran' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.update_from_registered_maps",
            "line": 2982,
            "column": 49,
            "endLine": 2982,
            "endColumn": 53,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (43/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 30,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2054/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "RPCDefs",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_full_info",
            "line": 82,
            "column": 4,
            "endLine": 83,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_get_database_name",
            "line": 297,
            "column": 4,
            "endLine": 298,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_available_mapsets",
            "line": 355,
            "column": 4,
            "endLine": 356,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_has_timestamp",
            "line": 389,
            "column": 4,
            "endLine": 390,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_timestamp",
            "line": 439,
            "column": 4,
            "endLine": 440,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_timestamp",
            "line": 483,
            "column": 4,
            "endLine": 484,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_timestamp",
            "line": 474,
            "column": 12,
            "endLine": 474,
            "endColumn": 75,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_timestamp",
            "line": 520,
            "column": 4,
            "endLine": 521,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_semantic_label",
            "line": 560,
            "column": 4,
            "endLine": 561,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_semantic_label",
            "line": 556,
            "column": 12,
            "endLine": 558,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_semantic_label",
            "line": 597,
            "column": 4,
            "endLine": 598,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_semantic_label",
            "line": 593,
            "column": 12,
            "endLine": 595,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_semantic_label",
            "line": 631,
            "column": 4,
            "endLine": 632,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_semantic_label",
            "line": 627,
            "column": 12,
            "endLine": 629,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_map_exists",
            "line": 665,
            "column": 4,
            "endLine": 666,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_info",
            "line": 693,
            "column": 4,
            "endLine": 694,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_history",
            "line": 1003,
            "column": 4,
            "endLine": 1004,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_vector_history",
            "line": 1112,
            "column": 8,
            "endLine": 1112,
            "endColumn": 12,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (34/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "CLibrariesInterface",
            "line": 1279,
            "column": 0,
            "endLine": 1279,
            "endColumn": 25,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'dbmi' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.core",
            "obj": "init",
            "line": 679,
            "column": 27,
            "endLine": 679,
            "endColumn": 31,
            "path": "python/grass/temporal/core.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/core.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.datetime_math",
            "obj": "modify_datetime",
            "line": 327,
            "column": 8,
            "endLine": 328,
            "endColumn": 17,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.datetime_math",
            "obj": "modify_datetime",
            "line": 354,
            "column": 8,
            "endLine": 355,
            "endColumn": 17,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "bad-chained-comparison",
            "message": "Suspicious 2-part chained comparison using semantically incompatible operators ('>' and 'in')",
            "messageId": "W3601",
            "confidence": "HIGH",
            "module": "grass.temporal.datetime_math",
            "obj": "check_datetime_string",
            "line": 811,
            "column": 7,
            "endLine": 811,
            "endColumn": 30,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.datetime_math",
            "obj": "datetime_to_grass_datetime_string",
            "line": 917,
            "column": 8,
            "endLine": 917,
            "endColumn": 85,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'type'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.gui_support",
            "obj": "tlist_grouped",
            "line": 46,
            "column": 8,
            "endLine": 46,
            "endColumn": 12,
            "path": "python/grass/temporal/gui_support.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/gui_support.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'type'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.gui_support",
            "obj": "tlist",
            "line": 100,
            "column": 8,
            "endLine": 100,
            "endColumn": 12,
            "path": "python/grass/temporal/gui_support.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/gui_support.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (60/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.mapcalc",
            "obj": "dataset_mapcalculator",
            "line": 29,
            "column": 0,
            "endLine": 29,
            "endColumn": 25,
            "path": "python/grass/temporal/mapcalc.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/mapcalc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (28/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.metadata",
            "obj": "VectorMetadata",
            "line": 559,
            "column": 0,
            "endLine": 559,
            "endColumn": 20,
            "path": "python/grass/temporal/metadata.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/metadata.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ds' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.register",
            "obj": "register_maps_in_space_time_dataset",
            "line": 458,
            "column": 12,
            "endLine": 458,
            "endColumn": 14,
            "path": "python/grass/temporal/register.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/register.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (80/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.register",
            "obj": "register_maps_in_space_time_dataset",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 39,
            "path": "python/grass/temporal/register.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/register.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeRasterDataset.get_new_map_instance",
            "line": 1285,
            "column": 4,
            "endLine": 1285,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeRaster3DDataset.get_new_map_instance",
            "line": 1394,
            "column": 4,
            "endLine": 1394,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeVectorDataset.get_new_map_instance",
            "line": 1520,
            "column": 4,
            "endLine": 1520,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2132/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (11/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.cover",
            "line": 926,
            "column": 4,
            "endLine": 926,
            "endColumn": 13,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (10/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.overlap_2d",
            "line": 1052,
            "column": 4,
            "endLine": 1052,
            "endColumn": 18,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (12/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.overlap",
            "line": 1122,
            "column": 4,
            "endLine": 1122,
            "endColumn": 15,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (52/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent",
            "line": 76,
            "column": 0,
            "endLine": 76,
            "endColumn": 19,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_topology_dataset_connector",
            "obj": "SpatialTopologyDatasetConnector",
            "line": 20,
            "column": 0,
            "endLine": 20,
            "endColumn": 37,
            "path": "python/grass/temporal/spatial_topology_dataset_connector.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_topology_dataset_connector.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (56/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.stds_import",
            "obj": "import_stds",
            "line": 204,
            "column": 0,
            "endLine": 204,
            "endColumn": 15,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (56/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.stds_import",
            "obj": "import_stds",
            "line": 204,
            "column": 0,
            "endLine": 204,
            "endColumn": 15,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3441/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"self.topology != []\" can be simplified to \"self.topology\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_algebra",
            "obj": "GlobalTemporalVar.get_type",
            "line": 730,
            "column": 45,
            "endLine": 730,
            "endColumn": 64,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (30/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser",
            "line": 762,
            "column": 0,
            "endLine": 762,
            "endColumn": 27,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.set_temporal_extent_list",
            "line": 1107,
            "column": 4,
            "endLine": 1107,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_spatio_temporal_topology_list",
            "line": 1407,
            "column": 4,
            "endLine": 1407,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.assign_bool_value",
            "line": 1646,
            "column": 4,
            "endLine": 1646,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.assign_bool_value",
            "line": 1646,
            "column": 4,
            "endLine": 1646,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.compare_bool_value",
            "line": 1690,
            "column": 4,
            "endLine": 1690,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.compare_bool_value",
            "line": 1690,
            "column": 4,
            "endLine": 1690,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.perform_temporal_selection",
            "line": 1784,
            "column": 4,
            "endLine": 1784,
            "endColumn": 34,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.set_granularity",
            "line": 1876,
            "column": 4,
            "endLine": 1876,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'boolname' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.eval_datetime_str",
            "line": 2140,
            "column": 15,
            "endLine": 2140,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.eval_map_list",
            "line": 2185,
            "column": 4,
            "endLine": 2185,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_condition_list",
            "line": 2211,
            "column": 4,
            "endLine": 2211,
            "endColumn": 28,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'resultlist' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_condition_list",
            "line": 2287,
            "column": 28,
            "endLine": 2287,
            "endColumn": 38,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (8/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_statement_assign",
            "line": 2375,
            "column": 8,
            "endLine": 2595,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'td' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_t_td_var",
            "line": 2818,
            "column": 30,
            "endLine": 2818,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'increment' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_expr_t_buff",
            "line": 3307,
            "column": 36,
            "endLine": 3307,
            "endColumn": 45,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'increment' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_expr_t_shift",
            "line": 3365,
            "column": 73,
            "endLine": 3365,
            "endColumn": 82,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (52/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser",
            "line": 762,
            "column": 0,
            "endLine": 762,
            "endColumn": 27,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (19/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "TemporalExtent.temporal_relation",
            "line": 955,
            "column": 4,
            "endLine": 955,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (26/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "TemporalExtent",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 20,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'extent' has been renamed to 'map' in overriding 'RelativeTemporalExtent.temporal_relation' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "RelativeTemporalExtent.temporal_relation",
            "line": 1335,
            "column": 4,
            "endLine": 1335,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "check_granularity_string",
            "line": 85,
            "column": 4,
            "endLine": 85,
            "endColumn": 17,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'time_tuple' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_granularity",
            "obj": "get_time_tuple_function._get_map_time_tuple",
            "line": 139,
            "column": 15,
            "endLine": 139,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (17/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "compute_common_absolute_time_granularity",
            "line": 581,
            "column": 0,
            "endLine": 581,
            "endColumn": 44,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (47/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "compute_common_absolute_time_granularity_simple",
            "line": 847,
            "column": 0,
            "endLine": 847,
            "endColumn": 51,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalRaster3DAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster3d_algebra",
            "obj": "TemporalRaster3DAlgebraParser.parse",
            "line": 54,
            "column": 4,
            "endLine": 54,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_raster3d_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster3d_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmdstring' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster3d_algebra",
            "obj": "TemporalRaster3DAlgebraParser.p_ts_neighbor_operation",
            "line": 151,
            "column": 39,
            "endLine": 151,
            "endColumn": 48,
            "path": "python/grass/temporal/temporal_raster3d_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster3d_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalRasterAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.parse",
            "line": 100,
            "column": 4,
            "endLine": 100,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 't_neighbour' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.p_ts_neighbour_operation",
            "line": 167,
            "column": 40,
            "endLine": 167,
            "endColumn": 51,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmdstring' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.p_ts_neighbour_operation",
            "line": 193,
            "column": 39,
            "endLine": 193,
            "endColumn": 48,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2064/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'compop' has been renamed to 'compare_cmd' in overriding 'TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'aggregate' has been renamed to 'compop' in overriding 'TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.compare_cmd_value",
            "line": 416,
            "column": 4,
            "endLine": 416,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.compare_cmd_value",
            "line": 416,
            "column": 4,
            "endLine": 416,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.operator_cmd_value",
            "line": 500,
            "column": 4,
            "endLine": 500,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.operator_cmd_value",
            "line": 500,
            "column": 4,
            "endLine": 500,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.set_temporal_extent_list",
            "line": 550,
            "column": 4,
            "endLine": 550,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_condition_cmd_list",
            "line": 642,
            "column": 4,
            "endLine": 642,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_condition_cmd_list",
            "line": 642,
            "column": 4,
            "endLine": 642,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_arith1_operation_relation",
            "line": 1356,
            "column": 15,
            "endLine": 1356,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_arith2_operation_relation",
            "line": 1395,
            "column": 15,
            "endLine": 1395,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'numinput' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_if",
            "line": 1713,
            "column": 57,
            "endLine": 1713,
            "endColumn": 65,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'numthen' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_elif",
            "line": 1813,
            "column": 22,
            "endLine": 1813,
            "endColumn": 29,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'numelse' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_elif",
            "line": 1814,
            "column": 22,
            "endLine": 1814,
            "endColumn": 29,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'theninput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif",
            "line": 1875,
            "column": 12,
            "endLine": 1875,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'elseinput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif",
            "line": 1876,
            "column": 12,
            "endLine": 1876,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'theninput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif_relation",
            "line": 1933,
            "column": 12,
            "endLine": 1933,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'elseinput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif_relation",
            "line": 1934,
            "column": 12,
            "endLine": 1934,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_ts_var_expr1",
            "line": 2027,
            "column": 15,
            "endLine": 2027,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'n_maps' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_hash_operation",
            "line": 2048,
            "column": 38,
            "endLine": 2048,
            "endColumn": 44,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (37/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser",
            "line": 147,
            "column": 0,
            "endLine": 147,
            "endColumn": 37,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (34/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_topology_dataset_connector",
            "obj": "TemporalTopologyDatasetConnector",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 38,
            "path": "python/grass/temporal/temporal_topology_dataset_connector.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_topology_dataset_connector.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalVectorAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.parse",
            "line": 153,
            "column": 4,
            "endLine": 153,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'compop' has been renamed to 'compare_cmd' in overriding 'TemporalVectorAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'aggregate' has been renamed to 'compop' in overriding 'TemporalVectorAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.overlay_cmd_value",
            "line": 297,
            "column": 4,
            "endLine": 297,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.set_temporal_extent_list",
            "line": 360,
            "column": 4,
            "endLine": 360,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 462,
            "column": 44,
            "endLine": 462,
            "endColumn": 59,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 467,
            "column": 44,
            "endLine": 467,
            "endColumn": 59,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 423,
            "column": 8,
            "endLine": 589,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'buff_type' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_buffer_operation",
            "line": 697,
            "column": 41,
            "endLine": 697,
            "endColumn": 50,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "error",
            "symbol": "assignment-from-none",
            "message": "Assigning result of a function call, where the function returns None",
            "messageId": "E1128",
            "confidence": "UNDEFINED",
            "module": "test_register_function",
            "obj": "TestRasterRegisterFunctions.setUpClass",
            "line": 27,
            "column": 8,
            "endLine": 27,
            "endColumn": 30,
            "path": "python/grass/temporal/testsuite/test_register_function.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/test_register_function.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_algebra",
            "obj": "TestTemporalAlgebra",
            "line": 16,
            "column": 0,
            "endLine": 16,
            "endColumn": 25,
            "path": "python/grass/temporal/testsuite/unittests_temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "method already defined line 215",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_algebra_grs",
            "obj": "TestTemporalAlgebraGranularity.test_common_granularity_4",
            "line": 234,
            "column": 4,
            "endLine": 234,
            "endColumn": 33,
            "path": "python/grass/temporal/testsuite/unittests_temporal_algebra_grs.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_algebra_grs.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "method already defined line 678",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_raster_algebra",
            "obj": "TestTemporalRasterAlgebra.test_temporal_select",
            "line": 694,
            "column": 4,
            "endLine": 694,
            "endColumn": 28,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (45/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_raster_algebra",
            "obj": "TestTemporalRasterAlgebra",
            "line": 16,
            "column": 0,
            "endLine": 16,
            "endColumn": 31,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "unittests_temporal_raster_algebra_grs",
            "obj": "TestTemporalRasterAlgebra.tearDown",
            "line": 145,
            "column": 8,
            "endLine": 145,
            "endColumn": 70,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py"
        },
        {
            "type": "warning",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "messageId": "W0101",
            "confidence": "HIGH",
            "module": "unittests_temporal_raster_algebra_grs",
            "obj": "TestTemporalRasterAlgebra.tearDownClass",
            "line": 150,
            "column": 8,
            "endLine": 151,
            "endColumn": 11,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_raster_algebra_grs",
            "obj": "TestTemporalRasterAlgebra.tearDownClass",
            "line": 150,
            "column": 8,
            "endLine": 151,
            "endColumn": 11,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_algebra_grs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (29/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "unittests_temporal_raster_conditionals",
            "obj": "TestTemporalRasterAlgebraConditionals",
            "line": 16,
            "column": 0,
            "endLine": 16,
            "endColumn": 43,
            "path": "python/grass/temporal/testsuite/unittests_temporal_raster_conditionals.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/testsuite/unittests_temporal_raster_conditionals.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (222/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_compute_datetime_delta",
            "line": 227,
            "column": 0,
            "endLine": 227,
            "endColumn": 31,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (248/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_compute_absolute_time_granularity",
            "line": 570,
            "column": 0,
            "endLine": 570,
            "endColumn": 42,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (48/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_spatial_relations",
            "line": 974,
            "column": 0,
            "endLine": 974,
            "endColumn": 26,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (297/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_spatial_relations",
            "line": 974,
            "column": 0,
            "endLine": 974,
            "endColumn": 26,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'zone' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.univar_statistics",
            "obj": "compute_univar_stats",
            "line": 90,
            "column": 29,
            "endLine": 90,
            "endColumn": 33,
            "path": "python/grass/temporal/univar_statistics.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/univar_statistics.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'out_file' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.univar_statistics",
            "obj": "print_vector_dataset_univar_statistics",
            "line": 390,
            "column": 12,
            "endLine": 390,
            "endColumn": 20,
            "path": "python/grass/temporal/univar_statistics.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/univar_statistics.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'name' has been renamed to 'typedef' in overriding 'Visitor.visit_typedef' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.ctypedescs",
            "obj": "visit_type_and_collect_info.Visitor.visit_typedef",
            "line": 107,
            "column": 8,
            "endLine": 107,
            "endColumn": 25,
            "path": "python/libgrass_interface_generator/ctypesgen/ctypedescs.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/ctypedescs.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value {} as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.ctypedescs",
            "obj": "CtypesFunction.__init__",
            "line": 261,
            "column": 4,
            "endLine": 261,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/ctypesgen/ctypedescs.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/ctypedescs.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-set-comprehension",
            "message": "Consider using a set comprehension",
            "messageId": "R1718",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.ctypedescs",
            "obj": "CtypesStruct.get_subtypes",
            "line": 360,
            "column": 19,
            "endLine": 360,
            "endColumn": 52,
            "path": "python/libgrass_interface_generator/ctypesgen/ctypedescs.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/ctypedescs.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.descriptions",
            "obj": "DescriptionCollection",
            "line": 10,
            "column": 0,
            "endLine": 10,
            "endColumn": 27,
            "path": "python/libgrass_interface_generator/ctypesgen/descriptions.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/descriptions.py"
        },
        {
            "type": "refactor",
            "symbol": "useless-option-value",
            "message": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
            "messageId": "R0022",
            "confidence": "HIGH",
            "module": "ctypesgen.libraryloader",
            "obj": "",
            "line": 145,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/libraryloader.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/libraryloader.py"
        },
        {
            "type": "refactor",
            "symbol": "use-yield-from",
            "message": "Use 'yield from' directly instead of yielding each element one by one",
            "messageId": "R1737",
            "confidence": "HIGH",
            "module": "ctypesgen.libraryloader",
            "obj": "LibraryLoader.getpaths",
            "line": 138,
            "column": 12,
            "endLine": 139,
            "endColumn": 26,
            "path": "python/libgrass_interface_generator/ctypesgen/libraryloader.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/libraryloader.py"
        },
        {
            "type": "refactor",
            "symbol": "use-yield-from",
            "message": "Use 'yield from' directly instead of yielding each element one by one",
            "messageId": "R1737",
            "confidence": "HIGH",
            "module": "ctypesgen.libraryloader",
            "obj": "PosixLibraryLoader.getplatformpaths",
            "line": 360,
            "column": 8,
            "endLine": 364,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/libraryloader.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/libraryloader.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.main",
            "obj": "",
            "line": 5,
            "column": 0,
            "endLine": 5,
            "endColumn": 15,
            "path": "python/libgrass_interface_generator/ctypesgen/main.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/main.py"
        },
        {
            "type": "error",
            "symbol": "logging-too-many-args",
            "message": "Too many arguments for logging format string",
            "messageId": "E1205",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.messages",
            "obj": "error_message",
            "line": 35,
            "column": 4,
            "endLine": 35,
            "endColumn": 24,
            "path": "python/libgrass_interface_generator/ctypesgen/messages.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/messages.py"
        },
        {
            "type": "error",
            "symbol": "logging-too-many-args",
            "message": "Too many arguments for logging format string",
            "messageId": "E1205",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.messages",
            "obj": "warning_message",
            "line": 39,
            "column": 4,
            "endLine": 39,
            "endColumn": 26,
            "path": "python/libgrass_interface_generator/ctypesgen/messages.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/messages.py"
        },
        {
            "type": "error",
            "symbol": "logging-too-many-args",
            "message": "Too many arguments for logging format string",
            "messageId": "E1205",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.messages",
            "obj": "status_message",
            "line": 43,
            "column": 4,
            "endLine": 43,
            "endColumn": 31,
            "path": "python/libgrass_interface_generator/ctypesgen/messages.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/messages.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.options",
            "obj": "",
            "line": 9,
            "column": 0,
            "endLine": 9,
            "endColumn": 15,
            "path": "python/libgrass_interface_generator/ctypesgen/options.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/options.py"
        },
        {
            "type": "warning",
            "symbol": "import-self",
            "message": "Module import itself",
            "messageId": "W0406",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "",
            "line": 30,
            "column": 4,
            "endLine": 30,
            "endColumn": 46,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "warning",
            "symbol": "unnecessary-lambda",
            "message": "Lambda may not be necessary",
            "messageId": "W0108",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "p_postfix_expression.<lambda>",
            "line": 260,
            "column": 13,
            "endLine": 260,
            "endColumn": 39,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'expr' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "p_define",
            "line": 1310,
            "column": 59,
            "endLine": 1310,
            "endColumn": 63,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "error",
            "symbol": "assignment-from-no-return",
            "message": "Assigning result of a function call, where the function has no return",
            "messageId": "E1111",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "p_pragma_pack",
            "line": 1395,
            "column": 12,
            "endLine": 1395,
            "endColumn": 55,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "function already defined line 30",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "main",
            "line": 1450,
            "column": 0,
            "endLine": 1450,
            "endColumn": 8,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "convention",
            "symbol": "ungrouped-imports",
            "message": "Imports from package sys are not grouped",
            "messageId": "C0412",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cgrammar",
            "obj": "",
            "line": 36,
            "column": 0,
            "endLine": 36,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cgrammar.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 6 in 'CParser.handle_define' and is now 5 in overriding 'DebugCParser.handle_define' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.cparser",
            "obj": "DebugCParser.handle_define",
            "line": 211,
            "column": 4,
            "endLine": 211,
            "endColumn": 21,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/cparser.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/cparser.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'CParser.parse' and is now 1 in overriding 'DataCollectingParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.datacollectingparser",
            "obj": "DataCollectingParser.parse",
            "line": 70,
            "column": 4,
            "endLine": 70,
            "endColumn": 13,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'value' has been renamed to 'expr' in overriding 'DataCollectingParser.handle_define_constant' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.datacollectingparser",
            "obj": "DataCollectingParser.handle_define_constant",
            "line": 86,
            "column": 4,
            "endLine": 86,
            "endColumn": 30,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'value' has been renamed to 'expr' in overriding 'DataCollectingParser.handle_define_macro' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.datacollectingparser",
            "obj": "DataCollectingParser.handle_define_macro",
            "line": 104,
            "column": 4,
            "endLine": 104,
            "endColumn": 27,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'name' has been renamed to 'macro' in overriding 'DataCollectingParser.handle_undefine' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.datacollectingparser",
            "obj": "DataCollectingParser.handle_undefine",
            "line": 109,
            "column": 4,
            "endLine": 109,
            "endColumn": 23,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/datacollectingparser.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'if' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "",
            "line": 780,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "exec-used",
            "message": "Use of exec",
            "messageId": "W0122",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 210,
            "column": 12,
            "endLine": 210,
            "endColumn": 39,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lextokens of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 216,
            "column": 30,
            "endLine": 216,
            "endColumn": 47,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexreflags of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 217,
            "column": 30,
            "endLine": 217,
            "endColumn": 48,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexliterals of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 218,
            "column": 30,
            "endLine": 218,
            "endColumn": 49,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexstateinfo of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 220,
            "column": 30,
            "endLine": 220,
            "endColumn": 50,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexstateignore of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 221,
            "column": 30,
            "endLine": 221,
            "endColumn": 52,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexstatere of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 224,
            "column": 30,
            "endLine": 224,
            "endColumn": 48,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexreflags of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 228,
            "column": 46,
            "endLine": 228,
            "endColumn": 64,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexstateerrorf of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 234,
            "column": 29,
            "endLine": 234,
            "endColumn": 51,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lexstateeoff of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "Lexer.readtab",
            "line": 238,
            "column": 29,
            "endLine": 238,
            "endColumn": 49,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getframe of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "get_caller_module_dict",
            "line": 445,
            "column": 8,
            "endLine": 445,
            "endColumn": 21,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "exec-used",
            "message": "Use of exec",
            "messageId": "W0122",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.lex",
            "obj": "lex",
            "line": 1031,
            "column": 20,
            "endLine": 1031,
            "endColumn": 47,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/lex.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/lex.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 's' has been renamed to 'data' in overriding 'PreprocessorLexer.input' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.preprocessor",
            "obj": "PreprocessorLexer.input",
            "line": 34,
            "column": 4,
            "endLine": 34,
            "endColumn": 13,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/preprocessor.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/preprocessor.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'if' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 1569,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 10 spaces, expected 12",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2011,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 20 spaces, expected 16",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2573,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 24 spaces, expected 20",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2574,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2576,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2577,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 24 spaces, expected 20",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2578,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2580,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2581,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2582,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2583,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2584,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2585,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2586,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2587,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2589,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2595,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2598,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2600,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2602,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2603,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2604,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2605,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2606,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2607,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2608,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2609,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2610,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2612,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2613,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2614,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2615,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2618,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2619,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2620,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2621,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2622,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2623,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2624,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2625,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2626,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2627,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2628,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2629,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2631,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2632,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2633,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2634,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2635,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2636,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 20 spaces, expected 16",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2637,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 24 spaces, expected 20",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2638,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 24 spaces, expected 20",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2639,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 24 spaces, expected 20",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2640,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2641,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2642,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 28 spaces, expected 24",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2643,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2645,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2646,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2647,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2649,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2650,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2651,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2652,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2659,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2662,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2664,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2666,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2667,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2668,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2669,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2670,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2671,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2672,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2673,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2674,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 44 spaces, expected 40",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2676,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2677,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 48 spaces, expected 44",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2678,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2680,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 40 spaces, expected 36",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2681,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 32 spaces, expected 28",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2682,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2683,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "bad-indentation",
            "message": "Bad indentation. Found 36 spaces, expected 32",
            "messageId": "W0311",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 2684,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3506/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRParser.parsedebug",
            "line": 478,
            "column": 20,
            "endLine": 566,
            "endColumn": 32,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (46/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRParser.parsedebug",
            "line": 350,
            "column": 4,
            "endLine": 350,
            "endColumn": 18,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRParser.parseopt",
            "line": 800,
            "column": 20,
            "endLine": 882,
            "endColumn": 32,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRParser.parseopt_notrack",
            "line": 1108,
            "column": 20,
            "endLine": 1174,
            "endColumn": 32,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "exec-used",
            "message": "Use of exec",
            "messageId": "W0122",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 1988,
            "column": 12,
            "endLine": 1988,
            "endColumn": 38,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _tabversion of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 1991,
            "column": 11,
            "endLine": 1991,
            "endColumn": 31,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lr_action of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 1994,
            "column": 25,
            "endLine": 1994,
            "endColumn": 44,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lr_goto of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 1995,
            "column": 23,
            "endLine": 1995,
            "endColumn": 40,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lr_productions of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 1998,
            "column": 17,
            "endLine": 1998,
            "endColumn": 41,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lr_method of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 2001,
            "column": 25,
            "endLine": 2001,
            "endColumn": 44,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _lr_signature of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRTable.read_table",
            "line": 2002,
            "column": 15,
            "endLine": 2002,
            "endColumn": 37,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'LRTable' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.__init__",
            "line": 2106,
            "column": 4,
            "endLine": 2106,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.compute_read_sets.<lambda>",
            "line": 2457,
            "column": 13,
            "endLine": 2457,
            "endColumn": 55,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.compute_read_sets.<lambda>",
            "line": 2458,
            "column": 13,
            "endLine": 2458,
            "endColumn": 58,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.compute_follow_sets.<lambda>",
            "line": 2479,
            "column": 13,
            "endLine": 2479,
            "endColumn": 34,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-lambda-assignment",
            "message": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
            "messageId": "C3001",
            "confidence": "HIGH",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.compute_follow_sets.<lambda>",
            "line": 2480,
            "column": 13,
            "endLine": 2480,
            "endColumn": 42,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (8/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (8/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2559,
            "column": 8,
            "endLine": 2723,
            "endColumn": 19,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (47/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.lr_parse_table",
            "line": 2538,
            "column": 4,
            "endLine": 2538,
            "endColumn": 22,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "LRGeneratedTable.write_table",
            "line": 2844,
            "column": 8,
            "endLine": 2845,
            "endColumn": 17,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _getframe of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "get_caller_module_dict",
            "line": 2890,
            "column": 8,
            "endLine": 2890,
            "endColumn": 21,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (60/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "yacc",
            "line": 3220,
            "column": 0,
            "endLine": 3220,
            "endColumn": 8,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "warning",
            "symbol": "exec-used",
            "message": "Use of exec",
            "messageId": "W0122",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "yacc",
            "line": 3264,
            "column": 16,
            "endLine": 3264,
            "endColumn": 43,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (71/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.parser.yacc",
            "obj": "yacc",
            "line": 3220,
            "column": 0,
            "endLine": 3220,
            "endColumn": 8,
            "path": "python/libgrass_interface_generator/ctypesgen/parser/yacc.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/parser/yacc.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(obj, (bytes, str))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_json.printer",
            "obj": "todict",
            "line": 16,
            "column": 9,
            "endLine": 16,
            "endColumn": 55,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_json/printer.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_json/printer.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_json.printer",
            "obj": "todict",
            "line": 23,
            "column": 15,
            "endLine": 29,
            "endColumn": 9,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_json/printer.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_json/printer.py"
        },
        {
            "type": "warning",
            "symbol": "wildcard-import",
            "message": "Wildcard import ctypes",
            "messageId": "W0401",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "",
            "line": 3,
            "column": 0,
            "endLine": 3,
            "endColumn": 20,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (39/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "UserString",
            "line": 19,
            "column": 0,
            "endLine": 19,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'UserString' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "MutableString.__init__",
            "line": 271,
            "column": 4,
            "endLine": 271,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'MutableString' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "String.__init__",
            "line": 327,
            "column": 4,
            "endLine": 327,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _as_parameter_ of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "String.from_param",
            "line": 371,
            "column": 37,
            "endLine": 371,
            "endColumn": 55,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "refactor",
            "symbol": "no-classmethod-decorator",
            "message": "Consider using a decorator instead of calling classmethod",
            "messageId": "R0202",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "String",
            "line": 373,
            "column": 4,
            "endLine": 373,
            "endColumn": 14,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _type_ of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "UNCHECKED",
            "line": 388,
            "column": 46,
            "endLine": 388,
            "endColumn": 57,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _type_ of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "UNCHECKED",
            "line": 388,
            "column": 68,
            "endLine": 388,
            "endColumn": 79,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-merging-isinstance",
            "message": "Consider merging these isinstance calls to isinstance(value, (bytes, str))",
            "messageId": "R1701",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "ord_if_char",
            "line": 426,
            "column": 26,
            "endLine": 426,
            "endColumn": 76,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "warning",
            "symbol": "unused-wildcard-import",
            "message": "Unused import(s) DEFAULT_MODE, create_string_buffer, c_buffer, CFUNCTYPE, WINFUNCTYPE, py_object, c_short, c_ushort, c_long, c_ulong, c_int, c_uint, c_float, c_double, c_longdouble, c_longlong, c_ulonglong, c_ubyte, c_byte, c_char, c_char_p, c_void_p, c_voidp, c_bool, c_wchar_p, c_wchar, create_unicode_buffer, SetPointerType, ARRAY, CDLL, PyDLL, WinDLL, HRESULT, OleDLL, LibraryLoader, cdll, pydll, pythonapi, windll, oledll, GetLastError, WinError, c_size_t, c_ssize_t, memmove, memset, PYFUNCTYPE, cast, string_at, wstring_at, DllGetClassObject, DllCanUnloadNow, c_int8, c_uint8, kind, c_int16, c_int32, c_int64, c_uint16, c_uint32, c_uint64, c_time_t, Union, Structure, Array, RTLD_LOCAL, RTLD_GLOBAL, ArgumentError, SIZEOF_TIME_T, FormatError, sizeof, byref, addressof, alignment, resize, get_errno, set_errno, POINTER, pointer, get_last_error, set_last_error, BigEndianStructure, LittleEndianStructure, BigEndianUnion and LittleEndianUnion from wildcard import of ctypes",
            "messageId": "W0614",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.preamble",
            "obj": "",
            "line": 3,
            "column": 0,
            "endLine": 3,
            "endColumn": 20,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/preamble.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-set-comprehension",
            "message": "Consider using a set comprehension",
            "messageId": "R1718",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.printer",
            "obj": "WrapperPrinter.print_struct_members",
            "line": 256,
            "column": 16,
            "endLine": 256,
            "endColumn": 51,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/printer.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/printer.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (23/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "ctypesgen.printer_python.printer",
            "obj": "WrapperPrinter",
            "line": 19,
            "column": 0,
            "endLine": 19,
            "endColumn": 20,
            "path": "python/libgrass_interface_generator/ctypesgen/printer_python/printer.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/printer_python/printer.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'roots' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "ctypesgen.processor.dependencies",
            "obj": "find_dependencies.find_dependencies_for",
            "line": 90,
            "column": 20,
            "endLine": 90,
            "endColumn": 25,
            "path": "python/libgrass_interface_generator/ctypesgen/processor/dependencies.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/processor/dependencies.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "ctypesgen.processor.dependencies",
            "obj": "find_dependencies.find_dependencies_for",
            "line": 117,
            "column": 12,
            "endLine": 128,
            "endColumn": 63,
            "path": "python/libgrass_interface_generator/ctypesgen/processor/dependencies.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/ctypesgen/processor/dependencies.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'arraystats' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 2,
            "column": 4,
            "endLine": 2,
            "endColumn": 16,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'cluster' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 3,
            "column": 4,
            "endLine": 3,
            "endColumn": 13,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'date' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 4,
            "column": 4,
            "endLine": 4,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'dbmi' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 5,
            "column": 4,
            "endLine": 5,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'display' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 6,
            "column": 4,
            "endLine": 6,
            "endColumn": 13,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'gis' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 7,
            "column": 4,
            "endLine": 7,
            "endColumn": 9,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'gmath' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 8,
            "column": 4,
            "endLine": 8,
            "endColumn": 11,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'imagery' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 9,
            "column": 4,
            "endLine": 9,
            "endColumn": 13,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'nviz' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 10,
            "column": 4,
            "endLine": 10,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'ogsf' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 11,
            "column": 4,
            "endLine": 11,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'proj' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 12,
            "column": 4,
            "endLine": 12,
            "endColumn": 10,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'raster3d' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 13,
            "column": 4,
            "endLine": 13,
            "endColumn": 14,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'raster' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 14,
            "column": 4,
            "endLine": 14,
            "endColumn": 12,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'rtree' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 15,
            "column": 4,
            "endLine": 15,
            "endColumn": 11,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'stats' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 16,
            "column": 4,
            "endLine": 16,
            "endColumn": 11,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'vector' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 17,
            "column": 4,
            "endLine": 17,
            "endColumn": 12,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "undefined-all-variable",
            "message": "Undefined variable name 'vedit' in __all__",
            "messageId": "E0603",
            "confidence": "UNDEFINED",
            "module": "libgrass__init__",
            "obj": "",
            "line": 18,
            "column": 4,
            "endLine": 18,
            "endColumn": 11,
            "path": "python/libgrass_interface_generator/libgrass__init__.py",
            "absolutePath": "/workspace/grass/python/libgrass_interface_generator/libgrass__init__.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "testrbf",
            "obj": "TestRasterbasin.tearDown",
            "line": 50,
            "column": 4,
            "endLine": 50,
            "endColumn": 16,
            "path": "raster/r.basins.fill/testsuite/testrbf.py",
            "absolutePath": "/workspace/grass/raster/r.basins.fill/testsuite/testrbf.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestRasterbasin.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "testrbf",
            "obj": "TestRasterbasin.tearDown",
            "line": 50,
            "column": 4,
            "endLine": 50,
            "endColumn": 16,
            "path": "raster/r.basins.fill/testsuite/testrbf.py",
            "absolutePath": "/workspace/grass/raster/r.basins.fill/testsuite/testrbf.py"
        },
        {
            "type": "refactor",
            "symbol": "condition-evals-to-constant",
            "message": "Boolean condition '0 and self.to_remove' will always evaluate to '0'",
            "messageId": "R1727",
            "confidence": "UNDEFINED",
            "module": "test_nmedian_bug_3296",
            "obj": "TestNmedianBug.tearDown",
            "line": 84,
            "column": 11,
            "endLine": 84,
            "endColumn": 31,
            "path": "raster/r.mapcalc/testsuite/test_nmedian_bug_3296.py",
            "absolutePath": "/workspace/grass/raster/r.mapcalc/testsuite/test_nmedian_bug_3296.py"
        },
        {
            "type": "refactor",
            "symbol": "condition-evals-to-constant",
            "message": "Boolean condition '0 and self.to_remove' will always evaluate to '0'",
            "messageId": "R1727",
            "confidence": "UNDEFINED",
            "module": "test_row_above_below_bug",
            "obj": "TestRowAboveAndBelowBug.tearDown",
            "line": 76,
            "column": 11,
            "endLine": 76,
            "endColumn": 31,
            "path": "raster/r.mapcalc/testsuite/test_row_above_below_bug.py",
            "absolutePath": "/workspace/grass/raster/r.mapcalc/testsuite/test_row_above_below_bug.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "method already defined line 87",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "test_r_random",
            "obj": "TestRasterTile.test_random_raster_flag_z",
            "line": 155,
            "column": 4,
            "endLine": 155,
            "endColumn": 33,
            "path": "raster/r.random/testsuite/test_r_random.py",
            "absolutePath": "/workspace/grass/raster/r.random/testsuite/test_r_random.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "method already defined line 102",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "test_r_random",
            "obj": "TestRasterTile.test_vector_random_flag_z",
            "line": 170,
            "column": 4,
            "endLine": 170,
            "endColumn": 33,
            "path": "raster/r.random/testsuite/test_r_random.py",
            "absolutePath": "/workspace/grass/raster/r.random/testsuite/test_r_random.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'test' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "testrandom",
            "obj": "",
            "line": 96,
            "column": 4,
            "endLine": 96,
            "endColumn": 41,
            "path": "raster/r.random/testsuite/testrandom.py",
            "absolutePath": "/workspace/grass/raster/r.random/testsuite/testrandom.py"
        },
        {
            "type": "convention",
            "symbol": "bad-classmethod-argument",
            "message": "Class method tearDownClass should have 'cls' as first argument",
            "messageId": "C0202",
            "confidence": "UNDEFINED",
            "module": "test_r_series",
            "obj": "TestRSeries.tearDownClass",
            "line": 21,
            "column": 4,
            "endLine": 21,
            "endColumn": 21,
            "path": "raster/r.series/testsuite/test_r_series.py",
            "absolutePath": "/workspace/grass/raster/r.series/testsuite/test_r_series.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'setUp' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_r_terraflow",
            "obj": "TestTerraflow.setUp",
            "line": 26,
            "column": 4,
            "endLine": 26,
            "endColumn": 13,
            "path": "raster/r.terraflow/testsuite/test_r_terraflow.py",
            "absolutePath": "/workspace/grass/raster/r.terraflow/testsuite/test_r_terraflow.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestTerraflow.setUp' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_r_terraflow",
            "obj": "TestTerraflow.setUp",
            "line": 26,
            "column": 4,
            "endLine": 26,
            "endColumn": 13,
            "path": "raster/r.terraflow/testsuite/test_r_terraflow.py",
            "absolutePath": "/workspace/grass/raster/r.terraflow/testsuite/test_r_terraflow.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'test_univar_mfd' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_r_terraflow",
            "obj": "TestTerraflow.test_univar_mfd",
            "line": 31,
            "column": 4,
            "endLine": 31,
            "endColumn": 23,
            "path": "raster/r.terraflow/testsuite/test_r_terraflow.py",
            "absolutePath": "/workspace/grass/raster/r.terraflow/testsuite/test_r_terraflow.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'test' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "testrt",
            "obj": "",
            "line": 90,
            "column": 4,
            "endLine": 90,
            "endColumn": 41,
            "path": "raster/r.tile/testsuite/testrt.py",
            "absolutePath": "/workspace/grass/raster/r.tile/testsuite/testrt.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_r_to_vect",
            "obj": "Testrr.tearDown",
            "line": 31,
            "column": 4,
            "endLine": 31,
            "endColumn": 16,
            "path": "raster/r.to.vect/testsuite/test_r_to_vect.py",
            "absolutePath": "/workspace/grass/raster/r.to.vect/testsuite/test_r_to_vect.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'Testrr.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_r_to_vect",
            "obj": "Testrr.tearDown",
            "line": 31,
            "column": 4,
            "endLine": 31,
            "endColumn": 16,
            "path": "raster/r.to.vect/testsuite/test_r_to_vect.py",
            "absolutePath": "/workspace/grass/raster/r.to.vect/testsuite/test_r_to_vect.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'test' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "test_r_to_vect",
            "obj": "",
            "line": 76,
            "column": 4,
            "endLine": 76,
            "endColumn": 41,
            "path": "raster/r.to.vect/testsuite/test_r_to_vect.py",
            "absolutePath": "/workspace/grass/raster/r.to.vect/testsuite/test_r_to_vect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ncols' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "arc_to_gridatb",
            "obj": "",
            "line": 70,
            "column": 1,
            "endLine": 70,
            "endColumn": 6,
            "path": "raster/r.topidx/arc_to_gridatb.py",
            "absolutePath": "/workspace/grass/raster/r.topidx/arc_to_gridatb.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'nrows' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "arc_to_gridatb",
            "obj": "",
            "line": 70,
            "column": 9,
            "endLine": 70,
            "endColumn": 14,
            "path": "raster/r.topidx/arc_to_gridatb.py",
            "absolutePath": "/workspace/grass/raster/r.topidx/arc_to_gridatb.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'cellsize' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "arc_to_gridatb",
            "obj": "",
            "line": 70,
            "column": 17,
            "endLine": 70,
            "endColumn": 25,
            "path": "raster/r.topidx/arc_to_gridatb.py",
            "absolutePath": "/workspace/grass/raster/r.topidx/arc_to_gridatb.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'nodata_value' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "arc_to_gridatb",
            "obj": "",
            "line": 75,
            "column": 23,
            "endLine": 75,
            "endColumn": 35,
            "path": "raster/r.topidx/arc_to_gridatb.py",
            "absolutePath": "/workspace/grass/raster/r.topidx/arc_to_gridatb.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_r_viewshed",
            "obj": "TestViewshed.tearDown",
            "line": 18,
            "column": 4,
            "endLine": 18,
            "endColumn": 16,
            "path": "raster/r.viewshed/testsuite/test_r_viewshed.py",
            "absolutePath": "/workspace/grass/raster/r.viewshed/testsuite/test_r_viewshed.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestViewshed.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_r_viewshed",
            "obj": "TestViewshed.tearDown",
            "line": 18,
            "column": 4,
            "endLine": 18,
            "endColumn": 16,
            "path": "raster/r.viewshed/testsuite/test_r_viewshed.py",
            "absolutePath": "/workspace/grass/raster/r.viewshed/testsuite/test_r_viewshed.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'test' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "testrw",
            "obj": "",
            "line": 110,
            "column": 4,
            "endLine": 110,
            "endColumn": 41,
            "path": "raster/r.what/testsuite/testrw.py",
            "absolutePath": "/workspace/grass/raster/r.what/testsuite/testrw.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.correlate",
            "obj": "main",
            "line": 37,
            "column": 13,
            "endLine": 37,
            "endColumn": 20,
            "path": "scripts/d.correlate/d.correlate.py",
            "absolutePath": "/workspace/grass/scripts/d.correlate/d.correlate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.frame",
            "obj": "main",
            "line": 284,
            "column": 7,
            "endLine": 284,
            "endColumn": 12,
            "path": "scripts/d.frame/d.frame.py",
            "absolutePath": "/workspace/grass/scripts/d.frame/d.frame.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.frame",
            "obj": "main",
            "line": 299,
            "column": 32,
            "endLine": 299,
            "endColumn": 39,
            "path": "scripts/d.frame/d.frame.py",
            "absolutePath": "/workspace/grass/scripts/d.frame/d.frame.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'outercircle' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.polar",
            "obj": "plot_xgraph",
            "line": 69,
            "column": 48,
            "endLine": 69,
            "endColumn": 59,
            "path": "scripts/d.polar/d.polar.py",
            "absolutePath": "/workspace/grass/scripts/d.polar/d.polar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.polar",
            "obj": "main",
            "line": 422,
            "column": 10,
            "endLine": 422,
            "endColumn": 17,
            "path": "scripts/d.polar/d.polar.py",
            "absolutePath": "/workspace/grass/scripts/d.polar/d.polar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.polar",
            "obj": "main",
            "line": 425,
            "column": 13,
            "endLine": 425,
            "endColumn": 18,
            "path": "scripts/d.polar/d.polar.py",
            "absolutePath": "/workspace/grass/scripts/d.polar/d.polar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'app' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.edit",
            "obj": "wxGUI.OverviewCanvas.set_window",
            "line": 175,
            "column": 36,
            "endLine": 175,
            "endColumn": 39,
            "path": "scripts/d.rast.edit/d.rast.edit.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.edit/d.rast.edit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'Panel' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.edit",
            "obj": "wxGUI.ColorPanel",
            "line": 360,
            "column": 21,
            "endLine": 360,
            "endColumn": 26,
            "path": "scripts/d.rast.edit/d.rast.edit.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.edit/d.rast.edit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ClientDC' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.edit",
            "obj": "wxGUI.ColorPanel.OnErase",
            "line": 375,
            "column": 21,
            "endLine": 375,
            "endColumn": 29,
            "path": "scripts/d.rast.edit/d.rast.edit.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.edit/d.rast.edit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'Menu' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.edit",
            "obj": "wxGUI.MainWindow.__init__",
            "line": 398,
            "column": 23,
            "endLine": 398,
            "endColumn": 27,
            "path": "scripts/d.rast.edit/d.rast.edit.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.edit/d.rast.edit.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (379/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "d.rast.edit",
            "obj": "wxGUI",
            "line": 120,
            "column": 0,
            "endLine": 120,
            "endColumn": 9,
            "path": "scripts/d.rast.edit/d.rast.edit.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.edit/d.rast.edit.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.leg",
            "obj": "main",
            "line": 86,
            "column": 10,
            "endLine": 86,
            "endColumn": 17,
            "path": "scripts/d.rast.leg/d.rast.leg.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.leg/d.rast.leg.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "d.rast.leg",
            "obj": "main",
            "line": 89,
            "column": 11,
            "endLine": 89,
            "endColumn": 16,
            "path": "scripts/d.rast.leg/d.rast.leg.py",
            "absolutePath": "/workspace/grass/scripts/d.rast.leg/d.rast.leg.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.dropcolumn",
            "obj": "main",
            "line": 53,
            "column": 12,
            "endLine": 53,
            "endColumn": 19,
            "path": "scripts/db.dropcolumn/db.dropcolumn.py",
            "absolutePath": "/workspace/grass/scripts/db.dropcolumn/db.dropcolumn.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.dropcolumn",
            "obj": "main",
            "line": 57,
            "column": 12,
            "endLine": 57,
            "endColumn": 17,
            "path": "scripts/db.dropcolumn/db.dropcolumn.py",
            "absolutePath": "/workspace/grass/scripts/db.dropcolumn/db.dropcolumn.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.droptable",
            "obj": "main",
            "line": 51,
            "column": 12,
            "endLine": 51,
            "endColumn": 19,
            "path": "scripts/db.droptable/db.droptable.py",
            "absolutePath": "/workspace/grass/scripts/db.droptable/db.droptable.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.droptable",
            "obj": "main",
            "line": 52,
            "column": 12,
            "endLine": 52,
            "endColumn": 17,
            "path": "scripts/db.droptable/db.droptable.py",
            "absolutePath": "/workspace/grass/scripts/db.droptable/db.droptable.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.in.ogr",
            "obj": "main",
            "line": 82,
            "column": 12,
            "endLine": 82,
            "endColumn": 19,
            "path": "scripts/db.in.ogr/db.in.ogr.py",
            "absolutePath": "/workspace/grass/scripts/db.in.ogr/db.in.ogr.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.out.ogr",
            "obj": "main",
            "line": 66,
            "column": 12,
            "endLine": 66,
            "endColumn": 19,
            "path": "scripts/db.out.ogr/db.out.ogr.py",
            "absolutePath": "/workspace/grass/scripts/db.out.ogr/db.out.ogr.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.test",
            "obj": "main",
            "line": 38,
            "column": 16,
            "endLine": 38,
            "endColumn": 23,
            "path": "scripts/db.test/db.test.py",
            "absolutePath": "/workspace/grass/scripts/db.test/db.test.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 108,
            "column": 13,
            "endLine": 108,
            "endColumn": 18,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 110,
            "column": 12,
            "endLine": 110,
            "endColumn": 19,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'q50a' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 334,
            "column": 11,
            "endLine": 334,
            "endColumn": 15,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'q50b' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 334,
            "column": 18,
            "endLine": 334,
            "endColumn": 22,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'q25' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 337,
            "column": 51,
            "endLine": 337,
            "endColumn": 54,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'q75' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "db.univar",
            "obj": "main",
            "line": 339,
            "column": 51,
            "endLine": 339,
            "endColumn": 54,
            "path": "scripts/db.univar/db.univar.py",
            "absolutePath": "/workspace/grass/scripts/db.univar/db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'major' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension.all",
            "obj": "find_addon_name",
            "line": 181,
            "column": 14,
            "endLine": 181,
            "endColumn": 19,
            "path": "scripts/g.extension.all/g.extension.all.py",
            "absolutePath": "/workspace/grass/scripts/g.extension.all/g.extension.all.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension.all",
            "obj": "main",
            "line": 210,
            "column": 13,
            "endLine": 210,
            "endColumn": 20,
            "path": "scripts/g.extension.all/g.extension.all.py",
            "absolutePath": "/workspace/grass/scripts/g.extension.all/g.extension.all.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension.all",
            "obj": "main",
            "line": 211,
            "column": 17,
            "endLine": 211,
            "endColumn": 22,
            "path": "scripts/g.extension.all/g.extension.all.py",
            "absolutePath": "/workspace/grass/scripts/g.extension.all/g.extension.all.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2891/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'distutils.dir_util'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "",
            "line": 159,
            "column": 4,
            "endLine": 159,
            "endColumn": 44,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "GitAdapter.__init__",
            "line": 208,
            "column": 4,
            "endLine": 208,
            "endColumn": 16,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension",
            "obj": "get_installed_extensions",
            "line": 653,
            "column": 7,
            "endLine": 653,
            "endColumn": 12,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension",
            "obj": "get_installed_toolboxes",
            "line": 684,
            "column": 28,
            "endLine": 684,
            "endColumn": 35,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "wrong-exception-operation",
            "message": "Invalid exception operation. Did you mean '(ETREE_EXCEPTIONS, (OSError, IOError))' instead?",
            "messageId": "W0716",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "get_installed_toolboxes",
            "line": 690,
            "column": 11,
            "endLine": 690,
            "endColumn": 48,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "wrong-exception-operation",
            "message": "Invalid exception operation. Did you mean '(ETREE_EXCEPTIONS, (OSError, IOError))' instead?",
            "messageId": "W0716",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "get_installed_modules",
            "line": 717,
            "column": 11,
            "endLine": 717,
            "endColumn": 48,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'TMPDIR' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension",
            "obj": "cleanup",
            "line": 1016,
            "column": 18,
            "endLine": 1016,
            "endColumn": 24,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'VERSION' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.extension",
            "obj": "write_xml_modules",
            "line": 1030,
            "column": 36,
            "endLine": 1030,
            "endColumn": 43,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "write_xml_extensions",
            "line": 1085,
            "column": 12,
            "endLine": 1090,
            "endColumn": 15,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "install_extension_xml",
            "line": 1402,
            "column": 8,
            "endLine": 1411,
            "endColumn": 11,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "install_extension_xml",
            "line": 1422,
            "column": 12,
            "endLine": 1429,
            "endColumn": 15,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-set-comprehension",
            "message": "Consider using a set comprehension",
            "messageId": "R1718",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "get_multi_addon_addons_which_install_only_html_man_page",
            "line": 1469,
            "column": 22,
            "endLine": 1469,
            "endColumn": 68,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "install_module_xml",
            "line": 1561,
            "column": 12,
            "endLine": 1591,
            "endColumn": 15,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "wrong-exception-operation",
            "message": "Invalid exception operation. Did you mean '(ETREE_EXCEPTIONS, (OSError, IOError))' instead?",
            "messageId": "W0716",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "remove_extension",
            "line": 2131,
            "column": 15,
            "endLine": 2131,
            "endColumn": 52,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "wrong-exception-operation",
            "message": "Invalid exception operation. Did you mean '(ETREE_EXCEPTIONS, (OSError, IOError))' instead?",
            "messageId": "W0716",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "remove_extension",
            "line": 2167,
            "column": 15,
            "endLine": 2167,
            "endColumn": 52,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "resolve_known_host_service",
            "line": 2605,
            "column": 8,
            "endLine": 2605,
            "endColumn": 18,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "convention",
            "symbol": "empty-docstring",
            "message": "Empty function docstring",
            "messageId": "C0112",
            "confidence": "HIGH",
            "module": "g.extension",
            "obj": "validate_url",
            "line": 2612,
            "column": 0,
            "endLine": 2612,
            "endColumn": 16,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "g.extension",
            "obj": "main",
            "line": 2859,
            "column": 16,
            "endLine": 2862,
            "endColumn": 19,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "global-at-module-level",
            "message": "Using the global statement at the module level",
            "messageId": "W0604",
            "confidence": "HIGH",
            "module": "g.extension",
            "obj": "",
            "line": 2884,
            "column": 4,
            "endLine": 2884,
            "endColumn": 17,
            "path": "scripts/g.extension/g.extension.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/g.extension.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "test_addons_download",
            "obj": "TestModuleDownloadFromDifferentSources.setUp",
            "line": 54,
            "column": 16,
            "endLine": 57,
            "endColumn": 17,
            "path": "scripts/g.extension/testsuite/test_addons_download.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/testsuite/test_addons_download.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "test_addons_modules",
            "obj": "TestModulesFromDifferentSources.setUp",
            "line": 83,
            "column": 16,
            "endLine": 87,
            "endColumn": 17,
            "path": "scripts/g.extension/testsuite/test_addons_modules.py",
            "absolutePath": "/workspace/grass/scripts/g.extension/testsuite/test_addons_modules.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.manual",
            "obj": "start_browser",
            "line": 67,
            "column": 7,
            "endLine": 67,
            "endColumn": 12,
            "path": "scripts/g.manual/g.manual.py",
            "absolutePath": "/workspace/grass/scripts/g.manual/g.manual.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.manual",
            "obj": "main",
            "line": 140,
            "column": 12,
            "endLine": 140,
            "endColumn": 19,
            "path": "scripts/g.manual/g.manual.py",
            "absolutePath": "/workspace/grass/scripts/g.manual/g.manual.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.search.modules",
            "obj": "main",
            "line": 79,
            "column": 10,
            "endLine": 79,
            "endColumn": 15,
            "path": "scripts/g.search.modules/g.search.modules.py",
            "absolutePath": "/workspace/grass/scripts/g.search.modules/g.search.modules.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "g.search.modules",
            "obj": "main",
            "line": 92,
            "column": 7,
            "endLine": 92,
            "endColumn": 14,
            "path": "scripts/g.search.modules/g.search.modules.py",
            "absolutePath": "/workspace/grass/scripts/g.search.modules/g.search.modules.py"
        },
        {
            "type": "convention",
            "symbol": "empty-docstring",
            "message": "Empty method docstring",
            "messageId": "C0112",
            "confidence": "INFERENCE",
            "module": "test_g_search_modules",
            "obj": "TestSearchModule.test_terminal_output",
            "line": 37,
            "column": 4,
            "endLine": 37,
            "endColumn": 28,
            "path": "scripts/g.search.modules/testsuite/test_g_search_modules.py",
            "absolutePath": "/workspace/grass/scripts/g.search.modules/testsuite/test_g_search_modules.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.band.library",
            "obj": "main",
            "line": 55,
            "column": 14,
            "endLine": 55,
            "endColumn": 21,
            "path": "scripts/i.band.library/i.band.library.py",
            "absolutePath": "/workspace/grass/scripts/i.band.library/i.band.library.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.band.library",
            "obj": "main",
            "line": 58,
            "column": 25,
            "endLine": 58,
            "endColumn": 30,
            "path": "scripts/i.band.library/i.band.library.py",
            "absolutePath": "/workspace/grass/scripts/i.band.library/i.band.library.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.colors.enhance",
            "obj": "main",
            "line": 113,
            "column": 10,
            "endLine": 113,
            "endColumn": 17,
            "path": "scripts/i.colors.enhance/i.colors.enhance.py",
            "absolutePath": "/workspace/grass/scripts/i.colors.enhance/i.colors.enhance.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.colors.enhance",
            "obj": "main",
            "line": 117,
            "column": 11,
            "endLine": 117,
            "endColumn": 16,
            "path": "scripts/i.colors.enhance/i.colors.enhance.py",
            "absolutePath": "/workspace/grass/scripts/i.colors.enhance/i.colors.enhance.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.image.mosaic",
            "obj": "main",
            "line": 65,
            "column": 13,
            "endLine": 65,
            "endColumn": 20,
            "path": "scripts/i.image.mosaic/i.image.mosaic.py",
            "absolutePath": "/workspace/grass/scripts/i.image.mosaic/i.image.mosaic.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.in.spotvgt",
            "obj": "main",
            "line": 122,
            "column": 13,
            "endLine": 122,
            "endColumn": 20,
            "path": "scripts/i.in.spotvgt/i.in.spotvgt.py",
            "absolutePath": "/workspace/grass/scripts/i.in.spotvgt/i.in.spotvgt.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.in.spotvgt",
            "obj": "main",
            "line": 124,
            "column": 11,
            "endLine": 124,
            "endColumn": 16,
            "path": "scripts/i.in.spotvgt/i.in.spotvgt.py",
            "absolutePath": "/workspace/grass/scripts/i.in.spotvgt/i.in.spotvgt.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.oif",
            "obj": "main",
            "line": 73,
            "column": 12,
            "endLine": 73,
            "endColumn": 17,
            "path": "scripts/i.oif/i.oif.py",
            "absolutePath": "/workspace/grass/scripts/i.oif/i.oif.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.oif",
            "obj": "main",
            "line": 75,
            "column": 12,
            "endLine": 75,
            "endColumn": 19,
            "path": "scripts/i.oif/i.oif.py",
            "absolutePath": "/workspace/grass/scripts/i.oif/i.oif.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "i.pansharpen",
            "obj": "",
            "line": 749,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "scripts/i.pansharpen/i.pansharpen.py",
            "absolutePath": "/workspace/grass/scripts/i.pansharpen/i.pansharpen.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.pansharpen",
            "obj": "main",
            "line": 111,
            "column": 14,
            "endLine": 111,
            "endColumn": 21,
            "path": "scripts/i.pansharpen/i.pansharpen.py",
            "absolutePath": "/workspace/grass/scripts/i.pansharpen/i.pansharpen.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.pansharpen",
            "obj": "main",
            "line": 118,
            "column": 15,
            "endLine": 118,
            "endColumn": 20,
            "path": "scripts/i.pansharpen/i.pansharpen.py",
            "absolutePath": "/workspace/grass/scripts/i.pansharpen/i.pansharpen.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'term_opts' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.spectral",
            "obj": "draw_gnuplot",
            "line": 123,
            "column": 32,
            "endLine": 123,
            "endColumn": 41,
            "path": "scripts/i.spectral/i.spectral.py",
            "absolutePath": "/workspace/grass/scripts/i.spectral/i.spectral.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.spectral",
            "obj": "main",
            "line": 237,
            "column": 12,
            "endLine": 237,
            "endColumn": 19,
            "path": "scripts/i.spectral/i.spectral.py",
            "absolutePath": "/workspace/grass/scripts/i.spectral/i.spectral.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "i.spectral",
            "obj": "main",
            "line": 243,
            "column": 19,
            "endLine": 243,
            "endColumn": 24,
            "path": "scripts/i.spectral/i.spectral.py",
            "absolutePath": "/workspace/grass/scripts/i.spectral/i.spectral.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "m.proj",
            "obj": "main",
            "line": 129,
            "column": 13,
            "endLine": 129,
            "endColumn": 20,
            "path": "scripts/m.proj/m.proj.py",
            "absolutePath": "/workspace/grass/scripts/m.proj/m.proj.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "m.proj",
            "obj": "main",
            "line": 135,
            "column": 12,
            "endLine": 135,
            "endColumn": 17,
            "path": "scripts/m.proj/m.proj.py",
            "absolutePath": "/workspace/grass/scripts/m.proj/m.proj.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.blend",
            "obj": "main",
            "line": 52,
            "column": 12,
            "endLine": 52,
            "endColumn": 19,
            "path": "scripts/r.blend/r.blend.py",
            "absolutePath": "/workspace/grass/scripts/r.blend/r.blend.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.blend",
            "obj": "main",
            "line": 106,
            "column": 7,
            "endLine": 106,
            "endColumn": 12,
            "path": "scripts/r.blend/r.blend.py",
            "absolutePath": "/workspace/grass/scripts/r.blend/r.blend.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.buffer.lowmem",
            "obj": "main",
            "line": 75,
            "column": 12,
            "endLine": 75,
            "endColumn": 19,
            "path": "scripts/r.buffer.lowmem/r.buffer.lowmem.py",
            "absolutePath": "/workspace/grass/scripts/r.buffer.lowmem/r.buffer.lowmem.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.buffer.lowmem",
            "obj": "main",
            "line": 79,
            "column": 11,
            "endLine": 79,
            "endColumn": 16,
            "path": "scripts/r.buffer.lowmem/r.buffer.lowmem.py",
            "absolutePath": "/workspace/grass/scripts/r.buffer.lowmem/r.buffer.lowmem.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'mean' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.colors.stddev",
            "obj": "z",
            "line": 41,
            "column": 11,
            "endLine": 41,
            "endColumn": 15,
            "path": "scripts/r.colors.stddev/r.colors.stddev.py",
            "absolutePath": "/workspace/grass/scripts/r.colors.stddev/r.colors.stddev.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'stddev' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.colors.stddev",
            "obj": "z",
            "line": 41,
            "column": 22,
            "endLine": 41,
            "endColumn": 28,
            "path": "scripts/r.colors.stddev/r.colors.stddev.py",
            "absolutePath": "/workspace/grass/scripts/r.colors.stddev/r.colors.stddev.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.colors.stddev",
            "obj": "main",
            "line": 55,
            "column": 10,
            "endLine": 55,
            "endColumn": 17,
            "path": "scripts/r.colors.stddev/r.colors.stddev.py",
            "absolutePath": "/workspace/grass/scripts/r.colors.stddev/r.colors.stddev.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.colors.stddev",
            "obj": "main",
            "line": 56,
            "column": 11,
            "endLine": 56,
            "endColumn": 16,
            "path": "scripts/r.colors.stddev/r.colors.stddev.py",
            "absolutePath": "/workspace/grass/scripts/r.colors.stddev/r.colors.stddev.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.drain",
            "obj": "main",
            "line": 131,
            "column": 13,
            "endLine": 131,
            "endColumn": 20,
            "path": "scripts/r.drain/r.drain.py",
            "absolutePath": "/workspace/grass/scripts/r.drain/r.drain.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.drain",
            "obj": "main",
            "line": 162,
            "column": 7,
            "endLine": 162,
            "endColumn": 12,
            "path": "scripts/r.drain/r.drain.py",
            "absolutePath": "/workspace/grass/scripts/r.drain/r.drain.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.fillnulls",
            "obj": "main",
            "line": 139,
            "column": 12,
            "endLine": 139,
            "endColumn": 19,
            "path": "scripts/r.fillnulls/r.fillnulls.py",
            "absolutePath": "/workspace/grass/scripts/r.fillnulls/r.fillnulls.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.grow",
            "obj": "main",
            "line": 81,
            "column": 12,
            "endLine": 81,
            "endColumn": 19,
            "path": "scripts/r.grow/r.grow.py",
            "absolutePath": "/workspace/grass/scripts/r.grow/r.grow.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.grow",
            "obj": "main",
            "line": 86,
            "column": 15,
            "endLine": 86,
            "endColumn": 20,
            "path": "scripts/r.grow/r.grow.py",
            "absolutePath": "/workspace/grass/scripts/r.grow/r.grow.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.import",
            "obj": "main",
            "line": 162,
            "column": 21,
            "endLine": 162,
            "endColumn": 28,
            "path": "scripts/r.import/r.import.py",
            "absolutePath": "/workspace/grass/scripts/r.import/r.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.import",
            "obj": "main",
            "line": 169,
            "column": 7,
            "endLine": 169,
            "endColumn": 12,
            "path": "scripts/r.import/r.import.py",
            "absolutePath": "/workspace/grass/scripts/r.import/r.import.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_r_import",
            "obj": "TestRImportRegion.tearDown",
            "line": 16,
            "column": 4,
            "endLine": 16,
            "endColumn": 16,
            "path": "scripts/r.import/testsuite/test_r_import.py",
            "absolutePath": "/workspace/grass/scripts/r.import/testsuite/test_r_import.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestRImportRegion.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_r_import",
            "obj": "TestRImportRegion.tearDown",
            "line": 16,
            "column": 4,
            "endLine": 16,
            "endColumn": 16,
            "path": "scripts/r.import/testsuite/test_r_import.py",
            "absolutePath": "/workspace/grass/scripts/r.import/testsuite/test_r_import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.aster",
            "obj": "main",
            "line": 112,
            "column": 12,
            "endLine": 112,
            "endColumn": 19,
            "path": "scripts/r.in.aster/r.in.aster.py",
            "absolutePath": "/workspace/grass/scripts/r.in.aster/r.in.aster.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.srtm",
            "obj": "main",
            "line": 164,
            "column": 12,
            "endLine": 164,
            "endColumn": 19,
            "path": "scripts/r.in.srtm/r.in.srtm.py",
            "absolutePath": "/workspace/grass/scripts/r.in.srtm/r.in.srtm.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.srtm",
            "obj": "main",
            "line": 166,
            "column": 10,
            "endLine": 166,
            "endColumn": 15,
            "path": "scripts/r.in.srtm/r.in.srtm.py",
            "absolutePath": "/workspace/grass/scripts/r.in.srtm/r.in.srtm.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'is_zip' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.srtm",
            "obj": "main",
            "line": 210,
            "column": 7,
            "endLine": 210,
            "endColumn": 13,
            "path": "scripts/r.in.srtm/r.in.srtm.py",
            "absolutePath": "/workspace/grass/scripts/r.in.srtm/r.in.srtm.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.wms",
            "obj": "main",
            "line": 239,
            "column": 18,
            "endLine": 239,
            "endColumn": 25,
            "path": "scripts/r.in.wms/r.in.wms.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/r.in.wms.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.in.wms",
            "obj": "main",
            "line": 254,
            "column": 7,
            "endLine": 254,
            "endColumn": 12,
            "path": "scripts/r.in.wms/r.in.wms.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/r.in.wms.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'urls' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "wms_cap_parsers",
            "obj": "OnEarthCapabilitiesTree._checkLayer",
            "line": 622,
            "column": 20,
            "endLine": 622,
            "endColumn": 36,
            "path": "scripts/r.in.wms/wms_cap_parsers.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_cap_parsers.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'req_mgr' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 87,
            "column": 21,
            "endLine": 87,
            "endColumn": 28,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tile' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 102,
            "column": 19,
            "endLine": 102,
            "endColumn": 23,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 140,
            "column": 16,
            "endLine": 159,
            "endColumn": 86,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "unsubscriptable-object",
            "message": "Value 'e' is unsubscriptable",
            "messageId": "E1136",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 140,
            "column": 51,
            "endLine": 140,
            "endColumn": 52,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'sleep_time' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 153,
            "column": 26,
            "endLine": 153,
            "endColumn": 36,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'temp_map_dataset' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "wms_drv",
            "obj": "WMSDrv._download",
            "line": 234,
            "column": 12,
            "endLine": 234,
            "endColumn": 28,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/1)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "BaseRequestMgr",
            "line": 327,
            "column": 0,
            "endLine": 327,
            "endColumn": 20,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'best_scale_den' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._findTileMats",
            "line": 737,
            "column": 24,
            "endLine": 737,
            "endColumn": 38,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'best_t_mat' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._findTileMats",
            "line": 745,
            "column": 15,
            "endLine": 745,
            "endColumn": 25,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'bbox' has been renamed to 'tile_mat' in overriding 'WMTSRequestMgr._computeRequestData' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._computeRequestData",
            "line": 824,
            "column": 4,
            "endLine": 824,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'tl_corner' has been renamed to 'params' in overriding 'WMTSRequestMgr._computeRequestData' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._computeRequestData",
            "line": 824,
            "column": 4,
            "endLine": 824,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'tile_span' has been renamed to 'bbox' in overriding 'WMTSRequestMgr._computeRequestData' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._computeRequestData",
            "line": 824,
            "column": 4,
            "endLine": 824,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'tile_size' has been renamed to 'mat_num_bbox' in overriding 'WMTSRequestMgr._computeRequestData' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._computeRequestData",
            "line": 824,
            "column": 4,
            "endLine": 824,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'mat_num_bbox' has been renamed to 'mat_set_srs' in overriding 'WMTSRequestMgr._computeRequestData' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "WMTSRequestMgr._computeRequestData",
            "line": 824,
            "column": 4,
            "endLine": 824,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'best_res' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "wms_drv",
            "obj": "OnEarthRequestMgr._parseTilePattern",
            "line": 1020,
            "column": 24,
            "endLine": 1020,
            "endColumn": 32,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 6 in 'BaseRequestMgr._computeRequestData' and is now 5 in overriding 'OnEarthRequestMgr._computeRequestData' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "wms_drv",
            "obj": "OnEarthRequestMgr._computeRequestData",
            "line": 1086,
            "column": 4,
            "endLine": 1086,
            "endColumn": 27,
            "path": "scripts/r.in.wms/wms_drv.py",
            "absolutePath": "/workspace/grass/scripts/r.in.wms/wms_drv.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tmp' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "r.mask",
            "obj": "cleanup",
            "line": 81,
            "column": 7,
            "endLine": 81,
            "endColumn": 10,
            "path": "scripts/r.mask/r.mask.py",
            "absolutePath": "/workspace/grass/scripts/r.mask/r.mask.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tmp_hull' before assignment",
            "messageId": "E0606",
            "confidence": "INFERENCE",
            "module": "r.mask",
            "obj": "cleanup",
            "line": 83,
            "column": 7,
            "endLine": 83,
            "endColumn": 15,
            "path": "scripts/r.mask/r.mask.py",
            "absolutePath": "/workspace/grass/scripts/r.mask/r.mask.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.mask",
            "obj": "main",
            "line": 90,
            "column": 13,
            "endLine": 90,
            "endColumn": 20,
            "path": "scripts/r.mask/r.mask.py",
            "absolutePath": "/workspace/grass/scripts/r.mask/r.mask.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.mask",
            "obj": "main",
            "line": 96,
            "column": 13,
            "endLine": 96,
            "endColumn": 18,
            "path": "scripts/r.mask/r.mask.py",
            "absolutePath": "/workspace/grass/scripts/r.mask/r.mask.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.out.xyz",
            "obj": "main",
            "line": 48,
            "column": 13,
            "endLine": 48,
            "endColumn": 20,
            "path": "scripts/r.out.xyz/r.out.xyz.py",
            "absolutePath": "/workspace/grass/scripts/r.out.xyz/r.out.xyz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.out.xyz",
            "obj": "main",
            "line": 49,
            "column": 15,
            "endLine": 49,
            "endColumn": 20,
            "path": "scripts/r.out.xyz/r.out.xyz.py",
            "absolutePath": "/workspace/grass/scripts/r.out.xyz/r.out.xyz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.pack",
            "obj": "main",
            "line": 49,
            "column": 13,
            "endLine": 49,
            "endColumn": 20,
            "path": "scripts/r.pack/r.pack.py",
            "absolutePath": "/workspace/grass/scripts/r.pack/r.pack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.pack",
            "obj": "main",
            "line": 50,
            "column": 22,
            "endLine": 50,
            "endColumn": 27,
            "path": "scripts/r.pack/r.pack.py",
            "absolutePath": "/workspace/grass/scripts/r.pack/r.pack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.plane",
            "obj": "main",
            "line": 72,
            "column": 11,
            "endLine": 72,
            "endColumn": 18,
            "path": "scripts/r.plane/r.plane.py",
            "absolutePath": "/workspace/grass/scripts/r.plane/r.plane.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.reclass.area",
            "obj": "main",
            "line": 203,
            "column": 13,
            "endLine": 203,
            "endColumn": 20,
            "path": "scripts/r.reclass.area/r.reclass.area.py",
            "absolutePath": "/workspace/grass/scripts/r.reclass.area/r.reclass.area.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.reclass.area",
            "obj": "main",
            "line": 209,
            "column": 14,
            "endLine": 209,
            "endColumn": 19,
            "path": "scripts/r.reclass.area/r.reclass.area.py",
            "absolutePath": "/workspace/grass/scripts/r.reclass.area/r.reclass.area.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "testrra",
            "obj": "Testrr.tearDown",
            "line": 29,
            "column": 4,
            "endLine": 29,
            "endColumn": 16,
            "path": "scripts/r.reclass.area/testsuite/testrra.py",
            "absolutePath": "/workspace/grass/scripts/r.reclass.area/testsuite/testrra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'Testrr.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "testrra",
            "obj": "Testrr.tearDown",
            "line": 29,
            "column": 4,
            "endLine": 29,
            "endColumn": 16,
            "path": "scripts/r.reclass.area/testsuite/testrra.py",
            "absolutePath": "/workspace/grass/scripts/r.reclass.area/testsuite/testrra.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'test' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "testrra",
            "obj": "",
            "line": 99,
            "column": 4,
            "endLine": 99,
            "endColumn": 41,
            "path": "scripts/r.reclass.area/testsuite/testrra.py",
            "absolutePath": "/workspace/grass/scripts/r.reclass.area/testsuite/testrra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.semantic.label",
            "obj": "main",
            "line": 105,
            "column": 11,
            "endLine": 105,
            "endColumn": 18,
            "path": "scripts/r.semantic.label/r.semantic.label.py",
            "absolutePath": "/workspace/grass/scripts/r.semantic.label/r.semantic.label.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cs2cs' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.tileset",
            "obj": "project",
            "line": 173,
            "column": 20,
            "endLine": 173,
            "endColumn": 25,
            "path": "scripts/r.tileset/r.tileset.py",
            "absolutePath": "/workspace/grass/scripts/r.tileset/r.tileset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.tileset",
            "obj": "main",
            "line": 244,
            "column": 19,
            "endLine": 244,
            "endColumn": 26,
            "path": "scripts/r.tileset/r.tileset.py",
            "absolutePath": "/workspace/grass/scripts/r.tileset/r.tileset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.tileset",
            "obj": "main",
            "line": 426,
            "column": 19,
            "endLine": 426,
            "endColumn": 24,
            "path": "scripts/r.tileset/r.tileset.py",
            "absolutePath": "/workspace/grass/scripts/r.tileset/r.tileset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.unpack",
            "obj": "main",
            "line": 58,
            "column": 13,
            "endLine": 58,
            "endColumn": 20,
            "path": "scripts/r.unpack/r.unpack.py",
            "absolutePath": "/workspace/grass/scripts/r.unpack/r.unpack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r.unpack",
            "obj": "main",
            "line": 82,
            "column": 7,
            "endLine": 82,
            "endColumn": 12,
            "path": "scripts/r.unpack/r.unpack.py",
            "absolutePath": "/workspace/grass/scripts/r.unpack/r.unpack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r3.in.xyz",
            "obj": "main",
            "line": 189,
            "column": 13,
            "endLine": 189,
            "endColumn": 20,
            "path": "scripts/r3.in.xyz/r3.in.xyz.py",
            "absolutePath": "/workspace/grass/scripts/r3.in.xyz/r3.in.xyz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "r3.in.xyz",
            "obj": "main",
            "line": 204,
            "column": 16,
            "endLine": 204,
            "endColumn": 21,
            "path": "scripts/r3.in.xyz/r3.in.xyz.py",
            "absolutePath": "/workspace/grass/scripts/r3.in.xyz/r3.in.xyz.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.centroids",
            "obj": "main",
            "line": 57,
            "column": 7,
            "endLine": 57,
            "endColumn": 14,
            "path": "scripts/v.centroids/v.centroids.py",
            "absolutePath": "/workspace/grass/scripts/v.centroids/v.centroids.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'opt' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.clip",
            "obj": "main",
            "line": 89,
            "column": 16,
            "endLine": 89,
            "endColumn": 19,
            "path": "scripts/v.clip/v.clip.py",
            "absolutePath": "/workspace/grass/scripts/v.clip/v.clip.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flg' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.clip",
            "obj": "main",
            "line": 93,
            "column": 20,
            "endLine": 93,
            "endColumn": 23,
            "path": "scripts/v.clip/v.clip.py",
            "absolutePath": "/workspace/grass/scripts/v.clip/v.clip.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.addcolumn",
            "obj": "main",
            "line": 68,
            "column": 10,
            "endLine": 68,
            "endColumn": 17,
            "path": "scripts/v.db.addcolumn/v.db.addcolumn.py",
            "absolutePath": "/workspace/grass/scripts/v.db.addcolumn/v.db.addcolumn.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.addtable",
            "obj": "main",
            "line": 64,
            "column": 13,
            "endLine": 64,
            "endColumn": 20,
            "path": "scripts/v.db.addtable/v.db.addtable.py",
            "absolutePath": "/workspace/grass/scripts/v.db.addtable/v.db.addtable.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.dropcolumn",
            "obj": "main",
            "line": 46,
            "column": 10,
            "endLine": 46,
            "endColumn": 17,
            "path": "scripts/v.db.dropcolumn/v.db.dropcolumn.py",
            "absolutePath": "/workspace/grass/scripts/v.db.dropcolumn/v.db.dropcolumn.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.droprow",
            "obj": "main",
            "line": 49,
            "column": 18,
            "endLine": 49,
            "endColumn": 25,
            "path": "scripts/v.db.droprow/v.db.droprow.py",
            "absolutePath": "/workspace/grass/scripts/v.db.droprow/v.db.droprow.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.droptable",
            "obj": "main",
            "line": 44,
            "column": 12,
            "endLine": 44,
            "endColumn": 17,
            "path": "scripts/v.db.droptable/v.db.droptable.py",
            "absolutePath": "/workspace/grass/scripts/v.db.droptable/v.db.droptable.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.droptable",
            "obj": "main",
            "line": 45,
            "column": 10,
            "endLine": 45,
            "endColumn": 17,
            "path": "scripts/v.db.droptable/v.db.droptable.py",
            "absolutePath": "/workspace/grass/scripts/v.db.droptable/v.db.droptable.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.join",
            "obj": "main",
            "line": 95,
            "column": 30,
            "endLine": 95,
            "endColumn": 37,
            "path": "scripts/v.db.join/v.db.join.py",
            "absolutePath": "/workspace/grass/scripts/v.db.join/v.db.join.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'nuldev' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.reconnect.all",
            "obj": "copy_tab",
            "line": 128,
            "column": 19,
            "endLine": 128,
            "endColumn": 25,
            "path": "scripts/v.db.reconnect.all/v.db.reconnect.all.py",
            "absolutePath": "/workspace/grass/scripts/v.db.reconnect.all/v.db.reconnect.all.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.reconnect.all",
            "obj": "main",
            "line": 199,
            "column": 19,
            "endLine": 199,
            "endColumn": 26,
            "path": "scripts/v.db.reconnect.all/v.db.reconnect.all.py",
            "absolutePath": "/workspace/grass/scripts/v.db.reconnect.all/v.db.reconnect.all.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.reconnect.all",
            "obj": "main",
            "line": 232,
            "column": 7,
            "endLine": 232,
            "endColumn": 12,
            "path": "scripts/v.db.reconnect.all/v.db.reconnect.all.py",
            "absolutePath": "/workspace/grass/scripts/v.db.reconnect.all/v.db.reconnect.all.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.renamecolumn",
            "obj": "main",
            "line": 47,
            "column": 10,
            "endLine": 47,
            "endColumn": 17,
            "path": "scripts/v.db.renamecolumn/v.db.renamecolumn.py",
            "absolutePath": "/workspace/grass/scripts/v.db.renamecolumn/v.db.renamecolumn.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.univar",
            "obj": "main",
            "line": 72,
            "column": 13,
            "endLine": 72,
            "endColumn": 20,
            "path": "scripts/v.db.univar/v.db.univar.py",
            "absolutePath": "/workspace/grass/scripts/v.db.univar/v.db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'nuldev' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.univar",
            "obj": "main",
            "line": 82,
            "column": 46,
            "endLine": 82,
            "endColumn": 52,
            "path": "scripts/v.db.univar/v.db.univar.py",
            "absolutePath": "/workspace/grass/scripts/v.db.univar/v.db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.univar",
            "obj": "main",
            "line": 91,
            "column": 7,
            "endLine": 91,
            "endColumn": 12,
            "path": "scripts/v.db.univar/v.db.univar.py",
            "absolutePath": "/workspace/grass/scripts/v.db.univar/v.db.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.db.update",
            "obj": "main",
            "line": 61,
            "column": 13,
            "endLine": 61,
            "endColumn": 20,
            "path": "scripts/v.db.update/v.db.update.py",
            "absolutePath": "/workspace/grass/scripts/v.db.update/v.db.update.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_v_import",
            "obj": "TestVImport.tearDown",
            "line": 21,
            "column": 4,
            "endLine": 21,
            "endColumn": 16,
            "path": "scripts/v.import/testsuite/test_v_import.py",
            "absolutePath": "/workspace/grass/scripts/v.import/testsuite/test_v_import.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestVImport.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_v_import",
            "obj": "TestVImport.tearDown",
            "line": 21,
            "column": 4,
            "endLine": 21,
            "endColumn": 16,
            "path": "scripts/v.import/testsuite/test_v_import.py",
            "absolutePath": "/workspace/grass/scripts/v.import/testsuite/test_v_import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.import",
            "obj": "main",
            "line": 178,
            "column": 7,
            "endLine": 178,
            "endColumn": 12,
            "path": "scripts/v.import/v.import.py",
            "absolutePath": "/workspace/grass/scripts/v.import/v.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.import",
            "obj": "main",
            "line": 185,
            "column": 59,
            "endLine": 185,
            "endColumn": 66,
            "path": "scripts/v.import/v.import.py",
            "absolutePath": "/workspace/grass/scripts/v.import/v.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.e00",
            "obj": "main",
            "line": 51,
            "column": 15,
            "endLine": 51,
            "endColumn": 22,
            "path": "scripts/v.in.e00/v.in.e00.py",
            "absolutePath": "/workspace/grass/scripts/v.in.e00/v.in.e00.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.geonames",
            "obj": "main",
            "line": 43,
            "column": 13,
            "endLine": 43,
            "endColumn": 20,
            "path": "scripts/v.in.geonames/v.in.geonames.py",
            "absolutePath": "/workspace/grass/scripts/v.in.geonames/v.in.geonames.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.lines",
            "obj": "main",
            "line": 51,
            "column": 19,
            "endLine": 51,
            "endColumn": 26,
            "path": "scripts/v.in.lines/v.in.lines.py",
            "absolutePath": "/workspace/grass/scripts/v.in.lines/v.in.lines.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.lines",
            "obj": "main",
            "line": 52,
            "column": 13,
            "endLine": 52,
            "endColumn": 18,
            "path": "scripts/v.in.lines/v.in.lines.py",
            "absolutePath": "/workspace/grass/scripts/v.in.lines/v.in.lines.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'inf' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "v.in.lines",
            "obj": "main",
            "line": 74,
            "column": 20,
            "endLine": 74,
            "endColumn": 23,
            "path": "scripts/v.in.lines/v.in.lines.py",
            "absolutePath": "/workspace/grass/scripts/v.in.lines/v.in.lines.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 66,
            "column": 13,
            "endLine": 66,
            "endColumn": 20,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 68,
            "column": 13,
            "endLine": 68,
            "endColumn": 18,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"points != []\" can be simplified to \"points\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 113,
            "column": 19,
            "endLine": 113,
            "endColumn": 31,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"points != []\" can be simplified to \"points\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 125,
            "column": 11,
            "endLine": 125,
            "endColumn": 23,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"points != []\" can be simplified to \"points\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 141,
            "column": 19,
            "endLine": 141,
            "endColumn": 31,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"points != []\" can be simplified to \"points\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "v.in.mapgen",
            "obj": "main",
            "line": 151,
            "column": 11,
            "endLine": 151,
            "endColumn": 23,
            "path": "scripts/v.in.mapgen/v.in.mapgen.py",
            "absolutePath": "/workspace/grass/scripts/v.in.mapgen/v.in.mapgen.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.wfs",
            "obj": "main",
            "line": 121,
            "column": 10,
            "endLine": 121,
            "endColumn": 17,
            "path": "scripts/v.in.wfs/v.in.wfs.py",
            "absolutePath": "/workspace/grass/scripts/v.in.wfs/v.in.wfs.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.in.wfs",
            "obj": "main",
            "line": 149,
            "column": 7,
            "endLine": 149,
            "endColumn": 12,
            "path": "scripts/v.in.wfs/v.in.wfs.py",
            "absolutePath": "/workspace/grass/scripts/v.in.wfs/v.in.wfs.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.pack",
            "obj": "main",
            "line": 51,
            "column": 13,
            "endLine": 51,
            "endColumn": 20,
            "path": "scripts/v.pack/v.pack.py",
            "absolutePath": "/workspace/grass/scripts/v.pack/v.pack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.pack",
            "obj": "main",
            "line": 52,
            "column": 22,
            "endLine": 52,
            "endColumn": 27,
            "path": "scripts/v.pack/v.pack.py",
            "absolutePath": "/workspace/grass/scripts/v.pack/v.pack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.rast.stats",
            "obj": "main",
            "line": 106,
            "column": 14,
            "endLine": 106,
            "endColumn": 21,
            "path": "scripts/v.rast.stats/v.rast.stats.py",
            "absolutePath": "/workspace/grass/scripts/v.rast.stats/v.rast.stats.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.rast.stats",
            "obj": "main",
            "line": 205,
            "column": 8,
            "endLine": 205,
            "endColumn": 13,
            "path": "scripts/v.rast.stats/v.rast.stats.py",
            "absolutePath": "/workspace/grass/scripts/v.rast.stats/v.rast.stats.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.report",
            "obj": "main",
            "line": 73,
            "column": 14,
            "endLine": 73,
            "endColumn": 21,
            "path": "scripts/v.report/v.report.py",
            "absolutePath": "/workspace/grass/scripts/v.report/v.report.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.report",
            "obj": "main",
            "line": 179,
            "column": 17,
            "endLine": 179,
            "endColumn": 22,
            "path": "scripts/v.report/v.report.py",
            "absolutePath": "/workspace/grass/scripts/v.report/v.report.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.to.lines",
            "obj": "main",
            "line": 51,
            "column": 12,
            "endLine": 51,
            "endColumn": 19,
            "path": "scripts/v.to.lines/v.to.lines.py",
            "absolutePath": "/workspace/grass/scripts/v.to.lines/v.to.lines.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.unpack",
            "obj": "main",
            "line": 62,
            "column": 13,
            "endLine": 62,
            "endColumn": 20,
            "path": "scripts/v.unpack/v.unpack.py",
            "absolutePath": "/workspace/grass/scripts/v.unpack/v.unpack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.unpack",
            "obj": "main",
            "line": 83,
            "column": 7,
            "endLine": 83,
            "endColumn": 12,
            "path": "scripts/v.unpack/v.unpack.py",
            "absolutePath": "/workspace/grass/scripts/v.unpack/v.unpack.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.what.strds",
            "obj": "main",
            "line": 103,
            "column": 12,
            "endLine": 103,
            "endColumn": 19,
            "path": "scripts/v.what.strds/v.what.strds.py",
            "absolutePath": "/workspace/grass/scripts/v.what.strds/v.what.strds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.what.strds",
            "obj": "main",
            "line": 109,
            "column": 18,
            "endLine": 109,
            "endColumn": 23,
            "path": "scripts/v.what.strds/v.what.strds.py",
            "absolutePath": "/workspace/grass/scripts/v.what.strds/v.what.strds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "v.what.vect",
            "obj": "main",
            "line": 69,
            "column": 18,
            "endLine": 69,
            "endColumn": 25,
            "path": "scripts/v.what.vect/v.what.vect.py",
            "absolutePath": "/workspace/grass/scripts/v.what.vect/v.what.vect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.copy",
            "obj": "main",
            "line": 60,
            "column": 12,
            "endLine": 60,
            "endColumn": 19,
            "path": "temporal/t.copy/t.copy.py",
            "absolutePath": "/workspace/grass/temporal/t.copy/t.copy.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.copy",
            "obj": "main",
            "line": 63,
            "column": 16,
            "endLine": 63,
            "endColumn": 21,
            "path": "temporal/t.copy/t.copy.py",
            "absolutePath": "/workspace/grass/temporal/t.copy/t.copy.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.create",
            "obj": "main",
            "line": 77,
            "column": 11,
            "endLine": 77,
            "endColumn": 18,
            "path": "temporal/t.create/t.create.py",
            "absolutePath": "/workspace/grass/temporal/t.create/t.create.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.info",
            "obj": "main",
            "line": 66,
            "column": 11,
            "endLine": 66,
            "endColumn": 18,
            "path": "temporal/t.info/t.info.py",
            "absolutePath": "/workspace/grass/temporal/t.info/t.info.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.info",
            "obj": "main",
            "line": 68,
            "column": 17,
            "endLine": 68,
            "endColumn": 22,
            "path": "temporal/t.info/t.info.py",
            "absolutePath": "/workspace/grass/temporal/t.info/t.info.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.list",
            "obj": "main",
            "line": 101,
            "column": 11,
            "endLine": 101,
            "endColumn": 18,
            "path": "temporal/t.list/t.list.py",
            "absolutePath": "/workspace/grass/temporal/t.list/t.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.list",
            "obj": "main",
            "line": 108,
            "column": 14,
            "endLine": 108,
            "endColumn": 19,
            "path": "temporal/t.list/t.list.py",
            "absolutePath": "/workspace/grass/temporal/t.list/t.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.merge",
            "obj": "main",
            "line": 54,
            "column": 13,
            "endLine": 54,
            "endColumn": 20,
            "path": "temporal/t.merge/t.merge.py",
            "absolutePath": "/workspace/grass/temporal/t.merge/t.merge.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'output_id' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.merge",
            "obj": "main",
            "line": 109,
            "column": 45,
            "endLine": 109,
            "endColumn": 54,
            "path": "temporal/t.merge/t.merge.py",
            "absolutePath": "/workspace/grass/temporal/t.merge/t.merge.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (58/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 149,
            "column": 0,
            "endLine": 149,
            "endColumn": 8,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 151,
            "column": 12,
            "endLine": 151,
            "endColumn": 19,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 163,
            "column": 20,
            "endLine": 163,
            "endColumn": 25,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tgis' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 170,
            "column": 4,
            "endLine": 170,
            "endColumn": 8,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'indicator_id' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 246,
            "column": 54,
            "endLine": 246,
            "endColumn": 66,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (64/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "t.rast.accdetect",
            "obj": "main",
            "line": 149,
            "column": 0,
            "endLine": 149,
            "endColumn": 8,
            "path": "temporal/t.rast.accdetect/t.rast.accdetect.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accdetect/t.rast.accdetect.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (72/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 162,
            "column": 0,
            "endLine": 162,
            "endColumn": 8,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 168,
            "column": 12,
            "endLine": 168,
            "endColumn": 19,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 182,
            "column": 20,
            "endLine": 182,
            "endColumn": 25,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'upper_id' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 287,
            "column": 50,
            "endLine": 287,
            "endColumn": 58,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (82/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 162,
            "column": 0,
            "endLine": 162,
            "endColumn": 8,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (251/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "t.rast.accumulate",
            "obj": "main",
            "line": 162,
            "column": 0,
            "endLine": 162,
            "endColumn": 8,
            "path": "temporal/t.rast.accumulate/t.rast.accumulate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.accumulate/t.rast.accumulate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.aggregate.ds",
            "obj": "main",
            "line": 117,
            "column": 12,
            "endLine": 117,
            "endColumn": 19,
            "path": "temporal/t.rast.aggregate.ds/t.rast.aggregate.ds.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.aggregate.ds/t.rast.aggregate.ds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.aggregate.ds",
            "obj": "main",
            "line": 122,
            "column": 20,
            "endLine": 122,
            "endColumn": 25,
            "path": "temporal/t.rast.aggregate.ds/t.rast.aggregate.ds.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.aggregate.ds/t.rast.aggregate.ds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.aggregate",
            "obj": "main",
            "line": 125,
            "column": 12,
            "endLine": 125,
            "endColumn": 19,
            "path": "temporal/t.rast.aggregate/t.rast.aggregate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.aggregate/t.rast.aggregate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.aggregate",
            "obj": "main",
            "line": 130,
            "column": 20,
            "endLine": 130,
            "endColumn": 25,
            "path": "temporal/t.rast.aggregate/t.rast.aggregate.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.aggregate/t.rast.aggregate.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.algebra",
            "obj": "main",
            "line": 94,
            "column": 17,
            "endLine": 94,
            "endColumn": 24,
            "path": "temporal/t.rast.algebra/t.rast.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.algebra/t.rast.algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.algebra",
            "obj": "main",
            "line": 98,
            "column": 14,
            "endLine": 98,
            "endColumn": 19,
            "path": "temporal/t.rast.algebra/t.rast.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.algebra/t.rast.algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (23/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "test_raster_algebra_arithmetic",
            "obj": "TestTRastAlgebra",
            "line": 18,
            "column": 0,
            "endLine": 18,
            "endColumn": 22,
            "path": "temporal/t.rast.algebra/testsuite/test_raster_algebra_arithmetic.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.algebra/testsuite/test_raster_algebra_arithmetic.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (26/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "test_raster_algebra_operators",
            "obj": "TestTRastAlgebra",
            "line": 18,
            "column": 0,
            "endLine": 18,
            "endColumn": 22,
            "path": "temporal/t.rast.algebra/testsuite/test_raster_algebra_operators.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.algebra/testsuite/test_raster_algebra_operators.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.colors",
            "obj": "main",
            "line": 116,
            "column": 12,
            "endLine": 116,
            "endColumn": 19,
            "path": "temporal/t.rast.colors/t.rast.colors.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.colors/t.rast.colors.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.colors",
            "obj": "main",
            "line": 121,
            "column": 13,
            "endLine": 121,
            "endColumn": 18,
            "path": "temporal/t.rast.colors/t.rast.colors.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.colors/t.rast.colors.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.export",
            "obj": "main",
            "line": 117,
            "column": 13,
            "endLine": 117,
            "endColumn": 20,
            "path": "temporal/t.rast.export/t.rast.export.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.export/t.rast.export.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.extract",
            "obj": "main",
            "line": 93,
            "column": 12,
            "endLine": 93,
            "endColumn": 19,
            "path": "temporal/t.rast.extract/t.rast.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.extract/t.rast.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.extract",
            "obj": "main",
            "line": 99,
            "column": 20,
            "endLine": 99,
            "endColumn": 25,
            "path": "temporal/t.rast.extract/t.rast.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.extract/t.rast.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.gapfill",
            "obj": "main",
            "line": 84,
            "column": 12,
            "endLine": 84,
            "endColumn": 19,
            "path": "temporal/t.rast.gapfill/t.rast.gapfill.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.gapfill/t.rast.gapfill.py"
        },
        {
            "type": "error",
            "symbol": "function-redefined",
            "message": "method already defined line 259",
            "messageId": "E0102",
            "confidence": "UNDEFINED",
            "module": "test_gapfill",
            "obj": "TestRasterToVector.test_simple_gran",
            "line": 304,
            "column": 4,
            "endLine": 304,
            "endColumn": 24,
            "path": "temporal/t.rast.gapfill/testsuite/test_gapfill.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.gapfill/testsuite/test_gapfill.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.import",
            "obj": "main",
            "line": 115,
            "column": 12,
            "endLine": 115,
            "endColumn": 19,
            "path": "temporal/t.rast.import/t.rast.import.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.import/t.rast.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.import",
            "obj": "main",
            "line": 123,
            "column": 25,
            "endLine": 123,
            "endColumn": 30,
            "path": "temporal/t.rast.import/t.rast.import.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.import/t.rast.import.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "test_temporal_rast_import",
            "obj": "",
            "line": 7,
            "column": 0,
            "endLine": 16,
            "endColumn": 3,
            "path": "temporal/t.rast.import/testsuite/test_temporal_rast_import.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.import/testsuite/test_temporal_rast_import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.mapcalc",
            "obj": "main",
            "line": 87,
            "column": 13,
            "endLine": 87,
            "endColumn": 20,
            "path": "temporal/t.rast.mapcalc/t.rast.mapcalc.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.mapcalc/t.rast.mapcalc.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.mapcalc",
            "obj": "main",
            "line": 93,
            "column": 20,
            "endLine": 93,
            "endColumn": 25,
            "path": "temporal/t.rast.mapcalc/t.rast.mapcalc.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.mapcalc/t.rast.mapcalc.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.neighbors",
            "obj": "main",
            "line": 123,
            "column": 12,
            "endLine": 123,
            "endColumn": 19,
            "path": "temporal/t.rast.neighbors/t.rast.neighbors.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.neighbors/t.rast.neighbors.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.neighbors",
            "obj": "main",
            "line": 128,
            "column": 20,
            "endLine": 128,
            "endColumn": 25,
            "path": "temporal/t.rast.neighbors/t.rast.neighbors.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.neighbors/t.rast.neighbors.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.out.vtk",
            "obj": "main",
            "line": 87,
            "column": 12,
            "endLine": 87,
            "endColumn": 19,
            "path": "temporal/t.rast.out.vtk/t.rast.out.vtk.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.out.vtk/t.rast.out.vtk.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.out.vtk",
            "obj": "main",
            "line": 92,
            "column": 16,
            "endLine": 92,
            "endColumn": 21,
            "path": "temporal/t.rast.out.vtk/t.rast.out.vtk.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.out.vtk/t.rast.out.vtk.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.series",
            "obj": "main",
            "line": 106,
            "column": 12,
            "endLine": 106,
            "endColumn": 19,
            "path": "temporal/t.rast.series/t.rast.series.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.series/t.rast.series.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.series",
            "obj": "main",
            "line": 115,
            "column": 15,
            "endLine": 115,
            "endColumn": 20,
            "path": "temporal/t.rast.series/t.rast.series.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.series/t.rast.series.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.to.rast3",
            "obj": "main",
            "line": 52,
            "column": 12,
            "endLine": 52,
            "endColumn": 19,
            "path": "temporal/t.rast.to.rast3/t.rast.to.rast3.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.to.rast3/t.rast.to.rast3.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'r_what' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.what",
            "obj": "main",
            "line": 293,
            "column": 12,
            "endLine": 293,
            "endColumn": 18,
            "path": "temporal/t.rast.what/t.rast.what.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.what/t.rast.what.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'site_input' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.what",
            "obj": "main",
            "line": 342,
            "column": 12,
            "endLine": 342,
            "endColumn": 22,
            "path": "temporal/t.rast.what/t.rast.what.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.what/t.rast.what.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'site' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast.what",
            "obj": "one_point_per_row_output",
            "line": 425,
            "column": 49,
            "endLine": 425,
            "endColumn": 53,
            "path": "temporal/t.rast.what/t.rast.what.py",
            "absolutePath": "/workspace/grass/temporal/t.rast.what/t.rast.what.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.algebra",
            "obj": "main",
            "line": 82,
            "column": 17,
            "endLine": 82,
            "endColumn": 24,
            "path": "temporal/t.rast3d.algebra/t.rast3d.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.algebra/t.rast3d.algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.algebra",
            "obj": "main",
            "line": 85,
            "column": 14,
            "endLine": 85,
            "endColumn": 19,
            "path": "temporal/t.rast3d.algebra/t.rast3d.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.algebra/t.rast3d.algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.extract",
            "obj": "main",
            "line": 91,
            "column": 12,
            "endLine": 91,
            "endColumn": 19,
            "path": "temporal/t.rast3d.extract/t.rast3d.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.extract/t.rast3d.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.extract",
            "obj": "main",
            "line": 97,
            "column": 20,
            "endLine": 97,
            "endColumn": 25,
            "path": "temporal/t.rast3d.extract/t.rast3d.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.extract/t.rast3d.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.list",
            "obj": "main",
            "line": 97,
            "column": 12,
            "endLine": 97,
            "endColumn": 19,
            "path": "temporal/t.rast3d.list/t.rast3d.list.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.list/t.rast3d.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.list",
            "obj": "main",
            "line": 103,
            "column": 13,
            "endLine": 103,
            "endColumn": 18,
            "path": "temporal/t.rast3d.list/t.rast3d.list.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.list/t.rast3d.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.mapcalc",
            "obj": "main",
            "line": 91,
            "column": 13,
            "endLine": 91,
            "endColumn": 20,
            "path": "temporal/t.rast3d.mapcalc/t.rast3d.mapcalc.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.mapcalc/t.rast3d.mapcalc.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rast3d.mapcalc",
            "obj": "main",
            "line": 97,
            "column": 20,
            "endLine": 97,
            "endColumn": 25,
            "path": "temporal/t.rast3d.mapcalc/t.rast3d.mapcalc.py",
            "absolutePath": "/workspace/grass/temporal/t.rast3d.mapcalc/t.rast3d.mapcalc.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.register",
            "obj": "main",
            "line": 115,
            "column": 11,
            "endLine": 115,
            "endColumn": 18,
            "path": "temporal/t.register/t.register.py",
            "absolutePath": "/workspace/grass/temporal/t.register/t.register.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.register",
            "obj": "main",
            "line": 124,
            "column": 15,
            "endLine": 124,
            "endColumn": 20,
            "path": "temporal/t.register/t.register.py",
            "absolutePath": "/workspace/grass/temporal/t.register/t.register.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tgis' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.register",
            "obj": "main",
            "line": 127,
            "column": 4,
            "endLine": 127,
            "endColumn": 8,
            "path": "temporal/t.register/t.register.py",
            "absolutePath": "/workspace/grass/temporal/t.register/t.register.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.remove",
            "obj": "main",
            "line": 79,
            "column": 15,
            "endLine": 79,
            "endColumn": 22,
            "path": "temporal/t.remove/t.remove.py",
            "absolutePath": "/workspace/grass/temporal/t.remove/t.remove.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.remove",
            "obj": "main",
            "line": 82,
            "column": 16,
            "endLine": 82,
            "endColumn": 21,
            "path": "temporal/t.remove/t.remove.py",
            "absolutePath": "/workspace/grass/temporal/t.remove/t.remove.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tgis' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.remove",
            "obj": "main",
            "line": 90,
            "column": 4,
            "endLine": 90,
            "endColumn": 8,
            "path": "temporal/t.remove/t.remove.py",
            "absolutePath": "/workspace/grass/temporal/t.remove/t.remove.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'pyg' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.remove",
            "obj": "main",
            "line": 121,
            "column": 13,
            "endLine": 121,
            "endColumn": 16,
            "path": "temporal/t.remove/t.remove.py",
            "absolutePath": "/workspace/grass/temporal/t.remove/t.remove.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'msg' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.remove",
            "obj": "main",
            "line": 146,
            "column": 32,
            "endLine": 146,
            "endColumn": 35,
            "path": "temporal/t.remove/t.remove.py",
            "absolutePath": "/workspace/grass/temporal/t.remove/t.remove.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.rename",
            "obj": "main",
            "line": 52,
            "column": 12,
            "endLine": 52,
            "endColumn": 19,
            "path": "temporal/t.rename/t.rename.py",
            "absolutePath": "/workspace/grass/temporal/t.rename/t.rename.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.sample",
            "obj": "main",
            "line": 80,
            "column": 13,
            "endLine": 80,
            "endColumn": 20,
            "path": "temporal/t.sample/t.sample.py",
            "absolutePath": "/workspace/grass/temporal/t.sample/t.sample.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.sample",
            "obj": "main",
            "line": 86,
            "column": 13,
            "endLine": 86,
            "endColumn": 18,
            "path": "temporal/t.sample/t.sample.py",
            "absolutePath": "/workspace/grass/temporal/t.sample/t.sample.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.select",
            "obj": "main",
            "line": 65,
            "column": 17,
            "endLine": 65,
            "endColumn": 24,
            "path": "temporal/t.select/t.select.py",
            "absolutePath": "/workspace/grass/temporal/t.select/t.select.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.select",
            "obj": "main",
            "line": 66,
            "column": 14,
            "endLine": 66,
            "endColumn": 19,
            "path": "temporal/t.select/t.select.py",
            "absolutePath": "/workspace/grass/temporal/t.select/t.select.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.shift",
            "obj": "main",
            "line": 59,
            "column": 11,
            "endLine": 59,
            "endColumn": 18,
            "path": "temporal/t.shift/t.shift.py",
            "absolutePath": "/workspace/grass/temporal/t.shift/t.shift.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.snap",
            "obj": "main",
            "line": 50,
            "column": 11,
            "endLine": 50,
            "endColumn": 18,
            "path": "temporal/t.snap/t.snap.py",
            "absolutePath": "/workspace/grass/temporal/t.snap/t.snap.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.support",
            "obj": "main",
            "line": 95,
            "column": 11,
            "endLine": 95,
            "endColumn": 18,
            "path": "temporal/t.support/t.support.py",
            "absolutePath": "/workspace/grass/temporal/t.support/t.support.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.support",
            "obj": "main",
            "line": 101,
            "column": 13,
            "endLine": 101,
            "endColumn": 18,
            "path": "temporal/t.support/t.support.py",
            "absolutePath": "/workspace/grass/temporal/t.support/t.support.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.topology",
            "obj": "main",
            "line": 61,
            "column": 11,
            "endLine": 61,
            "endColumn": 18,
            "path": "temporal/t.topology/t.topology.py",
            "absolutePath": "/workspace/grass/temporal/t.topology/t.topology.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.topology",
            "obj": "main",
            "line": 64,
            "column": 25,
            "endLine": 64,
            "endColumn": 30,
            "path": "temporal/t.topology/t.topology.py",
            "absolutePath": "/workspace/grass/temporal/t.topology/t.topology.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.unregister",
            "obj": "main",
            "line": 60,
            "column": 11,
            "endLine": 60,
            "endColumn": 18,
            "path": "temporal/t.unregister/t.unregister.py",
            "absolutePath": "/workspace/grass/temporal/t.unregister/t.unregister.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'tgis' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.unregister",
            "obj": "main",
            "line": 66,
            "column": 4,
            "endLine": 66,
            "endColumn": 8,
            "path": "temporal/t.unregister/t.unregister.py",
            "absolutePath": "/workspace/grass/temporal/t.unregister/t.unregister.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.algebra",
            "obj": "main",
            "line": 63,
            "column": 17,
            "endLine": 63,
            "endColumn": 24,
            "path": "temporal/t.vect.algebra/t.vect.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.algebra/t.vect.algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.algebra",
            "obj": "main",
            "line": 65,
            "column": 14,
            "endLine": 65,
            "endColumn": 19,
            "path": "temporal/t.vect.algebra/t.vect.algebra.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.algebra/t.vect.algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.db.select",
            "obj": "main",
            "line": 64,
            "column": 12,
            "endLine": 64,
            "endColumn": 19,
            "path": "temporal/t.vect.db.select/t.vect.db.select.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.db.select/t.vect.db.select.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.export",
            "obj": "main",
            "line": 78,
            "column": 13,
            "endLine": 78,
            "endColumn": 20,
            "path": "temporal/t.vect.export/t.vect.export.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.export/t.vect.export.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.extract",
            "obj": "main",
            "line": 94,
            "column": 12,
            "endLine": 94,
            "endColumn": 19,
            "path": "temporal/t.vect.extract/t.vect.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.extract/t.vect.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.extract",
            "obj": "main",
            "line": 102,
            "column": 20,
            "endLine": 102,
            "endColumn": 25,
            "path": "temporal/t.vect.extract/t.vect.extract.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.extract/t.vect.extract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.import",
            "obj": "main",
            "line": 100,
            "column": 12,
            "endLine": 100,
            "endColumn": 19,
            "path": "temporal/t.vect.import/t.vect.import.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.import/t.vect.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.import",
            "obj": "main",
            "line": 107,
            "column": 10,
            "endLine": 107,
            "endColumn": 15,
            "path": "temporal/t.vect.import/t.vect.import.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.import/t.vect.import.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.list",
            "obj": "main",
            "line": 97,
            "column": 12,
            "endLine": 97,
            "endColumn": 19,
            "path": "temporal/t.vect.list/t.vect.list.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.list/t.vect.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.list",
            "obj": "main",
            "line": 103,
            "column": 13,
            "endLine": 103,
            "endColumn": 18,
            "path": "temporal/t.vect.list/t.vect.list.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.list/t.vect.list.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.observe.strds",
            "obj": "main",
            "line": 88,
            "column": 12,
            "endLine": 88,
            "endColumn": 19,
            "path": "temporal/t.vect.observe.strds/t.vect.observe.strds.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.observe.strds/t.vect.observe.strds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.univar",
            "obj": "main",
            "line": 87,
            "column": 12,
            "endLine": 87,
            "endColumn": 19,
            "path": "temporal/t.vect.univar/t.vect.univar.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.univar/t.vect.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'flags' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.univar",
            "obj": "main",
            "line": 94,
            "column": 15,
            "endLine": 94,
            "endColumn": 20,
            "path": "temporal/t.vect.univar/t.vect.univar.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.univar/t.vect.univar.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'options' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "t.vect.what.strds",
            "obj": "main",
            "line": 80,
            "column": 12,
            "endLine": 80,
            "endColumn": 19,
            "path": "temporal/t.vect.what.strds/t.vect.what.strds.py",
            "absolutePath": "/workspace/grass/temporal/t.vect.what.strds/t.vect.what.strds.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "ghtml",
            "obj": "setify",
            "line": 98,
            "column": 11,
            "endLine": 98,
            "endColumn": 66,
            "path": "utils/g.html2man/ghtml.py",
            "absolutePath": "/workspace/grass/utils/g.html2man/ghtml.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"self.tag_stack == []\" can be simplified to \"not self.tag_stack\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "ghtml",
            "obj": "HTMLParser.top",
            "line": 226,
            "column": 11,
            "endLine": 226,
            "endColumn": 31,
            "path": "utils/g.html2man/ghtml.py",
            "absolutePath": "/workspace/grass/utils/g.html2man/ghtml.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"self.tag_stack != []\" can be simplified to \"self.tag_stack\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "ghtml",
            "obj": "HTMLParser.handle_starttag",
            "line": 255,
            "column": 11,
            "endLine": 255,
            "endColumn": 31,
            "path": "utils/g.html2man/ghtml.py",
            "absolutePath": "/workspace/grass/utils/g.html2man/ghtml.py"
        },
        {
            "type": "warning",
            "symbol": "subprocess-run-check",
            "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
            "messageId": "W1510",
            "confidence": "INFERENCE",
            "module": "utils.generate_last_commit_file",
            "obj": "get_last_commit",
            "line": 60,
            "column": 25,
            "endLine": 70,
            "endColumn": 9,
            "path": "utils/generate_last_commit_file.py",
            "absolutePath": "/workspace/grass/utils/generate_last_commit_file.py"
        },
        {
            "type": "warning",
            "symbol": "missing-timeout",
            "message": "Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely",
            "messageId": "W3101",
            "confidence": "INFERENCE",
            "module": "utils.generate_release_notes",
            "obj": "print_support",
            "line": 135,
            "column": 15,
            "endLine": 135,
            "endColumn": 36,
            "path": "utils/generate_release_notes.py",
            "absolutePath": "/workspace/grass/utils/generate_release_notes.py"
        },
        {
            "type": "refactor",
            "symbol": "no-else-continue",
            "message": "Unnecessary \"elif\" after \"continue\", remove the leading \"el\" from \"elif\"",
            "messageId": "R1724",
            "confidence": "HIGH",
            "module": "utils.gitlog2changelog",
            "obj": "",
            "line": 51,
            "column": 4,
            "endLine": 116,
            "endColumn": 43,
            "path": "utils/gitlog2changelog.py",
            "absolutePath": "/workspace/grass/utils/gitlog2changelog.py"
        },
        {
            "type": "warning",
            "symbol": "subprocess-run-check",
            "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
            "messageId": "W1510",
            "confidence": "INFERENCE",
            "module": "utils.mkhtml",
            "obj": "has_src_code_git",
            "line": 375,
            "column": 25,
            "endLine": 385,
            "endColumn": 9,
            "path": "utils/mkhtml.py",
            "absolutePath": "/workspace/grass/utils/mkhtml.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "utils.mkhtml",
            "obj": "",
            "line": 933,
            "column": 13,
            "endLine": 933,
            "endColumn": 42,
            "path": "utils/mkhtml.py",
            "absolutePath": "/workspace/grass/utils/mkhtml.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "utils.thumbnails",
            "obj": "make_image",
            "line": 115,
            "column": 7,
            "endLine": 115,
            "endColumn": 8,
            "path": "utils/thumbnails.py",
            "absolutePath": "/workspace/grass/utils/thumbnails.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_v_extract",
            "obj": "TestRasterreport.tearDown",
            "line": 57,
            "column": 4,
            "endLine": 57,
            "endColumn": 16,
            "path": "vector/v.extract/testsuite/test_v_extract.py",
            "absolutePath": "/workspace/grass/vector/v.extract/testsuite/test_v_extract.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestRasterreport.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_v_extract",
            "obj": "TestRasterreport.tearDown",
            "line": 57,
            "column": 4,
            "endLine": 57,
            "endColumn": 16,
            "path": "vector/v.extract/testsuite/test_v_extract.py",
            "absolutePath": "/workspace/grass/vector/v.extract/testsuite/test_v_extract.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "test_v_in_lidar_filter",
            "obj": "FilterTest",
            "line": 40,
            "column": 0,
            "endLine": 40,
            "endColumn": 16,
            "path": "vector/v.in.lidar/testsuite/test_v_in_lidar_filter.py",
            "absolutePath": "/workspace/grass/vector/v.in.lidar/testsuite/test_v_in_lidar_filter.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "test_v_in_pdal_filter",
            "obj": "FilterTest",
            "line": 41,
            "column": 0,
            "endLine": 41,
            "endColumn": 16,
            "path": "vector/v.in.pdal/testsuite/test_v_in_pdal_filter.py",
            "absolutePath": "/workspace/grass/vector/v.in.pdal/testsuite/test_v_in_pdal_filter.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_v_net",
            "obj": "TestVNet.tearDown",
            "line": 9,
            "column": 4,
            "endLine": 9,
            "endColumn": 16,
            "path": "vector/v.net/testsuite/test_v_net.py",
            "absolutePath": "/workspace/grass/vector/v.net/testsuite/test_v_net.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestVNet.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_v_net",
            "obj": "TestVNet.tearDown",
            "line": 9,
            "column": 4,
            "endLine": 9,
            "endColumn": 16,
            "path": "vector/v.net/testsuite/test_v_net.py",
            "absolutePath": "/workspace/grass/vector/v.net/testsuite/test_v_net.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_v_random",
            "obj": "TestVRandom.tearDown",
            "line": 33,
            "column": 4,
            "endLine": 33,
            "endColumn": 16,
            "path": "vector/v.random/testsuite/test_v_random.py",
            "absolutePath": "/workspace/grass/vector/v.random/testsuite/test_v_random.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestVRandom.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_v_random",
            "obj": "TestVRandom.tearDown",
            "line": 33,
            "column": 4,
            "endLine": 33,
            "endColumn": 16,
            "path": "vector/v.random/testsuite/test_v_random.py",
            "absolutePath": "/workspace/grass/vector/v.random/testsuite/test_v_random.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_v_select",
            "obj": "TestRasterReport.tearDown",
            "line": 33,
            "column": 4,
            "endLine": 33,
            "endColumn": 16,
            "path": "vector/v.select/testsuite/test_v_select.py",
            "absolutePath": "/workspace/grass/vector/v.select/testsuite/test_v_select.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestRasterReport.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_v_select",
            "obj": "TestRasterReport.tearDown",
            "line": 33,
            "column": 4,
            "endLine": 33,
            "endColumn": 16,
            "path": "vector/v.select/testsuite/test_v_select.py",
            "absolutePath": "/workspace/grass/vector/v.select/testsuite/test_v_select.py"
        },
        {
            "type": "error",
            "symbol": "no-self-argument",
            "message": "Method 'tearDown' should have \"self\" as first argument",
            "messageId": "E0213",
            "confidence": "UNDEFINED",
            "module": "test_vto3d",
            "obj": "TestVTo3D.tearDown",
            "line": 18,
            "column": 4,
            "endLine": 18,
            "endColumn": 16,
            "path": "vector/v.to.3d/testsuite/test_vto3d.py",
            "absolutePath": "/workspace/grass/vector/v.to.3d/testsuite/test_vto3d.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'self' has been renamed to 'cls' in overriding 'TestVTo3D.tearDown' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "test_vto3d",
            "obj": "TestVTo3D.tearDown",
            "line": 18,
            "column": 4,
            "endLine": 18,
            "endColumn": 16,
            "path": "vector/v.to.3d/testsuite/test_vto3d.py",
            "absolutePath": "/workspace/grass/vector/v.to.3d/testsuite/test_vto3d.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.table)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.vector.abstract -> grass.pygrass.vector.find)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.gconsole -> gui_core.forms)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.gconsole -> core.giface)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.menutree -> psmap.menudata)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.menutree -> lmgr.menudata)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (dbmgr.sqlbuilder -> dbmgr.vinfo -> gui_core.gselect)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (modules.colorrules -> nviz.main -> nviz.tools)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.gconsole -> gui_core.forms -> core.giface)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (psmap.frame -> psmap.toolbars)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.gconsole -> gui_core.forms -> gui_core.goutput)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.script -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.core -> grass.script.setup -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.raster -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.db -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (core.menutree -> gmodeler.menudata)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis.region -> grass.pygrass.utils)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.raster3d -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis -> grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.table)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.find -> grass.pygrass.vector.geometry)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.db -> grass.script.vector -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[2020:2412]\n==photo2image.ip2i_manager:[1239:1631]\n            self.Destroy()\n\n        # event.Skip()\n\n    def OnGROrder(self, event):\n        \"\"\"\n        sets transformation order for georectifying\n        \"\"\"\n        if event:\n            self.gr_order = event.GetInt() + 1\n\n        numOfItems = self.list.GetItemCount()\n        minNumOfItems = numOfItems\n\n        if self.gr_order == 1:\n            minNumOfItems = 3\n            # self.SetStatusText(_(\n            # \"Insufficient points, 3+ points needed for 1st order\"))\n\n        elif self.gr_order == 2:\n            minNumOfItems = 6\n            diff = 6 - numOfItems\n            # self.SetStatusText(_(\n            # \"Insufficient points, 6+ points needed for 2nd order\"))\n\n        elif self.gr_order == 3:\n            minNumOfItems = 10\n            # self.SetStatusText(_(\n            # \"Insufficient points, 10+ points needed for 3rd order\"))\n\n        for i in range(minNumOfItems - numOfItems):\n            self.AddGCP(None)\n\n        return minNumOfItems\n\n    def RMSError(self, xygroup, order):\n        \"\"\"\n        Uses m.transform to calculate forward and backward error for each used GCP\n        in POINTS file and insert error values into GCP list.\n        Calculates total forward and backward RMS error for all used points\n        \"\"\"\n        # save GCPs to points file to make sure that all checked GCPs are used\n        self.SaveGCPs(None)\n        # self.SetStatusText('')\n\n        if not self.CheckGCPcount(msg=True):\n            return\n\n        # get list of forward and reverse rms error values for each point\n        self.grwiz.SwitchEnv(\"source\")\n\n        ret = RunCommand(\n            \"m.transform\", parent=self, read=True, group=xygroup, order=order\n        )\n\n        self.grwiz.SwitchEnv(\"target\")\n\n        if ret:\n            errlist = ret.splitlines()\n        else:\n            GError(\n                parent=self,\n                message=_(\n                    \"Could not calculate RMS Error.\\n\"\n                    \"Possible error with m.transform.\"\n                ),\n            )\n            return\n\n        # insert error values into GCP list for checked items\n        sdfactor = float(UserSettings.Get(group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\"))\n        GCPcount = 0\n        sumsq_fwd_err = 0.0\n        sumsq_bkw_err = 0.0\n        sum_fwd_err = 0.0\n        highest_fwd_err = 0.0\n        self.highest_key = 0\n        highest_idx = 0\n\n        for index in range(self.list.GetItemCount()):\n            key = self.list.GetItemData(index)\n            if self.list.IsItemChecked(index):\n                fwd_err, bkw_err = errlist[GCPcount].split()\n                self.list.SetItem(index, 5, fwd_err)\n                self.list.SetItem(index, 6, bkw_err)\n                self.mapcoordlist[key][5] = float(fwd_err)\n                self.mapcoordlist[key][6] = float(bkw_err)\n                self.list.SetItemTextColour(index, wx.BLACK)\n                if self.highest_only:\n                    if highest_fwd_err < float(fwd_err):\n                        highest_fwd_err = float(fwd_err)\n                        self.highest_key = key\n                        highest_idx = index\n\n                sumsq_fwd_err += float(fwd_err) ** 2\n                sumsq_bkw_err += float(bkw_err) ** 2\n                sum_fwd_err += float(fwd_err)\n                GCPcount += 1\n            else:\n                self.list.SetItem(index, 5, \"\")\n                self.list.SetItem(index, 6, \"\")\n                self.mapcoordlist[key][5] = 0.0\n                self.mapcoordlist[key][6] = 0.0\n                self.list.SetItemTextColour(index, wx.BLACK)\n\n        # SD\n        if GCPcount > 0:\n            self.rmsmean = sum_fwd_err / GCPcount\n            self.rmssd = (sumsq_fwd_err - self.rmsmean**2) ** 0.5\n            self.rmsthresh = self.rmsmean + sdfactor * self.rmssd\n        else:\n            self.rmsthresh = 0\n            self.rmsmean = 0\n            self.rmssd = 0\n\n        if self.highest_only and highest_fwd_err > 0.0:\n            self.list.SetItemTextColour(highest_idx, wx.RED)\n        elif GCPcount > 0 and self.rmsthresh > 0 and not self.highest_only:\n            for index in range(self.list.GetItemCount()):\n                if self.list.IsItemChecked(index):\n                    key = self.list.GetItemData(index)\n                    if self.mapcoordlist[key][5] > self.rmsthresh:\n                        self.list.SetItemTextColour(index, wx.RED)\n\n        # calculate global RMS error (geometric mean)\n        self.fwd_rmserror = round((sumsq_fwd_err / GCPcount) ** 0.5, 4)\n        self.bkw_rmserror = round((sumsq_bkw_err / GCPcount) ** 0.5, 4)\n        self.list.ResizeColumns()\n\n    def GetNewExtent(self, region, map=None):\n        coord_file = utils.GetTempfile()\n        newreg = {\n            \"n\": 0.0,\n            \"s\": 0.0,\n            \"e\": 0.0,\n            \"w\": 0.0,\n        }\n\n        try:\n            f = open(coord_file, mode=\"w\")\n            # NW corner\n            f.write(str(region[\"e\"]) + \" \" + str(region[\"n\"]) + \"\\n\")\n            # NE corner\n            f.write(str(region[\"e\"]) + \" \" + str(region[\"s\"]) + \"\\n\")\n            # SW corner\n            f.write(str(region[\"w\"]) + \" \" + str(region[\"n\"]) + \"\\n\")\n            # SE corner\n            f.write(str(region[\"w\"]) + \" \" + str(region[\"s\"]) + \"\\n\")\n        finally:\n            f.close()\n\n        # save GCPs to points file to make sure that all checked GCPs are used\n        self.SaveGCPs(None)\n\n        order = self.gr_order\n        self.gr_order = 1\n\n        if not self.CheckGCPcount(msg=True):\n            self.gr_order = order\n            return\n\n        self.gr_order = order\n\n        # get list of forward and reverse rms error values for each point\n        self.grwiz.SwitchEnv(\"source\")\n\n        if map == \"source\":\n            ret = RunCommand(\n                \"m.transform\",\n                parent=self,\n                read=True,\n                group=self.xygroup,\n                order=1,\n                format=\"dst\",\n                coords=coord_file,\n            )\n\n        elif map == \"target\":\n            ret = RunCommand(\n                \"m.transform\",\n                parent=self,\n                read=True,\n                group=self.xygroup,\n                order=1,\n                flags=\"r\",\n                format=\"src\",\n                coords=coord_file,\n            )\n\n        os.unlink(coord_file)\n\n        self.grwiz.SwitchEnv(\"target\")\n\n        if ret:\n            errlist = ret.splitlines()\n        else:\n            GError(\n                parent=self,\n                message=_(\n                    \"Could not calculate new extends.\\n\"\n                    \"Possible error with m.transform.\"\n                ),\n            )\n            return\n\n        # fist corner\n        e, n = errlist[0].split()\n        fe = float(e)\n        fn = float(n)\n        newreg[\"n\"] = fn\n        newreg[\"s\"] = fn\n        newreg[\"e\"] = fe\n        newreg[\"w\"] = fe\n        # other three corners\n        for i in range(1, 4):\n            e, n = errlist[i].split()\n            fe = float(e)\n            fn = float(n)\n            if fe < newreg[\"w\"]:\n                newreg[\"w\"] = fe\n            if fe > newreg[\"e\"]:\n                newreg[\"e\"] = fe\n            if fn < newreg[\"s\"]:\n                newreg[\"s\"] = fn\n            if fn > newreg[\"n\"]:\n                newreg[\"n\"] = fn\n\n        return newreg\n\n    def OnHelp(self, event):\n        \"\"\"Show GCP Manager manual page\"\"\"\n        self._giface.Help(entry=\"wxGUI.gcp\")\n\n    def OnUpdateActive(self, event):\n        if self.activemap.GetSelection() == 0:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n        else:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n\n        self.UpdateActive(self.MapWindow)\n        # for wingrass\n        if os.name == \"nt\":\n            self.MapWindow.SetFocus()\n\n    def UpdateActive(self, win):\n        # optionally disable tool zoomback tool\n        self.GetMapToolbar().Enable(\n            \"zoomback\", enable=(len(self.MapWindow.zoomhistory) > 1)\n        )\n\n        if self.activemap.GetSelection() != (win == self.TgtMapWindow):\n            self.activemap.SetSelection(win == self.TgtMapWindow)\n        self.StatusbarUpdate()\n\n    def AdjustMap(self, newreg):\n        \"\"\"Adjust map window to new extents\"\"\"\n\n        # adjust map window\n        self.Map.region[\"n\"] = newreg[\"n\"]\n        self.Map.region[\"s\"] = newreg[\"s\"]\n        self.Map.region[\"e\"] = newreg[\"e\"]\n        self.Map.region[\"w\"] = newreg[\"w\"]\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        # LL locations\n        if self.Map.projinfo[\"proj\"] == \"ll\":\n            if newreg[\"n\"] > 90.0:\n                newreg[\"n\"] = 90.0\n            if newreg[\"s\"] < -90.0:\n                newreg[\"s\"] = -90.0\n\n        ce = newreg[\"w\"] + (newreg[\"e\"] - newreg[\"w\"]) / 2\n        cn = newreg[\"s\"] + (newreg[\"n\"] - newreg[\"s\"]) / 2\n\n        # calculate new center point and display resolution\n        self.Map.region[\"center_easting\"] = ce\n        self.Map.region[\"center_northing\"] = cn\n        self.Map.region[\"ewres\"] = (newreg[\"e\"] - newreg[\"w\"]) / self.Map.width\n        self.Map.region[\"nsres\"] = (newreg[\"n\"] - newreg[\"s\"]) / self.Map.height\n        self.Map.AlignExtentFromDisplay()\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        if self.MapWindow.redrawAll is False:\n            self.MapWindow.redrawAll = True\n\n        self.MapWindow.UpdateMap()\n        self.StatusbarUpdate()\n\n    def OnZoomToSource(self, event):\n        \"\"\"Set target map window to match extents of source map window\"\"\"\n\n        if not self.MapWindow == self.TgtMapWindow:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n            self.UpdateActive(self.TgtMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.SrcMap.region, \"source\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomToTarget(self, event):\n        \"\"\"Set source map window to match extents of target map window\"\"\"\n\n        if not self.MapWindow == self.SrcMapWindow:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n            self.UpdateActive(self.SrcMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.TgtMap.region, \"target\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomMenuGCP(self, event):\n        \"\"\"Popup Zoom menu\"\"\"\n        point = wx.GetMousePosition()\n        zoommenu = Menu()\n        # Add items to the menu\n\n        zoomsource = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust source display to target display\")\n        )\n        zoommenu.AppendItem(zoomsource)\n        self.Bind(wx.EVT_MENU, self.OnZoomToTarget, zoomsource)\n\n        zoomtarget = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust target display to source display\")\n        )\n        zoommenu.AppendItem(zoomtarget)\n        self.Bind(wx.EVT_MENU, self.OnZoomToSource, zoomtarget)\n\n        # Popup the menu. If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(zoommenu)\n        zoommenu.Destroy()\n\n    def OnSize(self, event):\n        \"\"\"Adjust Map Windows after GCP Map Display has been resized\"\"\"\n        # re-render image on idle\n        self.resize = grass.clock()\n        super(MapPanel, self).OnSize(event)\n\n    def OnIdle(self, event):\n        \"\"\"GCP Map Display resized, adjust Map Windows\"\"\"\n        if self.GetMapToolbar():\n            if self.resize and self.resize + 0.2 < grass.clock():\n                srcwidth, srcheight = self.SrcMapWindow.GetSize()\n                tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n                srcwidth = (srcwidth + tgtwidth) / 2\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Hide()\n                    self._mgr.Update()\n                self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n                self._mgr.GetPane(\"target\").BestSize((srcwidth, tgtheight))\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Show()\n                self._mgr.Update()\n                self.resize = False\n            elif self.resize:\n                event.RequestMore()\n        pass\n\n\nclass GCPDisplay(FrameMixin, GCPPanel):\n    \"\"\"Map display for wrapping map panel with frame methods\"\"\"\n\n    def __init__(self, parent, giface, grwiz, id, lmgr, Map, title, camera, **kwargs):\n        # init map panel\n        GCPPanel.__init__(\n            self,\n            parent=parent,\n            giface=giface,\n            grwiz=grwiz,\n            id=id,\n            lmgr=lmgr,\n            Map=Map,\n            title=title,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==frame:[1456:1753]\n==lmgr.frame:[1305:1602]\n                )\n                return  # this should not happen\n            if can_switch_mapset_interactive(\n                self, gisenv[\"GISDBASE\"], location, mapset\n            ):\n                switch_mapset_interactively(self, self._giface, None, location, mapset)\n\n    def OnCreateMapset(self, event):\n        \"\"\"Create new mapset\"\"\"\n        gisenv = grass.gisenv()\n        mapset = create_mapset_interactively(\n            self, gisenv[\"GISDBASE\"], gisenv[\"LOCATION_NAME\"]\n        )\n        if mapset:\n            self._giface.grassdbChanged.emit(\n                grassdb=gisenv[\"GISDBASE\"],\n                location=gisenv[\"LOCATION_NAME\"],\n                mapset=mapset,\n                action=\"new\",\n                element=\"mapset\",\n            )\n            if can_switch_mapset_interactive(\n                self, gisenv[\"GISDBASE\"], gisenv[\"LOCATION_NAME\"], mapset\n            ):\n                switch_mapset_interactively(\n                    self, self._giface, None, None, mapset, show_confirmation=True\n                )\n\n    def OnChangeMapset(self, event):\n        \"\"\"Change current mapset\"\"\"\n        dlg = MapsetDialog(parent=self)\n        gisenv = grass.gisenv()\n\n        if dlg.ShowModal() == wx.ID_OK:\n            mapset = dlg.GetMapset()\n            dlg.Destroy()\n\n            if not mapset:\n                GError(\n                    parent=self, message=_(\"No mapset provided. Operation canceled.\")\n                )\n                return\n            if can_switch_mapset_interactive(\n                self, gisenv[\"GISDBASE\"], gisenv[\"LOCATION_NAME\"], mapset\n            ):\n                switch_mapset_interactively(self, self._giface, None, None, mapset)\n\n    def OnMapsetChanged(self, dbase, location, mapset):\n        \"\"\"Current mapset changed.\n        If location is None, mapset changed within location.\n        \"\"\"\n        if not location:\n            self._setTitle()\n        else:\n            # close current workspace and create new one\n            self.OnWorkspaceClose()\n            self.OnWorkspaceNew()\n\n    def OnChangeCWD(self, event=None, cmd=None):\n        \"\"\"Change current working directory\n\n        :param event: to be able to serve as a handler of wx event\n        :param cmd: command as a list (must start with 'cd')\n        \"\"\"\n\n        # local functions\n        def write_beginning(parameter=None, command=None):\n            if parameter:\n                self._giface.WriteCmdLog('cd \"' + parameter + '\"')\n            else:\n                # naive concat but will be enough most of the time\n                self._giface.WriteCmdLog(\" \".join(command))\n\n        def write_changed():\n            self._giface.WriteLog(\n                _('Working directory changed to:\\n\"%s\"') % os.getcwd()\n            )\n\n        def write_end():\n            self._giface.WriteCmdLog(\" \")\n\n        def write_help():\n            self._giface.WriteLog(_(\"Changes current working directory for this GUI.\"))\n            self._giface.WriteLog(_(\"Usage: cd [directory]\"))\n            self._giface.WriteLog(_(\"Without parameters it opens a dialog.\"))\n            # TODO: the following is longer then 80 chars\n            # but this should be solved by the function not caller\n            # also because of translations\n            self._giface.WriteLog(\n                _(\n                    \"If ~ (tilde) is present as the first\"\n                    \" directory on the path, it is replaced\"\n                    \" by user's home directory.\"\n                )\n            )\n\n        # check correctness of cmd\n        if cmd and cmd[0] != \"cd\":\n            # this is programmer's error\n            # can be relaxed in future\n            # but keep it strict unless needed otherwise\n            raise ValueError(\n                \"OnChangeCWD cmd parameter must be list of\"\n                \" length 1 or 2 and 'cd' as a first item\"\n            )\n        if cmd and len(cmd) > 2:\n            # this might be a user error\n            write_beginning(command=cmd)\n            self._giface.WriteError(_(\"More than one parameter provided.\"))\n            write_help()\n            write_end()\n            return\n        # use chdir or dialog\n        if cmd and len(cmd) == 2:\n            write_beginning(parameter=cmd[1])\n            if cmd[1] in [\"-h\", \"--h\", \"--help\", \"help\"]:\n                write_help()\n                write_end()\n                return\n            try:\n                path = os.path.expanduser(cmd[1])\n                os.chdir(path)\n                write_changed()\n            except OSError as error:\n                self._giface.WriteError(str(error))\n            write_end()\n        else:\n            dlg = wx.DirDialog(\n                parent=self,\n                message=_(\"Choose a working directory\"),\n                defaultPath=os.getcwd(),\n            )\n\n            if dlg.ShowModal() == wx.ID_OK:\n                self.cwdPath = dlg.GetPath()  # is saved in the workspace\n                write_beginning(parameter=self.cwdPath)\n                os.chdir(self.cwdPath)\n                write_changed()\n                write_end()\n\n    def GetCwdPath(self):\n        \"\"\"Get current working directory or None\"\"\"\n        return self.cwdPath\n\n    def OnNewVector(self, event):\n        \"\"\"Create new vector map layer\"\"\"\n        dlg = CreateNewVector(\n            self, giface=self._giface, cmd=((\"v.edit\", {\"tool\": \"create\"}, \"map\"))\n        )\n\n        if not dlg:\n            return\n\n        name = dlg.GetName(full=True)\n        if name and dlg.IsChecked(\"add\"):\n            # add layer to map layer tree\n            self.GetLayerTree().AddLayer(\n                ltype=\"vector\",\n                lname=name,\n                lchecked=True,\n                lcmd=[\"d.vect\", \"map=%s\" % name],\n            )\n        dlg.Destroy()\n\n    def OnSystemInfo(self, event):\n        \"\"\"Print system information\"\"\"\n        vInfo = grass.version()\n        if not vInfo:\n            sys.stderr.write(_(\"Unable to get GRASS version\\n\"))\n\n        # check also OSGeo4W on MS Windows\n        if sys.platform == \"win32\" and not os.path.exists(\n            os.path.join(os.getenv(\"GISBASE\"), \"WinGRASS-README.url\")\n        ):\n            osgeo4w = \" (OSGeo4W)\"\n        else:\n            osgeo4w = \"\"\n\n        self._gconsole.WriteCmdLog(_(\"System Info\"))\n        # platform decoding was added because of the Fedora 19 release\n        # which has the name \"Schr\u00f6dinger\u2019s cat\" (umlaut and special ' character)\n        # which appears in the platform.platform() string\n        platform_ = decode(platform.platform())\n        self._gconsole.WriteLog(\n            \"%s: %s\\n%s: %s\\n%s: %s\\n%s: %s\\n\"\n            # \"%s: %s (%s)\\n\"\n            \"GDAL: %s\\n\"\n            \"PROJ: %s\\n\"\n            \"GEOS: %s\\n\"\n            \"SQLite: %s\\n\"\n            \"Python: %s\\n\"\n            \"wxPython: %s\\n\"\n            \"%s: %s%s\\n\"\n            % (\n                _(\"GRASS version\"),\n                vInfo.get(\"version\", _(\"unknown version\")),\n                _(\"Code revision\"),\n                vInfo.get(\"revision\", \"?\"),\n                _(\"Build date\"),\n                vInfo.get(\"build_date\", \"?\"),\n                _(\"Build platform\"),\n                vInfo.get(\"build_platform\", \"?\"),\n                # _(\"GIS Library Revision\"),\n                # vInfo.get('libgis_revision'],\n                # vInfo.get('libgis_date'].split('\n                # ', 1)[0],\n                vInfo.get(\"gdal\", \"?\"),\n                vInfo.get(\"proj\", \"?\"),\n                vInfo.get(\"geos\", \"?\"),\n                vInfo.get(\"sqlite\", \"?\"),\n                platform.python_version(),\n                wx.__version__,\n                _(\"Platform\"),\n                platform_,\n                osgeo4w,\n            ),\n            notification=Notification.MAKE_VISIBLE,\n        )\n        self._gconsole.WriteCmdLog(\" \")\n\n    def OnAboutGRASS(self, event):\n        \"\"\"Display 'About GRASS' dialog\"\"\"\n        from gui_core.ghelp import AboutWindow\n\n        win = AboutWindow(self)\n        win.CentreOnScreen()\n        win.Show(True)\n\n    def _popupMenu(self, data):\n        \"\"\"Create popup menu\"\"\"\n        menu = Menu()\n\n        for key, handler in data:\n            if key is None:\n                menu.AppendSeparator()\n                continue\n            item = wx.MenuItem(menu, wx.ID_ANY, LMIcons[key].GetLabel())\n            item.SetBitmap(LMIcons[key].GetBitmap(self.iconsize))\n            menu.AppendItem(item)\n            self.Bind(wx.EVT_MENU, handler, item)\n\n        # create menu\n        self.PopupMenu(menu)\n        menu.Destroy()\n\n    def OnWorkspaceNew(self, event=None):\n        \"\"\"Create new workspace file\"\"\"\n        self.workspace_manager.New()\n\n    def OnWorkspaceOpen(self, event=None):\n        \"\"\"Open file with workspace definition\"\"\"\n        self.workspace_manager.Open()\n\n    def OnWorkspaceSave(self, event=None):\n        \"\"\"Save file with workspace definition\"\"\"\n        self.workspace_manager.Save()\n\n    def OnWorkspaceSaveAs(self, event=None):\n        \"\"\"Save workspace definition to selected file\"\"\"\n        self.workspace_manager.SaveAs()\n\n    def OnWorkspaceClose(self, event=None):\n        \"\"\"Close file with workspace definition\"\"\"\n        self.workspace_manager.Close()\n\n    def OnDisplayClose(self, event=None):\n        \"\"\"Close current map display window\"\"\"\n        if self.currentPage and self.GetMapDisplay():\n            self.GetMapDisplay().OnCloseWindow(event)\n\n    def OnDisplayCloseAll(self, event):\n        \"\"\"Close all open map display windows (from menu)\"\"\"\n        if not self.workspace_manager.CanClosePage(caption=_(\"Close all Map Displays\")):\n            return\n        self.DisplayCloseAll()\n\n    def DisplayCloseAll(self):\n        \"\"\"Close all open map display windows\"\"\"\n        for display in self.GetMapDisplay(onlyCurrent=False):\n            display.OnCloseWindow(event=None, askIfSaveWorkspace=False)\n\n    def OnRenderAllMapDisplays(self, event=None):\n        for display in self.GetAllMapDisplays():\n            display.OnRender(None)\n\n    def OnRenameDisplay(self, event):\n        \"\"\"Change Map Display name\"\"\"\n        name = self.notebookLayers.GetPageText(self.currentPageNum)\n        dlg = TextEntryDialog(\n            self,\n            message=_(\"Enter new name:\"),\n            caption=_(\"Rename Map Display\"),\n            value=name,\n        )\n        if dlg.ShowModal() == wx.ID_OK:\n            name = dlg.GetValue()\n            self.notebookLayers.SetPageText(page=self.currentPageNum, text=name)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[255:566]\n==image2target.ii2t_manager:[276:585]\n                rendertype = \"raster\"\n                cmdlist = [\"d.rast\", \"map=%s\" % tgt_map[\"raster\"]]\n\n                name, found = utils.GetLayerNameFromCmd(cmdlist)\n                self.TgtMap.AddLayer(\n                    ltype=rendertype,\n                    command=cmdlist,\n                    active=True,\n                    name=name,\n                    hidden=False,\n                    opacity=1.0,\n                    render=False,\n                )\n\n            if tgt_map[\"vector\"]:\n                #\n                # add raster layer to target map\n                #\n                rendertype = \"vector\"\n                cmdlist = [\"d.vect\", \"map=%s\" % tgt_map[\"vector\"]]\n\n                name, found = utils.GetLayerNameFromCmd(cmdlist)\n                self.TgtMap.AddLayer(\n                    ltype=rendertype,\n                    command=cmdlist,\n                    active=True,\n                    name=name,\n                    hidden=False,\n                    opacity=1.0,\n                    render=False,\n                )\n\n            #\n            # start GCP Manager\n            #\n            # create superior Map Display frame\n            mapframe = wx.Frame(\n                parent=None,\n                id=wx.ID_ANY,\n                size=globalvar.MAP_WINDOW_SIZE,\n                style=wx.DEFAULT_FRAME_STYLE,\n                title=name,\n            )\n\n            # create GCP manager\n            gcpmgr = GCPDisplay(\n                parent=mapframe,\n                giface=self._giface,\n                grwiz=self,\n                id=wx.ID_ANY,\n                Map=self.SrcMap,\n                lmgr=self.parent,\n                title=name,\n            )\n\n            # load GCPs\n            gcpmgr.InitMapDisplay()\n            gcpmgr.CenterOnScreen()\n            gcpmgr.Show()\n            # need to update AUI here for wingrass\n            gcpmgr._mgr.Update()\n        else:\n            self.Cleanup()\n\n    def SetSrcEnv(self, location, mapset):\n        \"\"\"Create environment to use for location and mapset\n        that are the source of the file(s) to georectify\n\n        :param location: source location\n        :param mapset: source mapset\n\n        :return: False on error\n        :return: True on success\n        \"\"\"\n\n        self.newlocation = location\n        self.newmapset = mapset\n\n        # check to see if we are georectifying map in current working\n        # location/mapset\n        if (\n            self.newlocation == self.currentlocation\n            and self.newmapset == self.currentmapset\n        ):\n            return False\n\n        self.gisrc_dict[\"LOCATION_NAME\"] = location\n        self.gisrc_dict[\"MAPSET\"] = mapset\n\n        self.source_gisrc = utils.GetTempfile()\n\n        try:\n            f = open(self.source_gisrc, mode=\"w\")\n            for line in self.gisrc_dict.items():\n                f.write(line[0] + \": \" + line[1] + \"\\n\")\n        finally:\n            f.close()\n\n        return True\n\n    def SwitchEnv(self, grc):\n        \"\"\"\n        Switches between original working location/mapset and\n        location/mapset that is source of file(s) to georectify\n        \"\"\"\n        # check to see if we are georectifying map in current working\n        # location/mapset\n        if (\n            self.newlocation == self.currentlocation\n            and self.newmapset == self.currentmapset\n        ):\n            return False\n\n        if grc == \"target\":\n            os.environ[\"GISRC\"] = str(self.target_gisrc)\n        elif grc == \"source\":\n            os.environ[\"GISRC\"] = str(self.source_gisrc)\n\n        return True\n\n    def OnWizFinished(self):\n        # self.Cleanup()\n\n        return True\n\n    def OnGLMFocus(self, event):\n        \"\"\"Layer Manager focus\"\"\"\n        # self.SwitchEnv('target')\n\n        event.Skip()\n\n    def Cleanup(self):\n        \"\"\"Return to current location and mapset\"\"\"\n        # here was also the cleaning of gcpmanagement from layer manager\n        # which is no longer needed\n\n        self.SwitchEnv(\"target\")\n        self.wizard.Destroy()\n\n\nclass LocationPage(TitledPage):\n    \"\"\"\n    Set map type (raster or vector) to georectify and\n    select location/mapset of map(s) to georectify.\n    \"\"\"\n\n    def __init__(self, wizard, parent):\n        TitledPage.__init__(self, wizard, _(\"Select map type and location/mapset\"))\n\n        self.parent = parent\n        self.grassdatabase = self.parent.grassdatabase\n\n        self.xylocation = \"\"\n        self.xymapset = \"\"\n\n        #\n        # layout\n        #\n        # map type\n        self.rb_maptype = wx.RadioBox(\n            parent=self,\n            id=wx.ID_ANY,\n            label=\" %s \" % _(\"Map type to georectify\"),\n            choices=[_(\"raster\"), _(\"vector\")],\n            majorDimension=wx.RA_SPECIFY_COLS,\n        )\n        self.sizer.Add(\n            self.rb_maptype,\n            flag=wx.ALIGN_CENTER | wx.ALL | wx.EXPAND,\n            border=5,\n            pos=(1, 1),\n            span=(1, 2),\n        )\n\n        # location\n        self.sizer.Add(\n            StaticText(parent=self, id=wx.ID_ANY, label=_(\"Select source location:\")),\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(2, 1),\n        )\n        self.cb_location = LocationSelect(parent=self, gisdbase=self.grassdatabase)\n        self.sizer.Add(\n            self.cb_location,\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(2, 2),\n        )\n\n        # mapset\n        self.sizer.Add(\n            StaticText(parent=self, id=wx.ID_ANY, label=_(\"Select source mapset:\")),\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(3, 1),\n        )\n        self.cb_mapset = MapsetSelect(\n            parent=self, gisdbase=self.grassdatabase, setItems=False\n        )\n        self.sizer.Add(\n            self.cb_mapset,\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(3, 2),\n        )\n        self.sizer.AddGrowableCol(2)\n\n        #\n        # bindings\n        #\n        self.Bind(wx.EVT_RADIOBOX, self.OnMaptype, self.rb_maptype)\n        self.Bind(wx.EVT_COMBOBOX, self.OnLocation, self.cb_location)\n        self.cb_mapset.Bind(wx.EVT_TEXT, self.OnMapset)\n        self.Bind(wiz.EVT_WIZARD_PAGE_CHANGING, self.OnPageChanging)\n        self.Bind(wiz.EVT_WIZARD_PAGE_CHANGED, self.OnEnterPage)\n        # self.Bind(wx.EVT_CLOSE, self.parent.Cleanup)\n\n    def OnMaptype(self, event):\n        \"\"\"Change map type\"\"\"\n        global maptype\n\n        if event.GetInt() == 0:\n            maptype = \"raster\"\n        else:\n            maptype = \"vector\"\n\n    def OnLocation(self, event):\n        \"\"\"Sets source location for map(s) to georectify\"\"\"\n        self.xylocation = event.GetString()\n\n        # create a list of valid mapsets\n        tmplist = os.listdir(os.path.join(self.grassdatabase, self.xylocation))\n        self.mapsetList = []\n        for item in tmplist:\n            if os.path.isdir(\n                os.path.join(self.grassdatabase, self.xylocation, item)\n            ) and os.path.exists(\n                os.path.join(self.grassdatabase, self.xylocation, item, \"WIND\")\n            ):\n                if item != \"PERMANENT\":\n                    self.mapsetList.append(item)\n\n        self.xymapset = \"PERMANENT\"\n        utils.ListSortLower(self.mapsetList)\n        self.mapsetList.insert(0, \"PERMANENT\")\n        self.cb_mapset.SetItems(self.mapsetList)\n        self.cb_mapset.SetStringSelection(self.xymapset)\n\n        if not wx.FindWindowById(wx.ID_FORWARD).IsEnabled():\n            wx.FindWindowById(wx.ID_FORWARD).Enable(True)\n\n    def OnMapset(self, event):\n        \"\"\"Sets source mapset for map(s) to georectify\"\"\"\n        if self.xylocation == \"\":\n            GMessage(\n                _(\"You must select a valid location before selecting a mapset\"),\n                parent=self,\n            )\n            return\n\n        self.xymapset = event.GetString()\n\n        if not wx.FindWindowById(wx.ID_FORWARD).IsEnabled():\n            wx.FindWindowById(wx.ID_FORWARD).Enable(True)\n\n    def OnPageChanging(self, event=None):\n        if event.GetDirection() and (self.xylocation == \"\" or self.xymapset == \"\"):\n            GMessage(\n                _(\n                    \"You must select a valid location \"\n                    \"and mapset in order to continue\"\n                ),\n                parent=self,\n            )\n            event.Veto()\n            return\n\n        self.parent.SetSrcEnv(self.xylocation, self.xymapset)\n\n    def OnEnterPage(self, event=None):\n        if self.xylocation == \"\" or self.xymapset == \"\":\n            wx.FindWindowById(wx.ID_FORWARD).Enable(False)\n        else:\n            wx.FindWindowById(wx.ID_FORWARD).Enable(True)\n\n\nclass GroupPage(TitledPage):\n    \"\"\"\n    Set group to georectify. Create group if desired.\n    \"\"\"\n\n    def __init__(self, wizard, parent):\n        TitledPage.__init__(self, wizard, _(\"Select image/map group to georectify\"))\n\n        self.parent = parent\n\n        self.grassdatabase = self.parent.grassdatabase\n        self.groupList = []\n\n        self.xylocation = \"\"\n        self.xymapset = \"\"\n        self.xygroup = \"\"\n\n        # default extension\n        self.extension = \"_georect\" + str(os.getpid())\n\n        #\n        # layout\n        #\n        # group\n        self.sizer.Add(",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.mapdisplay:[86:370]\n==image2target.ii2t_mapdisplay:[85:373]\n        for toolb in toolbars:\n            self.AddToolbar(toolb)\n\n        self.activemap = self.toolbars[\"gcpdisp\"].togglemap\n        self.activemap.SetSelection(0)\n\n        self.SrcMap = self.grwiz.SrcMap  # instance of render.Map\n        self.TgtMap = self.grwiz.TgtMap  # instance of render.Map\n        self._mgr.SetDockSizeConstraint(0.5, 0.5)\n\n        #\n        # Add statusbar\n        #\n\n        # items for choice\n        statusbarItems = [\n            sb.SbCoordinates,\n            sb.SbRegionExtent,\n            sb.SbCompRegionExtent,\n            sb.SbDisplayGeometry,\n            sb.SbMapScale,\n            sbgcp.SbGoToGCP,\n            sbgcp.SbRMSError,\n        ]\n\n        # create statusbar and its manager\n        self.statusbar = self.CreateStatusbar(statusbarItems)\n\n        #\n        # Init map display (buffered DC & set default cursor)\n        #\n        self.grwiz.SwitchEnv(\"source\")\n        self.SrcMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.SrcMap,\n        )\n\n        self.grwiz.SwitchEnv(\"target\")\n        self.TgtMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.TgtMap,\n        )\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n        self._setUpMapWindow(self.SrcMapWindow)\n        self._setUpMapWindow(self.TgtMapWindow)\n        self.SrcMapWindow.SetNamedCursor(\"cross\")\n        self.TgtMapWindow.SetNamedCursor(\"cross\")\n        # used to switch current map (combo box in toolbar)\n        self.SrcMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.SrcMapWindow)\n        )\n        self.TgtMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.TgtMapWindow)\n        )\n\n        #\n        # initialize region values\n        #\n        self._initMap(Map=self.SrcMap)\n        self._initMap(Map=self.TgtMap)\n\n        self.GetMapToolbar().SelectDefault()\n\n        #\n        # Bind various events\n        #\n        self.activemap.Bind(wx.EVT_CHOICE, self.OnUpdateActive)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n\n        #\n        # Update fancy gui style\n        #\n        # AuiManager wants a CentrePane, workaround to get two equally sized\n        # windows\n        self.list = self.CreateGCPList()\n\n        # set Go To GCP item as active in statusbar\n        self.mapWindowProperties.sbItem = 5\n\n        # self.SrcMapWindow.SetSize((300, 300))\n        # self.TgtMapWindow.SetSize((300, 300))\n        self.list.SetSize((100, 150))\n        self._addPanes()\n\n        srcwidth, srcheight = self.SrcMapWindow.GetSize()\n        tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n        srcwidth = (srcwidth + tgtwidth) / 2\n        self._mgr.GetPane(\"target\").Hide()\n        self._mgr.Update()\n        self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n        self._mgr.GetPane(\"target\").BestSize((srcwidth, srcheight))\n        if self.show_target:\n            self._mgr.GetPane(\"target\").Show()\n        else:\n            self.activemap.Enable(False)\n        # needed by Mac OS, does not harm on Linux, breaks display on Windows\n        if platform.system() != \"Windows\":\n            self._mgr.Update()\n\n        #\n        # Init print module and classes\n        #\n        self.printopt = PrintOptions(self, self.MapWindow)\n\n        #\n        # Initialization of digitization tool\n        #\n        self.digit = None\n\n        # set active map\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n\n        # do not init zoom history here, that happens when zooming to map(s)\n\n        #\n        # Re-use dialogs\n        #\n        self.dialogs = {}\n        self.dialogs[\"attributes\"] = None\n        self.dialogs[\"category\"] = None\n        self.dialogs[\"barscale\"] = None\n        self.dialogs[\"legend\"] = None\n\n        self.decorationDialog = None  # decoration/overlays\n\n    def _setUpMapWindow(self, mapWindow):\n        # TODO: almost the same implementation as for MapPanelBase (only names differ)\n        # enable or disable zoom history tool\n        mapWindow.zoomHistoryAvailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=True)\n        )\n        mapWindow.zoomHistoryUnavailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=False)\n        )\n        mapWindow.mouseMoving.connect(self.CoordinatesChanged)\n\n    def AddToolbar(self, name):\n        \"\"\"Add defined toolbar to the window\n\n        Currently known toolbars are:\n         - 'map'     - basic map toolbar\n         - 'vdigit'  - vector digitizer\n         - 'gcpdisp' - GCP Manager, Display\n         - 'gcpman'  - GCP Manager, points management\n         - 'nviz'    - 3D view mode\n        \"\"\"\n        # default toolbar\n        if name == \"map\":\n            if \"map\" not in self.toolbars:\n                self.toolbars[\"map\"] = MapToolbar(\n                    self, self._toolSwitcher, self._giface\n                )\n\n            self._mgr.AddPane(\n                self.toolbars[\"map\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"maptoolbar\")\n                .Caption(_(\"Map Toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2)\n                .BestSize(self.toolbars[\"map\"].GetSize()),\n            )\n\n        # GCP display\n        elif name == \"gcpdisp\":\n            if \"gcpdisp\" not in self.toolbars:\n                self.toolbars[\"gcpdisp\"] = GCPDisplayToolbar(self, self._toolSwitcher)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpdisp\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpdisplaytoolbar\")\n                .Caption(_(\"GCP Display toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n\n            if not self.show_target:\n                self.toolbars[\"gcpdisp\"].Enable(\"zoommenu\", enable=False)\n\n            if \"gcpman\" not in self.toolbars:\n                self.toolbars[\"gcpman\"] = GCPManToolbar(self)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpman\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpmanagertoolbar\")\n                .Caption(_(\"GCP Manager toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .Row(1)\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n\n        self._mgr.Update()\n\n    def _addPanes(self):\n        \"\"\"Add mapwindows, toolbars and statusbar to aui manager\"\"\"\n        self._mgr.AddPane(\n            self.list,\n            wx.aui.AuiPaneInfo()\n            .Name(\"gcplist\")\n            .Caption(_(\"GCP List\"))\n            .LeftDockable(False)\n            .RightDockable(False)\n            .PinButton()\n            .FloatingSize((600, 200))\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Top()\n            .Layer(1)\n            .MinSize((200, 100)),\n        )\n        self._mgr.AddPane(\n            self.SrcMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"source\")\n            .Caption(_(\"Source Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Centre(),\n        )\n        self._mgr.AddPane(\n            self.TgtMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"target\")\n            .Caption(_(\"Target Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Right()\n            .Layer(0),\n        )\n        # statusbar\n        self.AddStatusbarPane()\n\n    def OnUpdateProgress(self, event):\n        \"\"\"\n        Update progress bar info\n        \"\"\"\n        self.GetProgressBar().UpdateProgress(event.layer, event.map)\n\n        event.Skip()\n\n    def OnFocus(self, event):\n        \"\"\"\n        Change choicebook page to match display.\n        Or set display for georectifying\n        \"\"\"\n        # was in if layer manager but considering the state it was executed\n        # always, moreover, there is no layer manager dependent code\n\n        # in GCP Management, set focus to current MapWindow for mouse actions\n        self.OnPointer(event)\n        self.MapWindow.SetFocus()\n\n        event.Skip()\n\n    def OnDraw(self, event):\n        \"\"\"Re-display current map composition\"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==image2target.ii2t_mapdisplay:[283:575]\n==photo2image.ip2i_mapdisplay:[275:567]\n                self.toolbars[\"gcpdisp\"].Enable(\"zoommenu\", enable=False)\n\n            if \"gcpman\" not in self.toolbars:\n                self.toolbars[\"gcpman\"] = GCPManToolbar(self)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpman\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpmanagertoolbar\")\n                .Caption(_(\"GCP Manager toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .Row(1)\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n\n        self._mgr.Update()\n\n    def _addPanes(self):\n        \"\"\"Add mapwindows, toolbars and statusbar to aui manager\"\"\"\n        self._mgr.AddPane(\n            self.list,\n            wx.aui.AuiPaneInfo()\n            .Name(\"gcplist\")\n            .Caption(_(\"GCP List\"))\n            .LeftDockable(False)\n            .RightDockable(False)\n            .PinButton()\n            .FloatingSize((600, 200))\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Top()\n            .Layer(1)\n            .MinSize((200, 100)),\n        )\n        self._mgr.AddPane(\n            self.SrcMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"source\")\n            .Caption(_(\"Source Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Centre(),\n        )\n        self._mgr.AddPane(\n            self.TgtMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"target\")\n            .Caption(_(\"Target Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Right()\n            .Layer(0),\n        )\n        # statusbar\n        self.AddStatusbarPane()\n\n    def OnUpdateProgress(self, event):\n        \"\"\"\n        Update progress bar info\n        \"\"\"\n        self.GetProgressBar().UpdateProgress(event.layer, event.map)\n\n        event.Skip()\n\n    def OnFocus(self, event):\n        \"\"\"\n        Change choicebook page to match display.\n        Or set display for georectifying\n        \"\"\"\n        # was in if layer manager but considering the state it was executed\n        # always, moreover, there is no layer manager dependent code\n\n        # in GCP Management, set focus to current MapWindow for mouse actions\n        self.OnPointer(event)\n        self.MapWindow.SetFocus()\n\n        event.Skip()\n\n    def OnDraw(self, event):\n        \"\"\"Re-display current map composition\"\"\"\n        self.MapWindow.UpdateMap(render=False)\n\n    def OnRender(self, event):\n        \"\"\"Re-render map composition (each map layer)\"\"\"\n        # FIXME: remove qlayer code or use RemoveQueryLayer() now in mapdisp.frame\n        # delete tmp map layers (queries)\n        qlayer = self.Map.GetListOfLayers(name=globalvar.QUERYLAYER)\n        for layer in qlayer:\n            self.Map.DeleteLayer(layer)\n\n        self.SrcMapWindow.UpdateMap(render=True)\n        if self.show_target:\n            self.TgtMapWindow.UpdateMap(render=True)\n\n        # update statusbar\n        self.StatusbarUpdate()\n\n    def OnPointer(self, event):\n        \"\"\"Pointer button clicked\"\"\"\n        self.SrcMapWindow.SetModePointer()\n        self.TgtMapWindow.SetModePointer()\n        # change the default cursor\n        self.SrcMapWindow.SetNamedCursor(\"cross\")\n        self.TgtMapWindow.SetNamedCursor(\"cross\")\n\n    def OnZoomIn(self, event):\n        \"\"\"Zoom in the map.\"\"\"\n        self.SrcMapWindow.SetModeZoomIn()\n        self.TgtMapWindow.SetModeZoomIn()\n\n    def OnZoomOut(self, event):\n        \"\"\"Zoom out the map.\"\"\"\n        self.SrcMapWindow.SetModeZoomOut()\n        self.TgtMapWindow.SetModeZoomOut()\n\n    def OnPan(self, event):\n        \"\"\"Panning, set mouse to drag\"\"\"\n        self.SrcMapWindow.SetModePan()\n        self.TgtMapWindow.SetModePan()\n\n    def OnErase(self, event):\n        \"\"\"\n        Erase the canvas\n        \"\"\"\n        self.MapWindow.EraseMap()\n\n        if self.MapWindow == self.SrcMapWindow:\n            win = self.TgtMapWindow\n        elif self.MapWindow == self.TgtMapWindow:\n            win = self.SrcMapWindow\n\n        win.EraseMap()\n\n    def SaveToFile(self, event):\n        \"\"\"Save map to image\"\"\"\n        img = self.MapWindow.img\n        if not img:\n            GMessage(\n                parent=self,\n                message=_(\"Nothing to render (empty map). Operation canceled.\"),\n            )\n            return\n        filetype, ltype = GetImageHandlers(img)\n\n        # get size\n        dlg = ImageSizeDialog(self)\n        dlg.CentreOnParent()\n        if dlg.ShowModal() != wx.ID_OK:\n            dlg.Destroy()\n            return\n        width, height = dlg.GetValues()\n        dlg.Destroy()\n\n        # get filename\n        dlg = wx.FileDialog(\n            parent=self,\n            message=_(\n                \"Choose a file name to save the image (no need to add extension)\"\n            ),\n            wildcard=filetype,\n            style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,\n        )\n\n        if dlg.ShowModal() == wx.ID_OK:\n            path = dlg.GetPath()\n            if not path:\n                dlg.Destroy()\n                return\n\n            base, ext = os.path.splitext(path)\n            fileType = ltype[dlg.GetFilterIndex()][\"type\"]\n            extType = ltype[dlg.GetFilterIndex()][\"ext\"]\n            if ext != extType:\n                path = base + \".\" + extType\n\n            self.MapWindow.SaveToFile(path, fileType, width, height)\n\n        dlg.Destroy()\n\n    def PrintMenu(self, event):\n        \"\"\"\n        Print options and output menu for map display\n        \"\"\"\n        point = wx.GetMousePosition()\n        printmenu = Menu()\n        # Add items to the menu\n        setup = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Page setup\"))\n        printmenu.AppendItem(setup)\n        self.Bind(wx.EVT_MENU, self.printopt.OnPageSetup, setup)\n\n        preview = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Print preview\"))\n        printmenu.AppendItem(preview)\n        self.Bind(wx.EVT_MENU, self.printopt.OnPrintPreview, preview)\n\n        doprint = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Print display\"))\n        printmenu.AppendItem(doprint)\n        self.Bind(wx.EVT_MENU, self.printopt.OnDoPrint, doprint)\n\n        # Popup the menu.  If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(printmenu)\n        printmenu.Destroy()\n\n    def OnZoomToRaster(self, event):\n        \"\"\"\n        Set display extents to match selected raster map (ignore NULLs)\n        \"\"\"\n        self.MapWindow.ZoomToMap(ignoreNulls=True)\n\n    def OnZoomToSaved(self, event):\n        \"\"\"Set display geometry to match extents in\n        saved region file\n        \"\"\"\n        self.MapWindow.SetRegion(zoomOnly=True)\n\n    def OnDisplayToWind(self, event):\n        \"\"\"Set computational region (WIND file) to match display\n        extents\n        \"\"\"\n        self.MapWindow.DisplayToWind()\n\n    def SaveDisplayRegion(self, event):\n        \"\"\"Save display extents to named region file.\"\"\"\n        self.MapWindow.SaveDisplayRegion()\n\n    def OnZoomMenu(self, event):\n        \"\"\"Popup Zoom menu\"\"\"\n        point = wx.GetMousePosition()\n        zoommenu = Menu()\n        # Add items to the menu\n\n        zoomwind = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Zoom to computational region (set with g.region)\")\n        )\n        zoommenu.AppendItem(zoomwind)\n        self.Bind(wx.EVT_MENU, self.OnZoomToWind, zoomwind)\n\n        zoomdefault = wx.MenuItem(zoommenu, wx.ID_ANY, _(\"Zoom to default region\"))\n        zoommenu.AppendItem(zoomdefault)\n        self.Bind(wx.EVT_MENU, self.OnZoomToDefault, zoomdefault)\n\n        zoomsaved = wx.MenuItem(zoommenu, wx.ID_ANY, _(\"Zoom to saved region\"))\n        zoommenu.AppendItem(zoomsaved)\n        self.Bind(wx.EVT_MENU, self.OnZoomToSaved, zoomsaved)\n\n        savewind = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Set computational region from display\")\n        )\n        zoommenu.AppendItem(savewind)\n        self.Bind(wx.EVT_MENU, self.OnDisplayToWind, savewind)\n\n        savezoom = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Save display geometry to named region\")\n        )\n        zoommenu.AppendItem(savezoom)\n        self.Bind(wx.EVT_MENU, self.SaveDisplayRegion, savezoom)\n\n        # Popup the menu. If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(zoommenu)\n        zoommenu.Destroy()\n\n    def GetSrcWindow(self):\n        return self.SrcMapWindow\n\n    def GetTgtWindow(self):\n        return self.TgtMapWindow\n\n    def GetShowTarget(self):\n        return self.show_target\n\n    def GetMapToolbar(self):\n        \"\"\"Returns toolbar with zooming tools\"\"\"\n        return self.toolbars[\"gcpdisp\"]\n\n    def _setActiveMapWindow(self, mapWindow):\n        if not self.MapWindow == mapWindow:\n            self.MapWindow = mapWindow\n            self.Map = mapWindow.Map\n            self.UpdateActive(mapWindow)\n            # needed for wingrass\n            self.SetFocus()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[2922:3170]\n==image2target.ii2t_manager:[2870:3118]\n        return valuelist\n\n\nclass GrSettingsDialog(wx.Dialog):\n    def __init__(\n        self,\n        parent,\n        id,\n        giface,\n        title,\n        pos=wx.DefaultPosition,\n        size=wx.DefaultSize,\n        style=wx.DEFAULT_DIALOG_STYLE,\n    ):\n        wx.Dialog.__init__(self, parent, id, title, pos, size, style)\n        \"\"\"\n        Dialog to set profile text options: font, title\n        and font size, axis labels and font size\n        \"\"\"\n        #\n        # initialize variables\n        #\n        self.parent = parent\n        self.new_src_map = src_map\n        self.new_tgt_map = {\"raster\": tgt_map[\"raster\"], \"vector\": tgt_map[\"vector\"]}\n        self.sdfactor = 0\n\n        self.symbol = {}\n\n        self.methods = [\n            \"nearest\",\n            \"linear\",\n            \"linear_f\",\n            \"cubic\",\n            \"cubic_f\",\n            \"lanczos\",\n            \"lanczos_f\",\n        ]\n\n        # notebook\n        notebook = wx.Notebook(parent=self, id=wx.ID_ANY, style=wx.BK_DEFAULT)\n        self.__CreateSymbologyPage(notebook)\n        self.__CreateRectificationPage(notebook)\n\n        # buttons\n        btnSave = Button(self, wx.ID_SAVE)\n        btnApply = Button(self, wx.ID_APPLY)\n        btnClose = Button(self, wx.ID_CLOSE)\n        btnApply.SetDefault()\n\n        # bindings\n        btnApply.Bind(wx.EVT_BUTTON, self.OnApply)\n        btnApply.SetToolTip(_(\"Apply changes for the current session\"))\n        btnSave.Bind(wx.EVT_BUTTON, self.OnSave)\n        btnSave.SetToolTip(\n            _(\n                \"Apply and save changes to user settings file (default for next \"\n                \"sessions)\"\n            )\n        )\n        btnClose.Bind(wx.EVT_BUTTON, self.OnClose)\n        btnClose.SetToolTip(_(\"Close dialog\"))\n\n        # sizers\n        btnSizer = wx.BoxSizer(wx.HORIZONTAL)\n        btnSizer.Add(btnApply, flag=wx.LEFT | wx.RIGHT, border=5)\n        btnSizer.Add(btnSave, flag=wx.LEFT | wx.RIGHT, border=5)\n        btnSizer.Add(btnClose, flag=wx.LEFT | wx.RIGHT, border=5)\n\n        # sizers\n        mainSizer = wx.BoxSizer(wx.VERTICAL)\n        mainSizer.Add(notebook, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)\n        mainSizer.Add(btnSizer, proportion=0, flag=wx.ALIGN_RIGHT | wx.ALL, border=5)\n        #              flag=wx.EXPAND | wx.ALL | wx.ALIGN_CENTER, border=5)\n\n        self.SetSizer(mainSizer)\n        mainSizer.Fit(self)\n\n    def __CreateSymbologyPage(self, notebook):\n        \"\"\"Create notebook page with symbology settings\"\"\"\n\n        panel = wx.Panel(parent=notebook, id=wx.ID_ANY)\n        notebook.AddPage(page=panel, text=_(\"Symbology\"))\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n\n        rmsgridSizer = wx.GridBagSizer(vgap=5, hgap=5)\n\n        # highlight only highest forward RMS error\n        self.highlighthighest = wx.CheckBox(\n            parent=panel, id=wx.ID_ANY, label=_(\"Highlight highest RMS error only\")\n        )\n        hh = UserSettings.Get(group=\"gcpman\", key=\"rms\", subkey=\"highestonly\")\n        self.highlighthighest.SetValue(hh)\n        rmsgridSizer.Add(\n            self.highlighthighest, flag=wx.ALIGN_CENTER_VERTICAL, pos=(0, 0)\n        )\n\n        # RMS forward error threshold\n        rmslabel = StaticText(\n            parent=panel,\n            id=wx.ID_ANY,\n            label=_(\"Highlight RMS error > M + SD * factor:\"),\n        )\n        rmslabel.SetToolTip(\n            _(\n                \"Highlight GCPs with an RMS error larger than \\n\"\n                \"mean + standard deviation * given factor. \\n\"\n                \"Recommended values for this factor are between 1 and 2.\"\n            )\n        )\n        rmsgridSizer.Add(rmslabel, flag=wx.ALIGN_CENTER_VERTICAL, pos=(1, 0))\n        sdfactor = UserSettings.Get(group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\")\n        self.rmsWin = TextCtrl(\n            parent=panel, id=wx.ID_ANY, size=(70, -1), style=wx.TE_NOHIDESEL\n        )\n        self.rmsWin.SetValue(\"%s\" % str(sdfactor))\n        if self.parent.highest_only:\n            self.rmsWin.Disable()\n\n        self.symbol[\"sdfactor\"] = self.rmsWin.GetId()\n        rmsgridSizer.Add(self.rmsWin, flag=wx.ALIGN_RIGHT, pos=(1, 1))\n        rmsgridSizer.AddGrowableCol(1)\n        sizer.Add(rmsgridSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        box = StaticBox(parent=panel, id=wx.ID_ANY, label=\" %s \" % _(\"Symbol settings\"))\n        boxSizer = wx.StaticBoxSizer(box, wx.VERTICAL)\n        gridSizer = wx.GridBagSizer(vgap=5, hgap=5)\n\n        #\n        # general symbol color\n        #\n        row = 0\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Color:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        col = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"color\")\n        colWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(col[0], col[1], col[2], 255)\n        )\n        self.symbol[\"color\"] = colWin.GetId()\n        gridSizer.Add(colWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for high forward RMS error\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for high RMS error:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        hcol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"hcolor\")\n        hcolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(hcol[0], hcol[1], hcol[2], 255)\n        )\n        self.symbol[\"hcolor\"] = hcolWin.GetId()\n        gridSizer.Add(hcolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for selected GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for selected GCP:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        scol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"scolor\")\n        scolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(scol[0], scol[1], scol[2], 255)\n        )\n        self.symbol[\"scolor\"] = scolWin.GetId()\n        gridSizer.Add(scolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for unused GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for unused GCPs:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        ucol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"ucolor\")\n        ucolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(ucol[0], ucol[1], ucol[2], 255)\n        )\n        self.symbol[\"ucolor\"] = ucolWin.GetId()\n        gridSizer.Add(ucolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        # show unused GCPs\n        row += 1\n        self.showunused = wx.CheckBox(\n            parent=panel, id=wx.ID_ANY, label=_(\"Show unused GCPs\")\n        )\n        shuu = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"unused\")\n        self.showunused.SetValue(shuu)\n        gridSizer.Add(self.showunused, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n\n        #\n        # symbol size\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Symbol size:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        symsize = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"size\"))\n        sizeWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=20)\n        sizeWin.SetValue(symsize)\n        self.symbol[\"size\"] = sizeWin.GetId()\n        gridSizer.Add(sizeWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol width\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Line width:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        width = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"width\"))\n        widWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=10)\n        widWin.SetValue(width)\n        self.symbol[\"width\"] = widWin.GetId()\n        gridSizer.Add(widWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n        gridSizer.AddGrowableCol(1)\n\n        boxSizer.Add(gridSizer, flag=wx.EXPAND)\n        sizer.Add(boxSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        #\n        # maps to display\n        #\n        # source map to display\n        self.srcselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"maptype\",\n            updateOnPopup=False,\n        )\n        self.parent.grwiz.SwitchEnv(\"source\")\n        self.srcselection.SetElementList(maptype)\n        # filter out all maps not in group\n        self.srcselection.tcp.GetElementList(elements=self.parent.src_maps)\n\n        # target map(s) to display\n        self.parent.grwiz.SwitchEnv(\"target\")\n        self.tgtrastselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"raster\",\n            updateOnPopup=False,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[1171:1437]\n==photo2image.ip2i_manager:[520:789]\n        self.GCPcount = 0\n        # forward RMS error\n        self.fwd_rmserror = 0.0\n        # backward RMS error\n        self.bkw_rmserror = 0.0\n        # list map coords and ID of map display they came from\n        self.mapcoordlist = []\n        self.mapcoordlist.append(\n            [\n                0,  # GCP number\n                0.0,  # source east\n                0.0,  # source north\n                0.0,  # target east\n                0.0,  # target north\n                0.0,  # forward error\n                0.0,\n            ]\n        )  # backward error\n\n        # init vars to highlight high RMS errors\n        self.highest_only = True\n        self.show_unused = True\n        self.highest_key = -1\n        self.rmsthresh = 0\n        self.rmsmean = 0\n        self.rmssd = 0\n\n        self.SetTarget(self.xygroup, self.currentlocation, self.currentmapset)\n\n        self.itemDataMap = None\n\n        # images for column sorting\n        # CheckListCtrlMixin must set an ImageList first\n        self.il = self.list.GetImageList(wx.IMAGE_LIST_SMALL)\n\n        SmallUpArrow = BitmapFromImage(getSmallUpArrowImage())\n        SmallDnArrow = BitmapFromImage(getSmallDnArrowImage())\n        self.sm_dn = self.il.Add(SmallDnArrow)\n        self.sm_up = self.il.Add(SmallUpArrow)\n\n        # set mouse characteristics\n        self.mapwin = self.SrcMapWindow\n        self.mapwin.mouse[\"box\"] = \"point\"\n        self.mapwin.mouse[\"use\"] == \"pointer\"\n        self.mapwin.zoomtype = 0\n        self.mapwin.pen = wx.Pen(colour=\"black\", width=2, style=wx.SOLID)\n        self.mapwin.SetNamedCursor(\"cross\")\n\n        self.mapwin = self.TgtMapWindow\n\n        # set mouse characteristics\n        self.mapwin.mouse[\"box\"] = \"point\"\n        self.mapwin.mouse[\"use\"] == \"pointer\"\n        self.mapwin.zoomtype = 0\n        self.mapwin.pen = wx.Pen(colour=\"black\", width=2, style=wx.SOLID)\n        self.mapwin.SetNamedCursor(\"cross\")\n\n        #\n        # show new display & draw map\n        #\n        if self.show_target:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n            self.OnZoomToMap(None)\n\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n        self.OnZoomToMap(None)\n\n        #\n        # bindings\n        #\n        self.Bind(wx.EVT_ACTIVATE, self.OnFocus)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n        self.Bind(wx.EVT_IDLE, self.OnIdle)\n\n        self.SetSettings()\n\n    def __del__(self):\n        \"\"\"Disable GCP manager mode\"\"\"\n        # leaving the method here but was used only to delete gcpmanagement\n        # from layer manager which is now not needed\n        pass\n\n    def CreateGCPList(self):\n        \"\"\"Create GCP List Control\"\"\"\n\n        return GCPList(parent=self, gcp=self)\n\n    # Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py\n    def GetListCtrl(self):\n        return self.list\n\n    def GetMapCoordList(self):\n        return self.mapcoordlist\n\n    # Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py\n    def GetSortImages(self):\n        return (self.sm_dn, self.sm_up)\n\n    def GetFwdError(self):\n        return self.fwd_rmserror\n\n    def GetBkwError(self):\n        return self.bkw_rmserror\n\n    def InitMapDisplay(self):\n        self.list.LoadData()\n\n        # initialize column sorter\n        self.itemDataMap = self.mapcoordlist\n        ncols = self.list.GetColumnCount()\n        ColumnSorterMixin.__init__(self, ncols)\n        # init to ascending sort on first click\n        self._colSortFlag = [1] * ncols\n\n    def SetTarget(self, tgroup, tlocation, tmapset):\n        \"\"\"\n        Sets rectification target to current location and mapset\n        \"\"\"\n        # check to see if we are georectifying map in current working\n        # location/mapset\n        if (\n            self.newlocation == self.currentlocation\n            and self.newmapset == self.currentmapset\n        ):\n            RunCommand(\"i.target\", parent=self, flags=\"c\", group=tgroup)\n        else:\n            self.grwiz.SwitchEnv(\"source\")\n            RunCommand(\n                \"i.target\",\n                parent=self,\n                group=tgroup,\n                location=tlocation,\n                mapset=tmapset,\n            )\n            self.grwiz.SwitchEnv(\"target\")\n\n    def AddGCP(self, event):\n        \"\"\"\n        Appends an item to GCP list\n        \"\"\"\n        keyval = self.list.AddGCPItem() + 1\n        # source east, source north, target east, target north, forward error,\n        # backward error\n        self.mapcoordlist.append(\n            [\n                keyval,  # GCP number\n                0.0,  # source east\n                0.0,  # source north\n                0.0,  # target east\n                0.0,  # target north\n                0.0,  # forward error\n                0.0,\n            ]\n        )  # backward error\n\n        if self.statusbarManager.GetMode() == 5:  # go to\n            self.StatusbarUpdate()\n\n    def DeleteGCP(self, event):\n        \"\"\"\n        Deletes selected item in GCP list\n        \"\"\"\n        minNumOfItems = self.OnGROrder(None)\n\n        if self.list.GetItemCount() <= minNumOfItems:\n            GMessage(\n                parent=self,\n                message=_(\"At least %d GCPs required. Operation canceled.\")\n                % minNumOfItems,\n            )\n            return\n\n        key = self.list.DeleteGCPItem()\n        del self.mapcoordlist[key]\n\n        # update key and GCP number\n        for newkey in range(key, len(self.mapcoordlist)):\n            index = self.list.FindItem(-1, newkey + 1)\n            self.mapcoordlist[newkey][0] = newkey\n            self.list.SetItem(index, 0, str(newkey))\n            self.list.SetItemData(index, newkey)\n\n        # update selected\n        if self.list.GetItemCount() > 0:\n            if self.list.selected < self.list.GetItemCount():\n                self.list.selectedkey = self.list.GetItemData(self.list.selected)\n            else:\n                self.list.selected = self.list.GetItemCount() - 1\n                self.list.selectedkey = self.list.GetItemData(self.list.selected)\n\n            self.list.SetItemState(\n                self.list.selected, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED\n            )\n        else:\n            self.list.selected = wx.NOT_FOUND\n            self.list.selectedkey = -1\n\n        self.UpdateColours()\n\n        if self.statusbarManager.GetMode() == 5:  # go to\n            self.StatusbarUpdate()\n            if self.list.selectedkey > 0:\n                self.statusbarManager.SetProperty(\"gotoGCP\", self.list.selectedkey)\n\n    def ClearGCP(self, event):\n        \"\"\"\n        Clears all values in selected item of GCP list and unchecks it\n        \"\"\"\n        index = self.list.GetSelected()\n        key = self.list.GetItemData(index)\n\n        for i in range(1, 5):\n            self.list.SetItem(index, i, \"0.0\")\n        self.list.SetItem(index, 5, \"\")\n        self.list.SetItem(index, 6, \"\")\n        self.list.CheckItem(index, False)\n\n        # GCP number, source E, source N, target E, target N, fwd error, bkwd\n        # error\n        self.mapcoordlist[key] = [key, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n    def SetSettings(self):\n        \"\"\"Sets settings for drawing of GCP's.\"\"\"\n        self.highest_only = UserSettings.Get(\n            group=\"gcpman\", key=\"rms\", subkey=\"highestonly\"\n        )\n        self.show_unused = UserSettings.Get(\n            group=\"gcpman\", key=\"symbol\", subkey=\"unused\"\n        )\n\n        colours = {\n            \"color\": \"default\",\n            \"hcolor\": \"highest\",\n            \"scolor\": \"selected\",\n            \"ucolor\": \"unused\",\n        }\n        wpx = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"width\")\n\n        for k, v in colours.items():\n            col = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=k)\n            self.pointsToDrawSrc.GetPen(v).SetColour(\n                wx.Colour(col[0], col[1], col[2], 255)\n            )  # TODO GetPen neni to spatne?\n            self.pointsToDrawTgt.GetPen(v).SetColour(\n                wx.Colour(col[0], col[1], col[2], 255)\n            )\n\n            self.pointsToDrawSrc.GetPen(v).SetWidth(wpx)\n            self.pointsToDrawTgt.GetPen(v).SetWidth(wpx)\n\n        spx = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"size\")\n        self.pointsToDrawSrc.SetPropertyVal(\"size\", int(spx))\n        self.pointsToDrawTgt.SetPropertyVal(\"size\", int(spx))\n\n        font = self.GetFont()\n        font.SetPointSize(int(spx) + 2)\n\n        textProp = {}\n        textProp[\"active\"] = True\n        textProp[\"font\"] = font\n        self.pointsToDrawSrc.SetPropertyVal(\"text\", textProp)\n        self.pointsToDrawTgt.SetPropertyVal(\"text\", copy(textProp))\n\n    def SetGCPSatus(self, item, itemIndex):\n        \"\"\"Before GCP is drawn, decides it's colour and whether it\n        will be drawn.\n        \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[2221:2475]\n==image2target.ii2t_manager:[2159:2413]\n                ),\n            )\n            return\n\n        # fist corner\n        e, n = errlist[0].split()\n        fe = float(e)\n        fn = float(n)\n        newreg[\"n\"] = fn\n        newreg[\"s\"] = fn\n        newreg[\"e\"] = fe\n        newreg[\"w\"] = fe\n        # other three corners\n        for i in range(1, 4):\n            e, n = errlist[i].split()\n            fe = float(e)\n            fn = float(n)\n            if fe < newreg[\"w\"]:\n                newreg[\"w\"] = fe\n            if fe > newreg[\"e\"]:\n                newreg[\"e\"] = fe\n            if fn < newreg[\"s\"]:\n                newreg[\"s\"] = fn\n            if fn > newreg[\"n\"]:\n                newreg[\"n\"] = fn\n\n        return newreg\n\n    def OnHelp(self, event):\n        \"\"\"Show GCP Manager manual page\"\"\"\n        self._giface.Help(entry=\"wxGUI.gcp\")\n\n    def OnUpdateActive(self, event):\n        if self.activemap.GetSelection() == 0:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n        else:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n\n        self.UpdateActive(self.MapWindow)\n        # for wingrass\n        if os.name == \"nt\":\n            self.MapWindow.SetFocus()\n\n    def UpdateActive(self, win):\n        # optionally disable tool zoomback tool\n        self.GetMapToolbar().Enable(\n            \"zoomback\", enable=(len(self.MapWindow.zoomhistory) > 1)\n        )\n\n        if self.activemap.GetSelection() != (win == self.TgtMapWindow):\n            self.activemap.SetSelection(win == self.TgtMapWindow)\n        self.StatusbarUpdate()\n\n    def AdjustMap(self, newreg):\n        \"\"\"Adjust map window to new extents\"\"\"\n\n        # adjust map window\n        self.Map.region[\"n\"] = newreg[\"n\"]\n        self.Map.region[\"s\"] = newreg[\"s\"]\n        self.Map.region[\"e\"] = newreg[\"e\"]\n        self.Map.region[\"w\"] = newreg[\"w\"]\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        # LL locations\n        if self.Map.projinfo[\"proj\"] == \"ll\":\n            if newreg[\"n\"] > 90.0:\n                newreg[\"n\"] = 90.0\n            if newreg[\"s\"] < -90.0:\n                newreg[\"s\"] = -90.0\n\n        ce = newreg[\"w\"] + (newreg[\"e\"] - newreg[\"w\"]) / 2\n        cn = newreg[\"s\"] + (newreg[\"n\"] - newreg[\"s\"]) / 2\n\n        # calculate new center point and display resolution\n        self.Map.region[\"center_easting\"] = ce\n        self.Map.region[\"center_northing\"] = cn\n        self.Map.region[\"ewres\"] = (newreg[\"e\"] - newreg[\"w\"]) / self.Map.width\n        self.Map.region[\"nsres\"] = (newreg[\"n\"] - newreg[\"s\"]) / self.Map.height\n        self.Map.AlignExtentFromDisplay()\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        if self.MapWindow.redrawAll is False:\n            self.MapWindow.redrawAll = True\n\n        self.MapWindow.UpdateMap()\n        self.StatusbarUpdate()\n\n    def OnZoomToSource(self, event):\n        \"\"\"Set target map window to match extents of source map window\"\"\"\n\n        if not self.MapWindow == self.TgtMapWindow:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n            self.UpdateActive(self.TgtMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.SrcMap.region, \"source\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomToTarget(self, event):\n        \"\"\"Set source map window to match extents of target map window\"\"\"\n\n        if not self.MapWindow == self.SrcMapWindow:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n            self.UpdateActive(self.SrcMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.TgtMap.region, \"target\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomMenuGCP(self, event):\n        \"\"\"Popup Zoom menu\"\"\"\n        point = wx.GetMousePosition()\n        zoommenu = Menu()\n        # Add items to the menu\n\n        zoomsource = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust source display to target display\")\n        )\n        zoommenu.AppendItem(zoomsource)\n        self.Bind(wx.EVT_MENU, self.OnZoomToTarget, zoomsource)\n\n        zoomtarget = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust target display to source display\")\n        )\n        zoommenu.AppendItem(zoomtarget)\n        self.Bind(wx.EVT_MENU, self.OnZoomToSource, zoomtarget)\n\n        # Popup the menu. If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(zoommenu)\n        zoommenu.Destroy()\n\n    def OnSize(self, event):\n        \"\"\"Adjust Map Windows after GCP Map Display has been resized\"\"\"\n        # re-render image on idle\n        self.resize = grass.clock()\n        super(MapPanel, self).OnSize(event)\n\n    def OnIdle(self, event):\n        \"\"\"GCP Map Display resized, adjust Map Windows\"\"\"\n        if self.GetMapToolbar():\n            if self.resize and self.resize + 0.2 < grass.clock():\n                srcwidth, srcheight = self.SrcMapWindow.GetSize()\n                tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n                srcwidth = (srcwidth + tgtwidth) / 2\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Hide()\n                    self._mgr.Update()\n                self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n                self._mgr.GetPane(\"target\").BestSize((srcwidth, tgtheight))\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Show()\n                self._mgr.Update()\n                self.resize = False\n            elif self.resize:\n                event.RequestMore()\n        pass\n\n\nclass GCPDisplay(FrameMixin, GCPPanel):\n    \"\"\"Map display for wrapping map panel with frame methods\"\"\"\n\n    def __init__(self, parent, giface, grwiz, id, lmgr, Map, title, **kwargs):\n        # init map panel\n        GCPPanel.__init__(\n            self,\n            parent=parent,\n            giface=giface,\n            grwiz=grwiz,\n            id=id,\n            lmgr=lmgr,\n            Map=Map,\n            title=title,\n            **kwargs,\n        )\n        # set system icon\n        parent.SetIcon(\n            wx.Icon(\n                os.path.join(globalvar.ICONDIR, \"grass_map.ico\"), wx.BITMAP_TYPE_ICO\n            )\n        )\n\n        # bind to frame\n        parent.Bind(wx.EVT_CLOSE, self.OnQuit)\n\n        # extend shortcuts and create frame accelerator table\n        self.shortcuts_table.append((self.OnFullScreen, wx.ACCEL_NORMAL, wx.WXK_F11))\n        self._initShortcuts()\n\n        # add Map Display panel to Map Display frame\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self, proportion=1, flag=wx.EXPAND)\n        parent.SetSizer(sizer)\n        parent.Layout()\n\n\nclass GCPList(ListCtrl, CheckListCtrlMixin, ListCtrlAutoWidthMixin):\n    def __init__(\n        self,\n        parent,\n        gcp,\n        id=wx.ID_ANY,\n        pos=wx.DefaultPosition,\n        size=wx.DefaultSize,\n        style=wx.LC_REPORT | wx.SUNKEN_BORDER | wx.LC_HRULES | wx.LC_SINGLE_SEL,\n    ):\n        ListCtrl.__init__(self, parent, id, pos, size, style)\n\n        self.gcp = gcp  # GCP class\n        self.render = True\n\n        # Mixin settings\n        CheckListCtrlMixin.__init__(self)\n        ListCtrlAutoWidthMixin.__init__(self)\n        # TextEditMixin.__init__(self)\n\n        # tracks whether list items are checked or not\n        self.CheckList = []\n\n        self._Create()\n\n        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected)\n        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnItemActivated)\n        self.Bind(wx.EVT_LIST_COL_CLICK, self.OnColClick)\n\n        self.selected = wx.NOT_FOUND\n        self.selectedkey = -1\n\n    def _Create(self):\n        if 0:\n            # normal, simple columns\n            idx_col = 0\n            for col in (\n                _(\"use\"),\n                _(\"source E\"),\n                _(\"source N\"),",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.toolbars:[56:224]\n==image2target.ii2t_toolbars:[56:224]\n                ),\n                (\n                    (\"gcpDelete\", icons[\"gcpDelete\"].label),\n                    icons[\"gcpDelete\"],\n                    self.parent.DeleteGCP,\n                ),\n                (\n                    (\"gcpClear\", icons[\"gcpClear\"].label),\n                    icons[\"gcpClear\"],\n                    self.parent.ClearGCP,\n                ),\n                (None,),\n                (\n                    (\"rms\", icons[\"gcpRms\"].label),\n                    icons[\"gcpRms\"],\n                    self.parent.OnRMS,\n                ),\n                (\n                    (\"georect\", icons[\"georectify\"].label),\n                    icons[\"georectify\"],\n                    self.parent.OnGeorect,\n                ),\n                (None,),\n                (\n                    (\"gcpSave\", icons[\"gcpSave\"].label),\n                    icons[\"gcpSave\"],\n                    self.parent.SaveGCPs,\n                ),\n                (\n                    (\"gcpReload\", icons[\"gcpReload\"].label),\n                    icons[\"gcpReload\"],\n                    self.parent.ReloadGCPs,\n                ),\n            )\n        )\n\n\nclass GCPDisplayToolbar(BaseToolbar):\n    \"\"\"GCP Display toolbar\"\"\"\n\n    def __init__(self, parent, toolSwitcher):\n        \"\"\"GCP Display toolbar constructor\"\"\"\n        BaseToolbar.__init__(self, parent, toolSwitcher)\n\n        self.InitToolbar(self._toolbarData())\n        self._default = self.gcpset\n\n        # add tool to toggle active map window\n        self.togglemap = wx.Choice(\n            parent=self, id=wx.ID_ANY, choices=[_(\"source\"), _(\"target\")]\n        )\n\n        self.InsertControl(10, self.togglemap)\n\n        self.SetToolShortHelp(\n            self.togglemap.GetId(),\n            \"%s %s %s\"\n            % (\n                _(\"Set map canvas for \"),\n                BaseIcons[\"zoomBack\"].GetLabel(),\n                _(\" / Zoom to map\"),\n            ),\n        )\n\n        for tool in (self.gcpset, self.pan, self.zoomin, self.zoomout):\n            self.toolSwitcher.AddToolToGroup(group=\"mouseUse\", toolbar=self, tool=tool)\n\n        # realize the toolbar\n        self.Realize()\n\n        self.EnableTool(self.zoomback, False)\n\n    def _toolbarData(self):\n        \"\"\"Toolbar data\"\"\"\n        icons = {\n            \"gcpSet\": MetaIcon(\n                img=\"gcp-create\",\n                label=_(\"Update GCP coordinates\"),\n                desc=_(\"Update GCP coordinates)\"),\n            ),\n            \"quit\": BaseIcons[\"quit\"],\n            \"settings\": BaseIcons[\"settings\"],\n            \"help\": BaseIcons[\"help\"],\n        }\n\n        return self._getToolbarData(\n            (\n                (\n                    (\"displaymap\", BaseIcons[\"display\"].label),\n                    BaseIcons[\"display\"],\n                    self.parent.OnDraw,\n                ),\n                (\n                    (\"rendermap\", BaseIcons[\"render\"].label),\n                    BaseIcons[\"render\"],\n                    self.parent.OnRender,\n                ),\n                (\n                    (\"erase\", BaseIcons[\"erase\"].label),\n                    BaseIcons[\"erase\"],\n                    self.parent.OnErase,\n                ),\n                (None,),\n                (\n                    (\"gcpset\", icons[\"gcpSet\"].label),\n                    icons[\"gcpSet\"],\n                    self.parent.OnPointer,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"pan\", BaseIcons[\"pan\"].label),\n                    BaseIcons[\"pan\"],\n                    self.parent.OnPan,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoomin\", BaseIcons[\"zoomIn\"].label),\n                    BaseIcons[\"zoomIn\"],\n                    self.parent.OnZoomIn,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoomout\", BaseIcons[\"zoomOut\"].label),\n                    BaseIcons[\"zoomOut\"],\n                    self.parent.OnZoomOut,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoommenu\", BaseIcons[\"zoomMenu\"].label),\n                    BaseIcons[\"zoomMenu\"],\n                    self.parent.OnZoomMenuGCP,\n                ),\n                (None,),\n                (\n                    (\"zoomback\", BaseIcons[\"zoomBack\"].label),\n                    BaseIcons[\"zoomBack\"],\n                    self.parent.OnZoomBack,\n                ),\n                (\n                    (\"zoomtomap\", BaseIcons[\"zoomExtent\"].label),\n                    BaseIcons[\"zoomExtent\"],\n                    self.parent.OnZoomToMap,\n                ),\n                (None,),\n                (\n                    (\"mapDispSettings\", BaseIcons[\"mapDispSettings\"].label),\n                    BaseIcons[\"mapDispSettings\"],\n                    self.parent.OnMapDisplayProperties,\n                ),\n                (None,),\n                (\n                    (\"settings\", icons[\"settings\"].label),\n                    icons[\"settings\"],\n                    self.parent.OnSettings,\n                ),\n                (\n                    (\"help\", icons[\"help\"].label),\n                    icons[\"help\"],\n                    self.parent.OnHelp,\n                ),\n                (None,),\n                (\n                    (\"quit\", icons[\"quit\"].label),\n                    icons[\"quit\"],\n                    self.parent.OnQuit,\n                ),\n            )\n        )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.toolbars:[64:224]\n==photo2image.ip2i_toolbars:[64:224]\n                    icons[\"gcpClear\"],\n                    self.parent.ClearGCP,\n                ),\n                (None,),\n                (\n                    (\"rms\", icons[\"gcpRms\"].label),\n                    icons[\"gcpRms\"],\n                    self.parent.OnRMS,\n                ),\n                (\n                    (\"georect\", icons[\"georectify\"].label),\n                    icons[\"georectify\"],\n                    self.parent.OnGeorect,\n                ),\n                (None,),\n                (\n                    (\"gcpSave\", icons[\"gcpSave\"].label),\n                    icons[\"gcpSave\"],\n                    self.parent.SaveGCPs,\n                ),\n                (\n                    (\"gcpReload\", icons[\"gcpReload\"].label),\n                    icons[\"gcpReload\"],\n                    self.parent.ReloadGCPs,\n                ),\n            )\n        )\n\n\nclass GCPDisplayToolbar(BaseToolbar):\n    \"\"\"GCP Display toolbar\"\"\"\n\n    def __init__(self, parent, toolSwitcher):\n        \"\"\"GCP Display toolbar constructor\"\"\"\n        BaseToolbar.__init__(self, parent, toolSwitcher)\n\n        self.InitToolbar(self._toolbarData())\n        self._default = self.gcpset\n\n        # add tool to toggle active map window\n        self.togglemap = wx.Choice(\n            parent=self, id=wx.ID_ANY, choices=[_(\"source\"), _(\"target\")]\n        )\n\n        self.InsertControl(10, self.togglemap)\n\n        self.SetToolShortHelp(\n            self.togglemap.GetId(),\n            \"%s %s %s\"\n            % (\n                _(\"Set map canvas for \"),\n                BaseIcons[\"zoomBack\"].GetLabel(),\n                _(\" / Zoom to map\"),\n            ),\n        )\n\n        for tool in (self.gcpset, self.pan, self.zoomin, self.zoomout):\n            self.toolSwitcher.AddToolToGroup(group=\"mouseUse\", toolbar=self, tool=tool)\n\n        # realize the toolbar\n        self.Realize()\n\n        self.EnableTool(self.zoomback, False)\n\n    def _toolbarData(self):\n        \"\"\"Toolbar data\"\"\"\n        icons = {\n            \"gcpSet\": MetaIcon(\n                img=\"gcp-create\",\n                label=_(\"Update GCP coordinates\"),\n                desc=_(\"Update GCP coordinates)\"),\n            ),\n            \"quit\": BaseIcons[\"quit\"],\n            \"settings\": BaseIcons[\"settings\"],\n            \"help\": BaseIcons[\"help\"],\n        }\n\n        return self._getToolbarData(\n            (\n                (\n                    (\"displaymap\", BaseIcons[\"display\"].label),\n                    BaseIcons[\"display\"],\n                    self.parent.OnDraw,\n                ),\n                (\n                    (\"rendermap\", BaseIcons[\"render\"].label),\n                    BaseIcons[\"render\"],\n                    self.parent.OnRender,\n                ),\n                (\n                    (\"erase\", BaseIcons[\"erase\"].label),\n                    BaseIcons[\"erase\"],\n                    self.parent.OnErase,\n                ),\n                (None,),\n                (\n                    (\"gcpset\", icons[\"gcpSet\"].label),\n                    icons[\"gcpSet\"],\n                    self.parent.OnPointer,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"pan\", BaseIcons[\"pan\"].label),\n                    BaseIcons[\"pan\"],\n                    self.parent.OnPan,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoomin\", BaseIcons[\"zoomIn\"].label),\n                    BaseIcons[\"zoomIn\"],\n                    self.parent.OnZoomIn,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoomout\", BaseIcons[\"zoomOut\"].label),\n                    BaseIcons[\"zoomOut\"],\n                    self.parent.OnZoomOut,\n                    wx.ITEM_CHECK,\n                ),\n                (\n                    (\"zoommenu\", BaseIcons[\"zoomMenu\"].label),\n                    BaseIcons[\"zoomMenu\"],\n                    self.parent.OnZoomMenuGCP,\n                ),\n                (None,),\n                (\n                    (\"zoomback\", BaseIcons[\"zoomBack\"].label),\n                    BaseIcons[\"zoomBack\"],\n                    self.parent.OnZoomBack,\n                ),\n                (\n                    (\"zoomtomap\", BaseIcons[\"zoomExtent\"].label),\n                    BaseIcons[\"zoomExtent\"],\n                    self.parent.OnZoomToMap,\n                ),\n                (None,),\n                (\n                    (\"mapDispSettings\", BaseIcons[\"mapDispSettings\"].label),\n                    BaseIcons[\"mapDispSettings\"],\n                    self.parent.OnMapDisplayProperties,\n                ),\n                (None,),\n                (\n                    (\"settings\", icons[\"settings\"].label),\n                    icons[\"settings\"],\n                    self.parent.OnSettings,\n                ),\n                (\n                    (\"help\", icons[\"help\"].label),\n                    icons[\"help\"],\n                    self.parent.OnHelp,\n                ),\n                (None,),\n                (\n                    (\"quit\", icons[\"quit\"].label),\n                    icons[\"quit\"],\n                    self.parent.OnQuit,\n                ),\n            )\n        )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==image2target.ii2t_mapdisplay:[37:282]\n==photo2image.ip2i_mapdisplay:[32:274]\ncmdfilename = None\n\n\nclass MapPanel(SingleMapPanel):\n    \"\"\"Main panel for map display window. Drawing takes place in\n    child double buffered drawing window.\n    \"\"\"\n\n    def __init__(\n        self,\n        parent,\n        giface,\n        title=_(\"GRASS GIS Manage Ground Control Points\"),\n        toolbars=[\"gcpdisp\"],\n        Map=None,\n        auimgr=None,\n        name=\"GCPMapWindow\",\n        **kwargs,\n    ):\n        \"\"\"Main map display window with toolbars, statusbar and\n        DrawWindow\n\n        :param giface: GRASS interface instance\n        :param title: window title\n        :param toolbars: array of activated toolbars, e.g. ['map', 'digit']\n        :param map: instance of render.Map\n        :param auimgs: AUI manager\n        :param kwargs: wx.Panel attributes\n        \"\"\"\n\n        SingleMapPanel.__init__(\n            self,\n            parent=parent,\n            giface=giface,\n            title=title,\n            Map=Map,\n            auimgr=auimgr,\n            name=name,\n            **kwargs,\n        )\n\n        self._giface = giface\n\n        self.mapWindowProperties.alignExtent = True\n\n        #\n        # Add toolbars\n        #\n        for toolb in toolbars:\n            self.AddToolbar(toolb)\n\n        self.activemap = self.toolbars[\"gcpdisp\"].togglemap\n        self.activemap.SetSelection(0)\n\n        self.SrcMap = self.grwiz.SrcMap  # instance of render.Map\n        self.TgtMap = self.grwiz.TgtMap  # instance of render.Map\n        self._mgr.SetDockSizeConstraint(0.5, 0.5)\n\n        #\n        # Add statusbar\n        #\n\n        # items for choice\n        statusbarItems = [\n            sb.SbCoordinates,\n            sb.SbRegionExtent,\n            sb.SbCompRegionExtent,\n            sb.SbDisplayGeometry,\n            sb.SbMapScale,\n            sbgcp.SbGoToGCP,\n            sbgcp.SbRMSError,\n        ]\n\n        # create statusbar and its manager\n        self.statusbar = self.CreateStatusbar(statusbarItems)\n\n        #\n        # Init map display (buffered DC & set default cursor)\n        #\n        self.grwiz.SwitchEnv(\"source\")\n        self.SrcMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.SrcMap,\n        )\n\n        self.grwiz.SwitchEnv(\"target\")\n        self.TgtMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.TgtMap,\n        )\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n        self._setUpMapWindow(self.SrcMapWindow)\n        self._setUpMapWindow(self.TgtMapWindow)\n        self.SrcMapWindow.SetNamedCursor(\"cross\")\n        self.TgtMapWindow.SetNamedCursor(\"cross\")\n        # used to switch current map (combo box in toolbar)\n        self.SrcMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.SrcMapWindow)\n        )\n        self.TgtMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.TgtMapWindow)\n        )\n\n        #\n        # initialize region values\n        #\n        self._initMap(Map=self.SrcMap)\n        self._initMap(Map=self.TgtMap)\n\n        self.GetMapToolbar().SelectDefault()\n\n        #\n        # Bind various events\n        #\n        self.activemap.Bind(wx.EVT_CHOICE, self.OnUpdateActive)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n\n        #\n        # Update fancy gui style\n        #\n        # AuiManager wants a CentrePane, workaround to get two equally sized\n        # windows\n        self.list = self.CreateGCPList()\n\n        # set Go To GCP item as active in statusbar\n        self.mapWindowProperties.sbItem = 5\n\n        # self.SrcMapWindow.SetSize((300, 300))\n        # self.TgtMapWindow.SetSize((300, 300))\n        self.list.SetSize((100, 150))\n        self._addPanes()\n\n        srcwidth, srcheight = self.SrcMapWindow.GetSize()\n        tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n        srcwidth = (srcwidth + tgtwidth) / 2\n        self._mgr.GetPane(\"target\").Hide()\n        self._mgr.Update()\n        self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n        self._mgr.GetPane(\"target\").BestSize((srcwidth, srcheight))\n        if self.show_target:\n            self._mgr.GetPane(\"target\").Show()\n        else:\n            self.activemap.Enable(False)\n        # needed by Mac OS, does not harm on Linux, breaks display on Windows\n        if platform.system() != \"Windows\":\n            self._mgr.Update()\n\n        #\n        # Init print module and classes\n        #\n        self.printopt = PrintOptions(self, self.MapWindow)\n\n        #\n        # Initialization of digitization tool\n        #\n        self.digit = None\n\n        # set active map\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n\n        # do not init zoom history here, that happens when zooming to map(s)\n\n        #\n        # Re-use dialogs\n        #\n        self.dialogs = {}\n        self.dialogs[\"attributes\"] = None\n        self.dialogs[\"category\"] = None\n        self.dialogs[\"barscale\"] = None\n        self.dialogs[\"legend\"] = None\n\n        self.decorationDialog = None  # decoration/overlays\n\n    def _setUpMapWindow(self, mapWindow):\n        # TODO: almost the same implementation as for MapPanelBase (only names differ)\n        # enable or disable zoom history tool\n        mapWindow.zoomHistoryAvailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=True)\n        )\n        mapWindow.zoomHistoryUnavailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=False)\n        )\n        mapWindow.mouseMoving.connect(self.CoordinatesChanged)\n\n    def AddToolbar(self, name):\n        \"\"\"Add defined toolbar to the window\n\n        Currently known toolbars are:\n         - 'map'     - basic map toolbar\n         - 'vdigit'  - vector digitizer\n         - 'gcpdisp' - GCP Manager, Display\n         - 'gcpman'  - GCP Manager, points management\n         - 'nviz'    - 3D view mode\n        \"\"\"\n        # default toolbar\n        if name == \"map\":\n            if \"map\" not in self.toolbars:\n                self.toolbars[\"map\"] = MapToolbar(\n                    self, self._toolSwitcher, self._giface\n                )\n\n            self._mgr.AddPane(\n                self.toolbars[\"map\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"maptoolbar\")\n                .Caption(_(\"Map Toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2)\n                .BestSize(self.toolbars[\"map\"].GetSize()),\n            )\n\n        # GCP display\n        elif name == \"gcpdisp\":\n            if \"gcpdisp\" not in self.toolbars:\n                self.toolbars[\"gcpdisp\"] = GCPDisplayToolbar(self, self._toolSwitcher)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpdisp\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpdisplaytoolbar\")\n                .Caption(_(\"GCP Display toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==image2target.ii2t_manager:[2159:2350]\n==photo2image.ip2i_manager:[1440:1631]\n                ),\n            )\n            return\n\n        # fist corner\n        e, n = errlist[0].split()\n        fe = float(e)\n        fn = float(n)\n        newreg[\"n\"] = fn\n        newreg[\"s\"] = fn\n        newreg[\"e\"] = fe\n        newreg[\"w\"] = fe\n        # other three corners\n        for i in range(1, 4):\n            e, n = errlist[i].split()\n            fe = float(e)\n            fn = float(n)\n            if fe < newreg[\"w\"]:\n                newreg[\"w\"] = fe\n            if fe > newreg[\"e\"]:\n                newreg[\"e\"] = fe\n            if fn < newreg[\"s\"]:\n                newreg[\"s\"] = fn\n            if fn > newreg[\"n\"]:\n                newreg[\"n\"] = fn\n\n        return newreg\n\n    def OnHelp(self, event):\n        \"\"\"Show GCP Manager manual page\"\"\"\n        self._giface.Help(entry=\"wxGUI.gcp\")\n\n    def OnUpdateActive(self, event):\n        if self.activemap.GetSelection() == 0:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n        else:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n\n        self.UpdateActive(self.MapWindow)\n        # for wingrass\n        if os.name == \"nt\":\n            self.MapWindow.SetFocus()\n\n    def UpdateActive(self, win):\n        # optionally disable tool zoomback tool\n        self.GetMapToolbar().Enable(\n            \"zoomback\", enable=(len(self.MapWindow.zoomhistory) > 1)\n        )\n\n        if self.activemap.GetSelection() != (win == self.TgtMapWindow):\n            self.activemap.SetSelection(win == self.TgtMapWindow)\n        self.StatusbarUpdate()\n\n    def AdjustMap(self, newreg):\n        \"\"\"Adjust map window to new extents\"\"\"\n\n        # adjust map window\n        self.Map.region[\"n\"] = newreg[\"n\"]\n        self.Map.region[\"s\"] = newreg[\"s\"]\n        self.Map.region[\"e\"] = newreg[\"e\"]\n        self.Map.region[\"w\"] = newreg[\"w\"]\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        # LL locations\n        if self.Map.projinfo[\"proj\"] == \"ll\":\n            if newreg[\"n\"] > 90.0:\n                newreg[\"n\"] = 90.0\n            if newreg[\"s\"] < -90.0:\n                newreg[\"s\"] = -90.0\n\n        ce = newreg[\"w\"] + (newreg[\"e\"] - newreg[\"w\"]) / 2\n        cn = newreg[\"s\"] + (newreg[\"n\"] - newreg[\"s\"]) / 2\n\n        # calculate new center point and display resolution\n        self.Map.region[\"center_easting\"] = ce\n        self.Map.region[\"center_northing\"] = cn\n        self.Map.region[\"ewres\"] = (newreg[\"e\"] - newreg[\"w\"]) / self.Map.width\n        self.Map.region[\"nsres\"] = (newreg[\"n\"] - newreg[\"s\"]) / self.Map.height\n        self.Map.AlignExtentFromDisplay()\n\n        self.MapWindow.ZoomHistory(\n            self.Map.region[\"n\"],\n            self.Map.region[\"s\"],\n            self.Map.region[\"e\"],\n            self.Map.region[\"w\"],\n        )\n\n        if self.MapWindow.redrawAll is False:\n            self.MapWindow.redrawAll = True\n\n        self.MapWindow.UpdateMap()\n        self.StatusbarUpdate()\n\n    def OnZoomToSource(self, event):\n        \"\"\"Set target map window to match extents of source map window\"\"\"\n\n        if not self.MapWindow == self.TgtMapWindow:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n            self.UpdateActive(self.TgtMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.SrcMap.region, \"source\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomToTarget(self, event):\n        \"\"\"Set source map window to match extents of target map window\"\"\"\n\n        if not self.MapWindow == self.SrcMapWindow:\n            self.MapWindow = self.SrcMapWindow\n            self.Map = self.SrcMap\n            self.UpdateActive(self.SrcMapWindow)\n\n        # get new N, S, E, W for target\n        newreg = self.GetNewExtent(self.TgtMap.region, \"target\")\n        if newreg:\n            self.AdjustMap(newreg)\n\n    def OnZoomMenuGCP(self, event):\n        \"\"\"Popup Zoom menu\"\"\"\n        point = wx.GetMousePosition()\n        zoommenu = Menu()\n        # Add items to the menu\n\n        zoomsource = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust source display to target display\")\n        )\n        zoommenu.AppendItem(zoomsource)\n        self.Bind(wx.EVT_MENU, self.OnZoomToTarget, zoomsource)\n\n        zoomtarget = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Adjust target display to source display\")\n        )\n        zoommenu.AppendItem(zoomtarget)\n        self.Bind(wx.EVT_MENU, self.OnZoomToSource, zoomtarget)\n\n        # Popup the menu. If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(zoommenu)\n        zoommenu.Destroy()\n\n    def OnSize(self, event):\n        \"\"\"Adjust Map Windows after GCP Map Display has been resized\"\"\"\n        # re-render image on idle\n        self.resize = grass.clock()\n        super(MapPanel, self).OnSize(event)\n\n    def OnIdle(self, event):\n        \"\"\"GCP Map Display resized, adjust Map Windows\"\"\"\n        if self.GetMapToolbar():\n            if self.resize and self.resize + 0.2 < grass.clock():\n                srcwidth, srcheight = self.SrcMapWindow.GetSize()\n                tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n                srcwidth = (srcwidth + tgtwidth) / 2\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Hide()\n                    self._mgr.Update()\n                self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n                self._mgr.GetPane(\"target\").BestSize((srcwidth, tgtheight))\n                if self.show_target:\n                    self._mgr.GetPane(\"target\").Show()\n                self._mgr.Update()\n                self.resize = False\n            elif self.resize:\n                event.RequestMore()\n        pass\n\n\nclass GCPDisplay(FrameMixin, GCPPanel):\n    \"\"\"Map display for wrapping map panel with frame methods\"\"\"\n\n    def __init__(self, parent, giface, grwiz, id, lmgr, Map, title, **kwargs):\n        # init map panel\n        GCPPanel.__init__(\n            self,\n            parent=parent,\n            giface=giface,\n            grwiz=grwiz,\n            id=id,\n            lmgr=lmgr,\n            Map=Map,\n            title=title,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==frame:[1754:2014]\n==lmgr.frame:[1604:1864]\n        dlg.Destroy()\n\n    def OnRasterRules(self, event):\n        \"\"\"Launches dialog for raster color rules\"\"\"\n        from modules.colorrules import RasterColorTable\n\n        ctable = RasterColorTable(self, layerTree=self.GetLayerTree())\n        ctable.Show()\n        ctable.CentreOnScreen()\n\n    def OnVectorRules(self, event):\n        \"\"\"Launches dialog for vector color rules\"\"\"\n        from modules.colorrules import VectorColorTable\n\n        ctable = VectorColorTable(\n            self, layerTree=self.GetLayerTree(), attributeType=\"color\"\n        )\n        ctable.Show()\n        ctable.CentreOnScreen()\n\n    def OnEditImageryGroups(self, event, cmd=None):\n        \"\"\"Show dialog for creating and editing groups.\"\"\"\n        dlg = GroupDialog(self)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnInstallExtension(self, event):\n        \"\"\"Install extension from GRASS Addons repository\"\"\"\n        from modules.extensions import InstallExtensionWindow\n\n        win = InstallExtensionWindow(self, giface=self._giface, size=(650, 550))\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnManageExtension(self, event):\n        \"\"\"Manage or uninstall extensions\"\"\"\n        from modules.extensions import ManageExtensionWindow\n\n        win = ManageExtensionWindow(self, size=(650, 300))\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnPreferences(self, event):\n        \"\"\"General GUI preferences/settings\"\"\"\n        if not self.dialogs[\"preferences\"]:\n            dlg = PreferencesDialog(parent=self, giface=self._giface)\n            self.dialogs[\"preferences\"] = dlg\n            self.dialogs[\"preferences\"].CenterOnParent()\n\n            dlg.settingsChanged.connect(self.OnSettingsChanged)\n            self.Bind(\n                wx.EVT_CLOSE, lambda evt: self.dialogs.update(preferences=None), dlg\n            )\n\n        self.dialogs[\"preferences\"].Show()\n\n    def OnNvizPreferences(self, event):\n        \"\"\"Show nviz preferences\"\"\"\n        if not self.dialogs[\"nvizPreferences\"]:\n            from nviz.preferences import NvizPreferencesDialog\n\n            dlg = NvizPreferencesDialog(parent=self, giface=self._giface)\n            self.dialogs[\"nvizPreferences\"] = dlg\n            self.dialogs[\"nvizPreferences\"].CenterOnScreen()\n        self.dialogs[\"nvizPreferences\"].Show()\n\n    def OnHelp(self, event):\n        \"\"\"Show help\"\"\"\n        self._gconsole.RunCmd([\"g.manual\", \"-i\"])\n\n    def OnIClass(self, event=None, cmd=None):\n        \"\"\"Start wxIClass tool\n\n        The parameters of all handlers which are associated with module\n        and contained in menu/toolboxes must be event and cmd.\n        When called from menu event is always None and cmd is the\n        associated command (list containing a module name and parameters).\n\n        .. todo::\n            This documentation is actually documentation of some\n            component related to gui_core/menu.py file.\n        \"\"\"\n        from iclass.frame import IClassMapDisplay, haveIClass, errMsg\n\n        if not haveIClass:\n            GError(\n                _('Unable to launch \"Supervised Classification Tool\".\\n\\nReason: %s')\n                % errMsg\n            )\n            return\n\n        frame = wx.Frame(\n            parent=None,\n            size=globalvar.MAP_WINDOW_SIZE,\n            title=_(\"Supervised Classification Tool\"),\n        )\n        win = IClassMapDisplay(parent=frame, giface=self._giface)\n        win.CentreOnScreen()\n\n        win.Show()\n\n    def OnAnimationTool(self, event=None, cmd=None):\n        \"\"\"Launch Animation tool. See OnIClass documentation.\"\"\"\n        from animation.frame import AnimationFrame\n\n        frame = AnimationFrame(parent=self, giface=self._giface)\n        frame.CentreOnScreen()\n        frame.Show()\n\n        tree = self.GetLayerTree()\n        if tree:\n            rasters = []\n            for layer in tree.GetSelectedLayers(checkedOnly=False):\n                if tree.GetLayerInfo(layer, key=\"type\") == \"raster\":\n                    rasters.append(tree.GetLayerInfo(layer, key=\"maplayer\").GetName())\n            if len(rasters) >= 2:\n                from core.layerlist import LayerList\n                from animation.data import AnimLayer\n\n                layerList = LayerList()\n                layer = AnimLayer()\n                layer.mapType = \"raster\"\n                layer.name = \",\".join(rasters)\n                layer.cmd = [\"d.rast\", \"map=\"]\n                layerList.AddLayer(layer)\n                frame.SetAnimations([layerList, None, None, None])\n\n    def OnTimelineTool(self, event=None, cmd=None):\n        \"\"\"Launch Timeline Tool\"\"\"\n        try:\n            from timeline.frame import TimelineFrame\n        except ImportError:\n            GError(parent=self, message=_(\"Unable to start Timeline Tool.\"))\n            return\n        frame = TimelineFrame(None)\n        frame.Show()\n\n    def OnTplotTool(self, event=None, cmd=None):\n        \"\"\"Launch Temporal Plot Tool\"\"\"\n        try:\n            from tplot.frame import TplotFrame\n        except ImportError:\n            GError(parent=self, message=_(\"Unable to start Temporal Plot Tool.\"))\n            return\n        frame = TplotFrame(parent=self, giface=self._giface)\n        frame.Show()\n\n    def OnHistogram(self, event):\n        \"\"\"Init histogram display canvas and tools\"\"\"\n        from modules.histogram import HistogramFrame\n\n        win = HistogramFrame(self, giface=self._giface)\n\n        win.CentreOnScreen()\n        win.Show()\n        win.Refresh()\n        win.Update()\n\n    def OnMapCalculator(self, event, cmd=\"\"):\n        \"\"\"Init map calculator for interactive creation of mapcalc statements\"\"\"\n        from modules.mcalc_builder import MapCalcFrame\n\n        if event:\n            try:\n                cmd = self.GetMenuCmd(event)\n            except KeyError:\n                cmd = [\"r.mapcalc\"]\n        win = MapCalcFrame(parent=self, giface=self._giface, cmd=cmd[0])\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnRasterOutputFormat(self, event):\n        \"\"\"Set raster output format handler\"\"\"\n        self.OnMenuCmd(cmd=[\"r.external.out\"])\n\n    def OnVectorOutputFormat(self, event):\n        \"\"\"Set vector output format handler\"\"\"\n        from modules.import_export import GdalOutputDialog\n\n        dlg = GdalOutputDialog(parent=self, ogr=True)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnImportDxfFile(self, event, cmd=None):\n        \"\"\"Convert multiple DXF layers to GRASS vector map layers\"\"\"\n        from modules.import_export import DxfImportDialog\n\n        dlg = DxfImportDialog(parent=self, giface=self._giface)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnImportGdalLayers(self, event, cmd=None):\n        \"\"\"Convert multiple GDAL layers to GRASS raster map layers\"\"\"\n        from modules.import_export import GdalImportDialog\n\n        dlg = GdalImportDialog(parent=self, giface=self._giface)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnLinkGdalLayers(self, event, cmd=None):\n        \"\"\"Link multiple GDAL layers to GRASS raster map layers\"\"\"\n        from modules.import_export import GdalImportDialog\n\n        dlg = GdalImportDialog(parent=self, giface=self._giface, link=True)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnImportOgrLayers(self, event, cmd=None):\n        \"\"\"Convert multiple OGR layers to GRASS vector map layers\"\"\"\n        from modules.import_export import OgrImportDialog\n\n        dlg = OgrImportDialog(parent=self, giface=self._giface)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnLinkOgrLayers(self, event, cmd=None):\n        \"\"\"Links multiple OGR layers to GRASS vector map layers\"\"\"\n        from modules.import_export import OgrImportDialog\n\n        dlg = OgrImportDialog(parent=self, giface=self._giface, link=True)\n        dlg.CentreOnScreen()\n        dlg.Show()\n\n    def OnAddWS(self, event, cmd=None):\n        \"\"\"Add web services layer\"\"\"\n        from web_services.dialogs import AddWSDialog\n\n        dlg = AddWSDialog(parent=self, giface=self._giface)\n        dlg.CentreOnScreen()\n        x, y = dlg.GetPosition()\n        dlg.SetPosition((x, y - 200))\n        dlg.Show()\n\n    def OnSimpleEditor(self, event):\n        # import on demand\n        from gui_core.pyedit import PyEditFrame\n\n        # we don't keep track of them and we don't care about open files\n        # there when closing the main GUI\n        simpleEditor = PyEditFrame(parent=self, giface=self._giface)\n        simpleEditor.SetSize(self.GetSize())\n        simpleEditor.CenterOnScreen()\n        simpleEditor.Show()\n\n    def OnShowAttributeTable(self, event, selection=None):\n        \"\"\"Show attribute table of the given vector map layer\"\"\"\n        if not self.currentPage:\n            self.MsgNoLayerSelected()\n            return\n\n        tree = self.GetLayerTree()\n        layer = tree.layer_selected\n        # no map layer selected\n        if not layer:\n            self.MsgNoLayerSelected()\n            return\n\n        # available only for vector map layers\n        try:\n            maptype = tree.GetLayerInfo(layer, key=\"maplayer\").type",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.mapdisplay:[86:279]\n==photo2image.ip2i_mapdisplay:[79:274]\n        for toolb in toolbars:\n            self.AddToolbar(toolb)\n\n        self.activemap = self.toolbars[\"gcpdisp\"].togglemap\n        self.activemap.SetSelection(0)\n\n        self.SrcMap = self.grwiz.SrcMap  # instance of render.Map\n        self.TgtMap = self.grwiz.TgtMap  # instance of render.Map\n        self._mgr.SetDockSizeConstraint(0.5, 0.5)\n\n        #\n        # Create statusbar\n        #\n        statusbarItems = [\n            sb.SbCoordinates,\n            sb.SbRegionExtent,\n            sb.SbCompRegionExtent,\n            sb.SbDisplayGeometry,\n            sb.SbMapScale,\n            sbgcp.SbGoToGCP,\n            sbgcp.SbRMSError,\n        ]\n        self.statusbar = self.CreateStatusbar(statusbarItems)\n\n        #\n        # Init map display (buffered DC & set default cursor)\n        #\n        self.grwiz.SwitchEnv(\"source\")\n        self.SrcMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.SrcMap,\n        )\n\n        self.grwiz.SwitchEnv(\"target\")\n        self.TgtMapWindow = BufferedMapWindow(\n            parent=self,\n            giface=self._giface,\n            id=wx.ID_ANY,\n            properties=self.mapWindowProperties,\n            Map=self.TgtMap,\n        )\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n        self._setUpMapWindow(self.SrcMapWindow)\n        self._setUpMapWindow(self.TgtMapWindow)\n        self.SrcMapWindow.SetNamedCursor(\"cross\")\n        self.TgtMapWindow.SetNamedCursor(\"cross\")\n        # used to switch current map (combo box in toolbar)\n        self.SrcMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.SrcMapWindow)\n        )\n        self.TgtMapWindow.mouseEntered.connect(\n            lambda: self._setActiveMapWindow(self.TgtMapWindow)\n        )\n\n        #\n        # initialize region values\n        #\n        self._initMap(Map=self.SrcMap)\n        self._initMap(Map=self.TgtMap)\n\n        self.GetMapToolbar().SelectDefault()\n\n        #\n        # Bind various events\n        #\n        self.activemap.Bind(wx.EVT_CHOICE, self.OnUpdateActive)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n\n        #\n        # Update fancy gui style\n        #\n        # AuiManager wants a CentrePane, workaround to get two equally sized\n        # windows\n        self.list = self.CreateGCPList()\n\n        # set Go To GCP item as active in statusbar\n        self.mapWindowProperties.sbItem = 5\n\n        # self.SrcMapWindow.SetSize((300, 300))\n        # self.TgtMapWindow.SetSize((300, 300))\n        self.list.SetSize((100, 150))\n        self._addPanes()\n\n        srcwidth, srcheight = self.SrcMapWindow.GetSize()\n        tgtwidth, tgtheight = self.TgtMapWindow.GetSize()\n        srcwidth = (srcwidth + tgtwidth) / 2\n        self._mgr.GetPane(\"target\").Hide()\n        self._mgr.Update()\n        self._mgr.GetPane(\"source\").BestSize((srcwidth, srcheight))\n        self._mgr.GetPane(\"target\").BestSize((srcwidth, srcheight))\n        if self.show_target:\n            self._mgr.GetPane(\"target\").Show()\n        else:\n            self.activemap.Enable(False)\n        # needed by Mac OS, does not harm on Linux, breaks display on Windows\n        if platform.system() != \"Windows\":\n            self._mgr.Update()\n\n        #\n        # Init print module and classes\n        #\n        self.printopt = PrintOptions(self, self.MapWindow)\n\n        #\n        # Initialization of digitization tool\n        #\n        self.digit = None\n\n        # set active map\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n\n        # do not init zoom history here, that happens when zooming to map(s)\n\n        #\n        # Re-use dialogs\n        #\n        self.dialogs = {}\n        self.dialogs[\"attributes\"] = None\n        self.dialogs[\"category\"] = None\n        self.dialogs[\"barscale\"] = None\n        self.dialogs[\"legend\"] = None\n\n        self.decorationDialog = None  # decoration/overlays\n\n    def _setUpMapWindow(self, mapWindow):\n        # TODO: almost the same implementation as for MapPanelBase (only names differ)\n        # enable or disable zoom history tool\n        mapWindow.zoomHistoryAvailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=True)\n        )\n        mapWindow.zoomHistoryUnavailable.connect(\n            lambda: self.GetMapToolbar().Enable(\"zoomback\", enable=False)\n        )\n        mapWindow.mouseMoving.connect(self.CoordinatesChanged)\n\n    def AddToolbar(self, name):\n        \"\"\"Add defined toolbar to the window\n\n        Currently known toolbars are:\n         - 'map'     - basic map toolbar\n         - 'vdigit'  - vector digitizer\n         - 'gcpdisp' - GCP Manager, Display\n         - 'gcpman'  - GCP Manager, points management\n         - 'nviz'    - 3D view mode\n        \"\"\"\n        # default toolbar\n        if name == \"map\":\n            if \"map\" not in self.toolbars:\n                self.toolbars[\"map\"] = MapToolbar(\n                    self, self._toolSwitcher, self._giface\n                )\n\n            self._mgr.AddPane(\n                self.toolbars[\"map\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"maptoolbar\")\n                .Caption(_(\"Map Toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2)\n                .BestSize(self.toolbars[\"map\"].GetSize()),\n            )\n\n        # GCP display\n        elif name == \"gcpdisp\":\n            if \"gcpdisp\" not in self.toolbars:\n                self.toolbars[\"gcpdisp\"] = GCPDisplayToolbar(self, self._toolSwitcher)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpdisp\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpdisplaytoolbar\")\n                .Caption(_(\"GCP Display toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[1443:1595]\n==photo2image.ip2i_manager:[789:941]\n        key = self.list.GetItemData(itemIndex)\n        # incremented because of itemDataMap (has one more item) - will be\n        # changed\n        itemIndex += 1\n\n        if not self.list.IsItemChecked(key - 1):\n            wxPen = \"unused\"\n            if not self.show_unused:\n                item.SetPropertyVal(\"hide\", True)\n            else:\n                item.SetPropertyVal(\"hide\", False)\n\n        else:\n            item.SetPropertyVal(\"hide\", False)\n            if self.highest_only:\n                if itemIndex == self.highest_key:\n                    wxPen = \"highest\"\n                else:\n                    wxPen = \"default\"\n            else:\n                if self.mapcoordlist[key][5] > self.rmsthresh:\n                    wxPen = \"highest\"\n                else:\n                    wxPen = \"default\"\n\n        if itemIndex == self.list.selectedkey:\n            wxPen = \"selected\"\n\n        item.SetPropertyVal(\"label\", str(itemIndex))\n        item.SetPropertyVal(\"penName\", wxPen)\n\n    def SetGCPData(self, coordtype, coord, mapdisp=None, confirm=False):\n        \"\"\"Inserts coordinates from file, mouse click on map, or\n        after editing into selected item of GCP list and checks it for\n        use.\n        \"\"\"\n        index = self.list.GetSelected()\n        if index == wx.NOT_FOUND:\n            return\n\n        coord0 = coord[0]\n        coord1 = coord[1]\n\n        key = self.list.GetItemData(index)\n        if confirm:\n            if self.MapWindow == self.SrcMapWindow:\n                currloc = _(\"source\")\n            else:\n                currloc = _(\"target\")\n            ret = wx.MessageBox(\n                parent=self,\n                caption=_(\"Set GCP coordinates\"),\n                message=_(\n                    \"Set %(coor)s coordinates for GCP No. %(key)s? \\n\\n\"\n                    \"East: %(coor0)s \\n\"\n                    \"North: %(coor1)s\"\n                )\n                % {\n                    \"coor\": currloc,\n                    \"key\": str(key),\n                    \"coor0\": str(coord0),\n                    \"coor1\": str(coord1),\n                },\n                style=wx.ICON_QUESTION | wx.YES_NO | wx.CENTRE,\n            )\n\n            # for wingrass\n            if os.name == \"nt\":\n                self.MapWindow.SetFocus()\n            if ret == wx.NO:\n                return\n\n        if coordtype == \"source\":\n            self.list.SetItem(index, 1, str(coord0))\n            self.list.SetItem(index, 2, str(coord1))\n            self.mapcoordlist[key][1] = coord[0]\n            self.mapcoordlist[key][2] = coord[1]\n            self.pointsToDrawSrc.GetItem(key - 1).SetCoords([coord0, coord1])\n\n        elif coordtype == \"target\":\n            self.list.SetItem(index, 3, str(coord0))\n            self.list.SetItem(index, 4, str(coord1))\n            self.mapcoordlist[key][3] = coord[0]\n            self.mapcoordlist[key][4] = coord[1]\n            self.pointsToDrawTgt.GetItem(key - 1).SetCoords([coord0, coord1])\n\n        self.list.SetItem(index, 5, \"0\")\n        self.list.SetItem(index, 6, \"0\")\n        self.mapcoordlist[key][5] = 0.0\n        self.mapcoordlist[key][6] = 0.0\n\n        # self.list.ResizeColumns()\n\n    def SaveGCPs(self, event):\n        \"\"\"Make a POINTS file or save GCP coordinates to existing\n        POINTS file\n        \"\"\"\n        self.GCPcount = 0\n        try:\n            f = open(self.file[\"points\"], mode=\"w\")\n            # use os.linesep or '\\n' here ???\n            f.write(\"# Ground Control Points File\\n\")\n            f.write(\"# \\n\")\n            f.write(\"# target location: \" + self.currentlocation + \"\\n\")\n            f.write(\"# target mapset: \" + self.currentmapset + \"\\n\")\n            f.write(\"#\\tsource\\t\\ttarget\\t\\tstatus\\n\")\n            f.write(\"#\\teast\\tnorth\\teast\\tnorth\\t(1=ok, 0=ignore)\\n\")\n            f.write(\n                \"#-----------------------     -----------------------     ---------------\\n\"  # noqa: E501\n            )\n\n            for index in range(self.list.GetItemCount()):\n                if self.list.IsItemChecked(index):\n                    check = \"1\"\n                    self.GCPcount += 1\n                else:\n                    check = \"0\"\n                coord0 = self.list.GetItem(index, 1).GetText()\n                coord1 = self.list.GetItem(index, 2).GetText()\n                coord2 = self.list.GetItem(index, 3).GetText()\n                coord3 = self.list.GetItem(index, 4).GetText()\n                f.write(\n                    coord0\n                    + \" \"\n                    + coord1\n                    + \"     \"\n                    + coord2\n                    + \" \"\n                    + coord3\n                    + \"     \"\n                    + check\n                    + \"\\n\"\n                )\n\n        except OSError as err:\n            GError(\n                parent=self,\n                message=\"%s <%s>. %s%s\"\n                % (\n                    _(\"Writing POINTS file failed\"),\n                    self.file[\"points\"],\n                    os.linesep,\n                    err,\n                ),\n            )\n            return\n\n        f.close()\n\n        # if event != None save also to backup file\n        if event:\n            shutil.copy(self.file[\"points\"], self.file[\"points_bak\"])",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==image2target.ii2t_manager:[2979:3122]\n==photo2image.ip2i_manager:[2101:2244]\n            )\n        )\n        rmsgridSizer.Add(rmslabel, flag=wx.ALIGN_CENTER_VERTICAL, pos=(1, 0))\n        sdfactor = UserSettings.Get(group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\")\n        self.rmsWin = TextCtrl(\n            parent=panel, id=wx.ID_ANY, size=(70, -1), style=wx.TE_NOHIDESEL\n        )\n        self.rmsWin.SetValue(\"%s\" % str(sdfactor))\n        if self.parent.highest_only:\n            self.rmsWin.Disable()\n\n        self.symbol[\"sdfactor\"] = self.rmsWin.GetId()\n        rmsgridSizer.Add(self.rmsWin, flag=wx.ALIGN_RIGHT, pos=(1, 1))\n        rmsgridSizer.AddGrowableCol(1)\n        sizer.Add(rmsgridSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        box = StaticBox(parent=panel, id=wx.ID_ANY, label=\" %s \" % _(\"Symbol settings\"))\n        boxSizer = wx.StaticBoxSizer(box, wx.VERTICAL)\n        gridSizer = wx.GridBagSizer(vgap=5, hgap=5)\n\n        #\n        # general symbol color\n        #\n        row = 0\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Color:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        col = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"color\")\n        colWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(col[0], col[1], col[2], 255)\n        )\n        self.symbol[\"color\"] = colWin.GetId()\n        gridSizer.Add(colWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for high forward RMS error\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for high RMS error:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        hcol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"hcolor\")\n        hcolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(hcol[0], hcol[1], hcol[2], 255)\n        )\n        self.symbol[\"hcolor\"] = hcolWin.GetId()\n        gridSizer.Add(hcolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for selected GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for selected GCP:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        scol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"scolor\")\n        scolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(scol[0], scol[1], scol[2], 255)\n        )\n        self.symbol[\"scolor\"] = scolWin.GetId()\n        gridSizer.Add(scolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for unused GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for unused GCPs:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        ucol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"ucolor\")\n        ucolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(ucol[0], ucol[1], ucol[2], 255)\n        )\n        self.symbol[\"ucolor\"] = ucolWin.GetId()\n        gridSizer.Add(ucolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        # show unused GCPs\n        row += 1\n        self.showunused = wx.CheckBox(\n            parent=panel, id=wx.ID_ANY, label=_(\"Show unused GCPs\")\n        )\n        shuu = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"unused\")\n        self.showunused.SetValue(shuu)\n        gridSizer.Add(self.showunused, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n\n        #\n        # symbol size\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Symbol size:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        symsize = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"size\"))\n        sizeWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=20)\n        sizeWin.SetValue(symsize)\n        self.symbol[\"size\"] = sizeWin.GetId()\n        gridSizer.Add(sizeWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol width\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Line width:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        width = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"width\"))\n        widWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=10)\n        widWin.SetValue(width)\n        self.symbol[\"width\"] = widWin.GetId()\n        gridSizer.Add(widWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n        gridSizer.AddGrowableCol(1)\n\n        boxSizer.Add(gridSizer, flag=wx.EXPAND)\n        sizer.Add(boxSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        #\n        # maps to display\n        #\n        # source map to display\n        self.srcselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"maptype\",\n            updateOnPopup=False,\n        )\n        self.parent.grwiz.SwitchEnv(\"source\")\n        self.srcselection.SetElementList(maptype)\n        # filter out all maps not in group\n        self.srcselection.tcp.GetElementList(elements=self.parent.src_maps)\n\n        # target map(s) to display\n        self.parent.grwiz.SwitchEnv(\"target\")\n        self.tgtrastselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"raster\",\n            updateOnPopup=False,\n        )\n        self.tgtrastselection.SetElementList(\"cell\")\n        self.tgtrastselection.GetElementList()\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[3031:3170]\n==photo2image.ip2i_manager:[2101:2240]\n            )\n        )\n        rmsgridSizer.Add(rmslabel, flag=wx.ALIGN_CENTER_VERTICAL, pos=(1, 0))\n        sdfactor = UserSettings.Get(group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\")\n        self.rmsWin = TextCtrl(\n            parent=panel, id=wx.ID_ANY, size=(70, -1), style=wx.TE_NOHIDESEL\n        )\n        self.rmsWin.SetValue(\"%s\" % str(sdfactor))\n        if self.parent.highest_only:\n            self.rmsWin.Disable()\n\n        self.symbol[\"sdfactor\"] = self.rmsWin.GetId()\n        rmsgridSizer.Add(self.rmsWin, flag=wx.ALIGN_RIGHT, pos=(1, 1))\n        rmsgridSizer.AddGrowableCol(1)\n        sizer.Add(rmsgridSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        box = StaticBox(parent=panel, id=wx.ID_ANY, label=\" %s \" % _(\"Symbol settings\"))\n        boxSizer = wx.StaticBoxSizer(box, wx.VERTICAL)\n        gridSizer = wx.GridBagSizer(vgap=5, hgap=5)\n\n        #\n        # general symbol color\n        #\n        row = 0\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Color:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        col = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"color\")\n        colWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(col[0], col[1], col[2], 255)\n        )\n        self.symbol[\"color\"] = colWin.GetId()\n        gridSizer.Add(colWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for high forward RMS error\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for high RMS error:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        hcol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"hcolor\")\n        hcolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(hcol[0], hcol[1], hcol[2], 255)\n        )\n        self.symbol[\"hcolor\"] = hcolWin.GetId()\n        gridSizer.Add(hcolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for selected GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for selected GCP:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        scol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"scolor\")\n        scolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(scol[0], scol[1], scol[2], 255)\n        )\n        self.symbol[\"scolor\"] = scolWin.GetId()\n        gridSizer.Add(scolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol color for unused GCP\n        #\n        row += 1\n        label = StaticText(\n            parent=panel, id=wx.ID_ANY, label=_(\"Color for unused GCPs:\")\n        )\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        ucol = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"ucolor\")\n        ucolWin = csel.ColourSelect(\n            parent=panel, id=wx.ID_ANY, colour=wx.Colour(ucol[0], ucol[1], ucol[2], 255)\n        )\n        self.symbol[\"ucolor\"] = ucolWin.GetId()\n        gridSizer.Add(ucolWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        # show unused GCPs\n        row += 1\n        self.showunused = wx.CheckBox(\n            parent=panel, id=wx.ID_ANY, label=_(\"Show unused GCPs\")\n        )\n        shuu = UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"unused\")\n        self.showunused.SetValue(shuu)\n        gridSizer.Add(self.showunused, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n\n        #\n        # symbol size\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Symbol size:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        symsize = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"size\"))\n        sizeWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=20)\n        sizeWin.SetValue(symsize)\n        self.symbol[\"size\"] = sizeWin.GetId()\n        gridSizer.Add(sizeWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n\n        #\n        # symbol width\n        #\n        row += 1\n        label = StaticText(parent=panel, id=wx.ID_ANY, label=_(\"Line width:\"))\n        gridSizer.Add(label, flag=wx.ALIGN_CENTER_VERTICAL, pos=(row, 0))\n        width = int(UserSettings.Get(group=\"gcpman\", key=\"symbol\", subkey=\"width\"))\n        widWin = SpinCtrl(parent=panel, id=wx.ID_ANY, min=1, max=10)\n        widWin.SetValue(width)\n        self.symbol[\"width\"] = widWin.GetId()\n        gridSizer.Add(widWin, flag=wx.ALIGN_RIGHT, pos=(row, 1))\n        gridSizer.AddGrowableCol(1)\n\n        boxSizer.Add(gridSizer, flag=wx.EXPAND)\n        sizer.Add(boxSizer, flag=wx.EXPAND | wx.ALL, border=5)\n\n        #\n        # maps to display\n        #\n        # source map to display\n        self.srcselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"maptype\",\n            updateOnPopup=False,\n        )\n        self.parent.grwiz.SwitchEnv(\"source\")\n        self.srcselection.SetElementList(maptype)\n        # filter out all maps not in group\n        self.srcselection.tcp.GetElementList(elements=self.parent.src_maps)\n\n        # target map(s) to display\n        self.parent.grwiz.SwitchEnv(\"target\")\n        self.tgtrastselection = Select(\n            panel,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"raster\",\n            updateOnPopup=False,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[830:970]\n==image2target.ii2t_manager:[834:974]\n        )\n\n        self.sizer.Add(\n            self.tgtrastselection,\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(2, 2),\n        )\n\n        self.sizer.Add(\n            StaticText(\n                parent=self,\n                id=wx.ID_ANY,\n                label=_(\"Select target vector map to display:\"),\n            ),\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(3, 1),\n        )\n\n        self.tgtvectselection = Select(\n            self,\n            id=wx.ID_ANY,\n            size=globalvar.DIALOG_GSELECT_SIZE,\n            type=\"vector\",\n            updateOnPopup=False,\n        )\n\n        self.sizer.Add(\n            self.tgtvectselection,\n            flag=wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL | wx.ALL,\n            border=5,\n            pos=(3, 2),\n        )\n\n        #\n        # bindings\n        #\n        self.srcselection.Bind(wx.EVT_TEXT, self.OnSrcSelection)\n        self.tgtrastselection.Bind(wx.EVT_TEXT, self.OnTgtRastSelection)\n        self.tgtvectselection.Bind(wx.EVT_TEXT, self.OnTgtVectSelection)\n        self.Bind(wiz.EVT_WIZARD_PAGE_CHANGING, self.OnPageChanging)\n        self.Bind(wiz.EVT_WIZARD_PAGE_CHANGED, self.OnEnterPage)\n        self.Bind(wx.EVT_CLOSE, self.parent.Cleanup)\n\n    def OnSrcSelection(self, event):\n        \"\"\"Source map to display selected\"\"\"\n        global src_map\n        global maptype\n\n        src_map = self.srcselection.GetValue()\n\n        if src_map == \"\":\n            wx.FindWindowById(wx.ID_FORWARD).Enable(False)\n        else:\n            wx.FindWindowById(wx.ID_FORWARD).Enable(True)\n\n        try:\n            # set computational region to match selected map and zoom display\n            # to region\n            if maptype == \"raster\":\n                p = RunCommand(\"g.region\", \"raster=src_map\")\n            elif maptype == \"vector\":\n                p = RunCommand(\"g.region\", \"vector=src_map\")\n\n            if p.returncode == 0:\n                print(\"returncode = \", str(p.returncode))\n                self.parent.Map.region = self.parent.Map.GetRegion()\n        except:\n            pass\n\n    def OnTgtRastSelection(self, event):\n        \"\"\"Source map to display selected\"\"\"\n        global tgt_map\n\n        tgt_map[\"raster\"] = self.tgtrastselection.GetValue()\n\n    def OnTgtVectSelection(self, event):\n        \"\"\"Source map to display selected\"\"\"\n        global tgt_map\n\n        tgt_map[\"vector\"] = self.tgtvectselection.GetValue()\n\n    def OnPageChanging(self, event=None):\n        global src_map\n        global tgt_map\n\n        if event.GetDirection() and (src_map == \"\"):\n            GMessage(\n                _(\"You must select a source map in order to continue\"), parent=self\n            )\n            event.Veto()\n            return\n\n        self.parent.SwitchEnv(\"target\")\n\n    def OnEnterPage(self, event=None):\n        global maptype\n        global src_map\n        global tgt_map\n\n        self.srcselection.SetElementList(maptype)\n\n        if maptype == \"raster\":\n            ret = RunCommand(\n                \"i.group\",\n                parent=self,\n                read=True,\n                group=self.parent.grouppage.xygroup,\n                flags=\"g\",\n            )\n\n            if ret:\n                self.parent.src_maps = ret.splitlines()\n            else:\n                GError(\n                    parent=self,\n                    message=_(\n                        \"No maps in selected group <%s>.\\n\"\n                        \"Please edit group or select another group.\"\n                    )\n                    % self.parent.grouppage.xygroup,\n                )\n                return\n\n        elif maptype == \"vector\":\n            grassdatabase = self.parent.grassdatabase\n            xylocation = self.parent.gisrc_dict[\"LOCATION_NAME\"]\n            xymapset = self.parent.gisrc_dict[\"MAPSET\"]\n            # make list of vectors to georectify from VREF\n\n            vgrpfile = os.path.join(\n                grassdatabase,\n                xylocation,\n                xymapset,\n                \"group\",\n                self.parent.grouppage.xygroup,\n                \"VREF\",\n            )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==frame:[1087:1205]\n==lmgr.frame:[950:1065]\n        result = True\n        if re.compile(r\"^d\\..*\").search(command[0]):\n            result = self.RunDisplayCmd(command)\n        elif re.compile(r\"r[3]?\\.mapcalc\").search(command[0]):\n            self.OnMapCalculator(event=None, cmd=command)\n        elif command[0] == \"i.group\":\n            self.OnEditImageryGroups(event=None, cmd=command)\n        elif command[0] == \"r.import\":\n            self.OnImportGdalLayers(event=None, cmd=command)\n        elif command[0] == \"r.external\":\n            self.OnLinkGdalLayers(event=None, cmd=command)\n        elif command[0] == \"r.external.out\":\n            self.OnRasterOutputFormat(event=None)\n        elif command[0] == \"v.import\":\n            self.OnImportOgrLayers(event=None, cmd=command)\n        elif command[0] == \"v.external\":\n            self.OnLinkOgrLayers(event=None, cmd=command)\n        elif command[0] == \"v.external.out\":\n            self.OnVectorOutputFormat(event=None)\n        elif command[0] == \"cd\":\n            self.OnChangeCWD(event=None, cmd=command)\n        else:\n            result = False\n            raise ValueError(\n                \"Layer Manager special command (%s)\"\n                \" not supported.\" % \" \".join(command)\n            )\n        if result:\n            self._gconsole.UpdateHistory(status=Status.SUCCESS)\n        else:\n            self._gconsole.UpdateHistory(status=Status.FAILED)\n\n    def RunDisplayCmd(self, command):\n        \"\"\"Handles display commands.\n\n        :param command: command in a list\n        :return int: False if failed, True if succcess\n        \"\"\"\n        if not self.currentPage:\n            self.NewDisplay(show=True)\n        # here should be the d.* commands which are not layers\n        if command[0] == \"d.erase\":\n            # rest of d.erase is ignored\n            self.GetLayerTree().DeleteAllLayers()\n            return False\n        try:\n            # display GRASS commands\n            layertype = command2ltype[command[0]]\n        except KeyError:\n            GMessage(\n                parent=self,\n                message=_(\n                    \"Command '%s' not yet implemented in the WxGUI. \"\n                    \"Try adding it as a command layer instead.\"\n                )\n                % command[0],\n            )\n            return False\n\n        if layertype == \"barscale\":\n            if len(command) > 1:\n                self.GetMapDisplay().AddBarscale(cmd=command)\n            else:\n                self.GetMapDisplay().AddBarscale()\n        elif layertype == \"rastleg\":\n            if len(command) > 1:\n                self.GetMapDisplay().AddLegendRast(cmd=command)\n            else:\n                self.GetMapDisplay().AddLegendRast()\n        elif layertype == \"vectleg\":\n            if len(command) > 1:\n                self.GetMapDisplay().AddLegendVect(cmd=command, showDialog=False)\n            else:\n                self.GetMapDisplay().AddLegendVect(showDialog=True)\n        elif layertype == \"northarrow\":\n            if len(command) > 1:\n                self.GetMapDisplay().AddArrow(cmd=command)\n            else:\n                self.GetMapDisplay().AddArrow()\n        elif layertype == \"text\":\n            if len(command) > 1:\n                self.GetMapDisplay().AddDtext(cmd=command)\n            else:\n                self.GetMapDisplay().AddDtext()\n        elif layertype == \"redraw\":\n            self.GetMapDisplay().OnRender(None)\n        elif layertype == \"export\":\n            GUI(parent=self, show=False).ParseCommand(\n                command, completed=(self.GetMapDisplay().DOutFileOptData, \"\", \"\")\n            )\n        elif layertype == \"torast\":\n            if len(command) <= 1:\n                task = GUI(parent=self, show=True).ParseCommand(\n                    command, completed=(self.GetMapDisplay().DToRastOptData, \"\", \"\")\n                )\n            else:\n                task = GUI(parent=self, show=None).ParseCommand(\n                    command, completed=(self.GetMapDisplay().DToRastOptData, \"\", \"\")\n                )\n                self.GetMapDisplay().DToRast(command=task.get_cmd())\n        else:\n            # add layer into layer tree\n            lname, found = GetLayerNameFromCmd(\n                command, fullyQualified=True, layerType=layertype\n            )\n            self.GetLayerTree().AddLayer(\n                ltype=layertype,\n                lchecked=True if lname else None,\n                lname=lname,\n                lcmd=command,\n            )\n        return True\n\n    def GetLayerNotebook(self):\n        \"\"\"Get Layers Notebook\"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==test_raster_algebra_arithmetic:[17:133]\n==test_raster_algebra_operators:[17:134]\nclass TestTRastAlgebra(TestCase):\n    \"\"\"Class for testing t.rast.algebra\"\"\"\n\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Initiate the temporal GIS and set the region\"\"\"\n        os.putenv(\"GRASS_OVERWRITE\", \"1\")\n        tgis.init(True)  # Raise on error instead of exit(1)\n        cls.use_temp_region()\n        cls.runModule(\"g.region\", n=80.0, s=0.0, e=120.0, w=0.0, t=1.0, b=0.0, res=10.0)\n\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"a1 = 1\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"a2 = 2\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"a3 = 3\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"a4 = 4\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"b1 = 5\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"b2 = 6\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"c1 = 7\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"d1 = 8\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"d2 = 9\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"d3 = 10\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"singletmap = 99\")\n        cls.runModule(\"r.mapcalc\", quiet=True, expression=\"singlemap = 100\")\n\n        tgis.open_new_stds(\n            name=\"A\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"A\",\n            descr=\"A\",\n            semantic=\"field\",\n        )\n        tgis.open_new_stds(\n            name=\"B\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"B\",\n            semantic=\"field\",\n        )\n        tgis.open_new_stds(\n            name=\"C\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"C\",\n            semantic=\"field\",\n        )\n        tgis.open_new_stds(\n            name=\"D\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"D\",\n            descr=\"D\",\n            semantic=\"field\",\n        )\n\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"A\",\n            maps=\"a1,a2,a3,a4\",\n            start=\"2001-01-01\",\n            increment=\"1 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"B\",\n            maps=\"b1,b2\",\n            start=\"2001-01-01\",\n            increment=\"2 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"C\",\n            maps=\"c1\",\n            start=\"2001-01-02\",\n            increment=\"2 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d1,d2,d3\",\n            start=\"2001-01-03\",\n            increment=\"1 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=None,\n            maps=\"singletmap\",\n            start=\"2001-01-03\",\n            end=\"2001-01-04\",\n        )\n\n    def tearDown(self):\n        try:\n            self.runModule(\"t.remove\", flags=\"df\", inputs=\"R\", quiet=True)\n        except Exception:\n            # STRDS \"R\" has not been created\n            pass\n\n    @classmethod\n    def tearDownClass(cls):\n        \"\"\"Remove the temporary region\"\"\"\n        cls.runModule(\"t.remove\", flags=\"df\", inputs=\"A,B,C,D\", quiet=True)\n        cls.runModule(\"t.unregister\", maps=\"singletmap\", quiet=True)\n        cls.del_temp_region()\n\n    def test_temporal_conditional_time_dimension_bug(self):\n        \"\"\"Testing the conditional time dimension bug, that uses the time\n        dimension of the conditional statement instead the time dimension\n        of the then/else statement.\"\"\"\n        self.assertModule(\n            \"t.rast.algebra\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==frame:[1337:1455]\n==lmgr.frame:[1186:1304]\n            mapLayer = None\n\n        if not mapLayer or mapLayer.GetType() != \"vector\":\n            GMessage(parent=self, message=_(\"Selected map layer is not vector.\"))\n            return\n\n        if mapLayer.GetMapset() != grass.gisenv()[\"MAPSET\"]:\n            GMessage(\n                parent=self,\n                message=_(\n                    \"Editing is allowed only for vector maps from the \"\n                    \"current mapset.\"\n                ),\n            )\n            return\n\n        if not tree.GetLayerInfo(layer):\n            return\n        dcmd = tree.GetLayerInfo(layer, key=\"cmd\")\n        if not dcmd:\n            return\n\n        digitToolbar = self.GetMapDisplay().GetToolbar(\"vdigit\")\n        if digitToolbar:\n            stopOnly = False\n            if mapLayer is digitToolbar.GetLayer():\n                stopOnly = True\n            tree.OnStopEditing(None)  # TODO: change to signal\n            if stopOnly:\n                return\n\n        tree.OnStartEditing(None)  # TODO: change to signal\n\n    def OnRunScript(self, event):\n        \"\"\"Run user-defined script\"\"\"\n        # open dialog and choose script file\n        dlg = wx.FileDialog(\n            parent=self,\n            message=_(\"Choose script file to run\"),\n            defaultDir=os.getcwd(),\n            wildcard=_(\"Python script (*.py)|*.py|Bash script (*.sh)|*.sh\"),\n        )\n\n        filename = None\n        if dlg.ShowModal() == wx.ID_OK:\n            filename = dlg.GetPath()\n\n        if not filename:\n            return False\n\n        if not os.path.exists(filename):\n            GError(\n                parent=self,\n                message=_(\"Script file '%s' doesn't exist. Operation canceled.\")\n                % filename,\n            )\n            return\n\n        # check permission\n        if not os.access(filename, os.X_OK):\n            dlg = wx.MessageDialog(\n                self,\n                message=_(\n                    \"Script <%s> is not executable. \"\n                    \"Do you want to set the permissions \"\n                    \"that allows you to run this script \"\n                    \"(note that you must be the owner of the file)?\"\n                    % os.path.basename(filename)\n                ),\n                caption=_(\"Set permission?\"),\n                style=wx.YES_NO | wx.YES_DEFAULT | wx.ICON_QUESTION,\n            )\n            if dlg.ShowModal() != wx.ID_YES:\n                return\n            dlg.Destroy()\n            try:\n                mode = stat.S_IMODE(os.lstat(filename)[stat.ST_MODE])\n                os.chmod(filename, mode | stat.S_IXUSR)\n            except OSError:\n                GError(_(\"Unable to set permission. Operation canceled.\"), parent=self)\n                return\n\n        # check GRASS_ADDON_PATH\n        addonPath = os.getenv(\"GRASS_ADDON_PATH\", [])\n        if addonPath:\n            addonPath = addonPath.split(os.pathsep)\n        dirName = os.path.dirname(filename)\n        if dirName not in addonPath:\n            addonPath.append(dirName)\n            dlg = wx.MessageDialog(\n                self,\n                message=_(\n                    \"Directory '%s' is not defined in GRASS_ADDON_PATH. \"\n                    \"Do you want add this directory to GRASS_ADDON_PATH?\"\n                )\n                % dirName,\n                caption=_(\"Update Addons path?\"),\n                style=wx.YES_NO | wx.YES_DEFAULT | wx.ICON_QUESTION,\n            )\n            if dlg.ShowModal() == wx.ID_YES:\n                SetAddOnPath(os.pathsep.join(addonPath), key=\"PATH\")\n            dlg.Destroy()\n\n        self._gconsole.WriteCmdLog(_(\"Launching script '%s'...\") % filename)\n        self._gconsole.RunCmd([filename])\n\n    def OnChangeLocation(self, event):\n        \"\"\"Change current location\"\"\"\n        dlg = LocationDialog(parent=self)\n        gisenv = grass.gisenv()\n\n        if dlg.ShowModal() == wx.ID_OK:\n            location, mapset = dlg.GetValues()\n            dlg.Destroy()\n\n            if not location or not mapset:\n                GError(\n                    parent=self,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==test_raster_algebra_granularity:[39:135]\n==unittests_temporal_raster_algebra_grs:[40:134]\n        )\n\n        tgis.open_new_stds(\n            name=\"A\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"A\",\n            descr=\"A\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"B\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"B\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"C\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"C\",\n            descr=\"C\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"D\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"D\",\n            descr=\"D\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"A\",\n            maps=\"a1,a2,a3,a4,a5,a6\",\n            start=\"2001-01-01\",\n            increment=\"1 month\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"B\",\n            maps=\"b1,b2\",\n            start=\"2001-01-01\",\n            increment=\"3 months\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"C\",\n            maps=\"c1\",\n            start=\"2001-01-01\",\n            increment=\"1 year\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d1\",\n            start=\"2001-01-01\",\n            increment=\"5 days\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d2\",\n            start=\"2001-03-01\",\n            increment=\"5 days\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d3\",\n            start=\"2001-05-01\",\n            increment=\"5 days\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=None,\n            maps=\"singletmap\",\n            start=\"2001-03-01\",\n            end=\"2001-04-01\",\n        )\n\n    def tearDown(self):",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.mapdisplay:[438:585]\n==image2target.ii2t_mapdisplay:[428:575]\n        img = self.MapWindow.img\n        if not img:\n            GMessage(\n                parent=self,\n                message=_(\"Nothing to render (empty map). Operation canceled.\"),\n            )\n            return\n        filetype, ltype = GetImageHandlers(img)\n\n        # get size\n        dlg = ImageSizeDialog(self)\n        dlg.CentreOnParent()\n        if dlg.ShowModal() != wx.ID_OK:\n            dlg.Destroy()\n            return\n        width, height = dlg.GetValues()\n        dlg.Destroy()\n\n        # get filename\n        dlg = wx.FileDialog(\n            parent=self,\n            message=_(\n                \"Choose a file name to save the image (no need to add extension)\"\n            ),\n            wildcard=filetype,\n            style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,\n        )\n\n        if dlg.ShowModal() == wx.ID_OK:\n            path = dlg.GetPath()\n            if not path:\n                dlg.Destroy()\n                return\n\n            base, ext = os.path.splitext(path)\n            fileType = ltype[dlg.GetFilterIndex()][\"type\"]\n            extType = ltype[dlg.GetFilterIndex()][\"ext\"]\n            if ext != extType:\n                path = base + \".\" + extType\n\n            self.MapWindow.SaveToFile(path, fileType, width, height)\n\n        dlg.Destroy()\n\n    def PrintMenu(self, event):\n        \"\"\"\n        Print options and output menu for map display\n        \"\"\"\n        point = wx.GetMousePosition()\n        printmenu = Menu()\n        # Add items to the menu\n        setup = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Page setup\"))\n        printmenu.AppendItem(setup)\n        self.Bind(wx.EVT_MENU, self.printopt.OnPageSetup, setup)\n\n        preview = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Print preview\"))\n        printmenu.AppendItem(preview)\n        self.Bind(wx.EVT_MENU, self.printopt.OnPrintPreview, preview)\n\n        doprint = wx.MenuItem(printmenu, wx.ID_ANY, _(\"Print display\"))\n        printmenu.AppendItem(doprint)\n        self.Bind(wx.EVT_MENU, self.printopt.OnDoPrint, doprint)\n\n        # Popup the menu.  If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(printmenu)\n        printmenu.Destroy()\n\n    def OnZoomToRaster(self, event):\n        \"\"\"\n        Set display extents to match selected raster map (ignore NULLs)\n        \"\"\"\n        self.MapWindow.ZoomToMap(ignoreNulls=True)\n\n    def OnZoomToSaved(self, event):\n        \"\"\"Set display geometry to match extents in\n        saved region file\n        \"\"\"\n        self.MapWindow.SetRegion(zoomOnly=True)\n\n    def OnDisplayToWind(self, event):\n        \"\"\"Set computational region (WIND file) to match display\n        extents\n        \"\"\"\n        self.MapWindow.DisplayToWind()\n\n    def SaveDisplayRegion(self, event):\n        \"\"\"Save display extents to named region file.\"\"\"\n        self.MapWindow.SaveDisplayRegion()\n\n    def OnZoomMenu(self, event):\n        \"\"\"Popup Zoom menu\"\"\"\n        point = wx.GetMousePosition()\n        zoommenu = Menu()\n        # Add items to the menu\n\n        zoomwind = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Zoom to computational region (set with g.region)\")\n        )\n        zoommenu.AppendItem(zoomwind)\n        self.Bind(wx.EVT_MENU, self.OnZoomToWind, zoomwind)\n\n        zoomdefault = wx.MenuItem(zoommenu, wx.ID_ANY, _(\"Zoom to default region\"))\n        zoommenu.AppendItem(zoomdefault)\n        self.Bind(wx.EVT_MENU, self.OnZoomToDefault, zoomdefault)\n\n        zoomsaved = wx.MenuItem(zoommenu, wx.ID_ANY, _(\"Zoom to saved region\"))\n        zoommenu.AppendItem(zoomsaved)\n        self.Bind(wx.EVT_MENU, self.OnZoomToSaved, zoomsaved)\n\n        savewind = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Set computational region from display\")\n        )\n        zoommenu.AppendItem(savewind)\n        self.Bind(wx.EVT_MENU, self.OnDisplayToWind, savewind)\n\n        savezoom = wx.MenuItem(\n            zoommenu, wx.ID_ANY, _(\"Save display geometry to named region\")\n        )\n        zoommenu.AppendItem(savezoom)\n        self.Bind(wx.EVT_MENU, self.SaveDisplayRegion, savezoom)\n\n        # Popup the menu. If an item is selected then its handler\n        # will be called before PopupMenu returns.\n        self.PopupMenu(zoommenu)\n        zoommenu.Destroy()\n\n    def GetSrcWindow(self):\n        return self.SrcMapWindow\n\n    def GetTgtWindow(self):\n        return self.TgtMapWindow\n\n    def GetShowTarget(self):\n        return self.show_target\n\n    def GetMapToolbar(self):\n        \"\"\"Returns toolbar with zooming tools\"\"\"\n        return self.toolbars[\"gcpdisp\"]\n\n    def _setActiveMapWindow(self, mapWindow):\n        if not self.MapWindow == mapWindow:\n            self.MapWindow = mapWindow\n            self.Map = mapWindow.Map\n            self.UpdateActive(mapWindow)\n            # needed for wingrass\n            self.SetFocus()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==test_raster_algebra_granularity:[21:107]\n==unittests_temporal_algebra_grs:[21:107]\n        tgis.init(True)  # Raise on error instead of exit(1)\n        cls.use_temp_region()\n        cls.runModule(\"g.region\", n=80.0, s=0.0, e=120.0, w=0.0, t=1.0, b=0.0, res=10.0)\n\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a1 = 1\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a2 = 2\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a3 = 3\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a4 = 4\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a5 = 5\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"a6 = 6\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"b1 = 7\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"b2 = 8\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"c1 = 9\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"d1 = 10\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"d2 = 11\")\n        cls.runModule(\"r.mapcalc\", overwrite=True, quiet=True, expression=\"d3 = 12\")\n        cls.runModule(\n            \"r.mapcalc\", overwrite=True, quiet=True, expression=\"singletmap = 99\"\n        )\n\n        tgis.open_new_stds(\n            name=\"A\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"A\",\n            descr=\"A\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"B\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"B\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"C\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"C\",\n            descr=\"C\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"D\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"D\",\n            descr=\"D\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"A\",\n            maps=\"a1,a2,a3,a4,a5,a6\",\n            start=\"2001-01-01\",\n            increment=\"1 month\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"B\",\n            maps=\"b1,b2\",\n            start=\"2001-01-01\",\n            increment=\"3 months\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"C\",\n            maps=\"c1\",\n            start=\"2001-01-01\",\n            increment=\"1 year\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d1\",\n            start=\"2001-01-01\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[1181:1325]\n==image2target.ii2t_manager:[1166:1310]\n                0.0,  # source east\n                0.0,  # source north\n                0.0,  # target east\n                0.0,  # target north\n                0.0,  # forward error\n                0.0,\n            ]\n        )  # backward error\n\n        # init vars to highlight high RMS errors\n        self.highest_only = True\n        self.show_unused = True\n        self.highest_key = -1\n        self.rmsthresh = 0\n        self.rmsmean = 0\n        self.rmssd = 0\n\n        self.SetTarget(self.xygroup, self.currentlocation, self.currentmapset)\n\n        self.itemDataMap = None\n\n        # images for column sorting\n        # CheckListCtrlMixin must set an ImageList first\n        self.il = self.list.GetImageList(wx.IMAGE_LIST_SMALL)\n\n        SmallUpArrow = BitmapFromImage(getSmallUpArrowImage())\n        SmallDnArrow = BitmapFromImage(getSmallDnArrowImage())\n        self.sm_dn = self.il.Add(SmallDnArrow)\n        self.sm_up = self.il.Add(SmallUpArrow)\n\n        # set mouse characteristics\n        self.mapwin = self.SrcMapWindow\n        self.mapwin.mouse[\"box\"] = \"point\"\n        self.mapwin.mouse[\"use\"] == \"pointer\"\n        self.mapwin.zoomtype = 0\n        self.mapwin.pen = wx.Pen(colour=\"black\", width=2, style=wx.SOLID)\n        self.mapwin.SetNamedCursor(\"cross\")\n\n        self.mapwin = self.TgtMapWindow\n\n        # set mouse characteristics\n        self.mapwin.mouse[\"box\"] = \"point\"\n        self.mapwin.mouse[\"use\"] == \"pointer\"\n        self.mapwin.zoomtype = 0\n        self.mapwin.pen = wx.Pen(colour=\"black\", width=2, style=wx.SOLID)\n        self.mapwin.SetNamedCursor(\"cross\")\n\n        #\n        # show new display & draw map\n        #\n        if self.show_target:\n            self.MapWindow = self.TgtMapWindow\n            self.Map = self.TgtMap\n            self.OnZoomToMap(None)\n\n        self.MapWindow = self.SrcMapWindow\n        self.Map = self.SrcMap\n        self.OnZoomToMap(None)\n\n        #\n        # bindings\n        #\n        self.Bind(wx.EVT_ACTIVATE, self.OnFocus)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n        self.Bind(wx.EVT_IDLE, self.OnIdle)\n\n        self.SetSettings()\n\n    def __del__(self):\n        \"\"\"Disable GCP manager mode\"\"\"\n        # leaving the method here but was used only to delete gcpmanagement\n        # from layer manager which is now not needed\n        pass\n\n    def CreateGCPList(self):\n        \"\"\"Create GCP List Control\"\"\"\n\n        return GCPList(parent=self, gcp=self)\n\n    # Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py\n    def GetListCtrl(self):\n        return self.list\n\n    def GetMapCoordList(self):\n        return self.mapcoordlist\n\n    # Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py\n    def GetSortImages(self):\n        return (self.sm_dn, self.sm_up)\n\n    def GetFwdError(self):\n        return self.fwd_rmserror\n\n    def GetBkwError(self):\n        return self.bkw_rmserror\n\n    def InitMapDisplay(self):\n        self.list.LoadData()\n\n        # initialize column sorter\n        self.itemDataMap = self.mapcoordlist\n        ncols = self.list.GetColumnCount()\n        ColumnSorterMixin.__init__(self, ncols)\n        # init to ascending sort on first click\n        self._colSortFlag = [1] * ncols\n\n    def SetTarget(self, tgroup, tlocation, tmapset):\n        \"\"\"\n        Sets rectification target to current location and mapset\n        \"\"\"\n        # check to see if we are georectifying map in current working\n        # location/mapset\n        if (\n            self.newlocation == self.currentlocation\n            and self.newmapset == self.currentmapset\n        ):\n            RunCommand(\"i.target\", parent=self, flags=\"c\", group=tgroup)\n        else:\n            self.grwiz.SwitchEnv(\"source\")\n            RunCommand(\n                \"i.target\",\n                parent=self,\n                group=tgroup,\n                location=tlocation,\n                mapset=tmapset,\n            )\n            self.grwiz.SwitchEnv(\"target\")\n\n    def AddGCP(self, event):\n        \"\"\"\n        Appends an item to GCP list\n        \"\"\"\n        keyval = self.list.AddGCPItem() + 1\n        # source east, source north, target east, target north, forward error,\n        # backward error\n        self.mapcoordlist.append(\n            [\n                keyval,  # GCP number\n                0.0,  # source east\n                0.0,  # source north\n                0.0,  # target east\n                0.0,  # target north\n                0.0,  # forward error\n                0.0,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==unittests_temporal_algebra_grs:[39:107]\n==unittests_temporal_raster_algebra_grs:[40:108]\n        )\n\n        tgis.open_new_stds(\n            name=\"A\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"A\",\n            descr=\"A\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"B\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"B\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"C\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"C\",\n            descr=\"C\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"D\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"D\",\n            descr=\"D\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"A\",\n            maps=\"a1,a2,a3,a4,a5,a6\",\n            start=\"2001-01-01\",\n            increment=\"1 month\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"B\",\n            maps=\"b1,b2\",\n            start=\"2001-01-01\",\n            increment=\"3 months\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"C\",\n            maps=\"c1\",\n            start=\"2001-01-01\",\n            increment=\"1 year\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",\n            maps=\"d1\",\n            start=\"2001-01-01\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[692:783]\n==image2target.ii2t_manager:[698:793]\n        self.extension = self.ext_txt.GetValue()\n\n    def OnPageChanging(self, event=None):\n        if event.GetDirection() and self.xygroup == \"\":\n            GMessage(\n                _(\"You must select a valid image/map group in order to continue\"),\n                parent=self,\n            )\n            event.Veto()\n            return\n\n        if event.GetDirection() and self.extension == \"\":\n            GMessage(\n                _(\"You must enter an map name extension in order to continue\"),\n                parent=self,\n            )\n            event.Veto()\n            return\n\n    def OnEnterPage(self, event=None):\n        global maptype\n\n        self.groupList = []\n\n        self.xylocation = self.parent.gisrc_dict[\"LOCATION_NAME\"]\n        self.xymapset = self.parent.gisrc_dict[\"MAPSET\"]\n\n        # create a list of groups in selected mapset\n        if os.path.isdir(\n            os.path.join(self.grassdatabase, self.xylocation, self.xymapset, \"group\")\n        ):\n            tmplist = os.listdir(\n                os.path.join(\n                    self.grassdatabase, self.xylocation, self.xymapset, \"group\"\n                )\n            )\n            for item in tmplist:\n                if os.path.isdir(\n                    os.path.join(\n                        self.grassdatabase,\n                        self.xylocation,\n                        self.xymapset,\n                        \"group\",\n                        item,\n                    )\n                ):\n                    self.groupList.append(item)\n\n        if maptype == \"raster\":\n            self.btn_vgroup.Hide()\n            self.Bind(wx.EVT_BUTTON, self.OnMkGroup, self.btn_mkgroup)\n\n        elif maptype == \"vector\":\n            self.btn_vgroup.Show()\n            self.Bind(wx.EVT_BUTTON, self.OnMkGroup, self.btn_mkgroup)\n            self.Bind(wx.EVT_BUTTON, self.OnVGroup, self.btn_vgroup)\n\n        utils.ListSortLower(self.groupList)\n        self.cb_group.SetItems(self.groupList)\n\n        if len(self.groupList) > 0:\n            if self.xygroup and self.xygroup in self.groupList:\n                self.cb_group.SetStringSelection(self.xygroup)\n            else:\n                self.cb_group.SetSelection(0)\n                self.xygroup = self.groupList[0]\n\n        if self.xygroup == \"\" or self.extension == \"\":\n            wx.FindWindowById(wx.ID_FORWARD).Enable(False)\n        else:\n            wx.FindWindowById(wx.ID_FORWARD).Enable(True)\n\n        # switch to source\n        self.parent.SwitchEnv(\"source\")\n\n\nclass DispMapPage(TitledPage):\n    \"\"\"\n    Select ungeoreferenced map to display for interactively\n    setting ground control points (GCPs).\n    \"\"\"\n\n    def __init__(self, wizard, parent):\n        TitledPage.__init__(\n            self,\n            wizard,\n            _(\"Select maps to display for ground control point (GCP) creation\"),\n        )\n\n        self.parent = parent\n        global maptype\n\n        #\n        # layout\n        #",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[1595:1690]\n==photo2image.ip2i_manager:[942:1037]\n            self._giface.WriteLog(_(\"POINTS file saved for group <%s>\") % self.xygroup)\n            # self.SetStatusText(_('POINTS file saved'))\n\n    def ReadGCPs(self):\n        \"\"\"\n        Reads GCPs and georectified coordinates from POINTS file\n        \"\"\"\n\n        self.GCPcount = 0\n\n        sourceMapWin = self.SrcMapWindow\n        targetMapWin = self.TgtMapWindow\n\n        if not sourceMapWin:\n            GError(parent=self, message=_(\"source mapwin not defined\"))\n\n        if not targetMapWin:\n            GError(parent=self, message=_(\"target mapwin not defined\"))\n\n        try:\n            f = open(self.file[\"points\"], \"r\")\n            GCPcnt = 0\n\n            for line in f.readlines():\n                if line[0] == \"#\" or line == \"\":\n                    continue\n                line = line.replace(\"\\n\", \"\").strip()\n                coords = list(map(float, line.split()))\n                if coords[4] == 1:\n                    check = True\n                    self.GCPcount += 1\n                else:\n                    check = False\n\n                self.AddGCP(event=None)\n                self.SetGCPData(\"source\", (coords[0], coords[1]), sourceMapWin)\n                self.SetGCPData(\"target\", (coords[2], coords[3]), targetMapWin)\n                index = self.list.GetSelected()\n                if index != wx.NOT_FOUND:\n                    self.list.CheckItem(index, check)\n                GCPcnt += 1\n\n        except OSError as err:\n            GError(\n                parent=self,\n                message=\"%s <%s>. %s%s\"\n                % (\n                    _(\"Reading POINTS file failed\"),\n                    self.file[\"points\"],\n                    os.linesep,\n                    err,\n                ),\n            )\n            return\n\n        f.close()\n\n        if GCPcnt == 0:\n            # 3 gcp is minimum\n            for i in range(3):\n                self.AddGCP(None)\n\n        if self.CheckGCPcount():\n            # calculate RMS\n            self.RMSError(self.xygroup, self.gr_order)\n\n    def ReloadGCPs(self, event):\n        \"\"\"Reload data from file\"\"\"\n\n        # use backup\n        shutil.copy(self.file[\"points_bak\"], self.file[\"points\"])\n\n        # delete all items in mapcoordlist\n        self.mapcoordlist = []\n        self.mapcoordlist.append(\n            [\n                0,  # GCP number\n                0.0,  # source east\n                0.0,  # source north\n                0.0,  # target east\n                0.0,  # target north\n                0.0,  # forward error\n                0.0,\n            ]\n        )  # backward error\n\n        self.list.LoadData()\n        self.itemDataMap = self.mapcoordlist\n\n        if self._col != -1:\n            self.list.ClearColumnImage(self._col)\n        self._colSortFlag = [1] * self.list.GetColumnCount()\n\n        # draw GCPs (source and target)\n        sourceMapWin = self.SrcMapWindow",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==image2target.ii2t_manager:[3313:3390]\n==photo2image.ip2i_manager:[2401:2478]\n        self.parent.gr_method = self.methods[event.GetSelection()]\n\n    def OnClipRegion(self, event):\n        self.parent.clip_to_region = event.IsChecked()\n\n    def OnExtension(self, event):\n        self.parent.extension = self.ext_txt.GetValue()\n\n    def UpdateSettings(self):\n        global src_map\n        global tgt_map\n        global maptype\n\n        layers = None\n\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"rms\",\n            subkey=\"highestonly\",\n            value=self.highlighthighest.GetValue(),\n        )\n\n        if self.sdfactor > 0:\n            UserSettings.Set(\n                group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\", value=self.sdfactor\n            )\n\n            self.parent.sdfactor = self.sdfactor\n            if self.parent.rmsthresh > 0:\n                self.parent.rmsthresh = (\n                    self.parent.rmsmean + self.parent.sdfactor * self.parent.rmssd\n                )\n\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"color\",\n            value=tuple(wx.FindWindowById(self.symbol[\"color\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"hcolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"hcolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"scolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"scolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"ucolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"ucolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"unused\",\n            value=self.showunused.GetValue(),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"size\",\n            value=wx.FindWindowById(self.symbol[\"size\"]).GetValue(),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"width\",\n            value=wx.FindWindowById(self.symbol[\"width\"]).GetValue(),\n        )\n\n        srcrender = False",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.mapdisplay:[280:370]\n==photo2image.ip2i_mapdisplay:[275:365]\n                self.toolbars[\"gcpdisp\"].Enable(\"zoommenu\", enable=False)\n\n            if \"gcpman\" not in self.toolbars:\n                self.toolbars[\"gcpman\"] = GCPManToolbar(self)\n\n            self._mgr.AddPane(\n                self.toolbars[\"gcpman\"],\n                wx.aui.AuiPaneInfo()\n                .Name(\"gcpmanagertoolbar\")\n                .Caption(_(\"GCP Manager toolbar\"))\n                .ToolbarPane()\n                .Top()\n                .Row(1)\n                .LeftDockable(False)\n                .RightDockable(False)\n                .BottomDockable(False)\n                .TopDockable(True)\n                .CloseButton(False)\n                .Layer(2),\n            )\n\n        self._mgr.Update()\n\n    def _addPanes(self):\n        \"\"\"Add mapwindows, toolbars and statusbar to aui manager\"\"\"\n        self._mgr.AddPane(\n            self.list,\n            wx.aui.AuiPaneInfo()\n            .Name(\"gcplist\")\n            .Caption(_(\"GCP List\"))\n            .LeftDockable(False)\n            .RightDockable(False)\n            .PinButton()\n            .FloatingSize((600, 200))\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Top()\n            .Layer(1)\n            .MinSize((200, 100)),\n        )\n        self._mgr.AddPane(\n            self.SrcMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"source\")\n            .Caption(_(\"Source Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Centre(),\n        )\n        self._mgr.AddPane(\n            self.TgtMapWindow,\n            wx.aui.AuiPaneInfo()\n            .Name(\"target\")\n            .Caption(_(\"Target Display\"))\n            .Dockable(False)\n            .CloseButton(False)\n            .DestroyOnClose(True)\n            .Floatable(False)\n            .Right()\n            .Layer(0),\n        )\n        # statusbar\n        self.AddStatusbarPane()\n\n    def OnUpdateProgress(self, event):\n        \"\"\"\n        Update progress bar info\n        \"\"\"\n        self.GetProgressBar().UpdateProgress(event.layer, event.map)\n\n        event.Skip()\n\n    def OnFocus(self, event):\n        \"\"\"\n        Change choicebook page to match display.\n        Or set display for georectifying\n        \"\"\"\n        # was in if layer manager but considering the state it was executed\n        # always, moreover, there is no layer manager dependent code\n\n        # in GCP Management, set focus to current MapWindow for mouse actions\n        self.OnPointer(event)\n        self.MapWindow.SetFocus()\n\n        event.Skip()\n\n    def OnDraw(self, event):\n        \"\"\"Re-display current map composition\"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==unittests_temporal_algebra:[39:103]\n==unittests_temporal_raster_conditionals:[35:99]\n        tgis.open_new_stds(\n            name=\"A\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"A\",\n            descr=\"A\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"B\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"B\",\n            descr=\"B\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"C\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"C\",\n            descr=\"C\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n        tgis.open_new_stds(\n            name=\"D\",\n            type=\"strds\",\n            temporaltype=\"absolute\",\n            title=\"D\",\n            descr=\"D\",\n            semantic=\"field\",\n            overwrite=True,\n        )\n\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"A\",\n            maps=\"a1,a2,a3,a4\",\n            start=\"2001-01-01\",\n            increment=\"1 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"B\",\n            maps=\"b1,b2\",\n            start=\"2001-01-01\",\n            increment=\"2 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"C\",\n            maps=\"c1\",\n            start=\"2001-01-02\",\n            increment=\"2 day\",\n            interval=True,\n        )\n        tgis.register_maps_in_space_time_dataset(\n            type=\"raster\",\n            name=\"D\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[3371:3440]\n==image2target.ii2t_manager:[3319:3389]\n        self.parent.extension = self.ext_txt.GetValue()\n\n    def UpdateSettings(self):\n        global src_map\n        global tgt_map\n        global maptype\n\n        layers = None\n\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"rms\",\n            subkey=\"highestonly\",\n            value=self.highlighthighest.GetValue(),\n        )\n\n        if self.sdfactor > 0:\n            UserSettings.Set(\n                group=\"gcpman\", key=\"rms\", subkey=\"sdfactor\", value=self.sdfactor\n            )\n\n            self.parent.sdfactor = self.sdfactor\n            if self.parent.rmsthresh > 0:\n                self.parent.rmsthresh = (\n                    self.parent.rmsmean + self.parent.sdfactor * self.parent.rmssd\n                )\n\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"color\",\n            value=tuple(wx.FindWindowById(self.symbol[\"color\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"hcolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"hcolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"scolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"scolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"ucolor\",\n            value=tuple(wx.FindWindowById(self.symbol[\"ucolor\"]).GetColour()),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"unused\",\n            value=self.showunused.GetValue(),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"size\",\n            value=wx.FindWindowById(self.symbol[\"size\"]).GetValue(),\n        )\n        UserSettings.Set(\n            group=\"gcpman\",\n            key=\"symbol\",\n            subkey=\"width\",\n            value=wx.FindWindowById(self.symbol[\"width\"]).GetValue(),\n        )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==frame:[911:1007]\n==lmgr.frame:[788:882]\n        win = PsMapFrame(parent=self)\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnMapSwipe(self, event=None, cmd=None):\n        \"\"\"Launch Map Swipe. See OnIClass documentation\"\"\"\n        from mapswipe.frame import SwipeMapDisplay\n\n        frame = wx.Frame(\n            parent=None, size=globalvar.MAP_WINDOW_SIZE, title=_(\"Map Swipe Tool\")\n        )\n        win = SwipeMapDisplay(\n            parent=frame,\n            giface=self._giface,\n        )\n\n        rasters = []\n        tree = self.GetLayerTree()\n        if tree:\n            for layer in tree.GetSelections():\n                if tree.GetLayerInfo(layer, key=\"maplayer\").GetType() != \"raster\":\n                    continue\n                rasters.append(tree.GetLayerInfo(layer, key=\"maplayer\").GetName())\n\n        if len(rasters) >= 1:\n            win.SetFirstRaster(rasters[0])\n        if len(rasters) >= 2:\n            win.SetSecondRaster(rasters[1])\n            win.SetRasterNames()\n\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnRLiSetup(self, event=None, cmd=None):\n        \"\"\"Launch r.li setup. See OnIClass documentation\"\"\"\n        from rlisetup.frame import RLiSetupFrame\n\n        win = RLiSetupFrame(parent=self)\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnDataCatalog(self, event=None, cmd=None):\n        \"\"\"Launch Data Catalog\"\"\"\n        from datacatalog.frame import DataCatalogFrame\n\n        win = DataCatalogFrame(parent=self, giface=self._giface)\n        win.CentreOnScreen()\n        win.Show()\n\n    def OnDone(self, event):\n        \"\"\"Command execution finished\"\"\"\n        if hasattr(self, \"model\"):\n            self.model.DeleteIntermediateData(log=self._gconsole)\n            del self.model\n        self.SetStatusText(\"\")\n\n    def OnRunModel(self, event):\n        \"\"\"Run model\"\"\"\n        filename = \"\"\n        dlg = wx.FileDialog(\n            parent=self,\n            message=_(\"Choose model to run\"),\n            defaultDir=os.getcwd(),\n            wildcard=_(\"GRASS Model File (*.gxm)|*.gxm\"),\n        )\n        if dlg.ShowModal() == wx.ID_OK:\n            filename = dlg.GetPath()\n\n        if not filename:\n            dlg.Destroy()\n            return\n\n        from gmodeler.model import Model\n\n        self.model = Model()\n        self.model.LoadModel(filename)\n        self.model.Run(log=self.GetLogWindow(), onDone=self.OnDone, parent=self)\n        dlg.Destroy()\n\n    def OnMapsets(self, event):\n        \"\"\"Launch mapset access dialog\"\"\"\n        dlg = MapsetAccess(parent=self, id=wx.ID_ANY)\n        dlg.CenterOnScreen()\n\n        if dlg.ShowModal() == wx.ID_OK:\n            ms = dlg.GetMapsets()\n            RunCommand(\n                \"g.mapsets\", parent=self, mapset=\"%s\" % \",\".join(ms), operation=\"set\"\n            )\n\n    def OnCBPageChanged(self, event):\n        \"\"\"Page in notebook (display) changed\"\"\"\n        self.currentPage = self.notebookLayers.GetCurrentPage()\n        self.currentPageNum = self.notebookLayers.GetSelection()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.manager:[3516:3590]\n==image2target.ii2t_manager:[3436:3510]\n                cmdlist = [\"d.rast\", \"map=%s\" % tgt_map[\"raster\"]]\n                name, found = utils.GetLayerNameFromCmd(cmdlist)\n                self.parent.grwiz.TgtMap.AddLayer(\n                    ltype=\"raster\",\n                    command=cmdlist,\n                    active=True,\n                    name=name,\n                    hidden=False,\n                    opacity=1.0,\n                    render=False,\n                )\n\n                tgtrender = True\n\n            if tgt_map[\"vector\"] != \"\":\n                cmdlist = [\"d.vect\", \"map=%s\" % tgt_map[\"vector\"]]\n                name, found = utils.GetLayerNameFromCmd(cmdlist)\n                self.parent.grwiz.TgtMap.AddLayer(\n                    ltype=\"vector\",\n                    command=cmdlist,\n                    active=True,\n                    name=name,\n                    hidden=False,\n                    opacity=1.0,\n                    render=False,\n                )\n\n                tgtrenderVector = True\n\n        if tgt_map[\"raster\"] == \"\" and tgt_map[\"vector\"] == \"\":\n            if self.parent.show_target:\n                self.parent.show_target = False\n                self.parent._mgr.GetPane(\"target\").Hide()\n                self.parent._mgr.Update()\n                self.parent.activemap.SetSelection(0)\n                self.parent.activemap.Enable(False)\n                self.parent.GetMapToolbar().Enable(\"zoommenu\", enable=False)\n        else:\n            if not self.parent.show_target:\n                self.parent.show_target = True\n                self.parent._mgr.GetPane(\"target\").Show()\n                self.parent._mgr.Update()\n                self.parent.activemap.SetSelection(0)\n                self.parent.activemap.Enable(True)\n                self.parent.GetMapToolbar().Enable(\"zoommenu\", enable=True)\n                self.parent.TgtMapWindow.ZoomToMap(\n                    layers=self.parent.TgtMap.GetListOfLayers()\n                )\n\n        self.parent.UpdateColours(\n            srcrender, srcrenderVector, tgtrender, tgtrenderVector\n        )\n        self.parent.SetSettings()\n\n    def OnSave(self, event):\n        \"\"\"Button 'Save' pressed\"\"\"\n        self.UpdateSettings()\n        fileSettings = {}\n        UserSettings.ReadSettingsFile(settings=fileSettings)\n        fileSettings[\"gcpman\"] = UserSettings.Get(group=\"gcpman\")\n        file = UserSettings.SaveToFile(fileSettings)\n        self.parent._giface.WriteLog(\n            _(\"GCP Manager settings saved to file '%s'.\") % file\n        )\n        # self.Close()\n\n    def OnApply(self, event):\n        \"\"\"Button 'Apply' pressed\"\"\"\n        self.UpdateSettings()\n        # self.Close()\n\n    def OnClose(self, event):\n        \"\"\"Button 'Cancel' pressed\"\"\"\n        self.Close()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==gcp.statusbar:[25:126]\n==image2target.ii2t_statusbar:[25:126]\nclass SbGoToGCP(SbItem):\n    \"\"\"SpinCtrl to select GCP to focus on\n\n    Requires MapFrame.GetSrcWindow, MapFrame.GetTgtWindow,\n    MapFrame.GetListCtrl, MapFrame.GetMapCoordList.\n    \"\"\"\n\n    def __init__(self, mapframe, statusbar, position=0):\n        SbItem.__init__(self, mapframe, statusbar, position)\n        self.name = \"gotoGCP\"\n        self.label = _(\"Pan to GCP by number\")\n\n        self.widget = SpinCtrl(parent=self.statusbar, id=wx.ID_ANY, value=\"\", min=0)\n        self.widget.Hide()\n\n        self.widget.Bind(wx.EVT_TEXT_ENTER, self.OnGoToGCP)\n        self.widget.Bind(wx.EVT_SPINCTRL, self.OnGoToGCP)\n\n    def OnGoToGCP(self, event):\n        \"\"\"Zooms to given GCP.\"\"\"\n        gcpNumber = self.GetValue()\n        mapCoords = self.mapFrame.GetMapCoordList()\n\n        # always false, spin checks it\n        if gcpNumber < 0 or gcpNumber > len(mapCoords):\n            GMessage(\n                parent=self, message=\"%s 1 - %s.\" % (_(\"Valid Range:\"), len(mapCoords))\n            )\n            return\n\n        if gcpNumber == 0:\n            return\n\n        listCtrl = self.mapFrame.GetListCtrl()\n\n        listCtrl.selectedkey = gcpNumber\n        listCtrl.selected = listCtrl.FindItem(-1, gcpNumber)\n        listCtrl.render = False\n        listCtrl.SetItemState(\n            listCtrl.selected, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED\n        )\n        listCtrl.render = True\n\n        listCtrl.EnsureVisible(listCtrl.selected)\n\n        srcWin = self.mapFrame.GetSrcWindow()\n        tgtWin = self.mapFrame.GetTgtWindow()\n\n        # Source MapWindow:\n        begin = (mapCoords[gcpNumber][1], mapCoords[gcpNumber][2])\n        begin = srcWin.Cell2Pixel(begin)\n        end = begin\n        srcWin.Zoom(begin, end, 0)\n\n        # redraw map\n        srcWin.UpdateMap()\n\n        if self.mapFrame.GetShowTarget():\n            # Target MapWindow:\n            begin = (mapCoords[gcpNumber][3], mapCoords[gcpNumber][4])\n            begin = tgtWin.Cell2Pixel(begin)\n            end = begin\n            tgtWin.Zoom(begin, end, 0)\n\n            # redraw map\n            tgtWin.UpdateMap()\n\n        self.GetWidget().SetFocus()\n\n    def Update(self):\n        \"\"\"Checks the number of items in the gcp list\n        and sets the spin limits accordingly.\"\"\"\n        self.statusbar.SetStatusText(\"\")\n        maximum = self.mapFrame.GetListCtrl().GetItemCount()\n        if maximum < 1:\n            maximum = 1\n        self.widget.SetRange(0, maximum)\n        self.Show()\n\n        # disable long help\n        self.mapFrame.StatusbarEnableLongHelp(False)\n\n\nclass SbRMSError(SbTextItem):\n    \"\"\"Shows RMS error.\n\n    Requires MapFrame.GetFwdError, MapFrame.GetBkwError.\n    \"\"\"\n\n    def __init__(self, mapframe, statusbar, position=0):\n        SbTextItem.__init__(self, mapframe, statusbar, position)\n        self.name = \"RMSError\"\n        self.label = _(\"RMS error\")\n\n    def Show(self):\n        \"\"\"Shows the RMS errors.\"\"\"\n        self.SetValue(\n            _(\"Forward: %(forw)s, Backward: %(back)s\")\n            % {\"forw\": self.mapFrame.GetFwdError(), \"back\": self.mapFrame.GetBkwError()}\n        )\n        SbTextItem.Show(self)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==test_v_in_lidar_filter:[16:99]\n==test_v_in_pdal_filter:[17:101]\nPOINTS = \"\"\"\\\n17.46938776,18.67346939,143,1,1,2\n20.93877551,17.44897959,125,1,1,2\n18.89795918,14.18367347,130,1,1,3\n15.91836735,10.67346939,126,1,1,3\n21.26530612,11.04081633,128,1,2,3\n22.24489796,13.89795918,123,2,2,3\n23.79591837,17.12244898,151,1,2,3\n17.2244898,16.34693878,124,2,2,4\n17.14285714,14.10204082,134,1,3,4\n19.87755102,11.81632653,146,2,3,4\n18.48979592,11.48979592,140.6,2,3,4\n21.26530612,15.73469388,147,3,3,5\n21.18367347,19.32653061,138,1,3,5\n23.91836735,18.83673469,144,2,3,5\n23.51020408,13.65306122,143,3,3,5\n23.55102041,11.32653061,123,1,4,5\n18.41009273,14.51618034,140.4,2,4,5\n22.13996161,17.2278263,147,3,4,5\n21.41013052,11.05432488,132,4,4,5\n\"\"\"\n\n\nclass FilterTest(TestCase):\n    \"\"\"Test case for filter and selection options\n\n    This tests expects v.random and v.out.lidar to work properly.\n    \"\"\"\n\n    # Setup variables to be used for outputs\n    vector_points = \"vinlidar_filters_original\"\n    imported_points = \"vinlidar_filters_imported\"\n    las_file = \"vinlidar_filters_points.las\"\n    npoints = 300\n\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Ensures expected computational region and generated data\"\"\"\n        cls.use_temp_region()\n        cls.runModule(\"g.region\", n=20, s=10, e=25, w=15, res=1)\n        cls.runModule(\n            \"v.in.ascii\",\n            input=\"-\",\n            stdin_=POINTS,\n            flags=\"z\",\n            z=3,\n            cat=0,\n            separator=\"comma\",\n            output=cls.vector_points,\n            columns=\"x double precision, y double precision,\"\n            \" z double precision, return_n integer,\"\n            \" n_returns integer, class_n integer\",\n        )\n        cls.runModule(\n            \"v.out.lidar\",\n            input=cls.vector_points,\n            layer=1,\n            output=cls.las_file,\n            return_column=\"return_n\",\n            n_returns_column=\"n_returns\",\n            class_column=\"class_n\",\n        )\n\n    @classmethod\n    def tearDownClass(cls):\n        \"\"\"Remove the temporary region and generated data\"\"\"\n        cls.runModule(\"g.remove\", flags=\"f\", type=\"vector\", name=cls.vector_points)\n        if os.path.isfile(cls.las_file):\n            os.remove(cls.las_file)\n        cls.del_temp_region()\n\n    def tearDown(self):\n        \"\"\"Remove the outputs created by the import\n\n        This is executed after each test run.\n        \"\"\"\n        self.runModule(\"g.remove\", flags=\"f\", type=\"vector\", name=self.imported_points)\n\n    @unittest.skipIf(shutil.which(\"v.in.pdal\") is None, \"Cannot find v.in.pdal\")\n    def test_no_filter(self):\n        \"\"\"Test to see if the standard outputs are created\n\n        This shows if the inpute data are as expected.\n        \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "test_vwhat_ncspm",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "vector/v.what/testsuite/test_vwhat_ncspm.py",
            "absolutePath": "vector/v.what/testsuite/test_vwhat_ncspm.py"
        }
    ],
    "statistics": {
        "messageTypeCount": {
            "fatal": 0,
            "error": 450,
            "warning": 744,
            "refactor": 365,
            "convention": 316,
            "info": 0
        },
        "modulesLinted": 926,
        "score": 9.75
    }
}
