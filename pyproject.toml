[project]
name = "grass"
requires-python = ">=3.9"

[tool.black]
required-version = '24'
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
(
    python/libgrass_interface_generator/
)
'''

[tool.ruff]
required-version = ">=0.5.0"

builtins = ["_"]

# In addition to the standard set of exclusions, omit the following files or folders.
extend-exclude = ["python/libgrass_interface_generator"]
# In addition to the standard set of inclusions, include `.ipynb` files.
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = [
    "A",      # flake8-builtins (A)
    "AIR",    # Airflow (AIR)
    "ANN",    # flake8-annotations (ANN)
    "ARG",    # flake8-unused-arguments (ARG)
    "B",      # flake8-bugbear (B)
    "BLE",    # flake8-blind-except (BLE)
    "C4",     # flake8-comprehensions (C4)
    "COM",    # flake8-commas (COM)
    "D",      # pydocstyle (D)
    "DTZ",    # flake8-datetimez (DTZ)
    "E4",     # pycodestyle (E, W)
    "E7",     # pycodestyle (E, W)
    "E9",     # pycodestyle (E, W)
    "F",      # Pyflakes (F)
    "FA",     # flake8-future-annotations (FA)
    "FBT",    # flake8-boolean-trap (FBT)
    "FLY",    # flynt (FLY)
    "FURB",   # refurb (FURB)
    "G",      # flake8-logging-format (G)
    "I",      # isort (I)
    "ICN",    # flake8-import-conventions (ICN)
    "INT",    # flake8-gettext (INT)
    "ISC",    # flake8-implicit-str-concat (ISC)
    "LOG",    # flake8-logging (LOG)
    "NPY",    # NumPy-specific rules (NPY)
    "PERF",   # Perflint (PERF)
    "PGH",    # pygrep-hooks (PGH)
    "PIE",    # flake8-pie (PIE)
    "PLC",    # Pylint (PL) Convention (C)
    "PLE",    # Pylint (PL) Error (E)
    "PLR",    # Pylint (PL) Refactor (R)
    "PLW",    # Pylint (PL) Warning (W)
    "PT",     # flake8-pytest-style (PT)
    "PTH",    # flake8-use-pathlib (PTH)
    "PTH105", # flake8-use-pathlib (PTH)
    "PYI",    # flake8-pyi (PYI)
    "Q",      # flake8-quotes (Q)
    "RET",    # flake8-return (RET)
    "RSE",    # flake8-raise (RSE)
    "RUF",    # Ruff-specific rules (RUF)
    "S",      # flake8-bandit (S)
    "SIM",    # flake8-simplify (SIM)
    "SLF",    # flake8-self (SLF)
    "SLOT",   # flake8-slots (SLOT)
    "T10",    # flake8-debugger (T10)
    "TCH",    # flake8-type-checking (TCH)
    "TID",    # flake8-tidy-imports (TID)
    "TRY",    # tryceratops (TRY)
    "UP",     # pyupgrade (UP)
    "W",      # pycodestyle (E, W)
    "YTT",    # flake8-2020 (YTT)
]

ignore = [
    # See https://docs.astral.sh/ruff/rules/
    # *GRASS TODO: fix the issues, or use https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
    "A001",    # builtin-variable-shadowing
    "A002",    # builtin-argument-shadowing
    "ANN",     # flake8-annotations (ANN)
    "ARG001",  # unused-function-argument
    "ARG002",  # unused-method-argument
    "ARG005",  # unused-lambda-argument
    "B006",    # mutable-argument-default
    "B007",    # unused-loop-control-variable
    "B008",    # function-call-in-default-argument
    "B015",    # useless-comparison
    "B023",    # function-uses-loop-variable
    "B026",    # star-arg-unpacking-after-keyword-arg
    "B028",    # no-explicit-stacklevel
    "B034",    # re-sub-positional-args
    "B904",    # raise-without-from-inside-except
    "B909",    # loop-iterator-mutation
    "BLE001",  # blind-except
    "C400",    # unnecessary-generator-list
    "C401",    # unnecessary-generator-set
    "C403",    # unnecessary-list-comprehension-set
    "C404",    # unnecessary-list-comprehension-dict
    "C405",    # unnecessary-literal-set
    "C414",    # unnecessary-double-cast-or-process
    "C416",    # unnecessary-comprehension
    "COM812",  # missing-trailing-comma
    "COM818",  # trailing-comma-on-bare-tuple
    "D1",
    "D2",
    "D300",    # triple-single-quotes
    "D301",    # escape-sequence-in-docstring
    "D400",    # ends-in-period
    "D401",    # non-imperative-mood
    "D402",    # no-signature
    "D403",    # first-line-capitalized
    "D404",    # docstring-starts-with-this
    "D405",    # capitalize-section-name
    "D406",    # new-line-after-section-name
    "D407",    # dashed-underline-after-section
    "D409",    # section-underline-matches-section-length
    "D411",    # no-blank-line-before-section
    "D412",    # blank-lines-between-header-and-content
    "D413",    # blank-line-after-last-section
    "D415",    # ends-in-punctuation
    "D416",    # section-name-ends-in-colon
    "D419",    # empty-docstring
    "DTZ001",  # call-datetime-without-tzinfo
    "DTZ002",  # call-datetime-today
    "DTZ005",  # call-datetime-now-without-tzinfo
    "DTZ006",  # call-datetime-fromtimestamp
    "DTZ007",  # call-datetime-strptime-without-zone
    "DTZ011",  # call-date-today
    "E401",    # multiple-imports-on-one-line
    "E402",    # module-import-not-at-top-of-file
    "E721",    # type-comparison
    "E722",    # bare-except
    "E731",    # lambda-assignment
    "E741",    # ambiguous-variable-name
    "F401",    # unused-import
    "F403",    # undefined-local-with-import-star
    "F405",    # undefined-local-with-import-star-usage
    "F601",    # multi-value-repeated-key-literal
    "F811",    # redefined-while-unused
    "F821",    # undefined-name
    "F822",    # undefined-export
    "F841",    # unused-variable,
    "FBT001",  # boolean-type-hint-positional-argument
    "FBT002",  # boolean-default-value-positional-argument
    "FBT003",  # boolean-positional-value-in-call
    "FURB118", # reimplemented-operator
    "I001",    # unsorted-imports
    "ISC003",  # explicit-string-concatenation
    "PERF203", # try-except-in-loop
    "PERF401", # manual-list-comprehension
    "PERF402", # manual-list-copy
    "PERF403", # manual-dict-comprehension
    "PIE790",  # unnecessary-placeholder
    "PIE794",  # duplicate-class-field-definition
    "PIE808",  # unnecessary-range-start
    "PIE810",  # multiple-starts-ends-with
    "PLC0206", # dict-index-missing-items
    "PLC0414", # useless-import-alias
    "PLC0415", # import-outside-top-level
    "PLC1901", # compare-to-empty-string
    "PLC2701", # import-private-name
    "PLC2801", # unnecessary-dunder-call
    "PLE0704", # misplaced-bare-raise
    "PLR0124", # comparison-with-itself
    "PLR0202", # no-classmethod-decorator
    "PLR0904", # too-many-public-methods
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0914", # too-many-locals
    "PLR0915", # too-many-statements
    "PLR0916", # too-many-boolean-expressions
    "PLR0917", # too-many-positional
    "PLR1702", # too-many-nested-blocks
    "PLR1704", # redefined-argument-from-local
    "PLR1733", # unnecessary-dict-index-lookup
    "PLR2004", # magic-value-comparison
    "PLR6104", # non-augmented-assignment
    "PLR6201", # literal-membership
    "PLR6301", # no-self-use
    "PLW0127", # self-assigning-variable
    "PLW0406", # import-self
    "PLW0602", # global-variable-not-assigned
    "PLW0603", # global-statement
    "PLW0604", # global-at-module-level
    "PLW1508", # invalid-envvar-default
    "PLW1510", # subprocess-run-without-check
    "PLW1514", # unspecified-encoding
    "PLW1641", # eq-without-hash
    "PLW2901", # redefined-loop-name
    "PLW3201", # nested-min-max
    "PT001",   # pytest-fixture-incorrect-parentheses-style
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT009",   # pytest-unittest-assertion
    "PT011",   # pytest-raises-too-broad
    "PT018",   # pytest-composite-assertion
    "PT023",   # pytest-incorrect-mark-parentheses-style
    "PTH100",  # os-path-abspath
    "PTH101",  # os-chmod
    "PTH102",  # os-mkdir
    "PTH103",  # os-makedirs
    "PTH104",  # os-rename
    "PTH106",  # os-rmdir
    "PTH107",  # os-remove
    "PTH108",  # os-unlink
    "PTH109",  # os-getcwd
    "PTH110",  # os-path-exists
    "PTH111",  # os-path-expanduser
    "PTH112",  # os-path-isdir
    "PTH113",  # os-path-isfile
    "PTH116",  # os-stat
    "PTH117",  # os-path-isabs
    "PTH118",  # os-path-join
    "PTH119",  # os-path-basename
    "PTH120",  # os-path-dirname
    "PTH122",  # os-path-splitext
    "PTH123",  # builtin-open
    "PTH202",  # os-path-getsize
    "PTH204",  # os-path-getmtime
    "PTH207",  # glob
    "RET501", # unnecessary-return-none
    "RET502", # implicit-return-value
    "RET503", # implicit-return
    "RET505", # superfluous-else-return
    "RET506", # superfluous-else-raise
    "RET507", # superfluous-else-continue
    "RET508", # superfluous-else-break
    "RSE102",  # unnecessary-paren-on-raise-exception
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "RUF005",  # collection-literal-concatenation
    "RUF012",  # mutable-class-default
    "RUF013",  # unnecessary-iterable-allocation-for-first-element
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "RUF019",  # unnecessary-key-check
    "RUF021",  # parenthesize-chained-operators
    "RUF027",  # missing-f-string-syntax
    "RUF100",  # unused-noqa
    "S101",    #assert
    "S108",    # hardcoded-temp-file
    "S110",    # try-except-pass
    "S112",    # try-except-continue
    "S113",    # request-without-timeout
    "S202",    # tarfile-unsafe-members
    "S307",    # suspicious-eval-usage
    "S310",    # suspicious-url-open-usage
    "S311",    # suspicious-non-cryptographic-random-usage
    "S314",    # suspicious-xml-element-tree-usage
    "S324",    # hashlib-insecure-hash-function
    "S403",    # suspicious-pickle-import
    "S404",    # suspicious-subprocess-import
    "S405",    # suspicious-xml-etree-import
    "S406",    # suspicious-xml-sax-import
    "S602",    # subprocess-popen-with-shell-equals-true
    "S603",    # subprocess-without-shell-equals-true
    "S604",    # call-with-shell-equals-true
    "S606",    # start-process-with-no-shell
    "S607",    # start-process-with-partial-path
    "S608",    # hardcoded-sql-expression
    "SIM101",  # duplicate-isinstance-call
    "SIM102",  # collapsible-if
    "SIM105",  # suppressible-exception
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM109",  # compare-with-tuple
    "SIM110",  # reimplemented-builtin
    "SIM113",  # enumerate-for-loop
    "SIM114",  # if-with-same-arms
    "SIM115",  # open-file-with-context-handler
    "SIM116",  # if-else-block-instead-of-dict-lookup
    "SIM118",  # in-dict-keys
    "SIM201",  # negate-equal-op
    "SIM223",  # expr-and-false
    "SIM401",  # if-else-block-instead-of-dict-get
    "SLF001",  # private-member-access
    "TRY002",  # raise-vanilla-class
    "TRY003",  # raise-vanilla-args
    "TRY004",  # type-check-without-type-error
    "TRY201",  # verbose-raise
    "TRY300",  # try-consider-else
    "TRY301",  # raise-within-try
    "UP015",   # redundant-open-modes
    "UP018",   # native-literals
    "UP030",   # format-literals
    "UP031",   # printf-string-formatting
    "UP032",   # f-string
    "UP034",   # extraneous-parentheses
    "UP036",   # outdated-version-block
    "W605",    # invalid-escape-sequence
    "YTT204",  # sys-version-info-minor-cmp-int
]


[tool.ruff.lint.per-file-ignores]
# See https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
# Ignore `E402` (import violations) in all `__init__.py` files
"*/testsuite/**.py" = ["PT009", "PT027"]
"__init__.py" = ["E402"]
"gui/wxpython/iclass/frame.py" = ["FLY002"]
"gui/wxpython/iscatt/plots.py" = ["PLW0108"]
"gui/wxpython/psmap/utils.py" = ["PGH004"]
"gui/wxpython/timeline/frame.py" = ["FLY002"]
"gui/wxpython/tplot/frame.py" = ["FLY002"]
"gui/wxpython/wxplot/profile.py" = ["NPY001"]
"lib/imagery/testsuite/test_imagery_sigsetfile.py" = ["FURB152"]
"python/grass/__init__.py" = ["PYI056"]
"python/grass/exp*/tests/grass_script_mapset_session_test.py" = ["SIM117"]
"python/grass/exp*/tests/grass_script_tmp_mapset_session_test.py" = ["SIM117"]
"python/grass/gunittest/loader.py" = ["PYI024"]
"python/grass/gunittest/multireport.py" = ["PYI024"]
"python/grass/gunittest/testsu*/d*/s*/s*/subsub*/t*/test_segfaut.py" = ["B018"]
"python/grass/gunittest/testsuite/test_assertions_rast3d.py" = ["FLY002"]
"python/grass/jupyter/tests/reprojection_renderer_test.py" = ["PT013"]
"python/grass/jupyter/testsuite/interactivemap_test.py" = ["PGH004"]
"python/grass/jupyter/testsuite/map_test.py" = ["PGH004"]
"python/grass/pygrass/raster/__init__.py" = ["NPY002"]
"python/grass/pygrass/raster/testsuite/test_numpy.py" = ["NPY002"]
"python/grass/pygrass/vector/geometry.py" = ["PYI024"]
"python/grass/pygrass/vector/sql.py" = ["FLY002"]
"python/grass/pygrass/vector/testsuite/test_table.py" = ["NPY002", "PLW0108"]
"python/grass/pygrass/vector/testsuite/test_vector3d.py" = ["NPY002"]
"raster3d/r3.flow/testsuite/r3flow_test.py" = ["FLY002"]
"raster3d/r3.gradient/testsuite/r3gradient_test.py" = ["FLY002"]
"scripts/d.polar/d.polar.py" = ["FURB154"]
"scripts/i.pansharpen/i.pansharpen.py" = ["FLY002"]
"scripts/i.spectral/i.spectral.py" = ["FLY002"]
"scripts/r.in.srtm/r.in.srtm.py" = ["FLY002"]
"temporal/t.rast.algebra/testsu*/*_algebra_arithmetic.py" = ["FLY002"]
"temporal/t.register/testsu*/*_raster_different_local.py" = ["FLY002"]
"temporal/t.register/testsu*/*_raster_mapmetadata.py" = ["FLY002"]
"temporal/t.register/testsuite/test_t_register_raster.py" = ["FLY002"]
"temporal/t.register/testsuite/test_t_register_raster_file.py" = ["FLY002"]
"utils/generate_release_notes.py" = ["PGH004"]
"vector/v.fill.holes/examples.ipynb" = ["PTH201"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom aliases, checked with rule ICN001
"grass.script" = "gs"

[tool.pytest.ini_options]
minversion = "6.0"
python_files = "*/tests/*_test.py"
addopts = """
    --ignore-glob='dist.*'
    --ignore-glob='bin.*'
    --ignore-glob='*/tests/data/*'
    --ignore-glob='*/grass/pygrass/tests/*'
    --doctest-glob='*doctest*.txt'
    --ignore='raster/r.category/test_rcategory_doctest.txt'
"""
timeout = 300
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "needs_solo_run: marks tests that must be run without any other tests running in parallel",
]


[tool.bandit]
exclude_dirs = [
    "./testsuite",
    "*/tests/*",
    "*/testsuite/*",
    "utils/test_generate_last_commit_file.py",
]
skips = ["B324", "B110", "B101", "B112", "B311", "B404", "B603"]


[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analysed.
# analyse-fallback-blocks =

# Clear in-memory caches upon conclusion of linting. Useful if running pylint in
# a server-like mode.
# clear-cache-post-run =

# Always return a 0 (non-error) status code, even if lint errors are found. This
# is primarily useful in continuous integration scripts.
# exit-zero =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
# extension-pkg-allow-list =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
# extension-pkg-whitelist =

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
# fail-on =

# Specify a score threshold under which the program will exit with error.
fail-under = 10

# Interpret the stdin as a python script, whose filename needs to be passed as
# the module_or_package argument.
# from-stdin =

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS"]

# Add files or directories matching the regular expressions patterns to the
# ignore-list. The regex matches against paths and can be in Posix or Windows
# format. Because '\\' represents the directory delimiter on Windows systems, it
# can't be used as an escape character.
# ignore-paths =

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
ignore-patterns = ["^\\.#"]

# List of module names for which member attributes should not be checked and will
# not be imported (useful for modules/projects where namespaces are manipulated
# during runtime and thus existing member attributes cannot be deduced by static
# analysis). It supports qualified module names, as well as Unix pattern
# matching.
# ignored-modules =

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook =

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 1

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = [
    "pylint.extensions.redefined_variable_type",
    # "pylint.extensions.bad_builtin", # *GRASS TODO: Enable later*
]

# Pickle collected data for later comparisons.
persistent = true

# Resolve imports to .pyi stubs if available. May reduce no-member messages and
# increase not-an-iterable messages.
# prefer-stubs =

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
# *GRASS modified*
# *GRASS TODO: keep un sync with MIN_PYTHON_VERSION supported*
py-version = "3.9"

# Discover python modules and packages in the file system subtree.
# recursive =

# Add paths to the list of the source roots. Supports globbing patterns. The
# source root is an absolute path or a path relative to the current working
# directory used to determine a package namespace for modules located under the
# source root.
# source-roots =

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
# unsafe-load-any-extension =

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Regular expression matching correct argument names. Overrides argument-naming-
# style. If left empty, argument names will be checked with the set naming style.
# argument-rgx =

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
# attr-rgx =

# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
# bad-names-rgxs =

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
# class-attribute-rgx =

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
# class-const-rgx =

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Regular expression matching correct class names. Overrides class-naming-style.
# If left empty, class names will be checked with the set naming style.
# class-rgx =

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming style.
# const-rgx =

# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = -1

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Regular expression matching correct function names. Overrides function-naming-
# style. If left empty, function names will be checked with the set naming style.
# function-rgx =

# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_"]

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
# good-names-rgxs =

# Include a hint for the correct naming format with invalid-name.
# include-naming-hint =

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
# inlinevar-rgx =

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
# method-rgx =

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
# module-rgx =

# Colon-delimited sets of names that determine each other's naming style when the
# name regexes allow several styles.
# name-group =

# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "^_"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]

# Regular expression matching correct type alias names. If left empty, type alias
# names will be checked with the set naming style.
# typealias-rgx =

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
# typevar-rgx =

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-naming-
# style. If left empty, variable names will be checked with the set naming style.
# variable-rgx =

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
# check-protected-access-in-special-methods =

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "asyncSetUp",
    "__post_init__",
]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "os._exit",
]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
# exclude-too-few-public-methods =

# List of qualified class names to ignore when counting class parents (see R0901)
# ignored-parents =

# Maximum number of arguments for function / method.
# *GRASS modified: default 5, (see R0913)*
# *GRASS TODO: Try to reduce this value*
max-args = 15

# Maximum number of attributes for a class (see R0902).
# *GRASS modified: default 7*
# *GRASS TODO: Try to reduce this value*
max-attributes = 25

# Maximum number of boolean expressions in an if statement (see R0916).
# *GRASS modified: default 5*
# *GRASS TODO: Try to reduce this value*
max-bool-expr = 8

# Maximum number of branch for function / method body.
# *GRASS modified: default 12, (see R0912)*
# *GRASS TODO: Try to reduce this value*
max-branches = 44

# Maximum number of locals for function / method body.
# *GRASS modified: default 15, (see R0914)*
# *GRASS TODO: Try to reduce this value*
max-locals = 50

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
# *GRASS modified: default 6, (see R0911)*
# *GRASS TODO: Try to reduce this value*
max-returns = 9

# Maximum number of statements in function / method body.
# *GRASS modified: default 50, (see R0915)*
# *GRASS TODO: Try to reduce this value*
max-statements = 220

# Minimum number of public methods for a class (see R0903).
# *GRASS modified: default 2, (see R0915)*
# *GRASS TODO: Try to increase this value*
min-public-methods = 1

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format =

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 100

# Maximum number of lines in a module.
# *GRASS modified: default 1000, (see C0302)*
# *GRASS TODO: Try to reduce this value*
max-module-lines = 2000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
# single-line-class-stmt =

# Allow the body of an if to be on the same line as the test if there is no else.
# single-line-if-stmt =

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level one.
# allow-any-import-level =

# Allow explicit reexports by alias from a package __init__.
# allow-reexport-from-package =

# Allow wildcard imports from modules that define __all__.
# allow-wildcard-with-all =

# Deprecated modules which should not be used, separated by a comma.
# deprecated-modules =

# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =

# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =

# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant"]

# Couples of modules and preferred modules, separated by a comma.
# preferred-modules =

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
# *GRASS modified: default old*
logging-format-style = "new"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
    # *GRASS: The 10 following rules are disabled by default*
    "bad-inline-option",
    "deprecated-pragma",
    "file-ignored",
    "locally-disabled",
    "raw-checker-failed",
    "suppressed-message",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-symbolic-message-instead",
    "useless-suppression",
    # *GRASS modified: The following rules are added to the disabled list*
    # *GRASS TODO: Try to ignore less rules*
    "anomalous-backslash-in-string",
    "attribute-defined-outside-init",
    "bare-except",
    "broad-except",
    "cell-var-from-loop",
    "chained-comparison",
    "consider-iterating-dictionary",
    "consider-using-dict-items",
    "consider-using-enumerate",
    "consider-using-f-string",
    "consider-using-from-import",
    "consider-using-generator",
    "consider-using-get",
    "consider-using-in",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-with",
    "deprecated-argument",
    "deprecated-method",
    "eval-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "global-variable-not-assigned",
    "global-variable-undefined",
    "import-error",
    "import-outside-toplevel",
    "inconsistent-return-statements",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-break",
    "no-else-raise",
    "no-else-return",
    "no-member",
    "no-name-in-module",
    "no-value-for-parameter",
    "not-callable",
    "raise-missing-from",
    "redefined-builtin",
    "redefined-outer-name",
    "self-assigning-variable",
    "simplifiable-if-statement",
    "super-with-arguments",
    "undefined-loop-variable",
    "undefined-variable",
    "unidiomatic-typecheck",
    "unnecessary-comprehension",
    "unnecessary-pass",
    "unneeded-not",
    "unspecified-encoding",
    "unused-argument",
    "unused-import",
    "unused-variable",
    "use-a-generator",
    "use-list-literal",
    "use-maxsplit-arg",
    "useless-import-alias",
    "useless-object-inheritance",
    "useless-return",
    "wrong-import-order",
    "wrong-import-position",
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
# enable =

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Regular expression of note tags to take in consideration.
# notes-rgx =

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
# *GRASS modified: default 5, (see R1702)*
# *GRASS TODO: Try to reduce this value*
max-nested-blocks = 7

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

# Let 'consider-using-join' be raised when the separator to join on would be non-
# empty (resulting in expected fixes of the type: ``"- " + " - ".join(items)``)
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
# msg-template =

# Set the output format. Available formats are: text, parseable, colorized, json2
# (improved json format), json (old json format) and msvs (visual studio). You
# can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.
# output-format =

# Tells whether to display a full report or only the messages.
# reports =

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
# *GRASS modified: default 4, (see R0801)*
# *GRASS TODO: Try to reduce this value*
# *GRASS justification: Matching only larger chunks of code, not the default 4 lines.*
min-similarity-lines = 50

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. No available dictionaries : You need to install both
# the python package and the system dependency for enchant to work.
# spelling-dict =

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

# List of comma separated words that should not be checked.
# spelling-ignore-words =

# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
# spelling-store-unknown-words =

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# generated-members =

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference can
# return multiple potential results while evaluating a Python object, but some
# branches might not be evaluated, which results in partial inference. In that
# case, it might be useful to still emit no-member and other checks for the rest
# of the inferred objects.
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]

# Show a hint with possible names when a member name was not found. The aspect of
# finding the hint is based on edit distance.
missing-member-hint = true

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
# signature-mutators =

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# *GRASS modified: default '# additional-builtins ='*
# *GRASS justification: Translation function is (unfortunately) defined as a builtin.*
# *GRASS TODO: Find another pattern for translation that allows to use _ as a discard variable and other*
additional-builtins = ["_"]

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
# allowed-redefined-builtins =

# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
# init-import =

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]


[tool.pyright]
include = ["python"]
exclude = ["**/__pycache__", "**/OBJ.*", "bin.*/**", "dist.*/**"]

# Set extraPath to the output of $(grass --config python_path)

# *GRASS modified*
# *GRASS TODO: keep un sync with MIN_PYTHON_VERSION supported*
pythonVersion = "3.9"
