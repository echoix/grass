"""
This type stub file was generated by pyright.
"""

from . import crust

"""PySlices combines the slices and filling into one control."""
__author__ = ...
class CrustSlices(crust.Crust):
    """Slices based on SplitterWindow."""
    name = ...
    sashoffset = ...
    def __init__(self, parent, id=..., pos=..., size=..., style=..., name=..., rootObject=..., rootLabel=..., rootIsNamespace=..., intro=..., locals=..., InterpClass=..., startupScript=..., execStartupScript=..., showPySlicesTutorial=..., enableShellMode=..., hideFoldingMargin=..., *args, **kwds) -> None:
        """Create CrustSlices instance."""
        ...
    


class CrustSlicesFrame(crust.CrustFrame):
    """Frame containing all the PySlices components."""
    name = ...
    def __init__(self, parent=..., id=..., title=..., pos=..., size=..., style=..., rootObject=..., rootLabel=..., rootIsNamespace=..., locals=..., InterpClass=..., config=..., dataDir=..., filename=..., *args, **kwds) -> None:
        """Create CrustFrame instance."""
        ...
    
    def OnClose(self, event): # -> None:
        """Event handler for closing."""
        ...
    
    def OnAbout(self, event): # -> None:
        """Display an About window."""
        ...
    
    def OnEnableShellMode(self, event): # -> None:
        """Change between Slices Mode and Shell Mode"""
        ...
    
    def OnHideFoldingMargin(self, event): # -> None:
        """Change between Slices Mode and Shell Mode"""
        ...
    
    def OnIdle(self, event): # -> None:
        """Event handler for idle time."""
        ...
    
    def hasBuffer(self): # -> bool:
        """Return True if there is a current buffer."""
        ...
    
    def bufferClose(self): # -> bool:
        """Close buffer."""
        ...
    
    def bufferCreate(self, filename=...): # -> None:
        """Create new buffer."""
        ...
    
    def bufferDestroy(self): # -> None:
        """Destroy the current buffer."""
        ...
    
    def bufferHasChanged(self): # -> Literal[False]:
        """Return True if buffer has changed since last save."""
        ...
    
    def bufferNew(self): # -> bool:
        """Create new buffer."""
        ...
    
    def bufferOpen(self, file=...): # -> Literal[True] | None:
        """Open file in buffer."""
        ...
    
    def simpleSave(self, confirmed=...): # -> None:
        ...
    
    def bufferSave(self): # -> bool:
        """Save buffer to its file."""
        ...
    
    def bufferSaveAs(self): # -> bool:
        """Save buffer to a new filename."""
        ...
    
    def bufferSaveACopy(self): # -> bool:
        """Save buffer to a new filename."""
        ...
    
    def bufferSuggestSave(self): # -> bool:
        """Suggest saving changes.  Return True if user selected Cancel."""
        ...
    
    def updateNamespace(self): # -> None:
        """Update the buffer namespace for autocompletion and calltips."""
        ...
    


