"""
This type stub file was generated by pyright.
"""

"""Provides global signal dispatching services."""
__author__ = ...
class DispatcherError(Exception):
    def __init__(self, args=...) -> None:
        ...
    


class Parameter:
    """Used to represent default parameter values."""
    def __repr__(self): # -> str:
        ...
    


class Any(Parameter):
    ...


Any = ...
class Anonymous(Parameter):
    ...


Anonymous = ...
connections = ...
senders = ...
_boundMethods = ...
def connect(receiver, signal=..., sender=..., weak=...): # -> None:
    """
    Connect receiver to sender for signal.

    * If sender is Any, receiver will receive signal from any sender.
    * If signal is Any, receiver will receive any signal from sender.
    * If sender is None, receiver will receive signal from Anonymous.
    * If signal is Any and sender is None, receiver will receive any
      signal from Anonymous.
    * If signal is Any and sender is Any, receiver will receive any
      signal from any sender.
    * If weak is true, weak references will be used.
    """
    ...

def disconnect(receiver, signal=..., sender=..., weak=...): # -> None:
    """Disconnect receiver from sender for signal.

    Disconnecting is not required. The use of disconnect is the same as for
    connect, only in reverse. Think of it as undoing a previous connection."""
    ...

def send(signal, sender=..., **kwds): # -> list[Any]:
    """Send signal from sender to all connected receivers.

    Return a list of tuple pairs [(receiver, response), ... ].
    If sender is not specified, signal is sent anonymously."""
    ...

def safeRef(object): # -> ReferenceType[Any]:
    """Return a *safe* weak reference to a callable object."""
    ...

class BoundMethodWeakref:
    """BoundMethodWeakref class."""
    def __init__(self, boundMethod) -> None:
        """Return a weak-reference-like instance for a bound method."""
        ...
    
    def __repr__(self): # -> str:
        """Return the closest representation."""
        ...
    
    def __call__(self): # -> Any | None:
        """Return a strong reference to the bound method."""
        ...
    


