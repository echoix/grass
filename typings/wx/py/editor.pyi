"""
This type stub file was generated by pyright.
"""

import wx
from . import editwindow, frame

"""PyAlaCarte and PyAlaMode editors."""
__author__ = ...
class EditorFrame(frame.Frame):
    """Frame containing one editor."""
    def __init__(self, parent=..., id=..., title=..., pos=..., size=..., style=..., filename=...) -> None:
        """Create EditorFrame instance."""
        ...
    
    def setEditor(self, editor): # -> None:
        ...
    
    def OnAbout(self, event): # -> None:
        """Display an About window."""
        ...
    
    def OnClose(self, event): # -> None:
        """Event handler for closing."""
        ...
    
    def OnIdle(self, event): # -> None:
        """Event handler for idle time."""
        ...
    
    def hasBuffer(self): # -> bool:
        """Return True if there is a current buffer."""
        ...
    
    def bufferClose(self): # -> bool:
        """Close buffer."""
        ...
    
    def bufferCreate(self, filename=...): # -> None:
        """Create new buffer."""
        ...
    
    def bufferDestroy(self): # -> None:
        """Destroy the current buffer."""
        ...
    
    def bufferHasChanged(self): # -> Literal[False]:
        """Return True if buffer has changed since last save."""
        ...
    
    def bufferNew(self): # -> bool:
        """Create new buffer."""
        ...
    
    def bufferOpen(self): # -> bool:
        """Open file in buffer."""
        ...
    
    def bufferSave(self): # -> bool:
        """Save buffer to its file."""
        ...
    
    def bufferSaveAs(self): # -> bool:
        """Save buffer to a new filename."""
        ...
    
    def bufferSuggestSave(self): # -> bool:
        """Suggest saving changes.  Return True if user selected Cancel."""
        ...
    
    def updateNamespace(self): # -> None:
        """Update the buffer namespace for autocompletion and calltips."""
        ...
    


class EditorNotebookFrame(EditorFrame):
    """Frame containing one or more editors in a notebook."""
    def __init__(self, parent=..., id=..., title=..., pos=..., size=..., style=..., filename=...) -> None:
        """Create EditorNotebookFrame instance."""
        ...
    
    def OnAbout(self, event): # -> None:
        """Display an About window."""
        ...
    
    def bufferCreate(self, filename=...): # -> None:
        """Create new buffer."""
        ...
    
    def bufferDestroy(self): # -> None:
        """Destroy the current buffer."""
        ...
    
    def bufferNew(self): # -> Literal[False]:
        """Create new buffer."""
        ...
    
    def bufferOpen(self): # -> Literal[False]:
        """Open file in buffer."""
        ...
    


class EditorNotebook(wx.Notebook):
    """A notebook containing a page for each editor."""
    def __init__(self, parent) -> None:
        """Create EditorNotebook instance."""
        ...
    
    def OnIdle(self, event): # -> None:
        """Event handler for idle time."""
        ...
    
    def OnPageChanging(self, event): # -> None:
        """Page changing event handler."""
        ...
    
    def OnPageChanged(self, event): # -> None:
        """Page changed event handler."""
        ...
    


class EditorShellNotebookFrame(EditorNotebookFrame):
    """Frame containing a notebook containing EditorShellNotebooks."""
    def __init__(self, parent=..., id=..., title=..., pos=..., size=..., style=..., filename=..., singlefile=...) -> None:
        """Create EditorShellNotebookFrame instance."""
        ...
    
    def OnAbout(self, event): # -> None:
        """Display an About window."""
        ...
    
    def bufferCreate(self, filename=...): # -> None:
        """Create new buffer."""
        ...
    
    def bufferDestroy(self): # -> None:
        """Destroy the current buffer."""
        ...
    
    def bufferNew(self): # -> bool:
        """Create new buffer."""
        ...
    
    def bufferOpen(self): # -> bool:
        """Open file in buffer."""
        ...
    


class EditorShellNotebook(wx.Notebook):
    """A notebook containing an editor page and a shell page."""
    def __init__(self, parent, filename=...) -> None:
        """Create EditorShellNotebook instance."""
        ...
    
    def OnPageChanged(self, event): # -> None:
        """Page changed event handler."""
        ...
    
    def SetFocus(self): # -> None:
        ...
    


class Editor:
    """Editor having an EditWindow."""
    def __init__(self, parent, id=..., pos=..., size=..., style=...) -> None:
        """Create Editor instance."""
        ...
    
    def destroy(self): # -> None:
        """Destroy all editor objects."""
        ...
    
    def clearAll(self): # -> None:
        ...
    
    def emptyUndoBuffer(self): # -> None:
        ...
    
    def getStatus(self): # -> tuple[Any | Literal[''], Any, Any] | tuple[Literal[''], Literal[0], Literal[0]]:
        """Return (filepath, line, column) status tuple."""
        ...
    
    def getText(self):
        """Return contents of editor."""
        ...
    
    def hasChanged(self):
        """Return True if contents have changed."""
        ...
    
    def setFocus(self): # -> None:
        """Set the input focus to the editor window."""
        ...
    
    def setSavePoint(self): # -> None:
        ...
    
    def setText(self, text): # -> None:
        """Set contents of editor."""
        ...
    
    def OnChar(self, event): # -> None:
        """Keypress event handler.

        Only receives an event if OnKeyDown calls event.Skip() for the
        corresponding event."""
        ...
    
    def OnKeyDown(self, event): # -> None:
        """Key down event handler."""
        ...
    
    def autoCompleteShow(self, command): # -> None:
        """Display auto-completion popup list."""
        ...
    
    def autoCallTipShow(self, command): # -> None:
        """Display argument spec and docstring in a popup window."""
        ...
    


class EditWindow(editwindow.EditWindow):
    """EditWindow based on StyledTextCtrl."""
    def __init__(self, editor, parent, id=..., pos=..., size=..., style=...) -> None:
        """Create EditWindow instance."""
        ...
    


class DialogResults:
    """DialogResults class."""
    def __init__(self, returned) -> None:
        """Create wrapper for results returned by dialog."""
        ...
    
    def __repr__(self): # -> str:
        ...
    


def fileDialog(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    """File dialog wrapper function."""
    ...

def openSingle(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    """File dialog wrapper function."""
    ...

def openMultiple(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    """File dialog wrapper function."""
    ...

def saveSingle(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    """File dialog wrapper function."""
    ...

def directory(parent=..., message=..., path=..., style=..., pos=..., size=...): # -> DialogResults:
    """Dir dialog wrapper function."""
    ...

def messageDialog(parent=..., message=..., title=..., style=..., pos=...): # -> DialogResults:
    """Message dialog wrapper function."""
    ...

