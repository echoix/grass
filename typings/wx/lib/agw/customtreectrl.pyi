"""
This type stub file was generated by pyright.
"""

import wx
from wx.lib.expando import ExpandoTextCtrl

"""
The ``customtreectrl`` module contains the :class:`~wx.lib.agw.customtreectrl.CustomTreeCtrl` class
which mimics the behaviour of :class:`TreeCtrl`, with some more enhancements.


Description
===========

:class:`CustomTreeCtrl` is a class that mimics the behaviour of :class:`TreeCtrl`, with almost the
same base functionalities plus some more enhancements. This class does not rely on
the native control, as it is a full owner-drawn tree control.
Apart of the base functionalities of :class:`CustomTreeCtrl` (described below), in addition
to the standard :class:`TreeCtrl` behaviour this class supports:

* CheckBox-type items: checkboxes are easy to handle, just selected or unselected
  state with no particular issues in handling the item's children;
* Added support for 3-state value checkbox items;
* RadioButton-type items: since I elected to put radiobuttons in :class:`CustomTreeCtrl`, I
  needed some way to handle them, that made sense. So, I used the following approach:

  - All peer-nodes that are radiobuttons will be mutually exclusive. In other words,
    only one of a set of radiobuttons that share a common parent can be checked at
    once. If a radiobutton node becomes checked, then all of its peer radiobuttons
    must be unchecked.
  - If a radiobutton node becomes unchecked, then all of its child nodes will become
    inactive.

* Hyperlink-type items: they look like an hyperlink, with the proper mouse cursor on
  hovering;
* Multiline text items (**note**: to add a newline character in a multiline item, press
  ``Shift`` + ``Enter`` as the ``Enter`` key alone is consumed by :class:`CustomTreeCtrl` to finish
  the editing and ``Ctrl`` + ``Enter`` is consumed by the platform for tab navigation);
* Enabling/disabling items (together with their plain or grayed out icons);
* Whatever non-toplevel widget can be attached next to an item;
* Possibility to horizontally align the widgets attached to tree items on the
  same tree level.
* Possibility to align the widgets attached to tree items to the rightmost edge of :class:`CustomTreeCtrl`;
* Default selection style, gradient (horizontal/vertical) selection style and Windows
  Vista selection style;
* Customized drag and drop images built on the fly;
* Setting the :class:`CustomTreeCtrl` item buttons to a personalized imagelist;
* Setting the :class:`CustomTreeCtrl` check/radio item icons to a personalized imagelist;
* Changing the style of the lines that connect the items (in terms of :class:`wx.Pen` styles);
* Using an image as a :class:`CustomTreeCtrl` background (currently only in "tile" mode);
* Adding images to any item in the leftmost area of the :class:`CustomTreeCtrl` client window.
* Separator-type items which are simply visual indicators that are meant to set apart
  or divide tree items, with the following caveats:

  - Separator items should not have children, labels, data or an associated window;
  - You can change the color of individual separators by using :meth:`~CustomTreeCtrl.SetItemTextColour`, or you can use
    :meth:`~CustomTreeCtrl.SetSeparatorColour` to change the color of all separators. The default separator colour
    is that returned by `SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)`;
  - Separators can be selected just like any other tree item;
  - Separators cannot have text;
  - Separators cannot have children;
  - Separators cannot be edited via the ``EVT_TREE_BEGIN_LABEL_EDIT`` event.

* Ellipsization of long items when the horizontal space is low, via the ``TR_ELLIPSIZE_LONG_ITEMS``
  style (`New in version 0.9.3`);
* Tooltips on long items when the horizontal space is low, via the ``TR_TOOLTIP_ON_LONG_ITEMS``
  style (`New in version 0.9.3`).
* Hiding items

And a lot more. Check the demo for an almost complete review of the functionalities.


Base Functionalities
====================

:class:`CustomTreeCtrl` supports all the :class:`TreeCtrl` styles, except:

- ``TR_EXTENDED``: supports for this style is on the todo list (am I sure of this?).

Plus it has 3 more styles to handle checkbox-type items:

- ``TR_AUTO_CHECK_CHILD``: automatically checks/unchecks the item children;
- ``TR_AUTO_CHECK_PARENT``: automatically checks/unchecks the item parent;
- ``TR_AUTO_TOGGLE_CHILD``: automatically toggles the item children.

And two styles you can use to force the horizontal alignment of all the widgets
attached to the tree items:

- ``TR_ALIGN_WINDOWS``: aligns horizontally the windows belonging to the item on the
  same tree level.
- ``TR_ALIGN_WINDOWS_RIGHT``: aligns to the rightmost position the windows belonging
  to the item on the same tree level.

And two styles related to long items (with a lot of text in them), which can be
ellipsized and/or highlighted with a tooltip:

- ``TR_ELLIPSIZE_LONG_ITEMS``: ellipsizes long items when the horizontal space for
  :class:`CustomTreeCtrl` is low (`New in version 0.9.3`);
- ``TR_TOOLTIP_ON_LONG_ITEMS``: shows tooltips on long items when the horizontal space
  for :class:`CustomTreeCtrl` is low (`New in version 0.9.3`);.

All the methods available in :class:`TreeCtrl` are also available in :class:`CustomTreeCtrl`.


Usage
=====

Usage example::

    import wx
    import wx.lib.agw.customtreectrl as CT

    class MyFrame(wx.Frame):

        def __init__(self, parent):

            wx.Frame.__init__(self, parent, -1, "CustomTreeCtrl Demo")

            # Create a CustomTreeCtrl instance
            custom_tree = CT.CustomTreeCtrl(self, agwStyle=wx.TR_DEFAULT_STYLE)

            # Add a root node to it
            root = custom_tree.AddRoot("The Root Item")

            # Create an image list to add icons next to an item
            il = wx.ImageList(16, 16)
            fldridx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, (16, 16)))
            fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, (16, 16)))
            fileidx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, (16, 16)))

            custom_tree.SetImageList(il)

            custom_tree.SetItemImage(root, fldridx, wx.TreeItemIcon_Normal)
            custom_tree.SetItemImage(root, fldropenidx, wx.TreeItemIcon_Expanded)

            for x in range(15):
                child = custom_tree.AppendItem(root, "Item %d" % x)
                custom_tree.SetItemImage(child, fldridx, wx.TreeItemIcon_Normal)
                custom_tree.SetItemImage(child, fldropenidx, wx.TreeItemIcon_Expanded)

                for y in range(5):
                    last = custom_tree.AppendItem(child, "item %d-%s" % (x, chr(ord("a")+y)))
                    custom_tree.SetItemImage(last, fldridx, wx.TreeItemIcon_Normal)
                    custom_tree.SetItemImage(last, fldropenidx, wx.TreeItemIcon_Expanded)

                    for z in range(5):
                        item = custom_tree.AppendItem(last,  "item %d-%s-%d" % (x, chr(ord("a")+y), z))
                        custom_tree.SetItemImage(item, fileidx, wx.TreeItemIcon_Normal)

            custom_tree.Expand(root)


    # our normal wxApp-derived class, as usual

    app = wx.App(0)

    frame = MyFrame(None)
    app.SetTopWindow(frame)
    frame.Show()

    app.MainLoop()



Events
======

All the events supported by :class:`TreeCtrl` are also available in :class:`CustomTreeCtrl`, with
a few exceptions:

- ``EVT_TREE_GET_INFO`` (don't know what this means);
- ``EVT_TREE_SET_INFO`` (don't know what this means);
- ``EVT_TREE_ITEM_MIDDLE_CLICK`` (not implemented, but easy to add);
- ``EVT_TREE_STATE_IMAGE_CLICK`` (no need for that, look at the checking events below).

Plus, :class:`CustomTreeCtrl` supports the events related to the checkbutton-type items:

- ``EVT_TREE_ITEM_CHECKING``: an item is being checked;
- ``EVT_TREE_ITEM_CHECKED``: an item has been checked.

And to hyperlink-type items:

- ``EVT_TREE_ITEM_HYPERLINK``: an hyperlink item has been clicked (this event is sent
  after the ``EVT_TREE_SEL_CHANGED`` event).


Drag and Drop
=============

A simplified drag and drop is available and can be initiated by calling
``event.Allow`` on the ``EVT_TREE_BEGIN_DRAG`` or ``EVT_TREE_BEGIN_RDRAG``
events. When the event handler returns, a ``wx.DragImage`` of the item will be
generated and the user can drag it to other items within the tree. When the
user releases the drag button a ``EVT_TREE_END_DRAG`` event will be sent and
``event.GetItem`` can be called to find out which item the drag ended at.
This simplified method is best when only a single item at a time needs to
be dragged (i.e. ``TR_MULTIPLE`` not set) and only for dragging items within
the tree control.

Alternately, the normal wxPython drag/drop can be invoked in the ``EVT_TREE_BEGIN_DRAG``
handler in which a :class:`wx.DropSource` must be generated, followed by a call
to :meth:`~wx.DropSource.DoDragDrop` which will block until the drag is finished.
This is much more flexible but more complicated to implement.

:note: The class value _DRAG_TIMER_TICKS controls how long the mouse must
 linger before the drag can start. It defaults to 250 milliseconds which can
 be far too long for today's quick 'swiping' generation. It can be lowered for
 a more responsive drag.


Supported Platforms
===================

:class:`CustomTreeCtrl` has been tested on the following platforms:
  * Windows (Windows XP);
  * GTK (Thanks to Michele Petrazzo);
  * Mac OS (Thanks to John Jackson).


Window Styles
=============

This class takes in a regular wxPython ``style`` and an extended ``agwStyle``.
The ``style`` can be used with normal wxPython styles such as ``wx.WANTS_CHARS``
while the ``agwStyle`` specifies the behavior of the tree itself.
It supports the following ``agwStyle`` flags:

================================= =========== ==================================================
Window agwStyle Flags             Hex Value   Description
================================= =========== ==================================================
**wx.TR_DEFAULT_STYLE**              *varies* The set of flags that are closest to the defaults for the native control for a particular toolkit.  Should always be used.
``wx.TR_NO_BUTTONS``                      0x0 For convenience to document that no buttons are to be drawn.
``wx.TR_SINGLE``                          0x0 For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default.
``wx.TR_HAS_BUTTONS``                     0x1 Use this style to show + and - buttons to the left of parent items.
``wx.TR_NO_LINES``                        0x4 Use this style to hide vertical level connectors.
``wx.TR_LINES_AT_ROOT``                   0x8 Use this style to show lines between root nodes. Only applicable if ``TR_HIDE_ROOT`` is set and ``TR_NO_LINES`` is not set.
``wx.TR_TWIST_BUTTONS``                  0x10 Use old Mac-twist style buttons.
``wx.TR_MULTIPLE``                       0x20 Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected.
``wx.TR_HAS_VARIABLE_ROW_HEIGHT``        0x80 Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset.
``wx.TR_EDIT_LABELS``                   0x200 Use this style if you wish the user to be able to edit labels in the tree control.
``wx.TR_ROW_LINES``                     0x400 Use this style to draw a contrasting border between displayed rows.
``wx.TR_HIDE_ROOT``                     0x800 Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes.
``wx.TR_FULL_ROW_HIGHLIGHT``           0x2000 Use this style to have the background colour and the selection highlight extend  over the entire horizontal row of the tree control window.
**Styles from customtreectrl:**
``TR_EXTENDED``                          0x40 Use this style to allow disjoint items to be selected. (Only partially implemented; may not work in all cases).
``TR_AUTO_CHECK_CHILD``                0x4000 Only meaningful for checkbox-type items: when a parent item is checked/unchecked its children are checked/unchecked as well.
``TR_AUTO_TOGGLE_CHILD``               0x8000 Only meaningful for checkbox-type items: when a parent item is checked/unchecked its children are toggled accordingly.
``TR_AUTO_CHECK_PARENT``              0x10000 Only meaningful for checkbox-type items: when a child item is checked/unchecked its parent item is checked/unchecked as well.
``TR_ALIGN_WINDOWS``                  0x20000 Flag used to align windows (in items with windows) at the same horizontal position.
``TR_ALIGN_WINDOWS_RIGHT``            0x40000 Flag used to align windows (in items with windows) to the rightmost edge of :class:`CustomTreeCtrl`.
``TR_ELLIPSIZE_LONG_ITEMS``           0x80000 Flag used to ellipsize long items when the horizontal space for :class:`CustomTreeCtrl` is low.
``TR_TOOLTIP_ON_LONG_ITEMS``         0x100000 Flag used to show tooltips on long items when the horizontal space for :class:`CustomTreeCtrl` is low.
================================= =========== ==================================================

The ``wx.TR_HAS_VARIABLE_LINE_HEIGHT`` style should be set if item rows might
not all be the same height. This can happen if certain rows have a larger font
size, multi-line text, or windows added to them. This style will automatically
adjust each item's height to be just big enough to show its contents.

When the ``wx.TR_HAS_VARIABLE_LINE_HEIGHT`` is not set, adding a new item with
multi-line text or with a window specified will throw an exception. However the
tree won't prevent you from adding multiline text with :meth:`~TreeListMainWindow.SetItemText`
or assigning a window with :meth:`~TreeListMainWindow.SetItemWindow` to an
existing item. It's generally a bad idea to do either of these without this
style as it will result in an ugly tree. By default the ``wx.TR_HAS_VARIABLE_LINE_HEIGHT``
is not set. This means that all item rows will use the same height. This is the
height of the largest item in the tree. If an item with a larger height is
added or revealed, ALL row heights will increase to this larger size. The
larger row height remains persistent even if the large items are hidden or
deleted. You must call :meth:`~wx.lib.agw.customtreectrl.CustomTreeCtrl.CalculateLineHeight`
to reset the row height. This somewhat bizarre behavior is why the ``wx.TR_HAS_VARIABLE_LINE_HEIGHT``
style is almost always used.


Events Processing
=================

This class processes the following events:

============================== ==================================================
Event Name                     Description
============================== ==================================================
``EVT_TREE_BEGIN_DRAG``        Begin dragging with the left mouse button.
``EVT_TREE_BEGIN_LABEL_EDIT``  Begin editing a label. This can be prevented by calling :meth:`~TreeEvent.Veto`.
``EVT_TREE_BEGIN_RDRAG``       Begin dragging with the right mouse button.
``EVT_TREE_DELETE_ITEM``       Delete an item.
``EVT_TREE_END_DRAG``          End dragging with the left or right mouse button.
``EVT_TREE_END_LABEL_EDIT``    End editing a label. This can be prevented by calling :meth:`~TreeEvent.Veto`.
``EVT_TREE_GET_INFO``          Request information from the application (not implemented in :class:`CustomTreeCtrl`).
``EVT_TREE_ITEM_ACTIVATED``    The item has been activated, i.e. chosen by double clicking it with mouse or from keyboard.
``EVT_TREE_ITEM_CHECKED``      A checkbox or radiobox type item has been checked.
``EVT_TREE_ITEM_CHECKING``     A checkbox or radiobox type item is being checked.
``EVT_TREE_ITEM_COLLAPSED``    The item has been collapsed.
``EVT_TREE_ITEM_COLLAPSING``   The item is being collapsed. This can be prevented by calling :meth:`~TreeEvent.Veto`.
``EVT_TREE_ITEM_EXPANDED``     The item has been expanded.
``EVT_TREE_ITEM_EXPANDING``    The item is being expanded. This can be prevented by calling :meth:`~TreeEvent.Veto`.
``EVT_TREE_ITEM_GETTOOLTIP``   The opportunity to set the item tooltip is being given to the application (call `TreeEvent.SetToolTip`).
``EVT_TREE_ITEM_HYPERLINK``    An hyperlink type item has been clicked.
``EVT_TREE_ITEM_MENU``         The context menu for the selected item has been requested, either by a right click or by using the menu key.
``EVT_TREE_ITEM_MIDDLE_CLICK`` The user has clicked the item with the middle mouse button (not implemented in :class:`CustomTreeCtrl`).
``EVT_TREE_ITEM_RIGHT_CLICK``  The user has clicked the item with the right mouse button.
``EVT_TREE_KEY_DOWN``          A key has been pressed.
``EVT_TREE_SEL_CHANGED``       Selection has changed.
``EVT_TREE_SEL_CHANGING``      Selection is changing. This can be prevented by calling :meth:`~TreeEvent.Veto`.
``EVT_TREE_SET_INFO``          Information is being supplied to the application (not implemented in :class:`CustomTreeCtrl`).
``EVT_TREE_STATE_IMAGE_CLICK`` The state image has been clicked (not implemented in :class:`CustomTreeCtrl`).
============================== ==================================================


License And Version
===================

:class:`CustomTreeCtrl` is distributed under the wxPython license.

Latest Revision: Helio Guilherme @ 09 Aug 2018, 21.35 GMT

Version 2.7

"""
__version__ = ...
_NO_IMAGE = ...
_PIXELS_PER_UNIT = ...
_DELAY = ...
_VERSION_STRING = ...
TreeItemIcon_Normal = ...
TreeItemIcon_Selected = ...
TreeItemIcon_Expanded = ...
TreeItemIcon_SelectedExpanded = ...
TreeItemIcon_Checked = ...
TreeItemIcon_NotChecked = ...
TreeItemIcon_Undetermined = ...
TreeItemIcon_Flagged = ...
TreeItemIcon_NotFlagged = ...
TR_NO_BUTTONS = ...
TR_HAS_BUTTONS = ...
TR_NO_LINES = ...
TR_LINES_AT_ROOT = ...
TR_TWIST_BUTTONS = ...
TR_SINGLE = ...
TR_MULTIPLE = ...
TR_EXTENDED = ...
TR_HAS_VARIABLE_ROW_HEIGHT = ...
TR_EDIT_LABELS = ...
TR_ROW_LINES = ...
TR_HIDE_ROOT = ...
TR_FULL_ROW_HIGHLIGHT = ...
TR_AUTO_CHECK_CHILD = ...
TR_AUTO_TOGGLE_CHILD = ...
TR_AUTO_CHECK_PARENT = ...
TR_ALIGN_WINDOWS = ...
TR_ALIGN_WINDOWS_RIGHT = ...
TR_ELLIPSIZE_LONG_ITEMS = ...
TR_TOOLTIP_ON_LONG_ITEMS = ...
TR_DEFAULT_STYLE = ...
TREE_HITTEST_ABOVE = ...
TREE_HITTEST_BELOW = ...
TREE_HITTEST_NOWHERE = ...
TREE_HITTEST_ONITEMBUTTON = ...
TREE_HITTEST_ONITEMICON = ...
TREE_HITTEST_ONITEMINDENT = ...
TREE_HITTEST_ONITEMLABEL = ...
TREE_HITTEST_ONITEMRIGHT = ...
TREE_HITTEST_ONITEMSTATEICON = ...
TREE_HITTEST_TOLEFT = ...
TREE_HITTEST_TORIGHT = ...
TREE_HITTEST_ONITEMUPPERPART = ...
TREE_HITTEST_ONITEMLOWERPART = ...
TREE_HITTEST_ONITEMCHECKICON = ...
TREE_HITTEST_ONITEM = ...
TREE_ITEMTYPE_NORMAL = ...
TREE_ITEMTYPE_CHECK = ...
TREE_ITEMTYPE_RADIO = ...
_StyleTile = ...
_StyleStretch = ...
_rgbSelectOuter = ...
_rgbSelectInner = ...
_rgbSelectTop = ...
_rgbSelectBottom = ...
_rgbNoFocusTop = ...
_rgbNoFocusBottom = ...
_rgbNoFocusOuter = ...
_rgbNoFocusInner = ...
_CONTROL_EXPANDED = ...
_CONTROL_CURRENT = ...
wxEVT_TREE_BEGIN_DRAG = ...
wxEVT_TREE_BEGIN_RDRAG = ...
wxEVT_TREE_BEGIN_LABEL_EDIT = ...
wxEVT_TREE_END_LABEL_EDIT = ...
wxEVT_TREE_DELETE_ITEM = ...
wxEVT_TREE_GET_INFO = ...
wxEVT_TREE_SET_INFO = ...
wxEVT_TREE_ITEM_EXPANDED = ...
wxEVT_TREE_ITEM_EXPANDING = ...
wxEVT_TREE_ITEM_COLLAPSED = ...
wxEVT_TREE_ITEM_COLLAPSING = ...
wxEVT_TREE_SEL_CHANGED = ...
wxEVT_TREE_SEL_CHANGING = ...
wxEVT_TREE_KEY_DOWN = ...
wxEVT_TREE_ITEM_ACTIVATED = ...
wxEVT_TREE_ITEM_RIGHT_CLICK = ...
wxEVT_TREE_ITEM_MIDDLE_CLICK = ...
wxEVT_TREE_END_DRAG = ...
wxEVT_TREE_STATE_IMAGE_CLICK = ...
wxEVT_TREE_ITEM_GETTOOLTIP = ...
wxEVT_TREE_ITEM_MENU = ...
wxEVT_TREE_ITEM_CHECKING = ...
wxEVT_TREE_ITEM_CHECKED = ...
wxEVT_TREE_ITEM_HYPERLINK = ...
EVT_TREE_BEGIN_DRAG = ...
EVT_TREE_BEGIN_RDRAG = ...
EVT_TREE_BEGIN_LABEL_EDIT = ...
EVT_TREE_END_LABEL_EDIT = ...
EVT_TREE_DELETE_ITEM = ...
EVT_TREE_GET_INFO = ...
EVT_TREE_SET_INFO = ...
EVT_TREE_ITEM_EXPANDED = ...
EVT_TREE_ITEM_EXPANDING = ...
EVT_TREE_ITEM_COLLAPSED = ...
EVT_TREE_ITEM_COLLAPSING = ...
EVT_TREE_SEL_CHANGED = ...
EVT_TREE_SEL_CHANGING = ...
EVT_TREE_KEY_DOWN = ...
EVT_TREE_ITEM_ACTIVATED = ...
EVT_TREE_ITEM_RIGHT_CLICK = ...
EVT_TREE_ITEM_MIDDLE_CLICK = ...
EVT_TREE_END_DRAG = ...
EVT_TREE_STATE_IMAGE_CLICK = ...
EVT_TREE_ITEM_GETTOOLTIP = ...
EVT_TREE_ITEM_MENU = ...
EVT_TREE_ITEM_CHECKING = ...
EVT_TREE_ITEM_CHECKED = ...
EVT_TREE_ITEM_HYPERLINK = ...
def MakeDisabledBitmap(original): # -> Bitmap:
    """
    Creates a disabled-looking bitmap starting from the input one.

    :param `original`: an instance of :class:`wx.Bitmap` to be greyed-out.

    :return: An instance of :class:`wx.Bitmap`, containing a disabled-looking
     representation of the original item image.
    """
    ...

def DrawTreeItemButton(win, dc, rect, flags): # -> None:
    """
    Draw the expanded/collapsed icon for a tree control item.

    :param `win`: an instance of :class:`wx.Window`;
    :param `dc`: an instance of :class:`wx.DC`;
    :param wx.Rect `rect`: the client rectangle where to draw the tree item button;
    :param integer `flags`: contains ``wx.CONTROL_EXPANDED`` bit for expanded tree items.

    :note: This is a simple replacement of :meth:`RendererNative.DrawTreeItemButton`.

    :note: This method is never used in wxPython versions newer than 2.6.2.1.
    """
    ...

def EventFlagsToSelType(style, shiftDown=..., ctrlDown=...): # -> tuple[Any, Any | Literal[False], bool]:
    """
    Translate the key or mouse event flag to the type of selection we
    are dealing with.

    :param integer `style`: the main :class:`CustomTreeCtrl` window style flag;
    :param bool `shiftDown`: ``True`` if the ``Shift`` key is pressed, ``False`` otherwise;
    :param bool `ctrlDown`: ``True`` if the ``Ctrl`` key is pressed, ``False`` otherwise;

    :return: A 3-elements tuple, with the following elements:

     - `is_multiple`: ``True`` if :class:`CustomTreeCtrl` has the ``TR_MULTIPLE`` flag set, ``False`` otherwise;
     - `extended_select`: ``True`` if the ``Shift`` key is pressend and if :class:`CustomTreeCtrl` has the
       ``TR_MULTIPLE`` flag set, ``False`` otherwise;
     - `unselect_others`: ``True`` if the ``Ctrl`` key is pressend and if :class:`CustomTreeCtrl` has the
       ``TR_MULTIPLE`` flag set, ``False`` otherwise.
    """
    ...

def ChopText(dc, text, max_size): # -> str:
    """
    Chops the input `text` if its size does not fit in `max_size`, by cutting the
    text and adding ellipsis at the end.

    :param `dc`: a :class:`wx.DC` device context;
    :param `text`: the text to chop;
    :param `max_size`: the maximum size in which the text should fit.

    :note: This method is used exclusively when :class:`CustomTreeCtrl` has the ``TR_ELLIPSIZE_LONG_ITEMS``
     style set.

    .. versionadded:: 0.9.3
    """
    ...

class DragImage(wx.DragImage):
    """
    This class handles the creation of a custom image in case of item drag
    and drop.
    """
    def __init__(self, treeCtrl, item) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `treeCtrl`: the parent :class:`CustomTreeCtrl`;
        :param `item`: one of the tree control item (an instance of :class:`GenericTreeItem`).
        """
        ...
    
    def CreateBitmap(self): # -> Bitmap:
        """
        Actually creates the drag and drop bitmap for :class:`DragImage`.

        :return: An instance of :class:`DragImage`, a close representation of the item's
         appearance (i.e., a screenshot of the item).
        """
        ...
    


class TreeItemAttr:
    """
    Creates the item attributes (text colour, background colour and font).

    :note: This class is inspired by the wxWidgets generic implementation of :class:`TreeItemAttr`.
    """
    def __init__(self, colText=..., colBack=..., colBorder=..., font=...) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `colText`: the text colour, an instance of :class:`wx.Colour`;
        :param `colBack`: the tree item background colour, an instance of :class:`wx.Colour`;
        :param `colBorder`: the tree item border colour, an instance of :class:`wx.Colour`;
        :param `font`: the tree item font, an instance of :class:`wx.Font`.
        """
        ...
    
    def SetTextColour(self, colText): # -> None:
        """
        Sets the text colour attribute.

        :param `colText`: an instance of :class:`wx.Colour`.
        """
        ...
    
    def SetBackgroundColour(self, colBack): # -> None:
        """
        Sets the item background colour attribute.

        :param `colBack`: an instance of :class:`wx.Colour`.
        """
        ...
    
    def SetBorderColour(self, colBorder): # -> None:
        """
        Sets the item border colour attribute.

        :param `colBack`: an instance of :class:`wx.Colour`.

        .. versionadded:: 0.9.6
        """
        ...
    
    def SetFont(self, font): # -> None:
        """
        Sets the item font attribute.

        :param `font`: an instance of :class:`wx.Font`.
        """
        ...
    
    def HasTextColour(self):
        """
        Returns whether the attribute has text colour.

        :return: ``True`` if the text colour attribute has been set, ``False`` otherwise.
        """
        ...
    
    def HasBackgroundColour(self):
        """
        Returns whether the attribute has background colour.

        :return: ``True`` if the background colour attribute has been set, ``False`` otherwise.
        """
        ...
    
    def HasBorderColour(self):
        """
        Returns whether the attribute has border colour.

        :return: ``True`` if the border colour attribute has been set, ``False`` otherwise.

        .. versionadded:: 0.9.6
        """
        ...
    
    def HasFont(self):
        """
        Returns whether the attribute has font.

        :return: ``True`` if the font attribute has been set, ``False`` otherwise.
        """
        ...
    
    def GetTextColour(self): # -> Colour:
        """
        Returns the attribute text colour.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def GetBackgroundColour(self): # -> Colour:
        """
        Returns the attribute background colour.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def GetBorderColour(self): # -> Colour:
        """
        Returns the attribute border colour.

        :return: An instance of :class:`wx.Colour`.

        .. versionadded:: 0.9.6
        """
        ...
    
    def GetFont(self): # -> Font:
        """
        Returns the attribute font.

        :return: An instance of :class:`wx.Font`.
        """
        ...
    


class CommandTreeEvent(wx.CommandEvent):
    """
    :class:`CommandTreeEvent` is a special subclassing of :class:`CommandEvent`.

    :note: Not all the accessors make sense for all the events, see the event description for every method in this class.
    """
    def __init__(self, evtType, evtId, item=..., evtKey=..., point=..., label=..., **kwargs) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param integer `evtType`: the event type;
        :param integer `evtId`: the event identifier;
        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `evtKey`: a character ordinal;
        :param `point`: an instance of :class:`wx.Point`;
        :param string `label`: a :class:`GenericTreeItem` text label.
        """
        ...
    
    def GetItem(self): # -> None:
        """
        Gets the item on which the operation was performed or the newly selected
        item for ``EVT_TREE_SEL_CHANGED`` and ``EVT_TREE_SEL_CHANGING`` events.

        :return: An instance of :class:`GenericTreeItem`.
        """
        ...
    
    def SetItem(self, item): # -> None:
        """
        Sets the item on which the operation was performed or the newly selected
        item for ``EVT_TREE_SEL_CHANGED`` and ``EVT_TREE_SEL_CHANGING`` events.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetOldItem(self):
        """
        Returns the previously selected item for ``EVT_TREE_SEL_CHANGED`` and
        ``EVT_TREE_SEL_CHANGING`` events.

        :return: An instance of :class:`GenericTreeItem`.
        """
        ...
    
    def SetOldItem(self, item): # -> None:
        """
        Returns the previously selected item for ``EVT_TREE_SEL_CHANGED`` and
        ``EVT_TREE_SEL_CHANGING`` events.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetPoint(self): # -> None:
        """
        Returns the point where the mouse was when the drag operation started
        (for ``EVT_TREE_BEGIN_DRAG`` and ``EVT_TREE_BEGIN_RDRAG`` events only)
        or the click position.

        :return: An instance of :class:`wx.Point`.
        """
        ...
    
    def SetPoint(self, pt): # -> None:
        """
        Sets the point where the mouse was when the drag operation started
        (for ``EVT_TREE_BEGIN_DRAG`` and ``EVT_TREE_BEGIN_RDRAG`` events only)
        or the click position.

        :param `pt`: an instance of :class:`wx.Point`.
        """
        ...
    
    def GetKeyEvent(self): # -> None:
        """
        Returns the keyboard data (for ``EVT_TREE_KEY_DOWN`` event only).

        :return: An instance of :class:`KeyEvent`.
        """
        ...
    
    def GetKeyCode(self):
        """
        Returns the virtual key code. ASCII events return normal ASCII values, while
        non-ASCII events return values such as ``wx.WXK_LEFT`` for the left cursor key.

        This method is for ``EVT_TREE_KEY_DOWN`` events only.

        :return: An integer representing the virtual key code.

        :note: In Unicode build, the returned value is meaningful only if the user entered
         a character that can be represented in current locale's default charset. You can
         obtain the corresponding Unicode character using `GetUnicodeKey`.
        """
        ...
    
    def SetKeyEvent(self, event): # -> None:
        """
        Sets the keyboard data (for ``EVT_TREE_KEY_DOWN`` event only).

        :param `event`: a :class:`CommandTreeEvent` event to be processed.
        """
        ...
    
    def GetLabel(self): # -> None:
        """
        Returns the item text (for ``EVT_TREE_BEGIN_LABEL_EDIT`` and
        ``EVT_TREE_END_LABEL_EDIT`` events only).

        :return: A string containing the item text.
        """
        ...
    
    def SetLabel(self, label): # -> None:
        """
        Sets the item text (for ``EVT_TREE_BEGIN_LABEL_EDIT`` and
        ``EVT_TREE_END_LABEL_EDIT`` events only).

        :param string `label`: a string containing the new item text.
        """
        ...
    
    def IsEditCancelled(self):
        """
        Returns the edit cancel flag (for ``EVT_TREE_BEGIN_LABEL_EDIT`` and
        ``EVT_TREE_END_LABEL_EDIT`` events only).

        :return: ``True`` is the item editing has been cancelled, ``False`` otherwise.
        """
        ...
    
    def SetEditCanceled(self, editCancelled): # -> None:
        """
        Sets the edit cancel flag (for ``EVT_TREE_BEGIN_LABEL_EDIT`` and
        ``EVT_TREE_END_LABEL_EDIT`` events only).

        :param bool `editCancelled`: ``True`` to cancel the editing, ``False`` otherwise.
        """
        ...
    
    def SetToolTip(self, toolTip): # -> None:
        """
        Sets the tooltip for the item (for ``EVT_TREE_ITEM_GETTOOLTIP`` events).

        :param string `tooltip`: a string representing the item tooltip.
        """
        ...
    
    def GetToolTip(self): # -> None:
        """
        Returns the tooltip for the item (for ``EVT_TREE_ITEM_GETTOOLTIP`` events).

        :return: A string containing the item tooltip.
        """
        ...
    


class TreeEvent(CommandTreeEvent):
    """
    :class:`CommandTreeEvent` is a special class for all events associated with tree controls.

    :note: Not all accessors make sense for all events, see the event descriptions below.
    """
    def __init__(self, evtType, evtId, item=..., evtKey=..., point=..., label=..., **kwargs) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param integer `evtType`: the event type;
        :param integer `evtId`: the event identifier;
        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `evtKey`: a character ordinal;
        :param `point`: an instance of :class:`wx.Point`;
        :param string `label`: a :class:`GenericTreeItem` text label.
        """
        ...
    
    def GetNotifyEvent(self): # -> NotifyEvent:
        """
        Returns the actual :class:`NotifyEvent`.

        :return: An instance of :class:`NotifyEvent`.
        """
        ...
    
    def IsAllowed(self):
        """
        Returns ``True`` if the change is allowed (:meth:`~TreeEvent.Veto` hasn't been called) or
        ``False`` otherwise (if it was).
        """
        ...
    
    def Veto(self): # -> None:
        """
        Prevents the change announced by this event from happening.

        :note: It is in general a good idea to notify the user about the reasons
         for vetoing the change because otherwise the applications behaviour (which
         just refuses to do what the user wants) might be quite surprising.
        """
        ...
    
    def Allow(self): # -> None:
        """
        This is the opposite of :meth:`~TreeEvent.Veto`: it explicitly allows the event to be processed.
        For most events it is not necessary to call this method as the events are
        allowed anyhow but some are forbidden by default (this will be mentioned
        in the corresponding event description).
        """
        ...
    


class TreeEditTimer(wx.Timer):
    """ Timer used for enabling in-place edit."""
    def __init__(self, owner) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `owner`: the :class:`Timer` owner (an instance of :class:`CustomTreeCtrl`).
        """
        ...
    
    def Notify(self): # -> None:
        """ The timer has expired, starts the item editing. """
        ...
    


class TreeTextCtrl(ExpandoTextCtrl):
    """
    Control used for in-place edit.

    This is a subclass of :class:`lib.expando.ExpandoTextCtrl` as :class:`CustomTreeCtrl` supports multiline
    text items.

    :note: To add a newline character in a multiline item, press ``Shift`` + ``Enter`` as the ``Enter``
     key alone is consumed by :class:`CustomTreeCtrl` to finish the editing and ``Ctrl`` + ``Enter`` is
     consumed by the platform for tab navigation.
    """
    def __init__(self, owner, item=...) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `owner`: the control parent (an instance of :class:`CustomTreeCtrl`);
        :param `item`: an instance of :class:`GenericTreeItem`.

        :raise: `Exception` when the item has an associated image but the parent
         :class:`CustomTreeCtrl` does not have a :class:`wx.ImageList` assigned.
        """
        ...
    
    def AcceptChanges(self): # -> bool:
        """
        Accepts/rejects the changes made by the user.

        :return: ``True`` if the changes to the item text have been accepted, ``False``
         if they have been rejected (i.e., vetoed by the user).
        """
        ...
    
    def Finish(self): # -> None:
        """ Finish editing. """
        ...
    
    def OnChar(self, event): # -> None:
        """
        Handles the ``wx.EVT_CHAR`` event for :class:`TreeTextCtrl`.

        :param `event`: a :class:`KeyEvent` event to be processed.
        """
        ...
    
    def OnKeyUp(self, event): # -> None:
        """
        Handles the ``wx.EVT_KEY_UP`` event for :class:`TreeTextCtrl`.

        :param `event`: a :class:`KeyEvent` event to be processed.
        """
        ...
    
    def OnKillFocus(self, event): # -> None:
        """
        Handles the ``wx.EVT_KILL_FOCUS`` event for :class:`TreeTextCtrl`.

        :param `event`: a :class:`FocusEvent` event to be processed.
        """
        ...
    
    def StopEditing(self): # -> None:
        """ Suddenly stops the editing. """
        ...
    
    def item(self): # -> None:
        """
        Returns the item currently edited.

        :return: An instance of :class:`GenericTreeItem`.
        """
        ...
    


class TreeFindTimer(wx.Timer):
    """
    Timer used to clear the :class:`CustomTreeCtrl` `_findPrefix` attribute if no
    key was pressed for a sufficiently long time.
    """
    def __init__(self, owner) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `owner`: the :class:`Timer` owner (an instance of :class:`CustomTreeCtrl`).
        """
        ...
    
    def Notify(self): # -> None:
        """ The timer has expired, clear the `_findPrefix` attribute in :class:`CustomTreeCtrl`. """
        ...
    


class GenericTreeItem:
    """
    This class holds all the information and methods for every single item in
    :class:`CustomTreeCtrl`. This is a generic implementation of :class:`TreeItem`.
    """
    def __init__(self, parent, text=..., ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...) -> None:
        """
        Default class constructor.
        For internal use: do not call it in your code!

        :param `parent`: the tree item parent, an instance of :class:`GenericTreeItem` (may
         be ``None`` for root items);
        :param string `text`: the tree item text;
        :param integer `ct_type`: the tree item kind. May be one of the following integers:

         =============== =========================================
         `ct_type` Value Description
         =============== =========================================
                0        A normal item
                1        A checkbox-like item
                2        A radiobutton-type item
         =============== =========================================

        :param `wnd`: if not ``None``, a non-toplevel window to be displayed next to
         the item, an instance of :class:`wx.Window`;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item;
        :param bool `separator`: ``True`` if the item is a separator, ``False`` otherwise.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :note: Regarding radiobutton-type items (with `ct_type` = 2), the following
         approach is used:

         - All peer-nodes that are radiobuttons will be mutually exclusive. In other words,
           only one of a set of radiobuttons that share a common parent can be checked at
           once. If a radiobutton node becomes checked, then all of its peer radiobuttons
           must be unchecked.
         - If a radiobutton node becomes unchecked, then all of its child nodes will become
           inactive.


        :note: Separator items should not have children, labels, data or an associated window.
         Other issues/features associated to separator items:

         - You can change the color of individual separators by using :meth:`CustomTreeCtrl.SetItemTextColour() <customtreectrl.CustomTreeCtrl.SetItemTextColour>`,
           or you can use :meth:`CustomTreeCtrl.SetSeparatorColour() <customtreectrl.CustomTreeCtrl.SetSeparatorColour>` to change the color of all
           separators. The default separator colour is that returned by `SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)`;
         - Separators can be selected just like any other tree item;
         - Separators cannot have text;
         - Separators cannot have children;
         - Separators cannot be edited via the ``EVT_TREE_BEGIN_LABEL_EDIT`` event.

        """
        ...
    
    def IsOk(self): # -> Literal[True]:
        """
        Returns whether the item is ok or not.

        :note: This method always returns ``True``, it has been added for
         backward compatibility with the wxWidgets C++ implementation.
        """
        ...
    
    def IsSeparator(self): # -> bool:
        """
        Returns whether the item is meant to be an horizontal line separator or not.

        :return: ``True`` if this item is a separator, ``False`` otherwise.
        """
        ...
    
    def GetChildren(self): # -> list[Any]:
        """
        Returns the item's children.

        :return: A Python list containing instances of :class:`GenericTreeItem`, representing
         this item's children.
         
        :note: The returned value is a reference to the list of children
         used internally by the tree. It is advised not to change this list
         and to make a copy before calling other tree methods as they could
         change the contents of the list.
        """
        ...
    
    def GetText(self): # -> str:
        """
        Returns the item text.

        :return: A string containing the item text.
        """
        ...
    
    def GetImage(self, which=...): # -> int:
        """
        Returns the item image for a particular item state.

        :param integer `which`: can be one of the following bits:

         ================================= ========================
         Item State                        Description
         ================================= ========================
         ``TreeItemIcon_Normal``           To get the normal item image
         ``TreeItemIcon_Selected``         To get the selected item image (i.e. the image which is shown when the item is currently selected)
         ``TreeItemIcon_Expanded``         To get the expanded image (this only makes sense for items which have children - then this image is shown when the item is expanded and the normal image is shown when it is collapsed)
         ``TreeItemIcon_SelectedExpanded`` To get the selected expanded image (which is shown when an expanded item is currently selected)
         ================================= ========================

        :return: An integer index that can be used to retrieve the item image inside
         a :class:`wx.ImageList`.
        """
        ...
    
    def GetCheckedImage(self, which=...): # -> None:
        """
        Returns the item check image.

        :param integer `which`: can be one of the following bits:

         ================================= ========================
         Item State                        Description
         ================================= ========================
         ``TreeItemIcon_Checked``          To get the checkbox checked item image
         ``TreeItemIcon_NotChecked``       To get the checkbox unchecked item image
         ``TreeItemIcon_Undetermined``     To get the checkbox undetermined state item image
         ``TreeItemIcon_Flagged``          To get the radiobutton checked image
         ``TreeItemIcon_NotFlagged``       To get the radiobutton unchecked image
         ================================= ========================

        :return: An integer index that can be used to retrieve the item check image inside
         a :class:`wx.ImageList`.

        :note: This method is meaningful only for radio & check items.
        """
        ...
    
    def GetLeftImage(self): # -> int:
        """
        Returns the leftmost image associated to this item, i.e. the image on the
        leftmost part of the client area of :class:`CustomTreeCtrl`.

        :return: An integer index that can be used to retrieve the item leftmost image inside
         a :class:`wx.ImageList`.
        """
        ...
    
    def GetData(self): # -> None:
        """
        Returns the data associated to this item.

        :return: A Python object representing the item data, or ``None`` if no data
         has been assigned to this item.
        """
        ...
    
    def SetImage(self, image, which): # -> None:
        """
        Sets the item image.

        :param integer `image`: an index within the normal image list specifying the image to use;
        :param integer `which`: the image kind.

        :see: :meth:`~GenericTreeItem.GetImage` for a description of the `which` parameter.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemImage` instead to refresh the tree properly.
        """
        ...
    
    def SetLeftImage(self, image): # -> None:
        """
        Sets the item leftmost image, i.e. the image associated to the item on the leftmost
        part of the :class:`CustomTreeCtrl` client area.

        :param integer `image`: an index within the left image list specifying the image to
         use for the item in the leftmost part of the client area.
         
        :note: Call :meth:`CustomTreeCtrl.SetItemLeftImage` instead to refresh the tree properly.
        """
        ...
    
    def SetData(self, data): # -> None:
        """
        Sets the data associated to this item.

        :param object `data`: can be any Python object.
        """
        ...
    
    def SetHasPlus(self, has=...): # -> None:
        """
        Sets whether an item has the 'plus' button.

        :param bool `has`: ``True`` to set the 'plus' button on the item, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemHasChildren` instead to refresh the tree properly.
        """
        ...
    
    def SetBold(self, bold): # -> None:
        """
        Sets the item font bold.

        :parameter bool `bold`: ``True`` to have a bold font item, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemBold` instead to refresh the tree properly.
        """
        ...
    
    def SetItalic(self, italic): # -> None:
        """
        Sets the item font italic.

        :parameter bool `italic`: ``True`` to have an italic font item, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemItalic` instead to refresh the tree properly.
        """
        ...
    
    def GetX(self): # -> int:
        """ Returns the `x` position on an item, in logical coordinates. """
        ...
    
    def GetY(self): # -> int:
        """ Returns the `y` position on an item, in logical coordinates. """
        ...
    
    def SetX(self, x): # -> None:
        """
        Sets the `x` position on an item, in logical coordinates.

        :param integer `x`: an integer specifying the x position of the item.
        """
        ...
    
    def SetY(self, y): # -> None:
        """
        Sets the `y` position on an item, in logical coordinates.

        :param integer `y`: an integer specifying the y position of the item.
        """
        ...
    
    def GetHeight(self): # -> int:
        """ Returns the height of the item, in pixels.

        This will be 0 when the item is first created and always 0 for hidden
        items. It is updated when the item is calculated.
        """
        ...
    
    def GetWidth(self): # -> int:
        """ Returns the width of the item's contents, in pixels.

        This is the width of the item's text plus the widths of the item's
        image, checkbox, and window (if they exist).
        A separator's width is the width of the entire client area.
        """
        ...
    
    def SetHeight(self, h): # -> None:
        """
        Sets the item's height. Used internally.

        :param integer `h`: an integer specifying the item's height, in pixels.
        """
        ...
    
    def SetWidth(self, w): # -> None:
        """
        Sets the item's width. Used internally.

        :param integer `w`: an integer specifying the item's width, in pixels.
        """
        ...
    
    def SetWindow(self, wnd, on_the_right=...): # -> None:
        """
        Sets the window associated to the item. Internal use only.

        :param `wnd`: a non-toplevel window to be displayed next to the item, any
         subclass of :class:`wx.Window`.

        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image. New in wxPython 4.0.4.

        :raise: `Exception` if the input `item` is a separator and `wnd` is not ``None``.
        
        :note: Always use :meth:`CustomTreeCtrl.SetItemWindow` instead to update the tree properly.
        """
        ...
    
    def GetWindow(self): # -> None:
        """
        Returns the window associated to the item (if any).

        :return: An instance of any :class:`wx.Window` derived class, excluding top-level windows.
        """
        ...
    
    def DeleteWindow(self): # -> None:
        """ Deletes the window associated to the item (if any). Internal use only.

        :note: Always use :meth:`CustomTreeCtrl.DeleteItemWindow` instead to update the tree properly.
        """
        ...
    
    def GetWindowEnabled(self): # -> bool:
        """
        Returns whether the associated window is enabled or not.

        :return: ``True`` if the associated window is enabled, ``False`` if it is disabled.

        :raise: `Exception` when the item has no associated window.
        """
        ...
    
    def SetWindowEnabled(self, enable=...): # -> None:
        """
        Sets whether the associated window is enabled or not.

        :param bool `enable`: ``True`` to enable the associated window, ``False`` to disable it.

        :raise: `Exception` when the item has no associated window.
        """
        ...
    
    def GetWindowSize(self):
        """ Returns the associated window size. """
        ...
    
    def OnSetFocus(self, event): # -> None:
        """
        Handles the ``wx.EVT_SET_FOCUS`` event for the window associated with the item.

        :param `event`: a :class:`FocusEvent` event to be processed.
        """
        ...
    
    def OnTreeItemCollapsing(self, event): # -> None:
        """
        Handles the ``wx.EVT_TREE_ITEM_COLLAPSING`` event for the window associated with the item.

        :param `event`: a :class:`GenericTreeItem` to be processed.
        """
        ...
    
    def GetType(self): # -> int:
        """
        Returns the item type.

        :see: :meth:`~GenericTreeItem.SetType` and :meth:`~GenericTreeItem.__init__` for a description of valid item types.
        """
        ...
    
    def SetType(self, ct_type): # -> None:
        """
        Sets the item type.

        :param integer `ct_type`: may be one of the following integers:

         =============== =========================================
         `ct_type` Value Description
         =============== =========================================
                0        A normal item
                1        A checkbox-like item
                2        A radiobutton-type item
         =============== =========================================

        :note: Regarding radiobutton-type items (with `ct_type` = 2), the following
         approach is used:

         - All peer-nodes that are radiobuttons will be mutually exclusive. In other words,
           only one of a set of radiobuttons that share a common parent can be checked at
           once. If a radiobutton node becomes checked, then all of its peer radiobuttons
           must be unchecked.
         - If a radiobutton node becomes unchecked, then all of its child nodes will become
           inactive.
           
        :note: Call :meth:`CustomTreeCtrl.SetItemType` instead to refresh the tree properly.
        """
        ...
    
    def SetHyperText(self, hyper=...): # -> None:
        """
        Sets whether the item is hypertext or not.

        :param bool `hyper`: ``True`` to set hypertext behaviour, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemHyperText` instead to refresh the tree properly.
        """
        ...
    
    def SetVisited(self, visited=...): # -> None:
        """
        Sets whether an hypertext item was visited or not.

        :param bool `visited`: ``True`` to set a hypertext item as visited, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemVisited` instead to refresh the tree properly.
        """
        ...
    
    def GetVisited(self): # -> bool:
        """ Returns whether an hypertext item was visited or not. """
        ...
    
    def IsHyperText(self): # -> bool:
        """ Returns whether the item is hypetext or not. """
        ...
    
    def IsHidden(self): # -> bool:
        """ Returns whether the item is hidden or not. """
        ...
    
    def Hide(self, hide): # -> None:
        """
        Hides/shows the item. Internal use only.

        :param `hide`: ``True`` to hide the item, ``False`` to show it.
        
        :note: Always use :meth:`CustomTreeCtrl.HideItem` instead to update the tree properly.
        """
        ...
    
    def GetParent(self): # -> Any:
        """
        Gets the item parent (another instance of :class:`GenericTreeItem` or ``None`` for
        root items.

        :return: An instance of :class:`GenericTreeItem` or ``None`` for root items.
        """
        ...
    
    def Insert(self, child, index): # -> None:
        """
        Inserts an item in the item children list for this item.

        :param `child`: an instance of :class:`GenericTreeItem`;
        :param integer `index`: the index at which we should insert the new child.
        """
        ...
    
    def Expand(self): # -> None:
        """ Expands the item. Internal use only.

        :note: Always use :meth:`CustomTreeCtrl.Expand` instead to update the tree properly and send events.
        """
        ...
    
    def Collapse(self): # -> None:
        """ Collapses the item. Internal use only.

        :note: Always use :meth:`CustomTreeCtrl.Collapse` instead to update the tree properly and send events.
        """
        ...
    
    def SetHilight(self, set=...): # -> None:
        """
        Sets the item focus/unfocus.

        :param bool `set`: ``True`` to set the focus to the item, ``False`` otherwise.
        
        :note: Call :meth:`CustomTreeCtrl.SelectItem` instead to update the tree properly and send events.
        """
        ...
    
    def HasChildren(self): # -> bool:
        """
        Returns whether the item has children or not.

        :return: ``True`` if the item has children, ``False`` otherwise.
        """
        ...
    
    def IsSelected(self): # -> bool:
        """
        Returns whether the item is selected or not.

        :return: ``True`` if the item is selected, ``False`` otherwise.
        """
        ...
    
    def IsExpanded(self): # -> bool:
        """
        Returns whether the item is expanded or not. Hidden items always return False.

        :return: ``True`` if the item is expanded, ``False`` if it is collapsed.
        """
        ...
    
    def GetValue(self): # -> bool | int:
        """
        Returns whether the item is checked or not.

        :note: This is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def Get3StateValue(self): # -> bool | int:
        """
        Gets the state of a 3-state checkbox item.

        :return: ``wx.CHK_UNCHECKED`` when the checkbox is unchecked, ``wx.CHK_CHECKED``
         when it is checked and ``wx.CHK_UNDETERMINED`` when it's in the undetermined
         state.

        :raise: `Exception` when the item is not a 3-state checkbox item.

        :note: This method raises an exception when the function is used with a 2-state
         checkbox item.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def Is3State(self): # -> bool:
        """
        Returns whether or not the checkbox item is a 3-state checkbox.

        :return: ``True`` if this checkbox is a 3-state checkbox, ``False`` if it's a
         2-state checkbox item.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def Set3StateValue(self, state): # -> None:
        """
        Sets the checkbox item to the given `state`.

        :param integer `state`: can be one of: ``wx.CHK_UNCHECKED`` (check is off), ``wx.CHK_CHECKED``
         (check is on) or ``wx.CHK_UNDETERMINED`` (check is mixed).

        :raise: `Exception` when the item is not a 3-state checkbox item.

        :note: This method raises an exception when the checkbox item is a 2-state checkbox
         and setting the state to ``wx.CHK_UNDETERMINED``.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def Set3State(self, allow): # -> bool:
        """
        Sets whether the item has a 3-state value checkbox assigned to it or not.

        :param bool `allow`: ``True`` to set an item as a 3-state checkbox, ``False`` to set it
         to a 2-state checkbox.

        :return: ``True`` if the change was successful, ``False`` otherwise.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def IsChecked(self): # -> bool | int:
        """
        This is just a maybe more readable synonym for :meth:`~GenericTreeItem.GetValue`.
        Returns whether the item is checked or not.

        :note: This is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def Check(self, checked=...): # -> None:
        """
        Checks/unchecks an item. Internal use only.

        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.

        :note: This is meaningful only for checkbox-like and radiobutton-like items.
        
        :note: Always use :meth:`CustomTreeCtrl.CheckItem` instead to update the tree properly and send events.
        """
        ...
    
    def HasPlus(self): # -> bool:
        """
        Returns whether the item has the plus button or not.

        :return: ``True`` if the item has a 'plus' mark, ``False`` otherwise.
        """
        ...
    
    def IsBold(self): # -> bool:
        """
        Returns whether the item font is bold or not.

        :return: ``True`` if the item has bold text, ``False`` otherwise.
        """
        ...
    
    def IsItalic(self): # -> bool:
        """
        Returns whether the item font is italic or not.

        :return: ``True`` if the item has italic text, ``False`` otherwise.
        """
        ...
    
    def Enable(self, enable=...): # -> None:
        """
        Enables/disables the item.

        :param bool `enable`: ``True`` to enable the item, ``False`` to disable it.
        
        :note: Call :meth:`CustomTreeCtrl.EnableItem` instead to update the tree properly.
        """
        ...
    
    def IsEnabled(self): # -> bool:
        """
        Returns whether the item is enabled or not. Hidden items always return False.

        :return: ``True`` if the item is enabled, ``False`` if it is disabled.
        """
        ...
    
    def GetAttributes(self): # -> TreeItemAttr | None:
        """
        Returns the item attributes (font, colours, etc...).

        :return: An instance of :class:`TreeItemAttr`.
        """
        ...
    
    def Attr(self): # -> TreeItemAttr:
        """
        Creates a new attribute (font, colours, etc...) for this item.

        :return: An instance of :class:`TreeItemAttr`.
        """
        ...
    
    def SetAttributes(self, attr): # -> None:
        """
        Sets the item attributes (font, colours, etc...).

        :param `attr`: an instance of :class:`TreeItemAttr`.
        """
        ...
    
    def AssignAttributes(self, attr): # -> None:
        """
        Assigns the item attributes (font, colours, etc...) for this item.

        :param `attr`: an instance of :class:`TreeItemAttr`.
        """
        ...
    
    def DeleteChildren(self, tree): # -> None:
        """
        Deletes the item children. Internal use only.

        :param `tree`: the main :class:`CustomTreeCtrl` instance.
        
        :note: Always use :meth:`CustomTreeCtrl.DeleteChildren` instead to update the tree properly.
        """
        ...
    
    def SetText(self, text): # -> None:
        """
        Sets the item text.

        :param string `text`: the new item label.

        :raise: `Exception` if the item is a separator.
        
        :note: Call :meth:`CustomTreeCtrl.SetItemText` to refresh the tree properly.
        """
        ...
    
    def GetChildrenCount(self, recursively=...): # -> int:
        """
        Gets the number of children of this item.

        :param bool `recursively`: if ``True``, returns the total number of descendants,
         otherwise only one level of children is counted.
        """
        ...
    
    def GetSize(self, x, y, theButton): # -> tuple[int | Any, Any]:
        """
        Returns the item size.

        :param integer `x`: the current item's x position;
        :param integer `y`: the current item's y position;
        :param `theButton`: an instance of the main :class:`CustomTreeCtrl`.

        :return: A tuple of (`x`, `y`) dimensions, in pixels, representing the
         item's width and height.
        """
        ...
    
    def HitTest(self, point, theCtrl, flags=..., level=...):
        """
        :meth:`~GenericTreeItem.HitTest` method for an item. Called from the main window :meth:`CustomTreeCtrl.HitTest() <customtreectrl.CustomTreeCtrl.HitTest>`.

        :param `point`: the point to test for the hit (an instance of :class:`wx.Point`);
        :param `theCtrl`: the main :class:`CustomTreeCtrl` tree;
        :param integer `flags`: a bitlist of hit locations;
        :param integer `level`: the item's level inside the tree hierarchy.

        :see: :meth:`CustomTreeCtrl.HitTest() <customtreectrl.CustomTreeCtrl.HitTest>` method for the flags explanation.

        :return: A 2-tuple of (item, flags). The item may be ``None``.        
        """
        ...
    
    def GetCurrentImage(self): # -> int:
        """
        Returns the current item image.

        :return: An integer index that can be used to retrieve the item image inside
         a :class:`wx.ImageList`.
        """
        ...
    
    def GetCurrentCheckedImage(self): # -> None:
        """
        Returns the current item check image.

        :return: An integer index that can be used to retrieve the item check image inside
         a :class:`wx.ImageList`.
        """
        ...
    


class CustomTreeCtrl(wx.ScrolledWindow):
    """
    :class:`CustomTreeCtrl` is a class that mimics the behaviour of :class:`TreeCtrl`, with almost the
    same base functionalities plus some more enhancements. This class does not rely on
    the native control, as it is a full owner-drawn tree control.
    """
    def __init__(self, parent, id=..., pos=..., size=..., style=..., agwStyle=..., validator=..., name=...) -> None:
        """
        Default class constructor.

        :param wx.Window `parent`: parent window. Must not be ``None``;
        :param integer `id`: window identifier. A value of -1 indicates a default value;
        :param `pos`: the control position. A value of (-1, -1) indicates a default position,
         chosen by either the windowing system or wxPython, depending on platform;
        :type `pos`: tuple or :class:`wx.Point`
        :param `size`: the control size. A value of (-1, -1) indicates a default size,
         chosen by either the windowing system or wxPython, depending on platform;
        :type `size`: tuple or :class:`wx.Size`
        :param integer `style`: the underlying :class:`ScrolledWindow` style;
        :param integer `agwStyle`: can be a combination of various bits. See
         :mod:`~wx.lib.agw.customtreectrl` for a full list of flags.
        :param wx.Validator `validator`: window validator;
        :param string `name`: window name.
        """
        ...
    
    def AcceptsFocus(self): # -> Literal[True]:
        """
        Can this window be given focus by mouse click?

        :note: This method always returns ``True`` as we always accept focus from
         mouse click.

        :note: Overridden from :class:`ScrolledWindow`.
        """
        ...
    
    def OnDestroy(self, event): # -> None:
        """
        Handles the ``wx.EVT_WINDOW_DESTROY`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`wx.WindowDestroyEvent` event to be processed.
        """
        ...
    
    def GetControlBmp(self, checkbox=..., checked=..., enabled=..., x=..., y=...): # -> Bitmap:
        """
        Returns a native looking checkbox or radio button bitmap.

        :param bool `checkbox`: ``True`` to get a checkbox image, ``False`` for a radiobutton one;
        :param bool `checked`: ``True`` if the control is marked, ``False`` if it is not;
        :param bool `enabled`: ``True`` if the control is enabled, ``False`` if it is not;
        :param integer `x`: the width of the bitmap;
        :param integer `y`: the height of the bitmap.

        :return: An instance of :class:`wx.Bitmap`, representing a native looking checkbox or radiobutton.
        """
        ...
    
    def GetCount(self): # -> int:
        """ Returns the global number of items in the tree. """
        ...
    
    def GetIndent(self): # -> int:
        """ Returns the item indentation, in pixels. """
        ...
    
    def GetSpacing(self): # -> int:
        """ Returns the spacing between the start and the text, in pixels. """
        ...
    
    def GetRootItem(self): # -> GenericTreeItem | None:
        """ Returns the root item, an instance of :class:`GenericTreeItem`. """
        ...
    
    def GetSelection(self): # -> GenericTreeItem | None:
        """
        Returns the current selected item (i.e. focused item).

        :return: An instance of :class:`GenericTreeItem`.

        :note: Similar to GetFocusedItem of wx.TreeCtrl. Use
         :meth:`~CustomTreeCtrl.GetSelections` for obtaining all items
         selected in multiple-selection trees (i.e. TR_MULTIPLE flag set).
        """
        ...
    
    GetFocusedItem = ...
    def ToggleItemSelection(self, item): # -> None:
        """
        Toggles the item selection.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def EnableChildren(self, item, enable=...): # -> None:
        """
        Enables/disables the item children.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `enable`: ``True`` to enable the children, ``False`` to disable them.

        :note: This method is used internally.
        """
        ...
    
    def EnableItem(self, item, enable=..., torefresh=...): # -> None:
        """
        Enables/disables an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `enable`: ``True`` to enable the item, ``False`` to disable it;
        :param bool `torefresh`: whether to redraw the item or not.
        """
        ...
    
    def IsItemEnabled(self, item):
        """
        Returns whether an item is enabled or disabled.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def SetDisabledColour(self, colour): # -> None:
        """
        Sets the colour for items in a disabled state.

        :param `colour`: a valid :class:`wx.Colour` instance.
        """
        ...
    
    def GetDisabledColour(self): # -> Colour:
        """
        Returns the colour for items in a disabled state.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def IsItemChecked(self, item):
        """
        Returns whether an item is checked or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item is in a 'checked' state, ``False`` otherwise.

        :note: This method is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def GetItem3StateValue(self, item):
        """
        Gets the state of a 3-state checkbox item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``wx.CHK_UNCHECKED`` when the checkbox is unchecked, ``wx.CHK_CHECKED``
         when it is checked and ``wx.CHK_UNDETERMINED`` when it's in the undetermined
         state.

        :note: This method raises an exception when the function is used with a 2-state
         checkbox item.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def IsItem3State(self, item):
        """
        Returns whether or not the checkbox item is a 3-state checkbox.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if this checkbox is a 3-state checkbox, ``False`` if it's a
         2-state checkbox item.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def SetItem3StateValue(self, item, state): # -> None:
        """
        Sets the checkbox item to the given `state`.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `state`: can be one of: ``wx.CHK_UNCHECKED`` (check is off), ``wx.CHK_CHECKED``
         (check is on) or ``wx.CHK_UNDETERMINED`` (check is mixed).

        :note: This method raises an exception when the checkbox item is a 2-state checkbox
         and setting the state to ``wx.CHK_UNDETERMINED``.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def SetItem3State(self, item, allow):
        """
        Sets whether the item has a 3-state value checkbox assigned to it or not.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `allow`: ``True`` to set an item as a 3-state checkbox, ``False`` to set it
         to a 2-state checkbox.

        :return: ``True`` if the change was successful, ``False`` otherwise.

        :note: This method is meaningful only for checkbox-like items.
        """
        ...
    
    def CheckItem2(self, item, checked=..., torefresh=...): # -> None:
        """
        Used internally to avoid ``EVT_TREE_ITEM_CHECKED`` events.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it;
        :param bool `torefresh`: whether to redraw the item or not.
        """
        ...
    
    def UnCheckRadioParent(self, item, checked=...): # -> bool:
        """
        Used internally to handle radio node parent correctly.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.
        """
        ...
    
    def CheckItem(self, item, checked=...): # -> None:
        """
        Actually checks/uncheks an item, sending (eventually) the two
        events ``EVT_TREE_ITEM_CHECKING`` and ``EVT_TREE_ITEM_CHECKED``.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: for a radiobutton-type item, ``True`` to check it, ``False``
         to uncheck it. For a checkbox-type item, it can be one of ``wx.CHK_UNCHECKED``
         when the checkbox is unchecked, ``wx.CHK_CHECKED`` when it is checked and
         ``wx.CHK_UNDETERMINED`` when it's in the undetermined state.
        """
        ...
    
    def AutoToggleChild(self, item): # -> None:
        """
        Transverses the tree and toggles the items.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :note: This method is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def AutoCheckChild(self, item, checked): # -> None:
        """
        Transverses the tree and checks/unchecks the items.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.

        :note: This method is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def AutoCheckParent(self, item, checked): # -> None:
        """
        Traverses up the tree and checks/unchecks parent items.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.

        :note: This method is meaningful only for checkbox-like and radiobutton-like items.
        """
        ...
    
    def CheckChilds(self, item, checked=...): # -> None:
        """
        Programmatically check/uncheck item children.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.

        :note: This method is meaningful only for checkbox-like and radiobutton-like items.

        :note: This method does not generate ``EVT_TREE_ITEM_CHECKING`` and
         ``EVT_TREE_ITEM_CHECKED`` events.
        """
        ...
    
    def CheckSameLevel(self, item, checked=...): # -> None:
        """
        Uncheck radio items which are on the same level of the checked one.
        Used internally.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `checked`: ``True`` to check an item, ``False`` to uncheck it.

        :note: This method is meaningful only for radiobutton-like items.
        """
        ...
    
    def EditLabel(self, item): # -> None:
        """
        Starts editing an item label.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def ShouldInheritColours(self): # -> Literal[False]:
        """
        Return ``True`` from here to allow the colours of this window to be
        changed by `InheritAttributes`, returning ``False`` forbids inheriting them
        from the parent window.

        The base class version returns ``False``, but this method is overridden in
        :class:`wx.Control` where it returns ``True``.

        :class:`CustomTreeCtrl` does not inherit colours from anyone.
        """
        ...
    
    def SetIndent(self, indent): # -> None:
        """
        Sets the indentation for :class:`CustomTreeCtrl`.

        :param integer `indent`: an integer representing the indentation for the items in the tree.
        """
        ...
    
    def SetSpacing(self, spacing): # -> None:
        """
        Sets the spacing between items in :class:`CustomTreeCtrl`.

        :param integer `spacing`: an integer representing the spacing between items in the tree.
        """
        ...
    
    def HasChildren(self, item): # -> bool:
        """
        Returns whether an item has children or not.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetChildrenCount(self, item, recursively=...):
        """
        Returns the item children count.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `recursively`: if ``True``, returns the total number of descendants,
         otherwise only one level of children is counted.
        """
        ...
    
    def HasAGWFlag(self, flag): # -> bool:
        """
        Returns ``True`` if :class:`CustomTreeCtrl` has the `flag` bit set.

        :param integer `flag`: any possible window style for :class:`CustomTreeCtrl`.

        :see: The :meth:`~CustomTreeCtrl.__init__` method for the `flag` parameter description.
        """
        ...
    
    def SetAGWWindowStyleFlag(self, agwStyle): # -> None:
        """
        Sets the :class:`CustomTreeCtrl` window style.

        :param integer `agwStyle`: the new :class:`CustomTreeCtrl` window style.

        :see: The :meth:`~CustomTreeCtrl.__init__` method for the `agwStyle` parameter description.
        """
        ...
    
    def GetAGWWindowStyleFlag(self): # -> int:
        """
        Returns the :class:`CustomTreeCtrl` style.

        :see: The :meth:`~CustomTreeCtrl.__init__` method for a list of possible style flags.
        """
        ...
    
    def HasButtons(self): # -> bool:
        """
        Returns whether :class:`CustomTreeCtrl` has the ``TR_HAS_BUTTONS`` flag set.

        :return: ``True`` if :class:`CustomTreeCtrl` has the ``TR_HAS_BUTTONS`` flag set,
         ``False`` otherwise.
        """
        ...
    
    def GetItemText(self, item):
        """
        Returns the item text.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetItemSize(self, item):
        """
        Returns the horizontal space available in :class:`CustomTreeCtrl`, in pixels, to draw this item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        .. versionadded:: 0.9.3
        """
        ...
    
    def GetItemImage(self, item, which=...):
        """
        Returns the item image.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `which`: can be one of the following bits:

         ================================= ========================
         Item State                        Description
         ================================= ========================
         ``TreeItemIcon_Normal``           To get the normal item image
         ``TreeItemIcon_Selected``         To get the selected item image (i.e. the image which is shown when the item is currently selected)
         ``TreeItemIcon_Expanded``         To get the expanded image (this only makes sense for items which have children - then this image is shown when the item is expanded and the normal image is shown when it is collapsed)
         ``TreeItemIcon_SelectedExpanded`` To get the selected expanded image (which is shown when an expanded item is currently selected)
         ================================= ========================

        :return: An integer index that can be used to retrieve the item image inside
         a :class:`wx.ImageList`.
        """
        ...
    
    def GetItemLeftImage(self, item):
        """
        Returns the item leftmost image, i.e. the image associated to the item on the leftmost
        part of the :class:`CustomTreeCtrl` client area.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An integer index that can be used to retrieve the item leftmost image inside
         a :class:`wx.ImageList`.
        """
        ...
    
    def GetPyData(self, item):
        """
        Returns the data associated to an item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: A Python object representing the item data, or ``None`` if no data
         has been assigned to this item.
        """
        ...
    
    GetItemPyData = ...
    GetItemData = ...
    def GetItemTextColour(self, item):
        """
        Returns the item text colour or separator horizontal line colour.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def GetItemBackgroundColour(self, item):
        """
        Returns the item background colour.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def GetItemFont(self, item): # -> Font:
        """
        Returns the item font.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`wx.Font`.
        """
        ...
    
    def IsItemHyperText(self, item):
        """
        Returns whether an item is hypertext or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item is hypertext-like, ``False`` otherwise.
        """
        ...
    
    def SetItemText(self, item, text): # -> None:
        """
        Sets the item text.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param string `text`: the new item label.

        :raise: `Exception` if the input `item` is a separator.
        """
        ...
    
    def SetItemImage(self, item, image, which=...): # -> None:
        """
        Sets the item image, depending on the item state.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in the state specified by the `which` parameter;
        :param integer `which`: the item state.

        :see: :meth:`~CustomTreeCtrl.GetItemImage` for an explanation of the `which` parameter.
        """
        ...
    
    def SetItemLeftImage(self, item, image): # -> None:
        """
        Sets the item leftmost image, i.e. the image associated to the item on the leftmost
        part of the :class:`CustomTreeCtrl` client area.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `image`: an index within the left image list specifying the image to
         use for the item in the leftmost part of the client area.
        """
        ...
    
    def SetPyData(self, item, data): # -> None:
        """
        Sets the data associated to an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param object `data`: can be any Python object.
        """
        ...
    
    SetItemPyData = ...
    SetItemData = ...
    def SetItemHasChildren(self, item, has=...): # -> None:
        """
        Forces the appearance/disappearance of the button next to the item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `has`: ``True`` to have a button next to an item, ``False`` otherwise.
        """
        ...
    
    def SetItemBold(self, item, bold=...): # -> None:
        """
        Sets the item font as bold/unbold.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `bold`: ``True`` to set the item font as bold, ``False`` otherwise.
        """
        ...
    
    def SetItemItalic(self, item, italic=...): # -> None:
        """
        Sets the item font as italic/non-italic.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `italic`: ``True`` to set the item font as italic, ``False`` otherwise.
        """
        ...
    
    def SetItemDropHighlight(self, item, highlight=...): # -> None:
        """
        Gives the item the visual feedback for drag and drop operations.
        This is useful when something is dragged from outside the :class:`CustomTreeCtrl`.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `highlight`: ``True`` to highlight the dragged items, ``False`` otherwise.
        """
        ...
    
    def SetItemTextColour(self, item, colour): # -> None:
        """
        Sets the item text colour or separator horizontal line colour.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `colour`: a valid :class:`wx.Colour` instance.
        """
        ...
    
    def SetItemBackgroundColour(self, item, colour): # -> None:
        """
        Sets the item background colour.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `colour`: a valid :class:`wx.Colour` instance.
        """
        ...
    
    def SetItemHyperText(self, item, hyper=...): # -> None:
        """
        Sets whether the item is hypertext or not.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `hyper`: ``True`` to have an item with hypertext behaviour, ``False`` otherwise.
        """
        ...
    
    def SetItemFont(self, item, font): # -> None:
        """
        Sets the item font.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `font`: a valid :class:`wx.Font` instance.
        """
        ...
    
    def SetFont(self, font): # -> Literal[True]:
        """
        Sets the :class:`CustomTreeCtrl` font.

        :param `font`: a valid :class:`wx.Font` instance.

        :note: Overridden from :class:`ScrolledWindow`.
        """
        ...
    
    def GetHyperTextFont(self): # -> Font:
        """
        Returns the font used to render hypertext items.

        :return: An instance of :class:`wx.Font`.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def SetHyperTextFont(self, font): # -> None:
        """
        Sets the font used to render hypertext items.

        :param `font`: a valid :class:`wx.Font` instance.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def SetHyperTextNewColour(self, colour): # -> None:
        """
        Sets the colour used to render a non-visited hypertext item.

        :param `colour`: a valid :class:`wx.Colour` instance.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def GetHyperTextNewColour(self): # -> Colour:
        """
        Returns the colour used to render a non-visited hypertext item.

        :return: An instance of :class:`wx.Colour`.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def SetHyperTextVisitedColour(self, colour): # -> None:
        """
        Sets the colour used to render a visited hypertext item.

        :param `colour`: a valid :class:`wx.Colour` instance.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def GetHyperTextVisitedColour(self): # -> Colour:
        """
        Returns the colour used to render a visited hypertext item.

        :return: An instance of :class:`wx.Colour`.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def SetItemVisited(self, item, visited=...): # -> None:
        """
        Sets whether an hypertext item was visited.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `visited`: ``True`` to mark an hypertext item as visited, ``False`` otherwise.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def GetItemVisited(self, item):
        """
        Returns whether an hypertext item was visited.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the hypertext item has been visited, ``False`` otherwise.

        :note: This method is meaningful only for hypertext-like items.
        """
        ...
    
    def SetHilightFocusColour(self, colour): # -> None:
        """
        Sets the colour used to highlight focused selected items.

        :param `colour`: a valid :class:`wx.Colour` instance.

        :note: This is applied only if gradient and Windows Vista selection
         styles are disabled.
        """
        ...
    
    def SetHilightNonFocusColour(self, colour): # -> None:
        """
        Sets the colour used to highlight unfocused selected items.

        :param `colour`: a valid :class:`wx.Colour` instance.

        :note: This is applied only if gradient and Windows Vista selection
         styles are disabled.
        """
        ...
    
    def GetHilightFocusColour(self):
        """
        Returns the colour used to highlight focused selected items.

        :return: An instance of :class:`wx.Colour`.

        :note: This is used only if gradient and Windows Vista selection
         styles are disabled.
        """
        ...
    
    def GetHilightNonFocusColour(self):
        """
        Returns the colour used to highlight unfocused selected items.

        :return: An instance of :class:`wx.Colour`.

        :note: This is used only if gradient and Windows Vista selection
         styles are disabled.
        """
        ...
    
    def SetFirstGradientColour(self, colour=...): # -> None:
        """
        Sets the first gradient colour for gradient-style selections.

        :param `colour`: if not ``None``, a valid :class:`wx.Colour` instance. Otherwise,
         the colour is taken from the system value ``wx.SYS_COLOUR_HIGHLIGHT``.
        """
        ...
    
    def SetSecondGradientColour(self, colour=...): # -> None:
        """
        Sets the second gradient colour for gradient-style selections.

        :param `colour`: if not ``None``, a valid :class:`wx.Colour` instance. Otherwise,
         the colour generated is a slightly darker version of the :class:`CustomTreeCtrl`
         background colour.
        """
        ...
    
    def GetFirstGradientColour(self):
        """
        Returns the first gradient colour for gradient-style selections.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def GetSecondGradientColour(self): # -> Colour:
        """
        Returns the second gradient colour for gradient-style selections.

        :return: An instance of :class:`wx.Colour`.
        """
        ...
    
    def EnableSelectionGradient(self, enable=...): # -> None:
        """
        Globally enables/disables drawing of gradient selections.

        :param bool `enable`: ``True`` to enable gradient-style selections, ``False``
         to disable it.

        :note: Calling this method disables any Vista-style selection previously
         enabled.
        """
        ...
    
    def SetGradientStyle(self, vertical=...): # -> None:
        """
        Sets the gradient style for gradient-style selections.

        :param integer `vertical`: ``0`` for horizontal gradient-style selections, ``1`` for vertical
         gradient-style selections.
        """
        ...
    
    def GetGradientStyle(self): # -> int:
        """
        Returns the gradient style for gradient-style selections.

        :return: ``0`` for horizontal gradient-style selections, ``1`` for vertical
         gradient-style selections.
        """
        ...
    
    def EnableSelectionVista(self, enable=...): # -> None:
        """
        Globally enables/disables drawing of Windows Vista selections.

        :param bool `enable`: ``True`` to enable Vista-style selections, ``False`` to
         disable it.

        :note: Calling this method disables any gradient-style selection previously
         enabled.
        """
        ...
    
    def SetBorderPen(self, pen): # -> None:
        """
        Sets the pen used to draw the selected item border.

        :param `pen`: an instance of :class:`wx.Pen`.

        :note: The border pen is not used if the Windows Vista selection style is applied.
        """
        ...
    
    def GetBorderPen(self): # -> Pen:
        """
        Returns the pen used to draw the selected item border.

        :return: An instance of :class:`wx.Pen`.

        :note: The border pen is not used if the Windows Vista selection style is applied.
        """
        ...
    
    def SetConnectionPen(self, pen): # -> None:
        """
        Sets the pen used to draw the connecting lines between items.

        :param `pen`: an instance of :class:`wx.Pen`.
        """
        ...
    
    def GetConnectionPen(self): # -> Pen:
        """
        Returns the pen used to draw the connecting lines between items.

        :return: An instance of :class:`wx.Pen`.
        """
        ...
    
    def SetBackgroundImage(self, image): # -> None:
        """
        Sets the :class:`CustomTreeCtrl` background image.

        :param `image`: if not ``None``, an instance of :class:`wx.Bitmap`.

        :note: At present, the background image can only be used in "tile" mode.

        .. todo:: Support background images also in stretch and centered modes.
        """
        ...
    
    def GetBackgroundImage(self): # -> None:
        """
        Returns the :class:`CustomTreeCtrl` background image (if any).

        :return: An instance of :class:`wx.Bitmap` if a background image is present, ``None`` otherwise.

        :note: At present, the background image can only be used in "tile" mode.

        .. todo:: Support background images also in stretch and centered modes.
        """
        ...
    
    def SetSeparatorColour(self, colour): # -> None:
        """
        Sets the pen colour for separator-type items.

        :param `colour`: a valid instance of :class:`wx.Colour`.
        """
        ...
    
    def GetSeparatorColour(self, colour):
        """
        Returns the pen colour for separator-type items.

        :return: An instance of :class:`wx.Colour` representing the separator pen colour.
        """
        ...
    
    def IsItemSeparator(self, item):
        """
        Returns whether an item is of separator type or not.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetItemWindow(self, item):
        """
        Returns the window associated to the item (if any).

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`wx.Window` if the item has an associated window, ``None`` otherwise.
        """
        ...
    
    def SetItemWindow(self, item, wnd, on_the_right=...): # -> None:
        """
        Sets the window for the given item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `wnd`: if not ``None``, a non-toplevel window to be displayed next to
         the item.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image. New in wxPython 4.0.4.

        :raise: `Exception` if the input `item` is a separator and `wnd` is not ``None``.
        """
        ...
    
    def DeleteItemWindow(self, item): # -> None:
        """
        Deletes the window associated to an item (if any).

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetItemWindowEnabled(self, item):
        """
        Returns whether the window associated to the item is enabled.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item has an associated window and this window is
         enabled, ``False`` in all other cases.
        """
        ...
    
    def SetItemWindowEnabled(self, item, enable=...): # -> None:
        """
        Enables/disables the window associated to the item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `enable`: ``True`` to enable the associated window, ``False`` to
         disable it.
        """
        ...
    
    def GetItemType(self, item):
        """
        Returns the item type.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An integer representing the item type.

        :see: :meth:`~CustomTreeCtrl.SetItemType` for a description of valid item types.
        """
        ...
    
    def SetItemType(self, item, ct_type): # -> None:
        """
        Sets the item type.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `ct_type`: may be one of the following integers:

         =============== =========================================
         `ct_type` Value Description
         =============== =========================================
                0        A normal item
                1        A checkbox-like item
                2        A radiobutton-type item
         =============== =========================================

        :note: Regarding radiobutton-type items (with `ct_type` = 2), the following
         approach is used:

         - All peer-nodes that are radiobuttons will be mutually exclusive. In other words,
           only one of a set of radiobuttons that share a common parent can be checked at
           once. If a radiobutton node becomes checked, then all of its peer radiobuttons
           must be unchecked.
         - If a radiobutton node becomes unchecked, then all of its child nodes will become
           inactive.

        """
        ...
    
    def GetDragFullScreen(self): # -> bool:
        """
        Returns whether built-in drag/drop will be full screen or not.

        :return: ``True`` if the drag/drop operation will be full screen, or
         ``False`` if only within the tree.
        """
        ...
    
    def SetDragFullScreen(self, fullScreen=...): # -> None:
        """
        Sets whether a drag operation will be performed full screen or not.

        A full screen drag allows the user to drag outside of the tree to
        other controls. When the drag is finished the destination will have
        to be found manually in the ``EVT_TREE_END_DRAG`` handler with
        something like:

        example::

            wnd = wx.FindWindowAtPoint(self.ClientToScreen(event.GetPoint()))

        :param bool `fullScreen`: False (default) to drag within tree only.
        """
        ...
    
    def IsVisible(self, item): # -> bool:
        """
        Returns whether the item is visible or not (i.e., its hierarchy is expanded
        enough to show the item, and it has not been hidden).

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item is visible, ``False`` if it is hidden.
        """
        ...
    
    def ItemHasChildren(self, item):
        """
        Returns whether the item has children or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item has children, ``False`` otherwise.
        """
        ...
    
    def IsExpanded(self, item):
        """
        Returns whether the item is expanded or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item is expanded, ``False`` if it is collapsed.
        """
        ...
    
    def IsSelected(self, item):
        """
        Returns whether the item is selected or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item is selected, ``False`` otherwise.
        """
        ...
    
    def IsBold(self, item):
        """
        Returns whether the item font is bold or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item has bold text, ``False`` otherwise.
        """
        ...
    
    def IsItalic(self, item):
        """
        Returns whether the item font is italic or not.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: ``True`` if the item has italic text, ``False`` otherwise.
        """
        ...
    
    def GetItemParent(self, item):
        """
        Returns the item parent (can be ``None`` for root items).

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` for root items.
        """
        ...
    
    def GetFirstChild(self, item): # -> tuple[Any, Any] | tuple[None, Any]:
        """
        Returns the item's first child and an integer value 'cookie'.
        Call :meth:`~CustomTreeCtrl.GetNextChild` for the next child using this very 'cookie' return
        value as an input.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: A tuple with the first value being an instance of :class:`GenericTreeItem` or ``None`` if there are no
         further children, and as second value an integer parameter 'cookie'.

        :note: This method returns ``None`` if there are no further children.
        """
        ...
    
    def GetNextChild(self, item, cookie): # -> tuple[Any, Any] | tuple[None, Any]:
        """
        Returns the item's next child.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `cookie`: a parameter which is opaque for the application but is necessary
         for the library to make these functions reentrant (i.e. allow more than one
         enumeration on one and the same object simultaneously).

        :return: A tuple with the first value being an instance of :class:`GenericTreeItem` or ``None`` if there are no
         further children, and as second value an integer parameter 'cookie'.

        :note: This method returns ``None`` if there are no further children.
        """
        ...
    
    def GetLastChild(self, item): # -> None:
        """
        Returns the item last child.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         further children.
        """
        ...
    
    def GetNextSibling(self, item): # -> None:
        """
        Returns the next sibling of an item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         further siblings.

        :note: This method returns ``None`` if there are no further siblings.
        """
        ...
    
    def GetPrevSibling(self, item): # -> None:
        """
        Returns the previous sibling of an item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         further siblings.

        :note: This method returns ``None`` if there are no further siblings.
        """
        ...
    
    def GetNext(self, item): # -> None:
        """
        Returns the next item. Only for internal use right now.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         further items.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def GetPrev(self, item): # -> None:
        """
        Returns the previous item. Only for internal use right now.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem`
        """
        ...
    
    def GetNextExpanded(self, item): # -> None:
        """
        Returns the next expanded item after the input one.

        :param `item`: an instance of :class:`TreeListItem`.
        """
        ...
    
    def GetPrevExpanded(self, item): # -> None:
        """
        Returns the previous expanded item before the input one.

        :param `item`: an instance of :class:`TreeListItem`.
        """
        ...
    
    def GetFirstVisibleItem(self): # -> GenericTreeItem | None:
        """
        Returns the first visible item.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         visible items.
        """
        ...
    
    def GetNextVisible(self, item): # -> None:
        """
        Returns the next visible item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         next visible items.
        """
        ...
    
    def GetPrevVisible(self, item): # -> None:
        """
        Returns the previous visible item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if there are no
         previous visible items.
        """
        ...
    
    def ResetEditControl(self): # -> None:
        """ Called by :class:`TreeTextCtrl` when it marks itself for deletion. """
        ...
    
    def FindItem(self, idParent, prefixOrig): # -> GenericTreeItem | None:
        """
        Finds the first item starting with the given prefix after the given parent.

        :param integer `idParent`: an instance of :class:`GenericTreeItem`;
        :param string `prefixOrig`: a string containing the item text prefix.

        :return: An instance of :class:`GenericTreeItem` or ``None`` if no item has been found.
        """
        ...
    
    def DoInsertItem(self, parentId, previous, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...): # -> GenericTreeItem:
        """
        Actually inserts an item in the tree.

        :param `parentId`: an instance of :class:`GenericTreeItem` representing the
         item's parent;
        :param integer `previous`: the index at which we should insert the item;
        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item, any
         subclass of :class:`wx.Window` except top-level windows;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item;
        :param bool `separator`: ``True`` if the item is a separator, ``False`` otherwise.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :raise: `Exception` in the following cases:

         - The item window is not ``None`` but the ``TR_HAS_VARIABLE_ROW_HEIGHT`` flag has not been
           set for :class:`CustomTreeCtrl`;
         - The item has multiline text (with line-breaks in it) but the ``TR_HAS_VARIABLE_ROW_HEIGHT``
           flag has not been set for :class:`CustomTreeCtrl`;
         - The `ct_type` attribute is less than ``0`` or greater than ``2``;
         - The parent item is a separator;
         - The item is a separator but it has text or an associated window.


        :note: Separator items should not have children, text labels or an associated window.
        """
        ...
    
    def AddRoot(self, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., on_the_right=...): # -> GenericTreeItem:
        """
        Adds a root item to the :class:`CustomTreeCtrl`.

        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item,
         any subclass of :class:`wx.Window` except top-level windows;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param  integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :raise: `Exception` in the following cases:

         - There already is a root item in the tree;
         - The item window is not ``None`` but the ``TR_HAS_VARIABLE_ROW_HEIGHT`` flag has not been
           set for :class:`CustomTreeCtrl`;
         - The item has multiline text (with line-breaks in it) but the ``TR_HAS_VARIABLE_ROW_HEIGHT``
           flag has not been set for :class:`CustomTreeCtrl`;
         - The `ct_type` attribute is less than ``0`` or greater than ``2``.

        .. warning::

           Only one root is allowed to exist in any given instance of :class:`CustomTreeCtrl`.

        """
        ...
    
    def PrependItem(self, parent, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...): # -> GenericTreeItem:
        """
        Prepends an item as a first child of parent.

        :param `parent`: an instance of :class:`GenericTreeItem` representing the
         item's parent;
        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item, any
         subclass of :class:`wx.Window` except top-level windows;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item;
        :param bool `separator`: ``True`` if the item is a separator, ``False`` otherwise.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def InsertItemByItem(self, parentId, idPrevious, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...): # -> GenericTreeItem:
        """
        Inserts an item after the given previous.

        :param `parentId`: an instance of :class:`GenericTreeItem` representing the
         item's parent;
        :param `idPrevious`: an instance of :class:`GenericTreeItem` representing the
         previous item;
        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item,
         any subclass of :class:`wx.Window`;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item;
        :param bool `separator`: ``True`` if the item is a separator, ``False`` otherwise.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :raise: `Exception` if the previous item is not a sibling.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for other possible exceptions generated by this method.
        """
        ...
    
    def InsertItemByIndex(self, parentId, idPrevious, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...): # -> GenericTreeItem:
        """
        Inserts an item after the given previous.

        :param `parentId`: an instance of :class:`GenericTreeItem` representing the
         item's parent;
        :param `idPrevious`: the index at which we should insert the new item;
        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item,
         any subclass of :class:`wx.Window`;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item;
        :param bool `separator`: ``True`` if the item is a separator, ``False`` otherwise.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def InsertItem(self, parentId, input, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., separator=..., on_the_right=...): # -> GenericTreeItem:
        """
        Inserts an item after the given previous.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.InsertItemByIndex` and :meth:`~CustomTreeCtrl.InsertItemByItem` for an explanation of
         the input parameters.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def AppendItem(self, parentId, text, ct_type=..., wnd=..., image=..., selImage=..., data=..., on_the_right=...): # -> GenericTreeItem:
        """
        Appends an item as a last child of its parent.

        :param `parentId`: an instance of :class:`GenericTreeItem` representing the
         item's parent;
        :param string `text`: the item text label;
        :param integer `ct_type`: the item type (see :meth:`~CustomTreeCtrl.SetItemType` for a list of valid
         item types);
        :param `wnd`: if not ``None``, a non-toplevel window to show next to the item,
         any subclass of :class:`wx.Window`;
        :param integer `image`: an index within the normal image list specifying the image to
         use for the item in unselected state;
        :param integer `selImage`: an index within the normal image list specifying the image to
         use for the item in selected state; if `image` > -1 and `selImage` is -1, the
         same image is used for both selected and unselected items;
        :param object `data`: associate the given Python object `data` with the item.
        :param bool `on_the_right`: ``True`` positions the window on the right of text, ``False``
         on the left of text and overlapping the image.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def AppendSeparator(self, parentId): # -> GenericTreeItem:
        """
        Appends an horizontal line separator as a last child of its parent.

        :param `parentId`: an instance of :class:`GenericTreeItem` representing the
         separator's parent.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def InsertSeparator(self, parentId, input): # -> GenericTreeItem:
        """
        Inserts a separator item after the given previous.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.InsertItemByIndex` and :meth:`~CustomTreeCtrl.InsertItemByItem` for an explanation of
         the input parameters.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def PrependSeparator(self, parent): # -> GenericTreeItem:
        """
        Prepends a separator item as a first child of parent.

        :param `parent`: an instance of :class:`GenericTreeItem` representing the
         item's parent.

        :return: An instance of :class:`GenericTreeItem` upon successful insertion.

        :see: :meth:`~CustomTreeCtrl.DoInsertItem` for possible exceptions generated by this method.
        """
        ...
    
    def SendDeleteEvent(self, item): # -> None:
        """
        Actually sends the ``EVT_TREE_DELETE_ITEM`` event.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def IsDescendantOf(self, parent, item): # -> bool:
        """
        Checks if the given item is under another one in the tree hierarchy.

        :param `parent`: an instance of :class:`GenericTreeItem`, representing the possible
         parent of `item`;
        :param `item`: another instance of :class:`GenericTreeItem`.

        :return: ``True`` if `item` is a descendant of `parent`, ``False`` otherwise.
        """
        ...
    
    def ChildrenClosing(self, item): # -> None:
        """
        We are about to destroy the item children.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def DeleteChildren(self, item): # -> None:
        """
        Delete all the item's children.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def Delete(self, item): # -> None:
        """
        Deletes an item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :note: This method sends the ``EVT_TREE_DELETE_ITEM`` event.
        """
        ...
    
    def DeleteAllItems(self): # -> None:
        """ Deletes all items in the :class:`CustomTreeCtrl`. """
        ...
    
    def Expand(self, item): # -> None:
        """
        Expands an item, sending a ``EVT_TREE_ITEM_EXPANDING`` and
        ``EVT_TREE_ITEM_EXPANDED`` events.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :raise: `Exception` if you try to expand a hidden root (i.e., when the ``TR_HIDE_ROOT``
         style is set for :class:`CustomTreeCtrl`).
        """
        ...
    
    def ExpandAllChildren(self, item): # -> None:
        """
        Expands all the items children of the input item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :note: This method suppresses the ``EVT_TREE_ITEM_EXPANDING`` and
         ``EVT_TREE_ITEM_EXPANDED`` events because expanding many items int the
         control would be too slow then.
        """
        ...
    
    def ExpandAll(self): # -> None:
        """
        Expands all :class:`CustomTreeCtrl` items.

        :note: This method suppresses the ``EVT_TREE_ITEM_EXPANDING`` and
         ``EVT_TREE_ITEM_EXPANDED`` events because expanding many items int the
         control would be too slow then.
        """
        ...
    
    def Collapse(self, item): # -> None:
        """
        Collapse an item, sending a ``EVT_TREE_ITEM_COLLAPSING`` and
        ``EVT_TREE_ITEM_COLLAPSED`` events.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :raise: `Exception` if you try to collapse a hidden root (i.e., when the ``TR_HIDE_ROOT``
         style is set for :class:`CustomTreeCtrl`).
        """
        ...
    
    def CollapseAndReset(self, item): # -> None:
        """
        Collapse the given item and deletes its children.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def Toggle(self, item): # -> None:
        """
        Toggles the item state (collapsed/expanded).

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def HideWindows(self): # -> None:
        """ Hides the windows associated to the items. Used internally. """
        ...
    
    def HideItemWindows(self, item): # -> None:
        """Hide all windows belonging to the item and its children."""
        ...
    
    def HideItem(self, item, hide=...): # -> None:
        """
        Hides/shows an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `hide`: ``True`` to hide the item, ``False`` to show it.

        :note: A hidden item always reports that it is collapsed and disabled.
        """
        ...
    
    def Unselect(self): # -> None:
        """ Unselects the current selection. """
        ...
    
    def UnselectAllChildren(self, item): # -> None:
        """
        Unselects all the children of the given item.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def SelectAllChildren(self, item): # -> None:
        """
        Selects all the children of the given item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :raise: `Exception` if used without the ``TR_EXTENDED`` or ``TR_MULTIPLE`` style set.

        :note: This method can be used only if :class:`CustomTreeCtrl` has the ``TR_MULTIPLE`` or ``TR_EXTENDED``
         style set.
        """
        ...
    
    def UnselectAll(self): # -> None:
        """ Unselect all the items. """
        ...
    
    def SelectAll(self): # -> None:
        """
        Selects all the item in the tree.

        :raise: `Exception` if used without the ``TR_EXTENDED`` or ``TR_MULTIPLE`` style set.

        :note: This method can be used only if :class:`CustomTreeCtrl` has the ``TR_MULTIPLE`` or ``TR_EXTENDED``
         style set.
        """
        ...
    
    def TagNextChildren(self, crt_item, last_item, select): # -> bool:
        """ Used internally. """
        ...
    
    def TagAllChildrenUntilLast(self, crt_item, last_item, select): # -> bool:
        """ Used internally. """
        ...
    
    def SelectItemRange(self, item1, item2): # -> None:
        """
        Selects all the items between `item1` and `item2`.

        :param `item1`: an instance of :class:`GenericTreeItem`, representing the first
         item in the range to select;
        :param `item2`: an instance of :class:`GenericTreeItem`, representing the last
         item in the range to select.

        :raise: `Exception` if used without the ``TR_EXTENDED`` or ``TR_MULTIPLE`` style set.

        :note: This method can be used only if :class:`CustomTreeCtrl` has the ``TR_MULTIPLE`` or ``TR_EXTENDED``
         style set.
        """
        ...
    
    def DoSelectItem(self, item, unselect_others=..., extended_select=..., from_key=...): # -> None:
        """
        Actually selects/unselects an item, sending ``EVT_TREE_SEL_CHANGING`` and
        ``EVT_TREE_SEL_CHANGED`` events.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `unselect_others`: if ``True``, all the other selected items are
         unselected.
        :param bool `extended_select`: ``True`` if the :class:`CustomTreeCtrl` is using the
         ``TR_EXTENDED`` style;
        :param bool `from_key`: ``True`` to indicate that the selection was made via a keyboard
         key, ``False`` if it was a mouse selection.
        """
        ...
    
    def SelectItem(self, item, select=...): # -> None:
        """
        Selects/deselects an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `select`: ``True`` to select an item, ``False`` to deselect it.

        :note: If TR_MULTIPLE is set, this actually toggles selection when select=True.
        """
        ...
    
    def FillArray(self, item, array=...): # -> list[Any]:
        """
        Internal function. Used to populate an array of selected items when
        the style ``TR_MULTIPLE`` is used.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param list `array`: a Python list containing the selected items.

        :return: A Python list containing the selected items.
        """
        ...
    
    def GetSelections(self): # -> list[Any]:
        """
        Returns a list of selected items.

        :note: This method can be used only if :class:`CustomTreeCtrl` has the ``TR_MULTIPLE`` or ``TR_EXTENDED``
         style set.

        :return: A Python list containing the selected items, all instances of :class:`GenericTreeItem`.
        """
        ...
    
    def HandleHyperLink(self, item): # -> None:
        """
        Handles the hyperlink items, sending the ``EVT_TREE_ITEM_HYPERLINK`` event.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def EnsureVisible(self, item): # -> None:
        """
        Scrolls and/or expands items to ensure that the given item is visible.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def ScrollTo(self, item): # -> None:
        """
        Scrolls the specified item into view.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def OnCompareItems(self, item1, item2):
        """
        Returns whether 2 items have the same text.

        Override this function in the derived class to change the sort order of the items
        in the :class:`CustomTreeCtrl`. The function should return a negative, zero or positive
        value if the first item is less than, equal to or greater than the second one.

        :param `item1`: an instance of :class:`GenericTreeItem`;
        :param `item2`: another instance of :class:`GenericTreeItem`.

        :return: The return value is negative if `item1` < `item2`, zero if `item1` == `item2`
         and strictly positive if `item1` < `item2`.

        :note: The base class version compares items alphabetically.
        """
        ...
    
    def SortChildren(self, item): # -> None:
        """
        Sorts the children of the given item using the :meth:`~CustomTreeCtrl.OnCompareItems` method of
        :class:`CustomTreeCtrl`.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :note: You should override the :meth:`~CustomTreeCtrl.OnCompareItems` method in your derived class to change
         the sort order (the default is ascending case-sensitive alphabetical order).
        """
        ...
    
    def GetImageList(self): # -> None:
        """
        Returns the normal image list associated with :class:`CustomTreeCtrl`.

        :return: An instance of :class:`wx.ImageList`.
        """
        ...
    
    def GetButtonsImageList(self): # -> None:
        """
        Returns the buttons image list associated with :class:`CustomTreeCtrl` (from
        which application-defined button images are taken).

        :return: An instance of :class:`wx.ImageList`.
        """
        ...
    
    def GetStateImageList(self): # -> None:
        """
        Returns the state image list associated with :class:`CustomTreeCtrl` (from which
        application-defined state images are taken).

        :return: An instance of :class:`wx.ImageList`.
        """
        ...
    
    def GetImageListCheck(self): # -> ImageList | None:
        """
        Returns the image list used to build the check/radio buttons in :class:`CustomTreeCtrl`.

        :return: An instance of :class:`wx.ImageList`.
        """
        ...
    
    def GetLeftImageList(self): # -> None:
        """
        Returns the image list for :class:`CustomTreeCtrl` filled with images to be used on
        the leftmost part of the client area. Any item can have a leftmost image associated
        with it.

        :return: An instance of :class:`wx.ImageList`.
        """
        ...
    
    def CalculateLineHeight(self): # -> None:
        """Calculates the base height for all lines in the tree.

        Only used if the TR_HAS_VARIABLE_ROW_HEIGHT style is not used.
        This base line height gets adjusted to the max line height
        of all items as they are displayed. All rows use this largest
        height until this method is called to reset it.
        """
        ...
    
    def SetImageList(self, imageList): # -> None:
        """
        Sets the normal image list for :class:`CustomTreeCtrl`.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def SetLeftImageList(self, imageList): # -> None:
        """
        Sets the image list for :class:`CustomTreeCtrl` filled with images to be used on
        the leftmost part of the client area. Any item can have a leftmost image associated
        with it.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def SetStateImageList(self, imageList): # -> None:
        """
        Sets the state image list for :class:`CustomTreeCtrl` (from which application-defined
        state images are taken).

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def SetButtonsImageList(self, imageList): # -> None:
        """
        Sets the buttons image list for :class:`CustomTreeCtrl` (from which application-defined
        button images are taken).

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def SetImageListCheck(self, sizex, sizey, imglist=...): # -> None:
        """
        Sets the checkbox/radiobutton image list.

        :param integer `sizex`: the width of the bitmaps in the `imglist`, in pixels;
        :param integer `sizey`: the height of the bitmaps in the `imglist`, in pixels;
        :param `imglist`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def AssignImageList(self, imageList): # -> None:
        """
        Assigns the normal image list.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def AssignStateImageList(self, imageList): # -> None:
        """
        Assigns the state image list.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def AssignButtonsImageList(self, imageList): # -> None:
        """
        Assigns the button image list.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def AssignLeftImageList(self, imageList): # -> None:
        """
        Assigns the image list for :class:`CustomTreeCtrl` filled with images to be used on
        the leftmost part of the client area. Any item can have a leftmost image associated
        with it.

        :param `imageList`: an instance of :class:`wx.ImageList`.
        """
        ...
    
    def AdjustMyScrollbars(self): # -> None:
        """ Internal method used to adjust the :class:`ScrolledWindow` scrollbars. """
        ...
    
    def GetLineHeight(self, item): # -> int:
        """
        Returns the line height for the given item.

        :param `item`: an instance of :class:`GenericTreeItem`.

        :return: the item height, in pixels.
        """
        ...
    
    def DrawVerticalGradient(self, dc, rect, hasfocus): # -> None:
        """
        Gradient fill from colour 1 to colour 2 from top to bottom.

        :param `dc`: an instance of :class:`wx.DC`;
        :param wx.Rect `rect`: the rectangle to be filled with the gradient shading;
        :param bool `hasfocus`: ``True`` if the main :class:`CustomTreeCtrl` has focus, ``False``
         otherwise.
        """
        ...
    
    def DrawHorizontalGradient(self, dc, rect, hasfocus): # -> None:
        """
        Gradient fill from colour 1 to colour 2 from left to right.

        :param `dc`: an instance of :class:`wx.DC`;
        :param wx.Rect `rect`: the rectangle to be filled with the gradient shading;
        :param bool `hasfocus`: ``True`` if the main :class:`CustomTreeCtrl` has focus, ``False``
         otherwise.
        """
        ...
    
    def DrawVistaRectangle(self, dc, rect, hasfocus): # -> None:
        """
        Draws the selected item(s) with the Windows Vista style.

        :param `dc`: an instance of :class:`wx.DC`;
        :param wx.Rect `rect`: the rectangle to be filled with the gradient shading;
        :param bool `hasfocus`: ``True`` if the main :class:`CustomTreeCtrl` has focus, ``False``
         otherwise.
        """
        ...
    
    def PaintItem(self, item, dc, level, align):
        """
        Actually draws an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `dc`: an instance of :class:`wx.DC`;
        :param integer `level`: the item level in the tree hierarchy;
        :param integer `align`: an integer specifying the alignment type:

         =============== =========================================
         `align` Value   Description
         =============== =========================================
                0        No horizontal alignment of windows (in items with windows).
                1        Windows (in items with windows) are aligned at the same horizontal position.
                2        Windows (in items with windows) are aligned at the rightmost edge of :class:`CustomTreeCtrl`.
         =============== =========================================
        """
        ...
    
    def PaintLevel(self, item, dc, level, y, align):
        """
        Paint a level in the hierarchy of :class:`CustomTreeCtrl`.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `dc`: an instance of :class:`wx.DC`;
        :param integer `level`: the item level in the tree hierarchy;
        :param integer `y`: the current vertical position in the :class:`ScrolledWindow`;
        :param integer `align`: an integer specifying the alignment type:

         =============== =========================================
         `align` Value   Description
         =============== =========================================
                0        No horizontal alignment of windows (in items with windows).
                1        Windows (in items with windows) are aligned at the same horizontal position.
                2        Windows (in items with windows) are aligned at the rightmost edge of :class:`CustomTreeCtrl`.
         =============== =========================================

        """
        ...
    
    def OnPaint(self, event): # -> None:
        """
        Handles the ``wx.EVT_PAINT`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`PaintEvent` event to be processed.
        """
        ...
    
    def OnSize(self, event): # -> None:
        """
        Handles the ``wx.EVT_SIZE`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`wx.SizeEvent` event to be processed.
        """
        ...
    
    def OnEraseBackground(self, event): # -> None:
        """
        Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`EraseEvent` event to be processed.
        """
        ...
    
    def TileBackground(self, dc): # -> None:
        """
        Tiles the background image to fill all the available area.

        :param `dc`: an instance of :class:`wx.DC`.

        .. todo:: Support background images also in stretch and centered modes.
        """
        ...
    
    def OnSetFocus(self, event): # -> None:
        """
        Handles the ``wx.EVT_SET_FOCUS`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`FocusEvent` event to be processed.
        """
        ...
    
    def OnKillFocus(self, event): # -> None:
        """
        Handles the ``wx.EVT_KILL_FOCUS`` event for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`FocusEvent` event to be processed.
        """
        ...
    
    def OnKeyDown(self, event):
        """
        Handles the ``wx.EVT_KEY_DOWN`` event for :class:`CustomTreeCtrl`, sending a
        ``EVT_TREE_KEY_DOWN`` event.

        :param `event`: a :class:`KeyEvent` event to be processed.
        """
        ...
    
    def GetPrevShown(self, item): # -> None:
        """
        Returns the previous displayed item in the tree. This is either the
        last displayed child of its previous sibling, or its parent item.

        :param `item`: an instance of :class:`GenericTreeItem`;

        :return: An instance of :class:`GenericTreeItem` or ``None`` if no previous item found (root).
        """
        ...
    
    def GetNextShown(self, item): # -> None:
        """
        Returns the next displayed item in the tree. This is either the first
        child of the item (if it is expanded and has children) or its next
        sibling. If there is no next sibling the tree is walked backwards
        until a next sibling for one of its parents is found.

        :param `item`: an instance of :class:`GenericTreeItem`;

        :return: An instance of :class:`GenericTreeItem` or ``None`` if no item follows this one.
        """
        ...
    
    def GetNextActiveItem(self, item, down=...): # -> None:
        """
        Returns the next active item. Used Internally at present.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `down`: ``True`` to search downwards in the hierarchy for an active item,
         ``False`` to search upwards.

        :return: An instance of :class:`GenericTreeItem` if an active item has been found or
         ``None`` if none has been found.
        """
        ...
    
    def HitTest(self, point, flags=...): # -> tuple[None, Never] | tuple[None, Literal[0]] | tuple[None, Any] | tuple[Any, Any]:
        """
        Calculates which (if any) item is under the given point, returning the tree item
        at this point plus extra information flags.

        :param `point`: an instance of :class:`wx.Point`, a point to test for hits;
        :param integer `flags`: a bitlist of the following values:

         ================================== =============== =================================
         HitTest Flags                      Hex Value       Description
         ================================== =============== =================================
         ``TREE_HITTEST_ABOVE``                         0x1 Above the client area
         ``TREE_HITTEST_BELOW``                         0x2 Below the client area
         ``TREE_HITTEST_NOWHERE``                       0x4 No item has been hit
         ``TREE_HITTEST_ONITEMBUTTON``                  0x8 On the button associated to an item
         ``TREE_HITTEST_ONITEMICON``                   0x10 On the icon associated to an item
         ``TREE_HITTEST_ONITEMINDENT``                 0x20 On the indent associated to an item
         ``TREE_HITTEST_ONITEMLABEL``                  0x40 On the label (string) associated to an item
         ``TREE_HITTEST_ONITEM``                       0x50 Anywhere on the item
         ``TREE_HITTEST_ONITEMRIGHT``                  0x80 On the right of the label associated to an item
         ``TREE_HITTEST_TOLEFT``                      0x200 On the left of the client area
         ``TREE_HITTEST_TORIGHT``                     0x400 On the right of the client area
         ``TREE_HITTEST_ONITEMUPPERPART``             0x800 On the upper part (first half) of the item
         ``TREE_HITTEST_ONITEMLOWERPART``            0x1000 On the lower part (second half) of the item
         ``TREE_HITTEST_ONITEMCHECKICON``            0x2000 On the check/radio icon, if present
         ================================== =============== =================================

        :return: A tuple with the first value being an instance of :class:`GenericTreeItem` or ``None`` if
         no item has been hit-tested, and as second value an integer parameter `flag`.

        :note: both the item (if any, ``None`` otherwise) and the `flags` are always returned as a tuple.
        """
        ...
    
    def GetBoundingRect(self, item, textOnly=...): # -> Rect:
        """
        Retrieves the rectangle bounding the item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param bool `textOnly`: if ``True``, only the rectangle around the item's label will
         be returned, otherwise the item's image is also taken into account.

        :return: An instance of :class:`wx.Rect`.

        :note: The rectangle coordinates are logical, not physical ones. So, for example,
         the `x` coordinate may be negative if the tree has a horizontal scrollbar and its
         position is not ``0``.

        .. warning:: The ``textOnly`` flag is currently ignored and this method
         always returns the rectangle including the item's image, checkbox,
         and window (if they exist) along with the item's text. A separator's
         bounding box stretches the width of the entire client area. The height
         may be 0 for newly added items until :meth:`CustomTreeCtrl.CalculateSize`
         is called while the tree is not frozen.
        """
        ...
    
    def Edit(self, item): # -> None:
        """
        Internal function. Starts the editing of an item label, sending a
        ``EVT_TREE_BEGIN_LABEL_EDIT`` event.

        :param `item`: an instance of :class:`GenericTreeItem`.

        .. warning:: Separator-type items can not be edited.
        """
        ...
    
    def GetEditControl(self): # -> TreeTextCtrl | None:
        """
        Returns a reference to the edit :class:`TreeTextCtrl` if the item is being edited or
        ``None`` otherwise (it is assumed that no more than one item may be edited
        simultaneously).
        """
        ...
    
    def OnAcceptEdit(self, item, value): # -> Literal[True]:
        """
        Called by :class:`TreeTextCtrl`, to accept the changes and to send the
        ``EVT_TREE_END_LABEL_EDIT`` event.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param string `value`: the new value of the item label.

        :return: ``True`` if the editing has not been vetoed, ``False`` otherwise.
        """
        ...
    
    def OnCancelEdit(self, item): # -> None:
        """
        Called by :class:`TreeTextCtrl`, to cancel the changes and to send the
        ``EVT_TREE_END_LABEL_EDIT`` event.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def OnEditTimer(self): # -> None:
        """ The timer for editing has expired. Start editing. """
        ...
    
    def OnMouse(self, event):
        """
        Handles a bunch of ``wx.EVT_MOUSE_EVENTS`` events for :class:`CustomTreeCtrl`.

        :param `event`: a :class:`MouseEvent` event to be processed.
        """
        ...
    
    def OnInternalIdle(self): # -> None:
        """
        This method is normally only used internally, but sometimes an application
        may need it to implement functionality that should not be disabled by an
        application defining an `OnIdle` handler in a derived class.

        This method may be used to do delayed painting, for example, and most
        implementations call :meth:`wx.Window.UpdateWindowUI` in order to send update events
        to the window in idle time.
        """
        ...
    
    def CalculateSize(self, item, dc, level=..., align=...): # -> None:
        """
        Calculates overall position and size of an item.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `dc`: an instance of :class:`wx.DC`;
        :param integer `level`: the item level in the tree hierarchy;
        :param integer `align`: an integer specifying the alignment type:

         =============== =========================================
         `align` Value   Description
         =============== =========================================
                0        No horizontal alignment of windows (in items with windows).
                1        Windows (in items with windows) are aligned at the same horizontal position.
                2        Windows (in items with windows) are aligned at the rightmost edge of :class:`CustomTreeCtrl`.
         =============== =========================================

        """
        ...
    
    def CalculateLevel(self, item, dc, level, y, align=...):
        """
        Calculates the level of an item inside the tree hierarchy.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param `dc`: an instance of :class:`wx.DC`;
        :param integer `level`: the item level in the tree hierarchy;
        :param integer `y`: the current vertical position inside the :class:`ScrolledWindow`;
        :param integer `align`: an integer specifying the alignment type:

         =============== =========================================
         `align` Value   Description
         =============== =========================================
                0        No horizontal alignment of windows (in items with windows).
                1        Windows (in items with windows) are aligned at the same horizontal position.
                2        Windows (in items with windows) are aligned at the rightmost edge of :class:`CustomTreeCtrl`.
         =============== =========================================

        :return: The new `y` vertical position inside the :class:`ScrolledWindow`.
        """
        ...
    
    def CalculatePositions(self): # -> None:
        """ Calculates all the positions of the visible items. """
        ...
    
    def RefreshSubtree(self, item): # -> None:
        """
        Refreshes a damaged subtree of an item.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def RefreshLine(self, item): # -> None:
        """
        Refreshes a damaged item line.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def RefreshSelected(self): # -> None:
        """ Refreshes a damaged selected item line. """
        ...
    
    def RefreshSelectedUnder(self, item): # -> None:
        """
        Refreshes the selected items under the given item.

        :param `item`: an instance of :class:`GenericTreeItem`.
        """
        ...
    
    def RefreshItemWithWindows(self, item=...): # -> None:
        """
        Refreshes the items with which a window is associated.

        :param `item`: an instance of :class:`GenericTreeItem`. If `item` is ``None``, then the
         recursive refresh starts from the root node.

        :note: This method is called only if the style ``TR_ALIGN_WINDOWS_RIGHT`` is used.
        """
        ...
    
    def Freeze(self): # -> None:
        """
        Freeze :class:`CustomTreeCtrl`.

        Freezes the window or, in other words, prevents any updates from taking place
        on screen, the window is not redrawn at all. :meth:`~Thaw` must be called to re-enable
        window redrawing. Calls to these two functions may be nested.

        :note: This method is useful for visual appearance optimization (for example,
         it is a good idea to use it before doing many large text insertions in a row
         into a :class:`TextCtrl` under wxGTK) but is not implemented on all platforms nor
         for all controls so it is mostly just a hint to wxWidgets and not a mandatory
         directive.
        """
        ...
    
    def Thaw(self): # -> None:
        """
        Thaw :class:`CustomTreeCtrl`.

        Reenables window updating after a previous call to :meth:`~Freeze`. To really thaw the
        control, it must be called exactly the same number of times as :meth:`~Freeze`.

        :raise: `Exception` if :meth:`~Thaw` has been called without an un-matching :meth:`~Freeze`.
        """
        ...
    
    def SetBackgroundColour(self, colour): # -> bool:
        """
        Changes the background colour of :class:`CustomTreeCtrl`.

        :param `colour`: the colour to be used as the background colour, pass
         :class:`NullColour` to reset to the default colour.

        :return: ``False`` if the underlying :class:`ScrolledWindow` does not accept
         the new colour, ``True`` otherwise.

        :note: The background colour is usually painted by the default :class:`EraseEvent`
         event handler function under Windows and automatically under GTK.

        :note: Setting the background colour does not cause an immediate refresh, so
         you may wish to call :meth:`wx.Window.ClearBackground` or :meth:`wx.Window.Refresh` after
         calling this function.

        :note: Overridden from :class:`ScrolledWindow`.
        """
        ...
    
    def SetForegroundColour(self, colour): # -> bool:
        """
        Changes the foreground colour of :class:`CustomTreeCtrl`.

        :param `colour`: the colour to be used as the foreground colour, pass
         :class:`NullColour` to reset to the default colour.

        :return: ``False`` if the underlying :class:`ScrolledWindow` does not accept
         the new colour, ``True`` otherwise.

        :note: Overridden from :class:`ScrolledWindow`.
        """
        ...
    
    def OnGetToolTip(self, event): # -> None:
        """
        Process the tooltip event, to speed up event processing. Does not actually
        get a tooltip.

        :param `event`: a :class:`CommandTreeEvent` event to be processed.
        """
        ...
    
    def DoGetBestSize(self): # -> Size:
        """
        Gets the size which best suits the window: for a control, it would be the
        minimal size which doesn't truncate the control, for a panel - the same size
        as it would have after a call to `Fit()`.

        :return: An instance of :class:`wx.Size`.

        :note: Overridden from :class:`ScrolledWindow`.
        """
        ...
    
    def GetMaxWidth(self, respect_expansion_state=...): # -> Any:
        """
        Returns the maximum width of the :class:`CustomTreeCtrl`.

        :param bool `respect_expansion_state`: if ``True``, only the expanded items (and their
         children) will be measured. Otherwise all the items are expanded and
         their width measured.

        :return: the maximum width of :class:`CustomTreeCtrl`, in pixels.
        """
        ...
    
    def RecurseOnChildren(self, item, maxwidth, respect_expansion_state): # -> tuple[Any, Any | Literal[0]]:
        """
        Recurses over all the children of the spcified items, calculating their
        maximum width.

        :param `item`: an instance of :class:`GenericTreeItem`;
        :param integer `maxwidth`: the current maximum width for :class:`CustomTreeCtrl`, in pixels;
        :param bool `respect_expansion_state`: if ``True``, only the expanded items (and their
         children) will be measured. Otherwise all the items are expanded and
         their width measured.

        :return: A tuple containing the maximum width and item height, in pixels.
        """
        ...
    
    def GetClassDefaultAttributes(self): # -> VisualAttributes:
        """
        Returns the default font and colours which are used by the control. This is
        useful if you want to use the same font or colour in your own control as in
        a standard control -- which is a much better idea than hard coding specific
        colours or fonts which might look completely out of place on the users system,
        especially if it uses themes.

        This static method is "overridden'' in many derived classes and so calling,
        for example, :meth:`Button.GetClassDefaultAttributes` () will typically return the
        values appropriate for a button which will be normally different from those
        returned by, say, :meth:`ListCtrl.GetClassDefaultAttributes` ().

        :return: An instance of :class:`VisualAttributes`.

        :note: The :class:`VisualAttributes` structure has at least the fields `font`,
         `colFg` and `colBg`. All of them may be invalid if it was not possible to
         determine the default control appearance or, especially for the background
         colour, if the field doesn't make sense as is the case for `colBg` for the
         controls with themed background.

        :note: Overridden from :class:`wx.Control`.
        """
        ...
    
    GetClassDefaultAttributes = ...


if __name__ == '__main__':
    class MyFrame(wx.Frame):
        def __init__(self, parent) -> None:
            ...
        
    
    
    app = ...
    locale = ...
    frame = ...
