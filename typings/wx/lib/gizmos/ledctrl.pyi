"""
This type stub file was generated by pyright.
"""

import wx

"""
Widget to display a series of digits, spaces, dashes or colons in a segmented style.
"""
LED_ALIGN_LEFT = ...
LED_ALIGN_RIGHT = ...
LED_ALIGN_CENTER = ...
LED_ALIGN_MASK = ...
LED_DRAW_FADED = ...
class LEDNumberCtrl(wx.Control):
    """
    The LEDNumberCtrl can be used to display a series of digits, (plus spaces,
    colons or dashes,) using a style reminiscent of old-timey segmented
    digital displays.
    """
    class const:
        LINE1 = ...
        LINE2 = ...
        LINE3 = ...
        LINE4 = ...
        LINE5 = ...
        LINE6 = ...
        LINE7 = ...
        DECIMALSIGN = ...
        COLON = ...
        DIGITS = ...
        DIGITALL = ...
    
    
    def __init__(self, *args, **kw) -> None:
        """
        Create a new LEDNumberCtrl.

        Both the normal constructor style with all parameters, or wxWidgets
        2-phase style default constructor is supported. If the default
        constructor is used then the Create method will need to be called
        later before the widget can actually be used.
        """
        ...
    
    def Create(self, parent, id=..., pos=..., size=..., style=..., name=...): # -> Literal[True]:
        ...
    
    def GetAlignment(self): # -> int:
        ...
    
    def GetDrawFaded(self): # -> bool:
        ...
    
    def GetValue(self): # -> str:
        ...
    
    def SetAlignment(self, alignment, redraw=...): # -> None:
        """
        Set how the digits will be aligned within the widget.

        Supported values are ``LED_ALIGN_LEFT``, ``LED_ALIGN_RIGHT``,
        and ``LED_ALIGN_CENTER``.
        """
        ...
    
    def SetDrawFaded(self, drawFaded, redraw=...): # -> None:
        """
        Set whether unlit segments will still be draw with a faded version of
        the foreground colour.
        """
        ...
    
    def SetValue(self, value, redraw=...): # -> None:
        """
        Set the string value to be displayed.
        """
        ...
    
    Alignment = ...
    DrawFaded = ...
    Value = ...
    def OnSize(self, evt): # -> None:
        ...
    
    def OnPaint(self, evt): # -> None:
        ...
    


