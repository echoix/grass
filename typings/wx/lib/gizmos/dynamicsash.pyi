"""
This type stub file was generated by pyright.
"""

import wx

"""
A window which can be dynamically split to an arbitrary depth and later
reunified through the user interface.
"""
DS_MANAGE_SCROLLBARS = ...
DS_DRAG_CORNER = ...
DS_DEFAULT = ...
wxEVT_DYNAMIC_SASH_SPLIT = ...
wxEVT_DYNAMIC_SASH_UNIFY = ...
EVT_DYNAMIC_SASH_SPLIT = ...
EVT_DYNAMIC_SASH_UNIFY = ...
class DynamicSashSplitEvent(wx.PyCommandEvent):
    """
    DynamicSashSplitEvents are sent to your view by DynamicSashWindow whenever
    your view is being split by the user.  It is your responsibility to handle
    this event by creating a new view window as a child of the
    DynamicSashWindow.  DynamicSashWindow will automatically reparent it to
    the proper place in its window hierarchy.
    """
    def __init__(self, arg=...) -> None:
        ...
    


class DynamicSashUnifyEvent(wx.PyCommandEvent):
    """
    DynamicSashUnifyEvents are sent to your view by DynamicSashWindow whenever
    the sash which splits your view and its sibling is being reunified such
    that your view is expanding to replace its sibling. You needn't do
    anything with this event if you are allowing DynamicSashWindow to manage
    your view's scrollbars, but it is useful if you are managing the
    scrollbars yourself so that you can keep the scrollbars' event handlers
    connected to your view's event handler class.
    """
    def __init__(self, arg=...) -> None:
        ...
    


class DynamicSashWindow(wx.Window):
    """
    A DynamicSashWindow widget manages the way other widgets are viewed. When
    a DynamicSashWindow is first shown, it will contain one child view, a
    viewport for that child, and a pair of scrollbars to allow the user to
    navigate the child view area.  Next to each scrollbar is a small tab.  By
    clicking on either tab and dragging to the appropriate spot, a user can
    split the view area into two smaller views separated by a draggable sash.
    Later, when the user wishes to reunify the two subviews, the user simply
    drags the sash to the side of the window. DynamicSashWindow will
    automatically reparent the appropriate child view back up the window
    hierarchy, and the DynamicSashWindow will have only one child view once
    again.

    As an application developer, you will simply create a DynamicSashWindow
    using either the Create() function or the more complex constructor
    provided below, and then create a view window whose parent is the
    DynamicSashWindow.  The child should respond to DynamicSashSplitEvents --
    perhaps with an OnSplit() event handler -- by constructing a new view
    window whose parent is also the DynamicSashWindow.  That's it!  Now your
    users can dynamically split and reunify the view you provided.

    If you wish to handle the scrollbar events for your view, rather than
    allowing DynamicSashWindow to do it for you, things are a bit more
    complex.  (You might want to handle scrollbar events yourself, if, for
    instance, you wish to scroll a subwindow of the view you add to your
    DynamicSashWindow object, rather than scrolling the whole view.) In this
    case, you will need to construct your DynamicSashWindow without the
    wxDS_MANAGE_SCROLLBARS style and  you will need to use the GetHScrollBar()
    and GetVScrollBar() methods to retrieve the scrollbar controls and call
    SetEventHandler() on them to redirect the scrolling events whenever your
    window is reparented by wxDyanmicSashWindow. You will need to set the
    scrollbars' event handler at three times:

        *  When your view is created When your view receives a
        *  DynamicSashSplitEvent When your view receives a
        *  DynamicSashUnifyEvent

    See the dynsash_switch sample application for an example which does this.
    """
    def __init__(self, *args, **kw) -> None:
        """
        Create a new DynamicSashWindow.

        Both the normal constructor style with all parameters, or wxWidgets
        2-phase style default constructor is supported. If the default
        constructor is used then the Create method will need to be called
        later before the widget can actually be used.
        """
        ...
    
    def Create(self, parent, id=..., pos=..., size=..., style=..., name=...): # -> None:
        ...
    
    def __dtor__(self): # -> None:
        ...
    
    def GetHScrollBar(self, child): # -> ScrollBar | None:
        ...
    
    def GetVScrollBar(self, child): # -> ScrollBar | None:
        ...
    
    def AddChild(self, child): # -> None:
        ...
    


_wxEVT_DYNAMIC_SASH_REPARENT = ...
_EVT_DYNAMIC_SASH_REPARENT = ...
class _DynamicSashReparentEvent(wx.PyEvent):
    def __init__(self, arg=...) -> None:
        ...
    


_DSR_NONE = ...
_DSR_VERTICAL_TAB = ...
_DSR_HORIZONTAL_TAB = ...
_DSR_CORNER = ...
_DSR_LEFT_EDGE = ...
_DSR_TOP_EDGE = ...
_DSR_RIGHT_EDGE = ...
_DSR_BOTTOM_EDGE = ...
_isMac = ...
class _DynamicSashWindowImpl(wx.EvtHandler):
    def __init__(self, window) -> None:
        ...
    
    def __dtor__(self): # -> None:
        ...
    
    def Create(self): # -> bool:
        ...
    
    def AddChild(self, window): # -> None:
        ...
    
    def DrawSash_overlay(self, x, y, mode): # -> None:
        ...
    
    def DrawSash(self, x, y, mode): # -> None:
        ...
    
    def ConstrainChildren(self, px, py): # -> None:
        ...
    
    def Split(self, px, py): # -> None:
        ...
    
    def Unify(self, panel): # -> None:
        ...
    
    def Resize(self, x, y):
        ...
    
    def FindParent(self, side): # -> None:
        ...
    
    def FindUpperParent(self, sash_a, sash_b):
        ...
    
    def FindFrame(self):
        ...
    
    def FindScrollBar(self, child, vert): # -> ScrollBar | None:
        ...
    
    def OnSize(self, event): # -> None:
        ...
    
    def OnPaint(self, event): # -> None:
        ...
    
    def OnMouseMove(self, event): # -> None:
        ...
    
    def OnLeave(self, event): # -> None:
        ...
    
    def OnPress(self, event): # -> None:
        ...
    
    def OnRelease(self, event): # -> None:
        ...
    


class _DynamicSashWindowLeaf(wx.EvtHandler):
    def __init__(self, impl) -> None:
        ...
    
    def __dtor__(self): # -> None:
        ...
    
    def Create(self): # -> bool:
        ...
    
    def AddChild(self, window): # -> None:
        ...
    
    def OnReparent(self, event): # -> None:
        ...
    
    def GetRegion(self, x, y): # -> Literal[3, 1, 2, 4, 5, 6, 7, 0]:
        ...
    
    def ResizeChild(self, size): # -> None:
        ...
    
    def FindScrollBar(self, child, vert): # -> ScrollBar | None:
        ...
    
    def OnSize(self, event): # -> None:
        ...
    
    def OnViewSize(self, event): # -> None:
        ...
    
    def OnPaint(self, event): # -> None:
        ...
    
    def OnScroll(self, event): # -> None:
        ...
    
    def OnFocus(self, event): # -> None:
        ...
    
    def OnMouseMove(self, event): # -> None:
        ...
    
    def OnLeave(self, event): # -> None:
        ...
    
    def OnPress(self, event): # -> None:
        ...
    
    def OnRelease(self, event): # -> None:
        ...
    


