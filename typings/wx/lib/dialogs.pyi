"""
This type stub file was generated by pyright.
"""

import wx

class ScrolledMessageDialog(wx.Dialog):
    def __init__(self, parent, msg, caption, pos=..., size=..., style=...) -> None:
        ...
    


class MultipleChoiceDialog(wx.Dialog):
    def __init__(self, parent, msg, title, lst, pos=..., size=..., style=...) -> None:
        ...
    
    def GetValue(self):
        ...
    
    def GetValueString(self): # -> tuple[Any, ...]:
        ...
    


class DialogResults:
    def __init__(self, returned) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def returnedString(ret): # -> Literal['Ok', 'Cancel', 'Yes', 'No'] | None:
    ...

def findDialog(parent=..., searchText=..., wholeWordsOnly=..., caseSensitive=...): # -> DialogResults:
    ...

def colorDialog(parent=..., colorData=..., color=...): # -> DialogResults:
    ...

def colourDialog(parent=..., colourData=..., colour=...): # -> DialogResults:
    ...

def fontDialog(parent=..., fontData=..., font=...): # -> DialogResults:
    ...

def textEntryDialog(parent=..., message=..., title=..., defaultText=..., style=...): # -> DialogResults:
    ...

def messageDialog(parent=..., message=..., title=..., aStyle=..., pos=...): # -> DialogResults:
    ...

def alertDialog(parent=..., message=..., title=..., pos=...): # -> DialogResults:
    ...

def scrolledMessageDialog(parent=..., message=..., title=..., pos=..., size=...): # -> DialogResults:
    ...

def fileDialog(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    ...

def openFileDialog(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    ...

def saveFileDialog(parent=..., title=..., directory=..., filename=..., wildcard=..., style=...): # -> DialogResults:
    ...

def dirDialog(parent=..., message=..., path=..., style=..., pos=..., size=...): # -> DialogResults:
    ...

directoryDialog = ...
def singleChoiceDialog(parent=..., message=..., title=..., lst=..., style=...): # -> DialogResults:
    ...

def multipleChoiceDialog(parent=..., message=..., title=..., lst=..., pos=..., size=...): # -> DialogResults:
    ...

class MultiMessageDialog(wx.Dialog):
    """
    A dialog like :class:`wx.MessageDialog`, but with an optional 2nd message string
    that is shown in a scrolled window, and also allows passing in the icon to
    be shown instead of the stock error, question, etc. icons. The btnLabels
    can be used if you'd like to change the stock labels on the buttons, it's
    a dictionary mapping stock IDs to label strings.
    """
    CONTENT_MAX_W = ...
    CONTENT_MAX_H = ...
    def __init__(self, parent, message, caption=..., msg2=..., style=..., pos=..., icon=..., btnLabels=...) -> None:
        ...
    
    def OnButton(self, evt): # -> None:
        ...
    


def MultiMessageBox(message, caption, msg2=..., style=..., parent=..., icon=..., btnLabels=...): # -> Literal[0]:
    """
    A function like :class:`wx.MessageBox` which uses :class:`MultiMessageDialog`.
    """
    ...

if __name__ == '__main__':
    app = ...
