"""
This type stub file was generated by pyright.
"""

import wx
import os

"""
The ``wx.html2`` module includes a widget class and supporting classes that
wraps native browser components on the system, therefore providing a fully
featured HTML rendering component including the latest HTML, Javascript and
CSS standards. Since platform-specific back-ends are used (Microsoft Trident,
WebKit webView, etc.) there will be some difference in ability and behaviors,
but these classes will minimize those differences as much as possible.
"""
if os.name == 'nt':
    ...
WebViewDefaultURLStr = ...
WebViewNameStr = ...
WebViewBackendWebKit = ...
WebViewBackendEdge = ...
WebViewBackendIE = ...
WebViewBackendDefault = ...
WEBVIEW_ZOOM_TINY = ...
WEBVIEW_ZOOM_SMALL = ...
WEBVIEW_ZOOM_MEDIUM = ...
WEBVIEW_ZOOM_LARGE = ...
WEBVIEW_ZOOM_LARGEST = ...
WEBVIEW_ZOOM_TYPE_LAYOUT = ...
WEBVIEW_ZOOM_TYPE_TEXT = ...
WEBVIEW_NAV_ERR_CONNECTION = ...
WEBVIEW_NAV_ERR_CERTIFICATE = ...
WEBVIEW_NAV_ERR_AUTH = ...
WEBVIEW_NAV_ERR_SECURITY = ...
WEBVIEW_NAV_ERR_NOT_FOUND = ...
WEBVIEW_NAV_ERR_REQUEST = ...
WEBVIEW_NAV_ERR_USER_CANCELLED = ...
WEBVIEW_NAV_ERR_OTHER = ...
WEBVIEW_RELOAD_DEFAULT = ...
WEBVIEW_RELOAD_NO_CACHE = ...
WEBVIEW_FIND_WRAP = ...
WEBVIEW_FIND_ENTIRE_WORD = ...
WEBVIEW_FIND_MATCH_CASE = ...
WEBVIEW_FIND_HIGHLIGHT_RESULT = ...
WEBVIEW_FIND_BACKWARDS = ...
WEBVIEW_FIND_DEFAULT = ...
WEBVIEW_NAV_ACTION_NONE = ...
WEBVIEW_NAV_ACTION_USER = ...
WEBVIEW_NAV_ACTION_OTHER = ...
WEBVIEW_INJECT_AT_DOCUMENT_START = ...
WEBVIEW_INJECT_AT_DOCUMENT_END = ...
WEBVIEWIE_EMU_DEFAULT = ...
WEBVIEWIE_EMU_IE7 = ...
WEBVIEWIE_EMU_IE8 = ...
WEBVIEWIE_EMU_IE8_FORCE = ...
WEBVIEWIE_EMU_IE9 = ...
WEBVIEWIE_EMU_IE9_FORCE = ...
WEBVIEWIE_EMU_IE10 = ...
WEBVIEWIE_EMU_IE10_FORCE = ...
WEBVIEWIE_EMU_IE11 = ...
WEBVIEWIE_EMU_IE11_FORCE = ...
wxEVT_WEBVIEW_NAVIGATING = ...
wxEVT_WEBVIEW_NAVIGATED = ...
wxEVT_WEBVIEW_LOADED = ...
wxEVT_WEBVIEW_ERROR = ...
wxEVT_WEBVIEW_NEWWINDOW = ...
wxEVT_WEBVIEW_TITLE_CHANGED = ...
wxEVT_WEBVIEW_FULLSCREEN_CHANGED = ...
wxEVT_WEBVIEW_SCRIPT_MESSAGE_RECEIVED = ...
wxEVT_WEBVIEW_SCRIPT_RESULT = ...
class WebViewHistoryItem:
    """
    WebViewHistoryItem(url, title)
    
    A simple class that contains the URL and title of an element of the
    history of a wxWebView.
    """
    def __init__(self, url, title) -> None:
        """
        WebViewHistoryItem(url, title)
        
        A simple class that contains the URL and title of an element of the
        history of a wxWebView.
        """
        ...
    
    def GetUrl(self):
        """
        GetUrl() -> String
        """
        ...
    
    def GetTitle(self):
        """
        GetTitle() -> String
        """
        ...
    
    Title = ...
    Url = ...


class WebViewHandler:
    """
    WebViewHandler(scheme)
    
    The base class for handling custom schemes in wxWebView, for example
    to allow virtual file system support.
    """
    def __init__(self, scheme) -> None:
        """
        WebViewHandler(scheme)
        
        The base class for handling custom schemes in wxWebView, for example
        to allow virtual file system support.
        """
        ...
    
    def GetFile(self, uri):
        """
        GetFile(uri) -> wx.FSFile
        """
        ...
    
    def GetName(self):
        """
        GetName() -> String
        """
        ...
    
    def SetSecurityURL(self, url):
        """
        SetSecurityURL(url)
        
        Sets a custom security URL.
        """
        ...
    
    def GetSecurityURL(self):
        """
        GetSecurityURL() -> String
        """
        ...
    
    Name = ...
    SecurityURL = ...


class WebViewArchiveHandler(WebViewHandler):
    """
    WebViewArchiveHandler(scheme)
    
    A custom handler for the file scheme which also supports loading from
    archives.
    """
    def __init__(self, scheme) -> None:
        """
        WebViewArchiveHandler(scheme)
        
        A custom handler for the file scheme which also supports loading from
        archives.
        """
        ...
    
    def GetFile(self, uri):
        """
        GetFile(uri) -> wx.FSFile
        """
        ...
    


class WebViewFSHandler(WebViewHandler):
    """
    WebViewFSHandler(scheme)
    
    A wxWebView file system handler to support standard wxFileSystem
    protocols of the form  example:page.htm  The handler allows wxWebView
    to use wxFileSystem in a similar fashion to its use with wxHtml.
    """
    def __init__(self, scheme) -> None:
        """
        WebViewFSHandler(scheme)
        
        A wxWebView file system handler to support standard wxFileSystem
        protocols of the form  example:page.htm  The handler allows wxWebView
        to use wxFileSystem in a similar fashion to its use with wxHtml.
        """
        ...
    
    def GetFile(self, uri):
        """
        GetFile(uri) -> wx.FSFile
        """
        ...
    


class WebView(wx.Control):
    """
    This control may be used to render web (HTML / CSS / javascript)
    documents.
    """
    def RunScript(self, javascript):
        """
        RunScript(javascript) -> (bool, output)
        
        Runs the given JavaScript code.
        """
        ...
    
    def RunScriptAsync(self, javascript, clientData=...):
        """
        RunScriptAsync(javascript, clientData=None)
        
        Runs the given JavaScript code asynchronously and returns the result
        via a wxEVT_WEBVIEW_SCRIPT_RESULT.
        """
        ...
    
    def AddScriptMessageHandler(self, name):
        """
        AddScriptMessageHandler(name) -> bool
        
        Add a script message handler with the given name.
        """
        ...
    
    def RemoveScriptMessageHandler(self, name):
        """
        RemoveScriptMessageHandler(name) -> bool
        
        Remove a script message handler with the given name that was
        previously added via AddScriptMessageHandler().
        """
        ...
    
    def AddUserScript(self, javascript, injectionTime=...):
        """
        AddUserScript(javascript, injectionTime=WEBVIEW_INJECT_AT_DOCUMENT_START) -> bool
        
        Injects the specified script into the webpage's content.
        """
        ...
    
    def RemoveAllUserScripts(self):
        """
        RemoveAllUserScripts()
        
        Removes all user scripts from the web view.
        """
        ...
    
    def CanCopy(self):
        """
        CanCopy() -> bool
        
        Returns true if the current selection can be copied.
        """
        ...
    
    def CanCut(self):
        """
        CanCut() -> bool
        
        Returns true if the current selection can be cut.
        """
        ...
    
    def CanPaste(self):
        """
        CanPaste() -> bool
        
        Returns true if data can be pasted.
        """
        ...
    
    def Copy(self):
        """
        Copy()
        
        Copies the current selection.
        """
        ...
    
    def Cut(self):
        """
        Cut()
        
        Cuts the current selection.
        """
        ...
    
    def Paste(self):
        """
        Paste()
        
        Pastes the current data.
        """
        ...
    
    def EnableContextMenu(self, enable=...):
        """
        EnableContextMenu(enable=True)
        
        Enable or disable the right click context menu.
        """
        ...
    
    def IsContextMenuEnabled(self):
        """
        IsContextMenuEnabled() -> bool
        
        Returns true if a context menu will be shown on right click.
        """
        ...
    
    def EnableAccessToDevTools(self, enable=...):
        """
        EnableAccessToDevTools(enable=True)
        
        Enable or disable access to dev tools for the user.
        """
        ...
    
    def IsAccessToDevToolsEnabled(self):
        """
        IsAccessToDevToolsEnabled() -> bool
        
        Returns true if dev tools are available to the user.
        """
        ...
    
    def SetUserAgent(self, userAgent):
        """
        SetUserAgent(userAgent) -> bool
        
        Specify a custom user agent string for the web view.
        """
        ...
    
    def GetUserAgent(self):
        """
        GetUserAgent() -> String
        
        Returns the current user agent string for the web view.
        """
        ...
    
    def CanGoBack(self):
        """
        CanGoBack() -> bool
        
        Returns true if it is possible to navigate backward in the history of
        visited pages.
        """
        ...
    
    def CanGoForward(self):
        """
        CanGoForward() -> bool
        
        Returns true if it is possible to navigate forward in the history of
        visited pages.
        """
        ...
    
    def ClearHistory(self):
        """
        ClearHistory()
        
        Clear the history, this will also remove the visible page.
        """
        ...
    
    def EnableHistory(self, enable=...):
        """
        EnableHistory(enable=True)
        
        Enable or disable the history.
        """
        ...
    
    def GetBackwardHistory(self):
        """
        GetBackwardHistory() -> PyObject
        
        Returns a list of items in the back history.
        """
        ...
    
    def GetForwardHistory(self):
        """
        GetForwardHistory() -> PyObject
        
        Returns a list of items in the forward history.
        """
        ...
    
    def GoBack(self):
        """
        GoBack()
        
        Navigate back in the history of visited pages.
        """
        ...
    
    def GoForward(self):
        """
        GoForward()
        
        Navigate forward in the history of visited pages.
        """
        ...
    
    def ClearSelection(self):
        """
        ClearSelection()
        
        Clears the current selection.
        """
        ...
    
    def DeleteSelection(self):
        """
        DeleteSelection()
        
        Deletes the current selection.
        """
        ...
    
    def GetSelectedSource(self):
        """
        GetSelectedSource() -> String
        
        Returns the currently selected source, if any.
        """
        ...
    
    def GetSelectedText(self):
        """
        GetSelectedText() -> String
        
        Returns the currently selected text, if any.
        """
        ...
    
    def HasSelection(self):
        """
        HasSelection() -> bool
        
        Returns true if there is a current selection.
        """
        ...
    
    def SelectAll(self):
        """
        SelectAll()
        
        Selects the entire page.
        """
        ...
    
    def CanRedo(self):
        """
        CanRedo() -> bool
        
        Returns true if there is an action to redo.
        """
        ...
    
    def CanUndo(self):
        """
        CanUndo() -> bool
        
        Returns true if there is an action to undo.
        """
        ...
    
    def Redo(self):
        """
        Redo()
        
        Redos the last action.
        """
        ...
    
    def Undo(self):
        """
        Undo()
        
        Undos the last action.
        """
        ...
    
    def Find(self, text, flags=...):
        """
        Find(text, flags=WEBVIEW_FIND_DEFAULT) -> long
        
        Finds a phrase on the current page and if found, the control will
        scroll the phrase into view and select it.
        """
        ...
    
    def CanSetZoomType(self, type):
        """
        CanSetZoomType(type) -> bool
        
        Retrieve whether the current HTML engine supports a zoom type.
        """
        ...
    
    def GetZoom(self):
        """
        GetZoom() -> WebViewZoom
        
        Get the zoom level of the page.
        """
        ...
    
    def GetZoomFactor(self):
        """
        GetZoomFactor() -> float
        
        Get the zoom factor of the page.
        """
        ...
    
    def GetZoomType(self):
        """
        GetZoomType() -> WebViewZoomType
        
        Get how the zoom factor is currently interpreted.
        """
        ...
    
    def SetZoom(self, zoom):
        """
        SetZoom(zoom)
        
        Set the zoom level of the page.
        """
        ...
    
    def SetZoomFactor(self, zoom):
        """
        SetZoomFactor(zoom)
        
        Set the zoom factor of the page.
        """
        ...
    
    def SetZoomType(self, zoomType):
        """
        SetZoomType(zoomType)
        
        Set how to interpret the zoom factor.
        """
        ...
    
    def Create(self, parent, id=..., url=..., pos=..., size=..., style=..., name=...):
        """
        Create(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name=WebViewNameStr) -> bool
        
        Creation function for two-step creation.
        """
        ...
    
    def GetCurrentTitle(self):
        """
        GetCurrentTitle() -> String
        
        Get the title of the current web page, or its URL/path if title is not
        available.
        """
        ...
    
    def GetCurrentURL(self):
        """
        GetCurrentURL() -> String
        
        Get the URL of the currently displayed document.
        """
        ...
    
    def GetNativeBackend(self):
        """
        GetNativeBackend() -> void
        
        Return the pointer to the native backend used by this control.
        """
        ...
    
    def GetPageSource(self):
        """
        GetPageSource() -> String
        
        Get the HTML source code of the currently displayed document.
        """
        ...
    
    def GetPageText(self):
        """
        GetPageText() -> String
        
        Get the text of the current page.
        """
        ...
    
    def IsBusy(self):
        """
        IsBusy() -> bool
        
        Returns whether the web control is currently busy (e.g. loading a
        page).
        """
        ...
    
    def IsEditable(self):
        """
        IsEditable() -> bool
        
        Returns whether the web control is currently editable.
        """
        ...
    
    def LoadURL(self, url):
        """
        LoadURL(url)
        
        Load a web page from a URL.
        """
        ...
    
    def Print(self):
        """
        Print()
        
        Opens a print dialog so that the user may print the currently
        displayed page.
        """
        ...
    
    def RegisterHandler(self, handler):
        """
        RegisterHandler(handler)
        
        Registers a custom scheme handler.
        """
        ...
    
    def Reload(self, flags=...):
        """
        Reload(flags=WEBVIEW_RELOAD_DEFAULT)
        
        Reload the currently displayed URL.
        """
        ...
    
    def SetEditable(self, enable=...):
        """
        SetEditable(enable=True)
        
        Set the editable property of the web control.
        """
        ...
    
    def SetPage(self, *args, **kw):
        """
        SetPage(html, baseUrl)
        SetPage(html, baseUrl)
        
        Set the displayed page source to the contents of the given string.
        """
        ...
    
    def Stop(self):
        """
        Stop()
        
        Stop the current page loading process, if any.
        """
        ...
    
    @staticmethod
    def New(*args, **kw):
        """
        New(backend=WebViewBackendDefault) -> WebView
        New(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, backend=WebViewBackendDefault, style=0, name=WebViewNameStr) -> WebView
        
        Factory function to create a new wxWebView with two-step creation,
        wxWebView::Create should be called on the returned object.
        """
        ...
    
    @staticmethod
    def RegisterFactory(backend, factory):
        """
        RegisterFactory(backend, factory)
        
        Allows the registering of new backend for wxWebView.
        """
        ...
    
    @staticmethod
    def IsBackendAvailable(backend):
        """
        IsBackendAvailable(backend) -> bool
        
        Allows to check if a specific backend is currently available.
        """
        ...
    
    @staticmethod
    def GetBackendVersionInfo(backend=...):
        """
        GetBackendVersionInfo(backend=WebViewBackendDefault) -> wx.VersionInfo
        
        Retrieve the version information about the backend implementation.
        """
        ...
    
    @staticmethod
    def GetClassDefaultAttributes(variant=...):
        """
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
        """
        ...
    
    @staticmethod
    def MSWSetEmulationLevel(level=...):
        """
        MSWSetEmulationLevel(level=WEBVIEWIE_EMU_IE11) -> bool
        
        Sets emulation level.
        """
        ...
    
    @staticmethod
    def MSWSetModernEmulationLevel(modernLevel=...):
        """
        MSWSetModernEmulationLevel(modernLevel=True) -> bool
        """
        ...
    
    BackwardHistory = ...
    CurrentTitle = ...
    CurrentURL = ...
    ForwardHistory = ...
    NativeBackend = ...
    PageSource = ...
    PageText = ...
    SelectedSource = ...
    SelectedText = ...
    UserAgent = ...
    Zoom = ...
    ZoomFactor = ...
    ZoomType = ...


class WebViewEvent(wx.NotifyEvent):
    """
    WebViewEvent()
    WebViewEvent(type, id, href, target, flags=WEBVIEW_NAV_ACTION_NONE, messageHandler="")
    
    A navigation event holds information about events associated with
    wxWebView objects.
    """
    def __init__(self, *args, **kw) -> None:
        """
        WebViewEvent()
        WebViewEvent(type, id, href, target, flags=WEBVIEW_NAV_ACTION_NONE, messageHandler="")
        
        A navigation event holds information about events associated with
        wxWebView objects.
        """
        ...
    
    def GetTarget(self):
        """
        GetTarget() -> String
        
        Get the name of the target frame which the url of this event has been
        or will be loaded into.
        """
        ...
    
    def GetURL(self):
        """
        GetURL() -> String
        
        Get the URL being visited.
        """
        ...
    
    def GetNavigationAction(self):
        """
        GetNavigationAction() -> WebViewNavigationActionFlags
        
        Get the type of navigation action.
        """
        ...
    
    def GetMessageHandler(self):
        """
        GetMessageHandler() -> String
        
        Get the name of the script handler.
        """
        ...
    
    def IsError(self):
        """
        IsError() -> bool
        
        Returns true the script execution failed.
        """
        ...
    
    MessageHandler = ...
    NavigationAction = ...
    Target = ...
    URL = ...


class WebViewFactory(wx.Object):
    """
    An abstract factory class for creating wxWebView backends.
    """
    def Create(self, *args, **kw):
        """
        Create() -> WebView
        Create(parent, id, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name=WebViewNameStr) -> WebView
        
        Function to create a new wxWebView with two-step creation,
        wxWebView::Create should be called on the returned object.
        """
        ...
    
    def IsAvailable(self):
        """
        IsAvailable() -> bool
        
        Function to check if the backend is available at runtime.
        """
        ...
    
    def GetVersionInfo(self):
        """
        GetVersionInfo() -> wx.VersionInfo
        
        Retrieve the version information about this backend implementation.
        """
        ...
    
    VersionInfo = ...


USE_WEBVIEW = ...
EVT_WEBVIEW_NAVIGATING = ...
EVT_WEBVIEW_NAVIGATED = ...
EVT_WEBVIEW_LOADED = ...
EVT_WEBVIEW_ERROR = ...
EVT_WEBVIEW_NEWWINDOW = ...
EVT_WEBVIEW_TITLE_CHANGED = ...
EVT_WEBVIEW_FULLSCREEN_CHANGED = ...
EVT_WEBVIEW_SCRIPT_MESSAGE_RECEIVED = ...
EVT_WEBVIEW_SCRIPT_RESULT = ...
wxEVT_COMMAND_WEBVIEW_NAVIGATING = ...
wxEVT_COMMAND_WEBVIEW_NAVIGATED = ...
wxEVT_COMMAND_WEBVIEW_LOADED = ...
wxEVT_COMMAND_WEBVIEW_ERROR = ...
wxEVT_COMMAND_WEBVIEW_NEWWINDOW = ...
wxEVT_COMMAND_WEBVIEW_TITLE_CHANGED = ...
