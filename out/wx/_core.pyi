import ConfigBase
import DataObject
import DateTime
import HelpEvent
import Image
import StockGDI
import sip
import wx.siplib
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar, overload

ACCEL_ALT: AcceleratorEntryFlags
ACCEL_CMD: AcceleratorEntryFlags
ACCEL_CTRL: AcceleratorEntryFlags
ACCEL_NORMAL: AcceleratorEntryFlags
ACCEL_RAW_CTRL: AcceleratorEntryFlags
ACCEL_SHIFT: AcceleratorEntryFlags
ACC_EVENT_OBJECT_ACCELERATORCHANGE: int
ACC_EVENT_OBJECT_CREATE: int
ACC_EVENT_OBJECT_DEFACTIONCHANGE: int
ACC_EVENT_OBJECT_DESCRIPTIONCHANGE: int
ACC_EVENT_OBJECT_DESTROY: int
ACC_EVENT_OBJECT_FOCUS: int
ACC_EVENT_OBJECT_HELPCHANGE: int
ACC_EVENT_OBJECT_HIDE: int
ACC_EVENT_OBJECT_LOCATIONCHANGE: int
ACC_EVENT_OBJECT_NAMECHANGE: int
ACC_EVENT_OBJECT_PARENTCHANGE: int
ACC_EVENT_OBJECT_REORDER: int
ACC_EVENT_OBJECT_SELECTION: int
ACC_EVENT_OBJECT_SELECTIONADD: int
ACC_EVENT_OBJECT_SELECTIONREMOVE: int
ACC_EVENT_OBJECT_SELECTIONWITHIN: int
ACC_EVENT_OBJECT_SHOW: int
ACC_EVENT_OBJECT_STATECHANGE: int
ACC_EVENT_OBJECT_VALUECHANGE: int
ACC_EVENT_SYSTEM_ALERT: int
ACC_EVENT_SYSTEM_CAPTUREEND: int
ACC_EVENT_SYSTEM_CAPTURESTART: int
ACC_EVENT_SYSTEM_CONTEXTHELPEND: int
ACC_EVENT_SYSTEM_CONTEXTHELPSTART: int
ACC_EVENT_SYSTEM_DIALOGEND: int
ACC_EVENT_SYSTEM_DIALOGSTART: int
ACC_EVENT_SYSTEM_DRAGDROPEND: int
ACC_EVENT_SYSTEM_DRAGDROPSTART: int
ACC_EVENT_SYSTEM_FOREGROUND: int
ACC_EVENT_SYSTEM_MENUEND: int
ACC_EVENT_SYSTEM_MENUPOPUPEND: int
ACC_EVENT_SYSTEM_MENUPOPUPSTART: int
ACC_EVENT_SYSTEM_MENUSTART: int
ACC_EVENT_SYSTEM_MINIMIZEEND: int
ACC_EVENT_SYSTEM_MINIMIZESTART: int
ACC_EVENT_SYSTEM_MOVESIZEEND: int
ACC_EVENT_SYSTEM_MOVESIZESTART: int
ACC_EVENT_SYSTEM_SCROLLINGEND: int
ACC_EVENT_SYSTEM_SCROLLINGSTART: int
ACC_EVENT_SYSTEM_SOUND: int
ACC_EVENT_SYSTEM_SWITCHEND: int
ACC_EVENT_SYSTEM_SWITCHSTART: int
ACC_FAIL: AccStatus
ACC_FALSE: AccStatus
ACC_INVALID_ARG: AccStatus
ACC_NOT_IMPLEMENTED: AccStatus
ACC_NOT_SUPPORTED: AccStatus
ACC_OK: AccStatus
ACC_SELF: int
ACC_SEL_ADDSELECTION: AccSelectionFlags
ACC_SEL_EXTENDSELECTION: AccSelectionFlags
ACC_SEL_NONE: AccSelectionFlags
ACC_SEL_REMOVESELECTION: AccSelectionFlags
ACC_SEL_TAKEFOCUS: AccSelectionFlags
ACC_SEL_TAKESELECTION: AccSelectionFlags
ACC_STATE_SYSTEM_ALERT_HIGH: int
ACC_STATE_SYSTEM_ALERT_LOW: int
ACC_STATE_SYSTEM_ALERT_MEDIUM: int
ACC_STATE_SYSTEM_ANIMATED: int
ACC_STATE_SYSTEM_BUSY: int
ACC_STATE_SYSTEM_CHECKED: int
ACC_STATE_SYSTEM_COLLAPSED: int
ACC_STATE_SYSTEM_DEFAULT: int
ACC_STATE_SYSTEM_EXPANDED: int
ACC_STATE_SYSTEM_EXTSELECTABLE: int
ACC_STATE_SYSTEM_FLOATING: int
ACC_STATE_SYSTEM_FOCUSABLE: int
ACC_STATE_SYSTEM_FOCUSED: int
ACC_STATE_SYSTEM_HOTTRACKED: int
ACC_STATE_SYSTEM_INVISIBLE: int
ACC_STATE_SYSTEM_MARQUEED: int
ACC_STATE_SYSTEM_MIXED: int
ACC_STATE_SYSTEM_MULTISELECTABLE: int
ACC_STATE_SYSTEM_OFFSCREEN: int
ACC_STATE_SYSTEM_PRESSED: int
ACC_STATE_SYSTEM_PROTECTED: int
ACC_STATE_SYSTEM_READONLY: int
ACC_STATE_SYSTEM_SELECTABLE: int
ACC_STATE_SYSTEM_SELECTED: int
ACC_STATE_SYSTEM_SELFVOICING: int
ACC_STATE_SYSTEM_UNAVAILABLE: int
ALIGN_BOTTOM: Alignment
ALIGN_CENTER: Alignment
ALIGN_CENTER_HORIZONTAL: Alignment
ALIGN_CENTER_VERTICAL: Alignment
ALIGN_CENTRE: Alignment
ALIGN_CENTRE_HORIZONTAL: Alignment
ALIGN_CENTRE_VERTICAL: Alignment
ALIGN_INVALID: Alignment
ALIGN_LEFT: Alignment
ALIGN_MASK: Alignment
ALIGN_NOT: Alignment
ALIGN_RIGHT: Alignment
ALIGN_TOP: Alignment
ALL: Direction
ALPHA_OPAQUE: int
ALPHA_TRANSPARENT: int
ALWAYS_SHOW_SB: int
AND: RasterOperationMode
AND_INVERT: RasterOperationMode
AND_REVERSE: RasterOperationMode
ANTIALIAS_DEFAULT: AntialiasMode
ANTIALIAS_NONE: AntialiasMode
APPLY: int
APP_ASSERT_DIALOG: AppAssertMode
APP_ASSERT_EXCEPTION: AppAssertMode
APP_ASSERT_LOG: AppAssertMode
APP_ASSERT_SUPPRESS: AppAssertMode
ARCH_32: Architecture
ARCH_64: Architecture
ARCH_INVALID: Architecture
ARCH_MAX: Architecture
ART_ADD_BOOKMARK: bytes
ART_BUTTON: bytes
ART_CDROM: bytes
ART_CLOSE: bytes
ART_CMN_DIALOG: bytes
ART_COPY: bytes
ART_CROSS_MARK: bytes
ART_CUT: bytes
ART_DELETE: bytes
ART_DEL_BOOKMARK: bytes
ART_EDIT: bytes
ART_ERROR: bytes
ART_EXECUTABLE_FILE: bytes
ART_FILE_OPEN: bytes
ART_FILE_SAVE: bytes
ART_FILE_SAVE_AS: bytes
ART_FIND: bytes
ART_FIND_AND_REPLACE: bytes
ART_FLOPPY: bytes
ART_FOLDER: bytes
ART_FOLDER_OPEN: bytes
ART_FRAME_ICON: bytes
ART_FULL_SCREEN: bytes
ART_GOTO_FIRST: bytes
ART_GOTO_LAST: bytes
ART_GO_BACK: bytes
ART_GO_DIR_UP: bytes
ART_GO_DOWN: bytes
ART_GO_FORWARD: bytes
ART_GO_HOME: bytes
ART_GO_TO_PARENT: bytes
ART_GO_UP: bytes
ART_HARDDISK: bytes
ART_HELP: bytes
ART_HELP_BOOK: bytes
ART_HELP_BROWSER: bytes
ART_HELP_FOLDER: bytes
ART_HELP_PAGE: bytes
ART_HELP_SETTINGS: bytes
ART_HELP_SIDE_PANEL: bytes
ART_INFORMATION: bytes
ART_LIST: bytes
ART_LIST_VIEW: bytes
ART_MENU: bytes
ART_MESSAGE_BOX: bytes
ART_MINUS: bytes
ART_MISSING_IMAGE: bytes
ART_NEW: bytes
ART_NEW_DIR: bytes
ART_NORMAL_FILE: bytes
ART_OTHER: bytes
ART_PASTE: bytes
ART_PLUS: bytes
ART_PRINT: bytes
ART_QUESTION: bytes
ART_QUIT: bytes
ART_REDO: bytes
ART_REMOVABLE: bytes
ART_REPORT_VIEW: bytes
ART_TICK_MARK: bytes
ART_TIP: bytes
ART_TOOLBAR: bytes
ART_UNDO: bytes
ART_WARNING: bytes
ART_WX_LOGO: bytes
Above: Relationship
Absolute: Relationship
AsIs: Relationship
BACKINGSTORE: int
BACKWARD: int
BATTERY_CRITICAL_STATE: BatteryState
BATTERY_LOW_STATE: BatteryState
BATTERY_NORMAL_STATE: BatteryState
BATTERY_SHUTDOWN_STATE: BatteryState
BATTERY_UNKNOWN_STATE: BatteryState
BG_STYLE_COLOUR: BackgroundStyle
BG_STYLE_ERASE: BackgroundStyle
BG_STYLE_PAINT: BackgroundStyle
BG_STYLE_SYSTEM: BackgroundStyle
BG_STYLE_TRANSPARENT: BackgroundStyle
BITMAP_SCREEN_DEPTH: int
BITMAP_TYPE_ANI: BitmapType
BITMAP_TYPE_ANY: BitmapType
BITMAP_TYPE_BMP: BitmapType
BITMAP_TYPE_CUR: BitmapType
BITMAP_TYPE_GIF: BitmapType
BITMAP_TYPE_ICO: BitmapType
BITMAP_TYPE_ICON: BitmapType
BITMAP_TYPE_IFF: BitmapType
BITMAP_TYPE_INVALID: BitmapType
BITMAP_TYPE_JPEG: BitmapType
BITMAP_TYPE_MACCURSOR: BitmapType
BITMAP_TYPE_PCX: BitmapType
BITMAP_TYPE_PICT: BitmapType
BITMAP_TYPE_PNG: BitmapType
BITMAP_TYPE_PNM: BitmapType
BITMAP_TYPE_TGA: BitmapType
BITMAP_TYPE_TIF: BitmapType
BITMAP_TYPE_TIFF: BitmapType
BITMAP_TYPE_XBM: BitmapType
BITMAP_TYPE_XBM_DATA: BitmapType
BITMAP_TYPE_XPM: BitmapType
BITMAP_TYPE_XPM_DATA: BitmapType
BITNESS_32: Bitness
BITNESS_64: Bitness
BITNESS_INVALID: Bitness
BITNESS_MAX: Bitness
BI_EXPAND: int
BK_ALIGN_MASK: int
BK_BOTTOM: int
BK_DEFAULT: int
BK_HITTEST_NOWHERE: int
BK_HITTEST_ONICON: int
BK_HITTEST_ONITEM: int
BK_HITTEST_ONLABEL: int
BK_HITTEST_ONPAGE: int
BK_LEFT: int
BK_RIGHT: int
BK_TOP: int
BMP_1BPP: int
BMP_1BPP_BW: int
BMP_24BPP: int
BMP_4BPP: int
BMP_8BPP: int
BMP_8BPP_GRAY: int
BMP_8BPP_GREY: int
BMP_8BPP_PALETTE: int
BMP_8BPP_RED: int
BORDER: int
BORDER_DEFAULT: Border
BORDER_DOUBLE: Border
BORDER_MASK: Border
BORDER_NONE: Border
BORDER_RAISED: Border
BORDER_SIMPLE: Border
BORDER_STATIC: Border
BORDER_SUNKEN: Border
BORDER_THEME: Border
BOTH: Orientation
BOTTOM: Direction
BRUSHSTYLE_BDIAGONAL_HATCH: BrushStyle
BRUSHSTYLE_CROSSDIAG_HATCH: BrushStyle
BRUSHSTYLE_CROSS_HATCH: BrushStyle
BRUSHSTYLE_FDIAGONAL_HATCH: BrushStyle
BRUSHSTYLE_FIRST_HATCH: BrushStyle
BRUSHSTYLE_HORIZONTAL_HATCH: BrushStyle
BRUSHSTYLE_INVALID: BrushStyle
BRUSHSTYLE_LAST_HATCH: BrushStyle
BRUSHSTYLE_SOLID: BrushStyle
BRUSHSTYLE_STIPPLE: BrushStyle
BRUSHSTYLE_STIPPLE_MASK: BrushStyle
BRUSHSTYLE_STIPPLE_MASK_OPAQUE: BrushStyle
BRUSHSTYLE_TRANSPARENT: BrushStyle
BRUSHSTYLE_VERTICAL_HATCH: BrushStyle
BUFFER_CLIENT_AREA: int
BUFFER_USES_SHARED_BUFFER: int
BUFFER_VIRTUAL_AREA: int
BU_ALIGN_MASK: int
BU_AUTODRAW: int
BU_BOTTOM: int
BU_EXACTFIT: int
BU_LEFT: int
BU_NOTEXT: int
BU_RIGHT: int
BU_TOP: int
Below: Relationship
BitmapBufferFormat_ARGB32: BitmapBufferFormat
BitmapBufferFormat_RGB: BitmapBufferFormat
BitmapBufferFormat_RGB32: BitmapBufferFormat
BitmapBufferFormat_RGBA: BitmapBufferFormat
Bottom: Edge
ButtonNameStr: bytes
C2S_CSS_SYNTAX: int
C2S_HTML_SYNTAX: int
C2S_NAME: int
CANCEL: int
CANCEL_DEFAULT: int
CAPTION: int
CAP_BUTT: PenCap
CAP_INVALID: PenCap
CAP_PROJECTING: PenCap
CAP_ROUND: PenCap
CB_DROPDOWN: int
CB_READONLY: int
CB_SIMPLE: int
CB_SORT: int
CC_SPECIAL_DCLICK: int
CC_STD_BUTTON: int
CENTER: GeometryCentre
CENTRE: GeometryCentre
CHB_ALIGN_MASK: int
CHB_BOTTOM: int
CHB_DEFAULT: int
CHB_LEFT: int
CHB_RIGHT: int
CHB_TOP: int
CHK_2STATE: int
CHK_3STATE: int
CHK_ALLOW_3RD_STATE_FOR_USER: int
CHK_CHECKED: CheckBoxState
CHK_UNCHECKED: CheckBoxState
CHK_UNDETERMINED: CheckBoxState
CHOICEDLG_STYLE: int
CHOICE_HEIGHT: int
CHOICE_WIDTH: int
CLEAR: RasterOperationMode
CLIP_CHILDREN: int
CLIP_SIBLINGS: int
CLOSE: int
CLOSE_BOX: int
CLRP_DEFAULT_STYLE: int
CLRP_SHOW_ALPHA: int
CLRP_SHOW_LABEL: int
CLRP_USE_TEXTCTRL: int
COLOURED: int
COL_DEFAULT_FLAGS: int
COL_HIDDEN: int
COL_REORDERABLE: int
COL_RESIZABLE: int
COL_SORTABLE: int
COL_WIDTH_AUTOSIZE: int
COL_WIDTH_DEFAULT: int
COMPOSITION_ADD: CompositionMode
COMPOSITION_ATOP: CompositionMode
COMPOSITION_CLEAR: CompositionMode
COMPOSITION_DEST: CompositionMode
COMPOSITION_DEST_ATOP: CompositionMode
COMPOSITION_DEST_IN: CompositionMode
COMPOSITION_DEST_OUT: CompositionMode
COMPOSITION_DEST_OVER: CompositionMode
COMPOSITION_DIFF: CompositionMode
COMPOSITION_IN: CompositionMode
COMPOSITION_INVALID: CompositionMode
COMPOSITION_OUT: CompositionMode
COMPOSITION_OVER: CompositionMode
COMPOSITION_SOURCE: CompositionMode
COMPOSITION_XOR: CompositionMode
CONFIG_USE_GLOBAL_FILE: int
CONFIG_USE_LOCAL_FILE: int
CONFIG_USE_NO_ESCAPE_CHARACTERS: int
CONFIG_USE_RELATIVE_PATH: int
CONFIG_USE_SUBDIR: int
CONTENT_PROTECTION_ENABLED: ContentProtection
CONTENT_PROTECTION_NONE: ContentProtection
CONTROL_CELL: int
CONTROL_CHECKABLE: int
CONTROL_CHECKED: int
CONTROL_CURRENT: int
CONTROL_DISABLED: int
CONTROL_EXPANDED: int
CONTROL_FLAT: int
CONTROL_FOCUSED: int
CONTROL_ISDEFAULT: int
CONTROL_ISSUBMENU: int
CONTROL_NONE: int
CONTROL_PRESSED: int
CONTROL_SELECTED: int
CONTROL_SIZEGRIP: int
CONTROL_SPECIAL: int
CONTROL_UNDETERMINED: int
COPY: RasterOperationMode
CP_DEFAULT_STYLE: int
CP_NO_TLW_RESIZE: int
CURSOR_ARROW: StockCursor
CURSOR_ARROWWAIT: StockCursor
CURSOR_BLANK: StockCursor
CURSOR_BULLSEYE: StockCursor
CURSOR_CHAR: StockCursor
CURSOR_COPY_ARROW: StockCursor
CURSOR_CROSS: StockCursor
CURSOR_DEFAULT: StockCursor
CURSOR_HAND: StockCursor
CURSOR_IBEAM: StockCursor
CURSOR_LEFT_BUTTON: StockCursor
CURSOR_MAGNIFIER: StockCursor
CURSOR_MAX: StockCursor
CURSOR_MIDDLE_BUTTON: StockCursor
CURSOR_NONE: StockCursor
CURSOR_NO_ENTRY: StockCursor
CURSOR_PAINT_BRUSH: StockCursor
CURSOR_PENCIL: StockCursor
CURSOR_POINT_LEFT: StockCursor
CURSOR_POINT_RIGHT: StockCursor
CURSOR_QUESTION_ARROW: StockCursor
CURSOR_RIGHT_ARROW: StockCursor
CURSOR_RIGHT_BUTTON: StockCursor
CURSOR_SIZENESW: StockCursor
CURSOR_SIZENS: StockCursor
CURSOR_SIZENWSE: StockCursor
CURSOR_SIZEWE: StockCursor
CURSOR_SIZING: StockCursor
CURSOR_SPRAYCAN: StockCursor
CURSOR_WAIT: StockCursor
CURSOR_WATCH: StockCursor
Center: Edge
Centre: Edge
CentreX: Edge
CentreY: Edge
CheckBoxNameStr: bytes
ChoiceNameStr: bytes
CollapsibleHeaderCtrlNameStr: bytes
CollapsiblePaneNameStr: bytes
ColourPickerCtrlNameStr: bytes
ColourPickerWidgetNameStr: bytes
ComboBoxNameStr: bytes
ControlNameStr: bytes
DD_CHANGE_DIR: int
DD_DEFAULT_STYLE: int
DD_DIR_MUST_EXIST: int
DD_MULTIPLE: int
DD_NEW_DIR_BUTTON: int
DD_SHOW_HIDDEN: int
DEFAULT_DIALOG_STYLE: int
DEFAULT_FRAME_STYLE: int
DF_BITMAP: DataFormatId
DF_DIB: DataFormatId
DF_DIF: DataFormatId
DF_ENHMETAFILE: DataFormatId
DF_FILENAME: DataFormatId
DF_HTML: DataFormatId
DF_INVALID: DataFormatId
DF_LOCALE: DataFormatId
DF_MAX: DataFormatId
DF_METAFILE: DataFormatId
DF_OEMTEXT: DataFormatId
DF_PALETTE: DataFormatId
DF_PENDATA: DataFormatId
DF_PNG: DataFormatId
DF_PRIVATE: DataFormatId
DF_RIFF: DataFormatId
DF_SYLK: DataFormatId
DF_TEXT: DataFormatId
DF_TIFF: DataFormatId
DF_UNICODETEXT: DataFormatId
DF_WAVE: DataFormatId
DIALOG_ADAPTATION_ANY_SIZER: int
DIALOG_ADAPTATION_LOOSE_BUTTONS: int
DIALOG_ADAPTATION_MODE_DEFAULT: DialogLayoutAdaptationMode
DIALOG_ADAPTATION_MODE_DISABLED: DialogLayoutAdaptationMode
DIALOG_ADAPTATION_MODE_ENABLED: DialogLayoutAdaptationMode
DIALOG_ADAPTATION_NONE: int
DIALOG_ADAPTATION_STANDARD_SIZER: int
DIALOG_EX_CONTEXTHELP: int
DIALOG_EX_METAL: int
DIALOG_NO_PARENT: int
DIRCTRL_3D_INTERNAL: int
DIRCTRL_DEFAULT_STYLE: int
DIRCTRL_DIR_ONLY: int
DIRCTRL_EDIT_LABELS: int
DIRCTRL_MULTIPLE: int
DIRCTRL_SELECT_FIRST: int
DIRCTRL_SHOW_FILTERS: int
DIRECTION_MASK: Direction
DIRP_CHANGE_DIR: int
DIRP_DEFAULT_STYLE: int
DIRP_DIR_MUST_EXIST: int
DIRP_SMALL: int
DIRP_USE_TEXTCTRL: int
DOUBLE_BORDER: int
DOWN: Direction
DUPLEX_HORIZONTAL: DuplexMode
DUPLEX_SIMPLEX: DuplexMode
DUPLEX_VERTICAL: DuplexMode
DefaultCoord: int
DefaultDateTime: DateTime
DefaultDateTimeFormat: bytes
DefaultPosition: Point
DefaultSize: Size
DefaultSpan: GBSpan
DefaultTimeSpanFormat: bytes
DefaultValidator: Validator
DefaultVideoMode: VideoMode
DialogNameStr: bytes
DirDialogDefaultFolderStr: bytes
DirDialogNameStr: bytes
DirPickerCtrlNameStr: bytes
DirPickerWidgetLabel: bytes
DirPickerWidgetNameStr: bytes
DirSelectorPromptStr: bytes
DragCancel: DragResult
DragCopy: DragResult
DragError: DragResult
DragLink: DragResult
DragMove: DragResult
DragNone: DragResult
Drag_AllowMove: int
Drag_CopyOnly: int
Drag_DefaultMove: int
EAST: Direction
ELLIPSIZE_END: EllipsizeMode
ELLIPSIZE_FLAGS_DEFAULT: EllipsizeFlags
ELLIPSIZE_FLAGS_EXPAND_TABS: EllipsizeFlags
ELLIPSIZE_FLAGS_NONE: EllipsizeFlags
ELLIPSIZE_FLAGS_PROCESS_MNEMONICS: EllipsizeFlags
ELLIPSIZE_MIDDLE: EllipsizeMode
ELLIPSIZE_NONE: EllipsizeMode
ELLIPSIZE_START: EllipsizeMode
ENDIAN_BIG: Endianness
ENDIAN_INVALID: Endianness
ENDIAN_LITTLE: Endianness
ENDIAN_MAX: Endianness
ENDIAN_PDP: Endianness
EQUIV: RasterOperationMode
EVENT_PROPAGATE_MAX: EventPropagation
EVENT_PROPAGATE_NONE: EventPropagation
EVT_CATEGORY_ALL: EventCategory
EVT_CATEGORY_SOCKET: EventCategory
EVT_CATEGORY_THREAD: EventCategory
EVT_CATEGORY_TIMER: EventCategory
EVT_CATEGORY_UI: EventCategory
EVT_CATEGORY_USER_INPUT: EventCategory
EXEC_ASYNC: int
EXEC_BLOCK: int
EXEC_HIDE_CONSOLE: int
EXEC_MAKE_GROUP_LEADER: int
EXEC_NODISABLE: int
EXEC_NOEVENTS: int
EXEC_SHOW_CONSOLE: int
EXEC_SYNC: int
EXPAND: Stretch
EXTEND_LAST_ON_EACH_LINE: int
FC_DEFAULT_STYLE: int
FC_MULTIPLE: int
FC_NOSHOWHIDDEN: int
FC_OPEN: int
FC_SAVE: int
FD_CHANGE_DIR: int
FD_DEFAULT_STYLE: int
FD_FILE_MUST_EXIST: int
FD_MULTIPLE: int
FD_NO_FOLLOW: int
FD_OPEN: int
FD_OVERWRITE_PROMPT: int
FD_PREVIEW: int
FD_SAVE: int
FD_SHOW_HIDDEN: int
FH_PATH_SHOW_ALWAYS: FileHistoryMenuPathStyle
FH_PATH_SHOW_IF_DIFFERENT: FileHistoryMenuPathStyle
FH_PATH_SHOW_NEVER: FileHistoryMenuPathStyle
FIXED_LENGTH: int
FIXED_MINSIZE: SizerFlagBits
FLEX_GROWMODE_ALL: FlexSizerGrowMode
FLEX_GROWMODE_NONE: FlexSizerGrowMode
FLEX_GROWMODE_SPECIFIED: FlexSizerGrowMode
FLOOD_BORDER: FloodFillStyle
FLOOD_SURFACE: FloodFillStyle
FLP_CHANGE_DIR: int
FLP_DEFAULT_STYLE: int
FLP_FILE_MUST_EXIST: int
FLP_OPEN: int
FLP_OVERWRITE_PROMPT: int
FLP_SAVE: int
FLP_SMALL: int
FLP_USE_TEXTCTRL: int
FNTP_DEFAULT_STYLE: int
FNTP_FONTDESC_AS_LABEL: int
FNTP_USEFONT_FOR_LABEL: int
FNTP_USE_TEXTCTRL: int
FONTBTN_DEFAULT_STYLE: int
FONTENCODING_ALTERNATIVE: FontEncoding
FONTENCODING_BIG5: FontEncoding
FONTENCODING_BULGARIAN: FontEncoding
FONTENCODING_CP1250: FontEncoding
FONTENCODING_CP1251: FontEncoding
FONTENCODING_CP1252: FontEncoding
FONTENCODING_CP1253: FontEncoding
FONTENCODING_CP1254: FontEncoding
FONTENCODING_CP1255: FontEncoding
FONTENCODING_CP1256: FontEncoding
FONTENCODING_CP1257: FontEncoding
FONTENCODING_CP1258: FontEncoding
FONTENCODING_CP12_MAX: FontEncoding
FONTENCODING_CP1361: FontEncoding
FONTENCODING_CP437: FontEncoding
FONTENCODING_CP850: FontEncoding
FONTENCODING_CP852: FontEncoding
FONTENCODING_CP855: FontEncoding
FONTENCODING_CP866: FontEncoding
FONTENCODING_CP874: FontEncoding
FONTENCODING_CP932: FontEncoding
FONTENCODING_CP936: FontEncoding
FONTENCODING_CP949: FontEncoding
FONTENCODING_CP950: FontEncoding
FONTENCODING_DEFAULT: FontEncoding
FONTENCODING_EUC_JP: FontEncoding
FONTENCODING_EUC_KR: FontEncoding
FONTENCODING_GB2312: FontEncoding
FONTENCODING_ISO2022_JP: FontEncoding
FONTENCODING_ISO8859_1: FontEncoding
FONTENCODING_ISO8859_10: FontEncoding
FONTENCODING_ISO8859_11: FontEncoding
FONTENCODING_ISO8859_12: FontEncoding
FONTENCODING_ISO8859_13: FontEncoding
FONTENCODING_ISO8859_14: FontEncoding
FONTENCODING_ISO8859_15: FontEncoding
FONTENCODING_ISO8859_2: FontEncoding
FONTENCODING_ISO8859_3: FontEncoding
FONTENCODING_ISO8859_4: FontEncoding
FONTENCODING_ISO8859_5: FontEncoding
FONTENCODING_ISO8859_6: FontEncoding
FONTENCODING_ISO8859_7: FontEncoding
FONTENCODING_ISO8859_8: FontEncoding
FONTENCODING_ISO8859_9: FontEncoding
FONTENCODING_ISO8859_MAX: FontEncoding
FONTENCODING_JOHAB: FontEncoding
FONTENCODING_KOI8: FontEncoding
FONTENCODING_KOI8_U: FontEncoding
FONTENCODING_MACARABIC: FontEncoding
FONTENCODING_MACARABICEXT: FontEncoding
FONTENCODING_MACARMENIAN: FontEncoding
FONTENCODING_MACBENGALI: FontEncoding
FONTENCODING_MACBURMESE: FontEncoding
FONTENCODING_MACCELTIC: FontEncoding
FONTENCODING_MACCENTRALEUR: FontEncoding
FONTENCODING_MACCHINESESIMP: FontEncoding
FONTENCODING_MACCHINESETRAD: FontEncoding
FONTENCODING_MACCROATIAN: FontEncoding
FONTENCODING_MACCYRILLIC: FontEncoding
FONTENCODING_MACDEVANAGARI: FontEncoding
FONTENCODING_MACDINGBATS: FontEncoding
FONTENCODING_MACETHIOPIC: FontEncoding
FONTENCODING_MACGAELIC: FontEncoding
FONTENCODING_MACGEORGIAN: FontEncoding
FONTENCODING_MACGREEK: FontEncoding
FONTENCODING_MACGUJARATI: FontEncoding
FONTENCODING_MACGURMUKHI: FontEncoding
FONTENCODING_MACHEBREW: FontEncoding
FONTENCODING_MACICELANDIC: FontEncoding
FONTENCODING_MACJAPANESE: FontEncoding
FONTENCODING_MACKANNADA: FontEncoding
FONTENCODING_MACKEYBOARD: FontEncoding
FONTENCODING_MACKHMER: FontEncoding
FONTENCODING_MACKOREAN: FontEncoding
FONTENCODING_MACLAOTIAN: FontEncoding
FONTENCODING_MACMALAJALAM: FontEncoding
FONTENCODING_MACMAX: FontEncoding
FONTENCODING_MACMIN: FontEncoding
FONTENCODING_MACMONGOLIAN: FontEncoding
FONTENCODING_MACORIYA: FontEncoding
FONTENCODING_MACROMAN: FontEncoding
FONTENCODING_MACROMANIAN: FontEncoding
FONTENCODING_MACSINHALESE: FontEncoding
FONTENCODING_MACSYMBOL: FontEncoding
FONTENCODING_MACTAMIL: FontEncoding
FONTENCODING_MACTELUGU: FontEncoding
FONTENCODING_MACTHAI: FontEncoding
FONTENCODING_MACTIBETAN: FontEncoding
FONTENCODING_MACTURKISH: FontEncoding
FONTENCODING_MACVIATNAMESE: FontEncoding
FONTENCODING_MAX: FontEncoding
FONTENCODING_SHIFT_JIS: FontEncoding
FONTENCODING_SYSTEM: FontEncoding
FONTENCODING_UNICODE: FontEncoding
FONTENCODING_UTF16: FontEncoding
FONTENCODING_UTF16BE: FontEncoding
FONTENCODING_UTF16LE: FontEncoding
FONTENCODING_UTF32: FontEncoding
FONTENCODING_UTF32BE: FontEncoding
FONTENCODING_UTF32LE: FontEncoding
FONTENCODING_UTF7: FontEncoding
FONTENCODING_UTF8: FontEncoding
FONTENCODING_VIETNAMESE: FontEncoding
FONTFAMILY_DECORATIVE: FontFamily
FONTFAMILY_DEFAULT: FontFamily
FONTFAMILY_MAX: FontFamily
FONTFAMILY_MODERN: FontFamily
FONTFAMILY_ROMAN: FontFamily
FONTFAMILY_SCRIPT: FontFamily
FONTFAMILY_SWISS: FontFamily
FONTFAMILY_TELETYPE: FontFamily
FONTFAMILY_UNKNOWN: FontFamily
FONTFLAG_ANTIALIASED: FontFlag
FONTFLAG_BOLD: FontFlag
FONTFLAG_DEFAULT: FontFlag
FONTFLAG_ITALIC: FontFlag
FONTFLAG_LIGHT: FontFlag
FONTFLAG_MASK: FontFlag
FONTFLAG_NOT_ANTIALIASED: FontFlag
FONTFLAG_SLANT: FontFlag
FONTFLAG_STRIKETHROUGH: FontFlag
FONTFLAG_UNDERLINED: FontFlag
FONTSIZE_LARGE: FontSymbolicSize
FONTSIZE_MEDIUM: FontSymbolicSize
FONTSIZE_SMALL: FontSymbolicSize
FONTSIZE_XX_LARGE: FontSymbolicSize
FONTSIZE_XX_SMALL: FontSymbolicSize
FONTSIZE_X_LARGE: FontSymbolicSize
FONTSIZE_X_SMALL: FontSymbolicSize
FONTSTYLE_ITALIC: FontStyle
FONTSTYLE_MAX: FontStyle
FONTSTYLE_NORMAL: FontStyle
FONTSTYLE_SLANT: FontStyle
FONTWEIGHT_BOLD: FontWeight
FONTWEIGHT_EXTRABOLD: FontWeight
FONTWEIGHT_EXTRAHEAVY: FontWeight
FONTWEIGHT_EXTRALIGHT: FontWeight
FONTWEIGHT_HEAVY: FontWeight
FONTWEIGHT_INVALID: FontWeight
FONTWEIGHT_LIGHT: FontWeight
FONTWEIGHT_MAX: FontWeight
FONTWEIGHT_MEDIUM: FontWeight
FONTWEIGHT_NORMAL: FontWeight
FONTWEIGHT_SEMIBOLD: FontWeight
FONTWEIGHT_THIN: FontWeight
FORWARD: int
FRAME_DRAWER: int
FRAME_EX_CONTEXTHELP: int
FRAME_EX_METAL: int
FRAME_FLOAT_ON_PARENT: int
FRAME_NO_TASKBAR: int
FRAME_NO_WINDOW_MENU: int
FRAME_SHAPED: int
FRAME_TOOL_WINDOW: int
FR_DOWN: FindReplaceFlags
FR_MATCHCASE: FindReplaceFlags
FR_NOMATCHCASE: FindReplaceDialogStyles
FR_NOUPDOWN: FindReplaceDialogStyles
FR_NOWHOLEWORD: FindReplaceDialogStyles
FR_REPLACEDIALOG: FindReplaceDialogStyles
FR_WHOLEWORD: FindReplaceFlags
FSW_EVENT_ACCESS: FSWFlags
FSW_EVENT_ALL: FSWFlags
FSW_EVENT_ATTRIB: FSWFlags
FSW_EVENT_CREATE: FSWFlags
FSW_EVENT_DELETE: FSWFlags
FSW_EVENT_ERROR: FSWFlags
FSW_EVENT_MODIFY: FSWFlags
FSW_EVENT_RENAME: FSWFlags
FSW_EVENT_UNMOUNT: FSWFlags
FSW_EVENT_WARNING: FSWFlags
FSW_WARNING_GENERAL: FSWWarningType
FSW_WARNING_NONE: FSWWarningType
FSW_WARNING_OVERFLOW: FSWWarningType
FS_READ: FileSystemOpenFlags
FS_SEEKABLE: FileSystemOpenFlags
FULLSCREEN_ALL: int
FULLSCREEN_NOBORDER: int
FULLSCREEN_NOCAPTION: int
FULLSCREEN_NOMENUBAR: int
FULLSCREEN_NOSTATUSBAR: int
FULLSCREEN_NOTOOLBAR: int
FULL_REPAINT_ON_RESIZE: int
FileCtrlNameStr: bytes
FileDialogNameStr: bytes
FilePickerCtrlNameStr: bytes
FilePickerWidgetLabel: bytes
FilePickerWidgetNameStr: bytes
FileSelectorDefaultWildcardStr: bytes
FileSelectorPromptStr: bytes
FontPickerCtrlNameStr: bytes
FontPickerWidgetNameStr: bytes
FormatInvalid: DataFormat
FrameNameStr: bytes
FromCurrent: SeekMode
FromEnd: SeekMode
FromStart: SeekMode
GA_HORIZONTAL: int
GA_PROGRESS: int
GA_SMOOTH: int
GA_TEXT: int
GA_VERTICAL: int
GRADIENT_LINEAR: GradientType
GRADIENT_NONE: GradientType
GRADIENT_RADIAL: GradientType
GROW: Stretch
GaugeNameStr: bytes
GetPasswordFromUserPromptStr: bytes
GetTextFromUserPromptStr: bytes
HDR_SORT_ICON_DOWN: HeaderSortIconType
HDR_SORT_ICON_NONE: HeaderSortIconType
HDR_SORT_ICON_UP: HeaderSortIconType
HD_ALLOW_HIDE: int
HD_ALLOW_REORDER: int
HD_BITMAP_ON_RIGHT: int
HD_DEFAULT_STYLE: int
HELP: int
HELP_NETSCAPE: int
HELP_SEARCH_ALL: HelpSearchMode
HELP_SEARCH_INDEX: HelpSearchMode
HORIZONTAL: Orientation
HSCROLL: int
HT_MAX: HitTest
HT_NOWHERE: HitTest
HT_SCROLLBAR_ARROW_LINE_1: HitTest
HT_SCROLLBAR_ARROW_LINE_2: HitTest
HT_SCROLLBAR_ARROW_PAGE_1: HitTest
HT_SCROLLBAR_ARROW_PAGE_2: HitTest
HT_SCROLLBAR_BAR_1: HitTest
HT_SCROLLBAR_BAR_2: HitTest
HT_SCROLLBAR_FIRST: HitTest
HT_SCROLLBAR_LAST: HitTest
HT_SCROLLBAR_THUMB: HitTest
HT_WINDOW_CORNER: HitTest
HT_WINDOW_HORZ_SCROLLBAR: HitTest
HT_WINDOW_INSIDE: HitTest
HT_WINDOW_OUTSIDE: HitTest
HT_WINDOW_VERT_SCROLLBAR: HitTest
HeaderCtrlNameStr: bytes
Height: Edge
ICONIZE: int
ICON_ASTERISK: int
ICON_AUTH_NEEDED: int
ICON_ERROR: int
ICON_EXCLAMATION: int
ICON_HAND: int
ICON_INFORMATION: int
ICON_MASK: int
ICON_NONE: int
ICON_QUESTION: int
ICON_SCREEN_DEPTH: int
ICON_STOP: int
ICON_WARNING: int
IDLE_PROCESS_ALL: IdleMode
IDLE_PROCESS_SPECIFIED: IdleMode
ID_ABORT: StandardID
ID_ABOUT: StandardID
ID_ADD: StandardID
ID_ANY: StandardID
ID_APPLY: StandardID
ID_AUTO_HIGHEST: StandardID
ID_AUTO_LOWEST: StandardID
ID_BACKWARD: StandardID
ID_BOLD: StandardID
ID_BOTTOM: StandardID
ID_CANCEL: StandardID
ID_CDROM: StandardID
ID_CLEAR: StandardID
ID_CLOSE: StandardID
ID_CLOSE_ALL: StandardID
ID_CLOSE_FRAME: StandardID
ID_CONTEXT_HELP: StandardID
ID_CONVERT: StandardID
ID_COPY: StandardID
ID_CUT: StandardID
ID_DEFAULT: StandardID
ID_DELETE: StandardID
ID_DOWN: StandardID
ID_DUPLICATE: StandardID
ID_EDIT: StandardID
ID_EXECUTE: StandardID
ID_EXIT: StandardID
ID_FILE: StandardID
ID_FILE1: StandardID
ID_FILE2: StandardID
ID_FILE3: StandardID
ID_FILE4: StandardID
ID_FILE5: StandardID
ID_FILE6: StandardID
ID_FILE7: StandardID
ID_FILE8: StandardID
ID_FILE9: StandardID
ID_FILECTRL: StandardID
ID_FILEDLGG: StandardID
ID_FIND: StandardID
ID_FIRST: StandardID
ID_FLOPPY: StandardID
ID_FORWARD: StandardID
ID_HARDDISK: StandardID
ID_HELP: StandardID
ID_HELP_COMMANDS: StandardID
ID_HELP_CONTENTS: StandardID
ID_HELP_CONTEXT: StandardID
ID_HELP_INDEX: StandardID
ID_HELP_PROCEDURES: StandardID
ID_HELP_SEARCH: StandardID
ID_HIGHEST: StandardID
ID_HOME: StandardID
ID_ICONIZE_FRAME: StandardID
ID_IGNORE: StandardID
ID_INDENT: StandardID
ID_INDEX: StandardID
ID_INFO: StandardID
ID_ITALIC: StandardID
ID_JUMP_TO: StandardID
ID_JUSTIFY_CENTER: StandardID
ID_JUSTIFY_FILL: StandardID
ID_JUSTIFY_LEFT: StandardID
ID_JUSTIFY_RIGHT: StandardID
ID_LAST: StandardID
ID_LOWEST: StandardID
ID_MAXIMIZE_FRAME: StandardID
ID_MDI_WINDOW_ARRANGE_ICONS: StandardID
ID_MDI_WINDOW_CASCADE: StandardID
ID_MDI_WINDOW_FIRST: StandardID
ID_MDI_WINDOW_LAST: StandardID
ID_MDI_WINDOW_NEXT: StandardID
ID_MDI_WINDOW_PREV: StandardID
ID_MDI_WINDOW_TILE_HORZ: StandardID
ID_MDI_WINDOW_TILE_VERT: StandardID
ID_MORE: StandardID
ID_MOVE_FRAME: StandardID
ID_NETWORK: StandardID
ID_NEW: StandardID
ID_NO: StandardID
ID_NONE: StandardID
ID_NOTOALL: StandardID
ID_OK: StandardID
ID_OPEN: StandardID
ID_PAGE_SETUP: StandardID
ID_PASTE: StandardID
ID_PREFERENCES: StandardID
ID_PREVIEW: StandardID
ID_PREVIEW_CLOSE: int
ID_PREVIEW_FIRST: int
ID_PREVIEW_GOTO: int
ID_PREVIEW_LAST: int
ID_PREVIEW_NEXT: int
ID_PREVIEW_PREVIOUS: int
ID_PREVIEW_PRINT: int
ID_PREVIEW_ZOOM: int
ID_PREVIEW_ZOOM_IN: int
ID_PREVIEW_ZOOM_OUT: int
ID_PRINT: StandardID
ID_PRINT_SETUP: StandardID
ID_PROPERTIES: StandardID
ID_REDO: StandardID
ID_REFRESH: StandardID
ID_REMOVE: StandardID
ID_REPLACE: StandardID
ID_REPLACE_ALL: StandardID
ID_RESET: StandardID
ID_RESIZE_FRAME: StandardID
ID_RESTORE_FRAME: StandardID
ID_RETRY: StandardID
ID_REVERT: StandardID
ID_REVERT_TO_SAVED: StandardID
ID_SAVE: StandardID
ID_SAVEAS: StandardID
ID_SELECTALL: StandardID
ID_SELECT_COLOR: StandardID
ID_SELECT_FONT: StandardID
ID_SEPARATOR: StandardID
ID_SETUP: StandardID
ID_SORT_ASCENDING: StandardID
ID_SORT_DESCENDING: StandardID
ID_SPELL_CHECK: StandardID
ID_STATIC: StandardID
ID_STOP: StandardID
ID_STRIKETHROUGH: StandardID
ID_SYSTEM_MENU: StandardID
ID_TOP: StandardID
ID_UNDELETE: StandardID
ID_UNDERLINE: StandardID
ID_UNDO: StandardID
ID_UNINDENT: StandardID
ID_UP: StandardID
ID_VIEW_DETAILS: StandardID
ID_VIEW_LARGEICONS: StandardID
ID_VIEW_LIST: StandardID
ID_VIEW_SMALLICONS: StandardID
ID_VIEW_SORTDATE: StandardID
ID_VIEW_SORTNAME: StandardID
ID_VIEW_SORTSIZE: StandardID
ID_VIEW_SORTTYPE: StandardID
ID_YES: StandardID
ID_YESTOALL: StandardID
ID_ZOOM_100: StandardID
ID_ZOOM_FIT: StandardID
ID_ZOOM_IN: StandardID
ID_ZOOM_OUT: StandardID
IMAGELIST_DRAW_FOCUSED: int
IMAGELIST_DRAW_NORMAL: int
IMAGELIST_DRAW_SELECTED: int
IMAGELIST_DRAW_TRANSPARENT: int
IMAGE_ALPHA_BLEND_COMPOSE: ImageAlphaBlendMode
IMAGE_ALPHA_BLEND_OVER: ImageAlphaBlendMode
IMAGE_ALPHA_OPAQUE: int
IMAGE_ALPHA_THRESHOLD: int
IMAGE_ALPHA_TRANSPARENT: int
IMAGE_LIST_NORMAL: int
IMAGE_LIST_SMALL: int
IMAGE_LIST_STATE: int
IMAGE_QUALITY_BICUBIC: ImageResizeQuality
IMAGE_QUALITY_BILINEAR: ImageResizeQuality
IMAGE_QUALITY_BOX_AVERAGE: ImageResizeQuality
IMAGE_QUALITY_HIGH: ImageResizeQuality
IMAGE_QUALITY_NEAREST: ImageResizeQuality
IMAGE_QUALITY_NORMAL: ImageResizeQuality
IMAGE_RESOLUTION_CM: ImageResolution
IMAGE_RESOLUTION_INCHES: ImageResolution
IMAGE_RESOLUTION_NONE: ImageResolution
INT16_MAX: int
INT16_MIN: int
INT32_MAX: int
INT32_MIN: int
INT64_MAX: int
INT64_MIN: int
INT8_MAX: int
INT8_MIN: int
INTERPOLATION_BEST: InterpolationQuality
INTERPOLATION_DEFAULT: InterpolationQuality
INTERPOLATION_FAST: InterpolationQuality
INTERPOLATION_GOOD: InterpolationQuality
INTERPOLATION_NONE: InterpolationQuality
INVERT: RasterOperationMode
ITEM_CHECK: ItemKind
ITEM_DROPDOWN: ItemKind
ITEM_MAX: ItemKind
ITEM_NORMAL: ItemKind
ITEM_RADIO: ItemKind
ITEM_SEPARATOR: ItemKind
InRegion: RegionContain
Inside: OutCode
JOIN_BEVEL: PenJoin
JOIN_INVALID: PenJoin
JOIN_MITER: PenJoin
JOIN_ROUND: PenJoin
JOYSTICK1: int
JOYSTICK2: int
JOY_BUTTON1: int
JOY_BUTTON2: int
JOY_BUTTON3: int
JOY_BUTTON4: int
JOY_BUTTON_ANY: int
KILL_ACCESS_DENIED: KillError
KILL_BAD_SIGNAL: KillError
KILL_CHILDREN: KillFlags
KILL_ERROR: KillError
KILL_NOCHILDREN: KillFlags
KILL_NO_PROCESS: KillError
KILL_OK: KillError
LANDSCAPE: PrintOrientation
LANGUAGE_ABKHAZIAN: Language
LANGUAGE_AFAR: Language
LANGUAGE_AFAR_DJIBOUTI: Language
LANGUAGE_AFAR_ERITREA: Language
LANGUAGE_AFAR_ETHIOPIA: Language
LANGUAGE_AFRIKAANS: Language
LANGUAGE_AFRIKAANS_NAMIBIA: Language
LANGUAGE_AFRIKAANS_SOUTH_AFRICA: Language
LANGUAGE_AGHEM: Language
LANGUAGE_AGHEM_CAMEROON: Language
LANGUAGE_AKAN: Language
LANGUAGE_AKAN_GHANA: Language
LANGUAGE_ALBANIAN: Language
LANGUAGE_ALBANIAN_ALBANIA: Language
LANGUAGE_ALBANIAN_KOSOVO: Language
LANGUAGE_ALBANIAN_NORTH_MACEDONIA: Language
LANGUAGE_ALSATIAN_FRANCE: Language
LANGUAGE_AMHARIC: Language
LANGUAGE_AMHARIC_ETHIOPIA: Language
LANGUAGE_ARABIC: Language
LANGUAGE_ARABIC_ALGERIA: Language
LANGUAGE_ARABIC_BAHRAIN: Language
LANGUAGE_ARABIC_CHAD: Language
LANGUAGE_ARABIC_COMOROS: Language
LANGUAGE_ARABIC_DJIBOUTI: Language
LANGUAGE_ARABIC_EGYPT: Language
LANGUAGE_ARABIC_ERITREA: Language
LANGUAGE_ARABIC_IRAQ: Language
LANGUAGE_ARABIC_ISRAEL: Language
LANGUAGE_ARABIC_JORDAN: Language
LANGUAGE_ARABIC_KUWAIT: Language
LANGUAGE_ARABIC_LEBANON: Language
LANGUAGE_ARABIC_LIBYA: Language
LANGUAGE_ARABIC_MAURITANIA: Language
LANGUAGE_ARABIC_MOROCCO: Language
LANGUAGE_ARABIC_OMAN: Language
LANGUAGE_ARABIC_PALESTINIAN_AUTHORITY: Language
LANGUAGE_ARABIC_QATAR: Language
LANGUAGE_ARABIC_SAUDI_ARABIA: Language
LANGUAGE_ARABIC_SOMALIA: Language
LANGUAGE_ARABIC_SOUTH_SUDAN: Language
LANGUAGE_ARABIC_SUDAN: Language
LANGUAGE_ARABIC_SYRIA: Language
LANGUAGE_ARABIC_TUNISIA: Language
LANGUAGE_ARABIC_UAE: Language
LANGUAGE_ARABIC_WORLD: Language
LANGUAGE_ARABIC_YEMEN: Language
LANGUAGE_ARMENIAN: Language
LANGUAGE_ARMENIAN_ARMENIA: Language
LANGUAGE_ASSAMESE: Language
LANGUAGE_ASSAMESE_INDIA: Language
LANGUAGE_ASTURIAN: Language
LANGUAGE_ASTURIAN_SPAIN: Language
LANGUAGE_ASU: Language
LANGUAGE_ASU_TANZANIA: Language
LANGUAGE_AYMARA: Language
LANGUAGE_AZERBAIJANI: Language
LANGUAGE_AZERBAIJANI_CYRILLIC: Language
LANGUAGE_AZERBAIJANI_CYRILLIC_AZERBAIJAN: Language
LANGUAGE_AZERBAIJANI_LATIN: Language
LANGUAGE_AZERBAIJANI_LATIN_AZERBAIJAN: Language
LANGUAGE_AZERI: Language
LANGUAGE_AZERI_CYRILLIC: Language
LANGUAGE_AZERI_LATIN: Language
LANGUAGE_BAFIA: Language
LANGUAGE_BAFIA_CAMEROON: Language
LANGUAGE_BAMANANKAN: Language
LANGUAGE_BAMANANKAN_LATIN: Language
LANGUAGE_BAMANANKAN_LATIN_MALI: Language
LANGUAGE_BANGLA: Language
LANGUAGE_BANGLA_BANGLADESH: Language
LANGUAGE_BANGLA_INDIA: Language
LANGUAGE_BASAA: Language
LANGUAGE_BASAA_CAMEROON: Language
LANGUAGE_BASHKIR: Language
LANGUAGE_BASHKIR_RUSSIA: Language
LANGUAGE_BASQUE: Language
LANGUAGE_BASQUE_SPAIN: Language
LANGUAGE_BELARUSIAN: Language
LANGUAGE_BELARUSIAN_BELARUS: Language
LANGUAGE_BEMBA: Language
LANGUAGE_BEMBA_ZAMBIA: Language
LANGUAGE_BENA: Language
LANGUAGE_BENA_TANZANIA: Language
LANGUAGE_BENGALI: Language
LANGUAGE_BENGALI_BANGLADESH: Language
LANGUAGE_BENGALI_INDIA: Language
LANGUAGE_BHUTANI: Language
LANGUAGE_BIHARI: Language
LANGUAGE_BISLAMA: Language
LANGUAGE_BLIN: Language
LANGUAGE_BLIN_ERITREA: Language
LANGUAGE_BODO: Language
LANGUAGE_BODO_INDIA: Language
LANGUAGE_BOSNIAN: Language
LANGUAGE_BOSNIAN_CYRILLIC: Language
LANGUAGE_BOSNIAN_CYRILLIC_BOSNIA_AND_HERZEGOVINA: Language
LANGUAGE_BOSNIAN_LATIN: Language
LANGUAGE_BOSNIAN_LATIN_BOSNIA_AND_HERZEGOVINA: Language
LANGUAGE_BRETON: Language
LANGUAGE_BRETON_FRANCE: Language
LANGUAGE_BULGARIAN: Language
LANGUAGE_BULGARIAN_BULGARIA: Language
LANGUAGE_BURMESE: Language
LANGUAGE_BURMESE_MYANMAR: Language
LANGUAGE_CAMBODIAN: Language
LANGUAGE_CATALAN: Language
LANGUAGE_CATALAN_ANDORRA: Language
LANGUAGE_CATALAN_FRANCE: Language
LANGUAGE_CATALAN_ITALY: Language
LANGUAGE_CATALAN_SPAIN: Language
LANGUAGE_CEBUANO: Language
LANGUAGE_CEBUANO_LATIN: Language
LANGUAGE_CEBUANO_LATIN_PHILIPPINES: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_ARABIC: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_ARABIC_MOROCCO: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN_ALGERIA: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN_MOROCCO: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_TIFINAGH: Language
LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_TIFINAGH_MOROCCO: Language
LANGUAGE_CENTRAL_KURDISH: Language
LANGUAGE_CENTRAL_KURDISH_IRAQ: Language
LANGUAGE_CHAKMA: Language
LANGUAGE_CHAKMA_CHAKMA: Language
LANGUAGE_CHAKMA_CHAKMA_BANGLADESH: Language
LANGUAGE_CHAKMA_CHAKMA_INDIA: Language
LANGUAGE_CHECHEN: Language
LANGUAGE_CHECHEN_RUSSIA: Language
LANGUAGE_CHEROKEE: Language
LANGUAGE_CHEROKEE_CHEROKEE: Language
LANGUAGE_CHEROKEE_US: Language
LANGUAGE_CHIGA: Language
LANGUAGE_CHIGA_UGANDA: Language
LANGUAGE_CHINESE: Language
LANGUAGE_CHINESE_CHINA: Language
LANGUAGE_CHINESE_HONGKONG: Language
LANGUAGE_CHINESE_MACAO: Language
LANGUAGE_CHINESE_MACAU: Language
LANGUAGE_CHINESE_SIMPLIFIED: Language
LANGUAGE_CHINESE_SIMPLIFIED_EXPLICIT: Language
LANGUAGE_CHINESE_SIMPLIFIED_HONGKONG: Language
LANGUAGE_CHINESE_SIMPLIFIED_MACAO: Language
LANGUAGE_CHINESE_SINGAPORE: Language
LANGUAGE_CHINESE_TAIWAN: Language
LANGUAGE_CHINESE_TRADITIONAL: Language
LANGUAGE_CHINESE_TRADITIONAL_EXPLICIT: Language
LANGUAGE_CHURCH_SLAVIC: Language
LANGUAGE_CHURCH_SLAVIC_RUSSIA: Language
LANGUAGE_COLOGNIAN: Language
LANGUAGE_COLOGNIAN_GERMANY: Language
LANGUAGE_CORNISH: Language
LANGUAGE_CORNISH_UK: Language
LANGUAGE_CORSICAN: Language
LANGUAGE_CORSICAN_FRANCE: Language
LANGUAGE_CROATIAN: Language
LANGUAGE_CROATIAN_BOSNIA_AND_HERZEGOVINA: Language
LANGUAGE_CROATIAN_CROATIA: Language
LANGUAGE_CZECH: Language
LANGUAGE_CZECH_CZECHIA: Language
LANGUAGE_DANISH: Language
LANGUAGE_DANISH_DENMARK: Language
LANGUAGE_DANISH_GREENLAND: Language
LANGUAGE_DARI: Language
LANGUAGE_DARI_AFGHANISTAN: Language
LANGUAGE_DEFAULT: Language
LANGUAGE_DIVEHI: Language
LANGUAGE_DIVEHI_MALDIVES: Language
LANGUAGE_DUALA: Language
LANGUAGE_DUALA_CAMEROON: Language
LANGUAGE_DUTCH: Language
LANGUAGE_DUTCH_ARUBA: Language
LANGUAGE_DUTCH_BELGIAN: Language
LANGUAGE_DUTCH_BONAIRE_SINT_EUSTATIUS_AND_SABA: Language
LANGUAGE_DUTCH_CURACAO: Language
LANGUAGE_DUTCH_NETHERLANDS: Language
LANGUAGE_DUTCH_SINT_MAARTEN: Language
LANGUAGE_DUTCH_SURINAME: Language
LANGUAGE_DZONGKHA: Language
LANGUAGE_DZONGKHA_BHUTAN: Language
LANGUAGE_EDO: Language
LANGUAGE_EDO_NIGERIA: Language
LANGUAGE_EMBU: Language
LANGUAGE_EMBU_KENYA: Language
LANGUAGE_ENGLISH: Language
LANGUAGE_ENGLISH_AMERICAN_SAMOA: Language
LANGUAGE_ENGLISH_ANGUILLA: Language
LANGUAGE_ENGLISH_ANTIGUA_AND_BARBUDA: Language
LANGUAGE_ENGLISH_AUSTRALIA: Language
LANGUAGE_ENGLISH_AUSTRIA: Language
LANGUAGE_ENGLISH_BAHAMAS: Language
LANGUAGE_ENGLISH_BARBADOS: Language
LANGUAGE_ENGLISH_BELGIUM: Language
LANGUAGE_ENGLISH_BELIZE: Language
LANGUAGE_ENGLISH_BERMUDA: Language
LANGUAGE_ENGLISH_BOTSWANA: Language
LANGUAGE_ENGLISH_BRITISH_INDIAN_OCEAN_TERRITORY: Language
LANGUAGE_ENGLISH_BRITISH_VIRGIN_ISLANDS: Language
LANGUAGE_ENGLISH_BURUNDI: Language
LANGUAGE_ENGLISH_CAMEROON: Language
LANGUAGE_ENGLISH_CANADA: Language
LANGUAGE_ENGLISH_CARIBBEAN: Language
LANGUAGE_ENGLISH_CARIBBEAN_CB: Language
LANGUAGE_ENGLISH_CAYMAN_ISLANDS: Language
LANGUAGE_ENGLISH_CHRISTMAS_ISLAND: Language
LANGUAGE_ENGLISH_COCOS_KEELING_ISLANDS: Language
LANGUAGE_ENGLISH_COOK_ISLANDS: Language
LANGUAGE_ENGLISH_CYPRUS: Language
LANGUAGE_ENGLISH_DENMARK: Language
LANGUAGE_ENGLISH_DOMINICA: Language
LANGUAGE_ENGLISH_EIRE: Language
LANGUAGE_ENGLISH_ERITREA: Language
LANGUAGE_ENGLISH_ESWATINI: Language
LANGUAGE_ENGLISH_EUROPE: Language
LANGUAGE_ENGLISH_FALKLAND_ISLANDS: Language
LANGUAGE_ENGLISH_FIJI: Language
LANGUAGE_ENGLISH_FINLAND: Language
LANGUAGE_ENGLISH_GAMBIA: Language
LANGUAGE_ENGLISH_GERMANY: Language
LANGUAGE_ENGLISH_GHANA: Language
LANGUAGE_ENGLISH_GIBRALTAR: Language
LANGUAGE_ENGLISH_GRENADA: Language
LANGUAGE_ENGLISH_GUAM: Language
LANGUAGE_ENGLISH_GUERNSEY: Language
LANGUAGE_ENGLISH_GUYANA: Language
LANGUAGE_ENGLISH_HONG_KONG_SAR: Language
LANGUAGE_ENGLISH_INDIA: Language
LANGUAGE_ENGLISH_INDONESIA: Language
LANGUAGE_ENGLISH_ISLE_OF_MAN: Language
LANGUAGE_ENGLISH_ISRAEL: Language
LANGUAGE_ENGLISH_JAMAICA: Language
LANGUAGE_ENGLISH_JERSEY: Language
LANGUAGE_ENGLISH_KENYA: Language
LANGUAGE_ENGLISH_KIRIBATI: Language
LANGUAGE_ENGLISH_LESOTHO: Language
LANGUAGE_ENGLISH_LIBERIA: Language
LANGUAGE_ENGLISH_MACAO_SAR: Language
LANGUAGE_ENGLISH_MADAGASCAR: Language
LANGUAGE_ENGLISH_MALAWI: Language
LANGUAGE_ENGLISH_MALAYSIA: Language
LANGUAGE_ENGLISH_MALTA: Language
LANGUAGE_ENGLISH_MARSHALL_ISLANDS: Language
LANGUAGE_ENGLISH_MAURITIUS: Language
LANGUAGE_ENGLISH_MICRONESIA: Language
LANGUAGE_ENGLISH_MONTSERRAT: Language
LANGUAGE_ENGLISH_NAMIBIA: Language
LANGUAGE_ENGLISH_NAURU: Language
LANGUAGE_ENGLISH_NETHERLANDS: Language
LANGUAGE_ENGLISH_NEW_ZEALAND: Language
LANGUAGE_ENGLISH_NIGERIA: Language
LANGUAGE_ENGLISH_NIUE: Language
LANGUAGE_ENGLISH_NORFOLK_ISLAND: Language
LANGUAGE_ENGLISH_NORTHERN_MARIANA_ISLANDS: Language
LANGUAGE_ENGLISH_PAKISTAN: Language
LANGUAGE_ENGLISH_PALAU: Language
LANGUAGE_ENGLISH_PAPUA_NEW_GUINEA: Language
LANGUAGE_ENGLISH_PHILIPPINES: Language
LANGUAGE_ENGLISH_PITCAIRN_ISLANDS: Language
LANGUAGE_ENGLISH_PUERTO_RICO: Language
LANGUAGE_ENGLISH_RWANDA: Language
LANGUAGE_ENGLISH_SAMOA: Language
LANGUAGE_ENGLISH_SEYCHELLES: Language
LANGUAGE_ENGLISH_SIERRA_LEONE: Language
LANGUAGE_ENGLISH_SINGAPORE: Language
LANGUAGE_ENGLISH_SINT_MAARTEN: Language
LANGUAGE_ENGLISH_SLOVENIA: Language
LANGUAGE_ENGLISH_SOLOMON_ISLANDS: Language
LANGUAGE_ENGLISH_SOUTH_AFRICA: Language
LANGUAGE_ENGLISH_SOUTH_SUDAN: Language
LANGUAGE_ENGLISH_ST_HELENA_ASCENSION_TRISTAN_DA_CUNHA: Language
LANGUAGE_ENGLISH_ST_KITTS_AND_NEVIS: Language
LANGUAGE_ENGLISH_ST_LUCIA: Language
LANGUAGE_ENGLISH_ST_VINCENT_AND_GRENADINES: Language
LANGUAGE_ENGLISH_SUDAN: Language
LANGUAGE_ENGLISH_SWEDEN: Language
LANGUAGE_ENGLISH_SWITZERLAND: Language
LANGUAGE_ENGLISH_TANZANIA: Language
LANGUAGE_ENGLISH_TOKELAU: Language
LANGUAGE_ENGLISH_TONGA: Language
LANGUAGE_ENGLISH_TRINIDAD: Language
LANGUAGE_ENGLISH_TURKS_AND_CAICOS_ISLANDS: Language
LANGUAGE_ENGLISH_TUVALU: Language
LANGUAGE_ENGLISH_UGANDA: Language
LANGUAGE_ENGLISH_UK: Language
LANGUAGE_ENGLISH_UNITED_ARAB_EMIRATES: Language
LANGUAGE_ENGLISH_US: Language
LANGUAGE_ENGLISH_US_OUTLYING_ISLANDS: Language
LANGUAGE_ENGLISH_US_VIRGIN_ISLANDS: Language
LANGUAGE_ENGLISH_VANUATU: Language
LANGUAGE_ENGLISH_WORLD: Language
LANGUAGE_ENGLISH_ZAMBIA: Language
LANGUAGE_ENGLISH_ZIMBABWE: Language
LANGUAGE_ESPERANTO: Language
LANGUAGE_ESPERANTO_WORLD: Language
LANGUAGE_ESTONIAN: Language
LANGUAGE_ESTONIAN_ESTONIA: Language
LANGUAGE_EWE: Language
LANGUAGE_EWE_GHANA: Language
LANGUAGE_EWE_TOGO: Language
LANGUAGE_EWONDO: Language
LANGUAGE_EWONDO_CAMEROON: Language
LANGUAGE_FAEROESE: Language
LANGUAGE_FAEROESE_DENMARK: Language
LANGUAGE_FAEROESE_FAROE_ISLANDS: Language
LANGUAGE_FARSI: Language
LANGUAGE_FIJI: Language
LANGUAGE_FILIPINO: Language
LANGUAGE_FILIPINO_PHILIPPINES: Language
LANGUAGE_FINNISH: Language
LANGUAGE_FINNISH_FINLAND: Language
LANGUAGE_FRENCH: Language
LANGUAGE_FRENCH_ALGERIA: Language
LANGUAGE_FRENCH_BELGIAN: Language
LANGUAGE_FRENCH_BENIN: Language
LANGUAGE_FRENCH_BURKINA_FASO: Language
LANGUAGE_FRENCH_BURUNDI: Language
LANGUAGE_FRENCH_CAMEROON: Language
LANGUAGE_FRENCH_CANADIAN: Language
LANGUAGE_FRENCH_CARIBBEAN: Language
LANGUAGE_FRENCH_CENTRAL_AFRICAN_REPUBLIC: Language
LANGUAGE_FRENCH_CHAD: Language
LANGUAGE_FRENCH_COMOROS: Language
LANGUAGE_FRENCH_CONGO: Language
LANGUAGE_FRENCH_CONGO_DRC: Language
LANGUAGE_FRENCH_COTE_DIVOIRE: Language
LANGUAGE_FRENCH_DJIBOUTI: Language
LANGUAGE_FRENCH_EQUATORIAL_GUINEA: Language
LANGUAGE_FRENCH_FRANCE: Language
LANGUAGE_FRENCH_FRENCH_GUIANA: Language
LANGUAGE_FRENCH_FRENCH_POLYNESIA: Language
LANGUAGE_FRENCH_GABON: Language
LANGUAGE_FRENCH_GUADELOUPE: Language
LANGUAGE_FRENCH_GUINEA: Language
LANGUAGE_FRENCH_HAITI: Language
LANGUAGE_FRENCH_LUXEMBOURG: Language
LANGUAGE_FRENCH_MADAGASCAR: Language
LANGUAGE_FRENCH_MALI: Language
LANGUAGE_FRENCH_MARTINIQUE: Language
LANGUAGE_FRENCH_MAURITANIA: Language
LANGUAGE_FRENCH_MAURITIUS: Language
LANGUAGE_FRENCH_MAYOTTE: Language
LANGUAGE_FRENCH_MONACO: Language
LANGUAGE_FRENCH_MOROCCO: Language
LANGUAGE_FRENCH_NEW_CALEDONIA: Language
LANGUAGE_FRENCH_NIGER: Language
LANGUAGE_FRENCH_REUNION: Language
LANGUAGE_FRENCH_RWANDA: Language
LANGUAGE_FRENCH_SENEGAL: Language
LANGUAGE_FRENCH_SEYCHELLES: Language
LANGUAGE_FRENCH_ST_BARTHELEMY: Language
LANGUAGE_FRENCH_ST_MARTIN: Language
LANGUAGE_FRENCH_ST_PIERRE_AND_MIQUELON: Language
LANGUAGE_FRENCH_SWISS: Language
LANGUAGE_FRENCH_SYRIA: Language
LANGUAGE_FRENCH_TOGO: Language
LANGUAGE_FRENCH_TUNISIA: Language
LANGUAGE_FRENCH_VANUATU: Language
LANGUAGE_FRENCH_WALLIS_AND_FUTUNA: Language
LANGUAGE_FRISIAN: Language
LANGUAGE_FRISIAN_NETHERLANDS: Language
LANGUAGE_FRIULIAN: Language
LANGUAGE_FRIULIAN_ITALY: Language
LANGUAGE_FULAH: Language
LANGUAGE_FULAH_LATIN: Language
LANGUAGE_FULAH_LATIN_BURKINA_FASO: Language
LANGUAGE_FULAH_LATIN_CAMEROON: Language
LANGUAGE_FULAH_LATIN_GAMBIA: Language
LANGUAGE_FULAH_LATIN_GHANA: Language
LANGUAGE_FULAH_LATIN_GUINEA: Language
LANGUAGE_FULAH_LATIN_GUINEA_BISSAU: Language
LANGUAGE_FULAH_LATIN_LIBERIA: Language
LANGUAGE_FULAH_LATIN_MAURITANIA: Language
LANGUAGE_FULAH_LATIN_NIGER: Language
LANGUAGE_FULAH_LATIN_NIGERIA: Language
LANGUAGE_FULAH_LATIN_SENEGAL: Language
LANGUAGE_FULAH_LATIN_SIERRA_LEONE: Language
LANGUAGE_GALICIAN: Language
LANGUAGE_GALICIAN_SPAIN: Language
LANGUAGE_GANDA: Language
LANGUAGE_GANDA_UGANDA: Language
LANGUAGE_GEORGIAN: Language
LANGUAGE_GEORGIAN_GEORGIA: Language
LANGUAGE_GERMAN: Language
LANGUAGE_GERMAN_AUSTRIAN: Language
LANGUAGE_GERMAN_BELGIUM: Language
LANGUAGE_GERMAN_GERMANY: Language
LANGUAGE_GERMAN_ITALY: Language
LANGUAGE_GERMAN_LIECHTENSTEIN: Language
LANGUAGE_GERMAN_LUXEMBOURG: Language
LANGUAGE_GERMAN_SWISS: Language
LANGUAGE_GREEK: Language
LANGUAGE_GREEK_CYPRUS: Language
LANGUAGE_GREEK_GREECE: Language
LANGUAGE_GREENLANDIC: Language
LANGUAGE_GUARANI: Language
LANGUAGE_GUARANI_PARAGUAY: Language
LANGUAGE_GUJARATI: Language
LANGUAGE_GUJARATI_INDIA: Language
LANGUAGE_GUSII: Language
LANGUAGE_GUSII_KENYA: Language
LANGUAGE_HAUSA: Language
LANGUAGE_HAUSA_LATIN: Language
LANGUAGE_HAUSA_LATIN_GHANA: Language
LANGUAGE_HAUSA_LATIN_NIGER: Language
LANGUAGE_HAUSA_LATIN_NIGERIA: Language
LANGUAGE_HAWAIIAN: Language
LANGUAGE_HAWAIIAN_US: Language
LANGUAGE_HEBREW: Language
LANGUAGE_HEBREW_ISRAEL: Language
LANGUAGE_HINDI: Language
LANGUAGE_HINDI_INDIA: Language
LANGUAGE_HUNGARIAN: Language
LANGUAGE_HUNGARIAN_HUNGARY: Language
LANGUAGE_IBIBIO: Language
LANGUAGE_IBIBIO_NIGERIA: Language
LANGUAGE_ICELANDIC: Language
LANGUAGE_ICELANDIC_ICELAND: Language
LANGUAGE_IGBO: Language
LANGUAGE_IGBO_NIGERIA: Language
LANGUAGE_INDONESIAN: Language
LANGUAGE_INDONESIAN_INDONESIA: Language
LANGUAGE_INTERLINGUA: Language
LANGUAGE_INTERLINGUA_WORLD: Language
LANGUAGE_INTERLINGUE: Language
LANGUAGE_INUKTITUT: Language
LANGUAGE_INUKTITUT_LATIN: Language
LANGUAGE_INUKTITUT_LATIN_CANADA: Language
LANGUAGE_INUKTITUT_SYLLABICS: Language
LANGUAGE_INUKTITUT_SYLLABICS_CANADA: Language
LANGUAGE_INUPIAK: Language
LANGUAGE_IRISH: Language
LANGUAGE_IRISH_IRELAND: Language
LANGUAGE_ITALIAN: Language
LANGUAGE_ITALIAN_ITALY: Language
LANGUAGE_ITALIAN_SAN_MARINO: Language
LANGUAGE_ITALIAN_SWISS: Language
LANGUAGE_ITALIAN_VATICAN_CITY: Language
LANGUAGE_JAPANESE: Language
LANGUAGE_JAPANESE_JAPAN: Language
LANGUAGE_JAVANESE: Language
LANGUAGE_JAVANESE_INDONESIA: Language
LANGUAGE_JAVANESE_JAVANESE: Language
LANGUAGE_JAVANESE_JAVANESE_INDONESIA: Language
LANGUAGE_JOLA_FONYI: Language
LANGUAGE_JOLA_FONYI_SENEGAL: Language
LANGUAGE_KABUVERDIANU: Language
LANGUAGE_KABUVERDIANU_CABO_VERDE: Language
LANGUAGE_KABYLE: Language
LANGUAGE_KABYLE_ALGERIA: Language
LANGUAGE_KAKO: Language
LANGUAGE_KAKO_CAMEROON: Language
LANGUAGE_KALAALLISUT: Language
LANGUAGE_KALENJIN: Language
LANGUAGE_KALENJIN_KENYA: Language
LANGUAGE_KAMBA: Language
LANGUAGE_KAMBA_KENYA: Language
LANGUAGE_KANNADA: Language
LANGUAGE_KANNADA_INDIA: Language
LANGUAGE_KANURI: Language
LANGUAGE_KANURI_LATIN: Language
LANGUAGE_KANURI_NIGERIA: Language
LANGUAGE_KASHMIRI: Language
LANGUAGE_KASHMIRI_DEVANAGARI: Language
LANGUAGE_KASHMIRI_DEVANAGARI_INDIA: Language
LANGUAGE_KASHMIRI_INDIA: Language
LANGUAGE_KASHMIRI_PERSO_ARABIC: Language
LANGUAGE_KASHMIRI_PERSO_ARABIC_INDIA: Language
LANGUAGE_KAZAKH: Language
LANGUAGE_KAZAKH_KAZAKHSTAN: Language
LANGUAGE_KERNEWEK: Language
LANGUAGE_KHMER: Language
LANGUAGE_KHMER_CAMBODIA: Language
LANGUAGE_KICHE: Language
LANGUAGE_KICHE_GUATEMALA: Language
LANGUAGE_KICHE_LATIN: Language
LANGUAGE_KIKUYU: Language
LANGUAGE_KIKUYU_KENYA: Language
LANGUAGE_KINYARWANDA: Language
LANGUAGE_KINYARWANDA_RWANDA: Language
LANGUAGE_KIRGHIZ: Language
LANGUAGE_KIRGHIZ_KYRGYZSTAN: Language
LANGUAGE_KIRUNDI: Language
LANGUAGE_KIRUNDI_BURUNDI: Language
LANGUAGE_KONKANI: Language
LANGUAGE_KONKANI_INDIA: Language
LANGUAGE_KOREAN: Language
LANGUAGE_KOREAN_KOREA: Language
LANGUAGE_KOREAN_NORTH_KOREA: Language
LANGUAGE_KOYRABORO_SENNI: Language
LANGUAGE_KOYRABORO_SENNI_MALI: Language
LANGUAGE_KOYRA_CHIINI: Language
LANGUAGE_KOYRA_CHIINI_MALI: Language
LANGUAGE_KURDISH: Language
LANGUAGE_KURDISH_PERSO_ARABIC_IRAN: Language
LANGUAGE_KWASIO: Language
LANGUAGE_KWASIO_CAMEROON: Language
LANGUAGE_LAKOTA: Language
LANGUAGE_LAKOTA_US: Language
LANGUAGE_LANGI: Language
LANGUAGE_LANGI_TANZANIA: Language
LANGUAGE_LAOTHIAN: Language
LANGUAGE_LAOTHIAN_LAOS: Language
LANGUAGE_LATIN: Language
LANGUAGE_LATIN_WORLD: Language
LANGUAGE_LATVIAN: Language
LANGUAGE_LATVIAN_LATVIA: Language
LANGUAGE_LINGALA: Language
LANGUAGE_LINGALA_ANGOLA: Language
LANGUAGE_LINGALA_CENTRAL_AFRICAN_REPUBLIC: Language
LANGUAGE_LINGALA_CONGO: Language
LANGUAGE_LINGALA_CONGO_DRC: Language
LANGUAGE_LITHUANIAN: Language
LANGUAGE_LITHUANIAN_LITHUANIA: Language
LANGUAGE_LOWER_SORBIAN: Language
LANGUAGE_LOWER_SORBIAN_GERMANY: Language
LANGUAGE_LOW_GERMAN: Language
LANGUAGE_LOW_GERMAN_GERMANY: Language
LANGUAGE_LOW_GERMAN_NETHERLANDS: Language
LANGUAGE_LUBA_KATANGA: Language
LANGUAGE_LUBA_KATANGA_CONGO_DRC: Language
LANGUAGE_LUO: Language
LANGUAGE_LUO_KENYA: Language
LANGUAGE_LUXEMBOURGISH: Language
LANGUAGE_LUXEMBOURGISH_LUXEMBOURG: Language
LANGUAGE_LUYIA: Language
LANGUAGE_LUYIA_KENYA: Language
LANGUAGE_MACEDONIAN: Language
LANGUAGE_MACEDONIAN_NORTH_MACEDONIA: Language
LANGUAGE_MACHAME: Language
LANGUAGE_MACHAME_TANZANIA: Language
LANGUAGE_MAKHUWA_MEETTO: Language
LANGUAGE_MAKHUWA_MEETTO_MOZAMBIQUE: Language
LANGUAGE_MAKONDE: Language
LANGUAGE_MAKONDE_TANZANIA: Language
LANGUAGE_MALAGASY: Language
LANGUAGE_MALAGASY_MADAGASCAR: Language
LANGUAGE_MALAY: Language
LANGUAGE_MALAYALAM: Language
LANGUAGE_MALAYALAM_INDIA: Language
LANGUAGE_MALAY_BRUNEI: Language
LANGUAGE_MALAY_BRUNEI_DARUSSALAM: Language
LANGUAGE_MALAY_MALAYSIA: Language
LANGUAGE_MALAY_SINGAPORE: Language
LANGUAGE_MALTESE: Language
LANGUAGE_MALTESE_MALTA: Language
LANGUAGE_MANIPURI: Language
LANGUAGE_MANIPURI_INDIA: Language
LANGUAGE_MANX: Language
LANGUAGE_MANX_ISLE_OF_MAN: Language
LANGUAGE_MAORI: Language
LANGUAGE_MAORI_NEW_ZEALAND: Language
LANGUAGE_MAPUCHE: Language
LANGUAGE_MAPUCHE_CHILE: Language
LANGUAGE_MARATHI: Language
LANGUAGE_MARATHI_INDIA: Language
LANGUAGE_MASAI: Language
LANGUAGE_MASAI_KENYA: Language
LANGUAGE_MASAI_TANZANIA: Language
LANGUAGE_MAZANDERANI: Language
LANGUAGE_MAZANDERANI_IRAN: Language
LANGUAGE_MERU: Language
LANGUAGE_MERU_KENYA: Language
LANGUAGE_META: Language
LANGUAGE_META_CAMEROON: Language
LANGUAGE_MOHAWK: Language
LANGUAGE_MOHAWK_CANADA: Language
LANGUAGE_MOLDAVIAN: Language
LANGUAGE_MONGOLIAN: Language
LANGUAGE_MONGOLIAN_CYRILLIC: Language
LANGUAGE_MONGOLIAN_MONGOLIA: Language
LANGUAGE_MONGOLIAN_TRADITIONAL: Language
LANGUAGE_MONGOLIAN_TRADITIONAL_CHINA: Language
LANGUAGE_MONGOLIAN_TRADITIONAL_MONGOLIA: Language
LANGUAGE_MORISYEN: Language
LANGUAGE_MORISYEN_MAURITIUS: Language
LANGUAGE_MUNDANG: Language
LANGUAGE_MUNDANG_CAMEROON: Language
LANGUAGE_NAMA: Language
LANGUAGE_NAMA_NAMIBIA: Language
LANGUAGE_NAURU: Language
LANGUAGE_NEPALI: Language
LANGUAGE_NEPALI_INDIA: Language
LANGUAGE_NEPALI_NEPAL: Language
LANGUAGE_NGIEMBOON: Language
LANGUAGE_NGIEMBOON_CAMEROON: Language
LANGUAGE_NGOMBA: Language
LANGUAGE_NGOMBA_CAMEROON: Language
LANGUAGE_NKO: Language
LANGUAGE_NKO_GUINEA: Language
LANGUAGE_NORTHERN_LURI: Language
LANGUAGE_NORTHERN_LURI_IRAN: Language
LANGUAGE_NORTHERN_LURI_IRAQ: Language
LANGUAGE_NORTH_NDEBELE: Language
LANGUAGE_NORTH_NDEBELE_ZIMBABWE: Language
LANGUAGE_NORWEGIAN: Language
LANGUAGE_NORWEGIAN_BOKMAL: Language
LANGUAGE_NORWEGIAN_BOKMAL_NORWAY: Language
LANGUAGE_NORWEGIAN_BOKMAL_SVALBARD_AND_JAN_MAYEN: Language
LANGUAGE_NORWEGIAN_NYNORSK: Language
LANGUAGE_NORWEGIAN_NYNORSK_NORWAY: Language
LANGUAGE_NUER: Language
LANGUAGE_NUER_SOUTH_SUDAN: Language
LANGUAGE_NYANKOLE: Language
LANGUAGE_NYANKOLE_UGANDA: Language
LANGUAGE_OCCITAN: Language
LANGUAGE_OCCITAN_FRANCE: Language
LANGUAGE_ODIA: Language
LANGUAGE_ODIA_INDIA: Language
LANGUAGE_ORIYA: Language
LANGUAGE_ORIYA_INDIA: Language
LANGUAGE_OROMO: Language
LANGUAGE_OROMO_ETHIOPIA: Language
LANGUAGE_OROMO_KENYA: Language
LANGUAGE_OSSETIC: Language
LANGUAGE_OSSETIC_GEORGIA: Language
LANGUAGE_OSSETIC_RUSSIA: Language
LANGUAGE_PAPIAMENTO: Language
LANGUAGE_PAPIAMENTO_CARIBBEAN: Language
LANGUAGE_PASHTO: Language
LANGUAGE_PASHTO_AFGHANISTAN: Language
LANGUAGE_PASHTO_PAKISTAN: Language
LANGUAGE_PERSIAN_IRAN: Language
LANGUAGE_POLISH: Language
LANGUAGE_POLISH_POLAND: Language
LANGUAGE_PORTUGUESE: Language
LANGUAGE_PORTUGUESE_ANGOLA: Language
LANGUAGE_PORTUGUESE_BRAZILIAN: Language
LANGUAGE_PORTUGUESE_CABO_VERDE: Language
LANGUAGE_PORTUGUESE_EQUATORIAL_GUINEA: Language
LANGUAGE_PORTUGUESE_GUINEA_BISSAU: Language
LANGUAGE_PORTUGUESE_LUXEMBOURG: Language
LANGUAGE_PORTUGUESE_MACAO_SAR: Language
LANGUAGE_PORTUGUESE_MOZAMBIQUE: Language
LANGUAGE_PORTUGUESE_PORTUGAL: Language
LANGUAGE_PORTUGUESE_SAO_TOME_AND_PRINCIPE: Language
LANGUAGE_PORTUGUESE_SWITZERLAND: Language
LANGUAGE_PORTUGUESE_TIMOR_LESTE: Language
LANGUAGE_PRUSSIAN: Language
LANGUAGE_PRUSSIAN_WORLD: Language
LANGUAGE_PUNJABI: Language
LANGUAGE_PUNJABI_ARABIC: Language
LANGUAGE_PUNJABI_GURMUKHI: Language
LANGUAGE_PUNJABI_INDIA: Language
LANGUAGE_PUNJABI_PAKISTAN: Language
LANGUAGE_QUECHUA: Language
LANGUAGE_QUECHUA_BOLIVIA: Language
LANGUAGE_QUECHUA_ECUADOR: Language
LANGUAGE_QUECHUA_MACRO: Language
LANGUAGE_QUECHUA_PERU: Language
LANGUAGE_RHAETO_ROMANCE: Language
LANGUAGE_RHAETO_ROMANCE_SWITZERLAND: Language
LANGUAGE_ROMANIAN: Language
LANGUAGE_ROMANIAN_MOLDOVA: Language
LANGUAGE_ROMANIAN_ROMANIA: Language
LANGUAGE_ROMBO: Language
LANGUAGE_ROMBO_TANZANIA: Language
LANGUAGE_RUSSIAN: Language
LANGUAGE_RUSSIAN_BELARUS: Language
LANGUAGE_RUSSIAN_KAZAKHSTAN: Language
LANGUAGE_RUSSIAN_KYRGYZSTAN: Language
LANGUAGE_RUSSIAN_MOLDOVA: Language
LANGUAGE_RUSSIAN_RUSSIA: Language
LANGUAGE_RUSSIAN_UKRAINE: Language
LANGUAGE_RWA: Language
LANGUAGE_RWA_TANZANIA: Language
LANGUAGE_SAHO: Language
LANGUAGE_SAHO_ERITREA: Language
LANGUAGE_SAKHA: Language
LANGUAGE_SAKHA_RUSSIA: Language
LANGUAGE_SAMBURU: Language
LANGUAGE_SAMBURU_KENYA: Language
LANGUAGE_SAMI: Language
LANGUAGE_SAMI_FINLAND: Language
LANGUAGE_SAMI_INARI: Language
LANGUAGE_SAMI_INARI_FINLAND: Language
LANGUAGE_SAMI_LULE: Language
LANGUAGE_SAMI_LULE_NORWAY: Language
LANGUAGE_SAMI_LULE_SWEDEN: Language
LANGUAGE_SAMI_NORWAY: Language
LANGUAGE_SAMI_SKOLT: Language
LANGUAGE_SAMI_SKOLT_FINLAND: Language
LANGUAGE_SAMI_SOUTHERN: Language
LANGUAGE_SAMI_SOUTHERN_NORWAY: Language
LANGUAGE_SAMI_SOUTHERN_SWEDEN: Language
LANGUAGE_SAMI_SWEDEN: Language
LANGUAGE_SAMOAN: Language
LANGUAGE_SANGHO: Language
LANGUAGE_SANGHO_CENTRAL_AFRICAN_REPUBLIC: Language
LANGUAGE_SANGU: Language
LANGUAGE_SANGU_TANZANIA: Language
LANGUAGE_SANSKRIT: Language
LANGUAGE_SANSKRIT_INDIA: Language
LANGUAGE_SCOTS_GAELIC: Language
LANGUAGE_SCOTS_GAELIC_UK: Language
LANGUAGE_SENA: Language
LANGUAGE_SENA_MOZAMBIQUE: Language
LANGUAGE_SERBIAN: Language
LANGUAGE_SERBIAN_CYRILLIC: Language
LANGUAGE_SERBIAN_CYRILLIC_BOSNIA_AND_HERZEGOVINA: Language
LANGUAGE_SERBIAN_CYRILLIC_KOSOVO: Language
LANGUAGE_SERBIAN_CYRILLIC_MONTENEGRO: Language
LANGUAGE_SERBIAN_CYRILLIC_SERBIA: Language
LANGUAGE_SERBIAN_CYRILLIC_YU: Language
LANGUAGE_SERBIAN_LATIN: Language
LANGUAGE_SERBIAN_LATIN_BOSNIA_AND_HERZEGOVINA: Language
LANGUAGE_SERBIAN_LATIN_KOSOVO: Language
LANGUAGE_SERBIAN_LATIN_MONTENEGRO: Language
LANGUAGE_SERBIAN_LATIN_SERBIA: Language
LANGUAGE_SERBIAN_LATIN_YU: Language
LANGUAGE_SERBIAN_SERBIA: Language
LANGUAGE_SERBIAN_YU: Language
LANGUAGE_SERBO_CROATIAN: Language
LANGUAGE_SESOTHO: Language
LANGUAGE_SESOTHO_LESOTHO: Language
LANGUAGE_SESOTHO_SA_LEBOA: Language
LANGUAGE_SESOTHO_SA_LEBOA_SOUTH_AFRICA: Language
LANGUAGE_SESOTHO_SOUTH_AFRICA: Language
LANGUAGE_SETSWANA: Language
LANGUAGE_SETSWANA_BOTSWANA: Language
LANGUAGE_SETSWANA_SOUTH_AFRICA: Language
LANGUAGE_SHAMBALA: Language
LANGUAGE_SHAMBALA_TANZANIA: Language
LANGUAGE_SHONA: Language
LANGUAGE_SHONA_LATIN: Language
LANGUAGE_SHONA_LATIN_ZIMBABWE: Language
LANGUAGE_SINDHI: Language
LANGUAGE_SINDHI_ARABIC: Language
LANGUAGE_SINDHI_DEVANAGARI: Language
LANGUAGE_SINDHI_DEVANAGARI_INDIA: Language
LANGUAGE_SINDHI_PAKISTAN: Language
LANGUAGE_SINHALESE: Language
LANGUAGE_SINHALESE_SRI_LANKA: Language
LANGUAGE_SISWATI: Language
LANGUAGE_SISWATI_ESWATINI: Language
LANGUAGE_SISWATI_SOUTH_AFRICA: Language
LANGUAGE_SLOVAK: Language
LANGUAGE_SLOVAK_SLOVAKIA: Language
LANGUAGE_SLOVENIAN: Language
LANGUAGE_SLOVENIAN_SLOVENIA: Language
LANGUAGE_SOGA: Language
LANGUAGE_SOGA_UGANDA: Language
LANGUAGE_SOMALI: Language
LANGUAGE_SOMALI_DJIBOUTI: Language
LANGUAGE_SOMALI_ETHIOPIA: Language
LANGUAGE_SOMALI_KENYA: Language
LANGUAGE_SOMALI_SOMALIA: Language
LANGUAGE_SOUTH_NDEBELE: Language
LANGUAGE_SOUTH_NDEBELE_SOUTH_AFRICA: Language
LANGUAGE_SPANISH: Language
LANGUAGE_SPANISH_ARGENTINA: Language
LANGUAGE_SPANISH_BELIZE: Language
LANGUAGE_SPANISH_BOLIVIA: Language
LANGUAGE_SPANISH_BRAZIL: Language
LANGUAGE_SPANISH_CHILE: Language
LANGUAGE_SPANISH_COLOMBIA: Language
LANGUAGE_SPANISH_COSTA_RICA: Language
LANGUAGE_SPANISH_CUBA: Language
LANGUAGE_SPANISH_DOMINICAN_REPUBLIC: Language
LANGUAGE_SPANISH_ECUADOR: Language
LANGUAGE_SPANISH_EL_SALVADOR: Language
LANGUAGE_SPANISH_EQUATORIAL_GUINEA: Language
LANGUAGE_SPANISH_GUATEMALA: Language
LANGUAGE_SPANISH_HONDURAS: Language
LANGUAGE_SPANISH_LATIN_AMERICA: Language
LANGUAGE_SPANISH_MEXICAN: Language
LANGUAGE_SPANISH_MODERN: Language
LANGUAGE_SPANISH_NICARAGUA: Language
LANGUAGE_SPANISH_PANAMA: Language
LANGUAGE_SPANISH_PARAGUAY: Language
LANGUAGE_SPANISH_PERU: Language
LANGUAGE_SPANISH_PHILIPPINES: Language
LANGUAGE_SPANISH_PUERTO_RICO: Language
LANGUAGE_SPANISH_SPAIN: Language
LANGUAGE_SPANISH_URUGUAY: Language
LANGUAGE_SPANISH_US: Language
LANGUAGE_SPANISH_VENEZUELA: Language
LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT: Language
LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT_TIFINAGH: Language
LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT_TIFINAGH_MOROCCO: Language
LANGUAGE_SUNDANESE: Language
LANGUAGE_SWAHILI: Language
LANGUAGE_SWAHILI_CONGO_DRC: Language
LANGUAGE_SWAHILI_KENYA: Language
LANGUAGE_SWAHILI_TANZANIA: Language
LANGUAGE_SWAHILI_UGANDA: Language
LANGUAGE_SWEDISH: Language
LANGUAGE_SWEDISH_ALAND_ISLANDS: Language
LANGUAGE_SWEDISH_FINLAND: Language
LANGUAGE_SWEDISH_SWEDEN: Language
LANGUAGE_SWISS_GERMAN: Language
LANGUAGE_SWISS_GERMAN_LIECHTENSTEIN: Language
LANGUAGE_SWISS_GERMAN_SWITZERLAND: Language
LANGUAGE_SYRIAC: Language
LANGUAGE_SYRIAC_SYRIA: Language
LANGUAGE_TACHELHIT: Language
LANGUAGE_TACHELHIT_LATIN: Language
LANGUAGE_TACHELHIT_LATIN_MOROCCO: Language
LANGUAGE_TACHELHIT_TIFINAGH: Language
LANGUAGE_TACHELHIT_TIFINAGH_MOROCCO: Language
LANGUAGE_TAGALOG: Language
LANGUAGE_TAITA: Language
LANGUAGE_TAITA_KENYA: Language
LANGUAGE_TAJIK: Language
LANGUAGE_TAJIK_CYRILLIC: Language
LANGUAGE_TAJIK_CYRILLIC_TAJIKISTAN: Language
LANGUAGE_TAMIL: Language
LANGUAGE_TAMIL_INDIA: Language
LANGUAGE_TAMIL_MALAYSIA: Language
LANGUAGE_TAMIL_SINGAPORE: Language
LANGUAGE_TAMIL_SRI_LANKA: Language
LANGUAGE_TASAWAQ: Language
LANGUAGE_TASAWAQ_NIGER: Language
LANGUAGE_TATAR: Language
LANGUAGE_TATAR_RUSSIA: Language
LANGUAGE_TELUGU: Language
LANGUAGE_TELUGU_INDIA: Language
LANGUAGE_TESO: Language
LANGUAGE_TESO_KENYA: Language
LANGUAGE_TESO_UGANDA: Language
LANGUAGE_THAI: Language
LANGUAGE_THAI_THAILAND: Language
LANGUAGE_TIBETAN: Language
LANGUAGE_TIBETAN_CHINA: Language
LANGUAGE_TIBETAN_INDIA: Language
LANGUAGE_TIGRE: Language
LANGUAGE_TIGRE_ERITREA: Language
LANGUAGE_TIGRINYA: Language
LANGUAGE_TIGRINYA_ERITREA: Language
LANGUAGE_TIGRINYA_ETHIOPIA: Language
LANGUAGE_TONGA: Language
LANGUAGE_TONGA_TONGA: Language
LANGUAGE_TSONGA: Language
LANGUAGE_TSONGA_SOUTH_AFRICA: Language
LANGUAGE_TURKISH: Language
LANGUAGE_TURKISH_CYPRUS: Language
LANGUAGE_TURKISH_TURKEY: Language
LANGUAGE_TURKMEN: Language
LANGUAGE_TURKMEN_TURKMENISTAN: Language
LANGUAGE_TWI: Language
LANGUAGE_UIGHUR: Language
LANGUAGE_UIGHUR_CHINA: Language
LANGUAGE_UKRAINIAN: Language
LANGUAGE_UKRAINIAN_UKRAINE: Language
LANGUAGE_UNKNOWN: Language
LANGUAGE_UPPER_SORBIAN: Language
LANGUAGE_UPPER_SORBIAN_GERMANY: Language
LANGUAGE_URDU: Language
LANGUAGE_URDU_INDIA: Language
LANGUAGE_URDU_PAKISTAN: Language
LANGUAGE_USER_DEFINED: Language
LANGUAGE_UZBEK: Language
LANGUAGE_UZBEK_CYRILLIC: Language
LANGUAGE_UZBEK_CYRILLIC_UZBEKISTAN: Language
LANGUAGE_UZBEK_LATIN: Language
LANGUAGE_UZBEK_LATIN_UZBEKISTAN: Language
LANGUAGE_UZBEK_PERSO_ARABIC: Language
LANGUAGE_UZBEK_PERSO_ARABIC_AFGHANISTAN: Language
LANGUAGE_VAI: Language
LANGUAGE_VAI_LATIN: Language
LANGUAGE_VAI_LATIN_LIBERIA: Language
LANGUAGE_VAI_VAI: Language
LANGUAGE_VAI_VAI_LIBERIA: Language
LANGUAGE_VALENCIAN: Language
LANGUAGE_VENDA: Language
LANGUAGE_VENDA_SOUTH_AFRICA: Language
LANGUAGE_VIETNAMESE: Language
LANGUAGE_VIETNAMESE_VIETNAM: Language
LANGUAGE_VOLAPUK: Language
LANGUAGE_VOLAPUK_WORLD: Language
LANGUAGE_VUNJO: Language
LANGUAGE_VUNJO_TANZANIA: Language
LANGUAGE_WALSER: Language
LANGUAGE_WALSER_SWITZERLAND: Language
LANGUAGE_WELSH: Language
LANGUAGE_WELSH_UK: Language
LANGUAGE_WOLAYTTA: Language
LANGUAGE_WOLAYTTA_ETHIOPIA: Language
LANGUAGE_WOLOF: Language
LANGUAGE_WOLOF_SENEGAL: Language
LANGUAGE_XHOSA: Language
LANGUAGE_XHOSA_SOUTH_AFRICA: Language
LANGUAGE_YANGBEN: Language
LANGUAGE_YANGBEN_CAMEROON: Language
LANGUAGE_YI: Language
LANGUAGE_YIDDISH: Language
LANGUAGE_YIDDISH_WORLD: Language
LANGUAGE_YI_CHINA: Language
LANGUAGE_YORUBA: Language
LANGUAGE_YORUBA_BENIN: Language
LANGUAGE_YORUBA_NIGERIA: Language
LANGUAGE_ZARMA: Language
LANGUAGE_ZARMA_NIGER: Language
LANGUAGE_ZHUANG: Language
LANGUAGE_ZULU: Language
LANGUAGE_ZULU_SOUTH_AFRICA: Language
LAYOUT_DEFAULT_MARGIN: int
LB_ALIGN_MASK: int
LB_ALWAYS_SB: int
LB_BOTTOM: int
LB_DEFAULT: int
LB_EXTENDED: int
LB_HSCROLL: int
LB_INT_HEIGHT: int
LB_LEFT: int
LB_MULTIPLE: int
LB_NEEDED_SB: int
LB_NO_SB: int
LB_OWNERDRAW: int
LB_RIGHT: int
LB_SINGLE: int
LB_SORT: int
LB_TOP: int
LC_ALIGN_LEFT: int
LC_ALIGN_TOP: int
LC_AUTOARRANGE: int
LC_EDIT_LABELS: int
LC_HRULES: int
LC_ICON: int
LC_LIST: int
LC_MASK_ALIGN: int
LC_MASK_SORT: int
LC_MASK_TYPE: int
LC_NO_HEADER: int
LC_NO_SORT_HEADER: int
LC_REPORT: int
LC_SINGLE_SEL: int
LC_SMALL_ICON: int
LC_SORT_ASCENDING: int
LC_SORT_DESCENDING: int
LC_VIRTUAL: int
LC_VRULES: int
LEFT: Direction
LIST_ALIGN_DEFAULT: int
LIST_ALIGN_LEFT: int
LIST_ALIGN_SNAP_TO_GRID: int
LIST_ALIGN_TOP: int
LIST_AUTOSIZE: int
LIST_AUTOSIZE_USEHEADER: int
LIST_FIND_DOWN: int
LIST_FIND_LEFT: int
LIST_FIND_RIGHT: int
LIST_FIND_UP: int
LIST_FORMAT_CENTER: ListColumnFormat
LIST_FORMAT_CENTRE: ListColumnFormat
LIST_FORMAT_LEFT: ListColumnFormat
LIST_FORMAT_RIGHT: ListColumnFormat
LIST_GETSUBITEMRECT_WHOLEITEM: int
LIST_HITTEST_ABOVE: int
LIST_HITTEST_BELOW: int
LIST_HITTEST_NOWHERE: int
LIST_HITTEST_ONITEM: int
LIST_HITTEST_ONITEMICON: int
LIST_HITTEST_ONITEMLABEL: int
LIST_HITTEST_ONITEMSTATEICON: int
LIST_HITTEST_TOLEFT: int
LIST_HITTEST_TORIGHT: int
LIST_MASK_DATA: int
LIST_MASK_FORMAT: int
LIST_MASK_IMAGE: int
LIST_MASK_STATE: int
LIST_MASK_TEXT: int
LIST_MASK_WIDTH: int
LIST_NEXT_ABOVE: int
LIST_NEXT_ALL: int
LIST_NEXT_BELOW: int
LIST_NEXT_LEFT: int
LIST_NEXT_RIGHT: int
LIST_RECT_BOUNDS: int
LIST_RECT_ICON: int
LIST_RECT_LABEL: int
LIST_SET_ITEM: int
LIST_STATE_CUT: int
LIST_STATE_DONTCARE: int
LIST_STATE_DROPHILITED: int
LIST_STATE_FOCUSED: int
LIST_STATE_SELECTED: int
LI_HORIZONTAL: int
LI_VERTICAL: int
LOCALE_CAT_DATE: LocaleCategory
LOCALE_CAT_DEFAULT: LocaleCategory
LOCALE_CAT_MONEY: LocaleCategory
LOCALE_CAT_NUMBER: LocaleCategory
LOCALE_DATE_TIME_FMT: LocaleInfo
LOCALE_DECIMAL_POINT: LocaleInfo
LOCALE_DONT_LOAD_DEFAULT: LocaleInitFlags
LOCALE_FORM_ENGLISH: LocaleForm
LOCALE_FORM_NATIVE: LocaleForm
LOCALE_LOAD_DEFAULT: LocaleInitFlags
LOCALE_LONG_DATE_FMT: LocaleInfo
LOCALE_NAME_COUNTRY: LocaleName
LOCALE_NAME_LANGUAGE: LocaleName
LOCALE_NAME_LOCALE: LocaleName
LOCALE_SHORT_DATE_FMT: LocaleInfo
LOCALE_TAGTYPE_BCP47: LocaleTagType
LOCALE_TAGTYPE_DEFAULT: LocaleTagType
LOCALE_TAGTYPE_MACOS: LocaleTagType
LOCALE_TAGTYPE_POSIX: LocaleTagType
LOCALE_TAGTYPE_SYSTEM: LocaleTagType
LOCALE_TAGTYPE_WINDOWS: LocaleTagType
LOCALE_THOUSANDS_SEP: LocaleInfo
LOCALE_TIME_FMT: LocaleInfo
LOG_Debug: LogLevelValues
LOG_Error: LogLevelValues
LOG_FatalError: LogLevelValues
LOG_Info: LogLevelValues
LOG_Max: LogLevelValues
LOG_Message: LogLevelValues
LOG_Progress: LogLevelValues
LOG_Status: LogLevelValues
LOG_Trace: LogLevelValues
LOG_User: LogLevelValues
LOG_Warning: LogLevelValues
Layout_Default: LayoutDirection
Layout_LeftToRight: LayoutDirection
Layout_RightToLeft: LayoutDirection
Left: Edge
LeftOf: Relationship
ListBoxNameStr: bytes
ListCtrlNameStr: bytes
MAJOR_VERSION: int
MAXIMIZE: int
MAXIMIZE_BOX: int
MB_DOCKABLE: int
MENU_TEAROFF: int
MINIMIZE: int
MINIMIZE_BOX: int
MINOR_VERSION: int
MM_LOMETRIC: MappingMode
MM_METRIC: MappingMode
MM_POINTS: MappingMode
MM_TEXT: MappingMode
MM_TWIPS: MappingMode
MOD_ALL: KeyModifier
MOD_ALT: KeyModifier
MOD_ALTGR: KeyModifier
MOD_CMD: KeyModifier
MOD_CONTROL: KeyModifier
MOD_META: KeyModifier
MOD_NONE: KeyModifier
MOD_RAW_CONTROL: KeyModifier
MOD_SHIFT: KeyModifier
MOD_WIN: KeyModifier
MORE: int
MOUSE_BTN_ANY: MouseButton
MOUSE_BTN_AUX1: MouseButton
MOUSE_BTN_AUX2: MouseButton
MOUSE_BTN_LEFT: MouseButton
MOUSE_BTN_MAX: MouseButton
MOUSE_BTN_MIDDLE: MouseButton
MOUSE_BTN_NONE: MouseButton
MOUSE_BTN_RIGHT: MouseButton
MOUSE_WHEEL_HORIZONTAL: MouseWheelAxis
MOUSE_WHEEL_VERTICAL: MouseWheelAxis
MessageBoxCaptionStr: bytes
NAND: RasterOperationMode
NAVDIR_DOWN: NavDir
NAVDIR_FIRSTCHILD: NavDir
NAVDIR_LASTCHILD: NavDir
NAVDIR_LEFT: NavDir
NAVDIR_NEXT: NavDir
NAVDIR_PREVIOUS: NavDir
NAVDIR_RIGHT: NavDir
NAVDIR_UP: NavDir
NB_BOTTOM: int
NB_DEFAULT: int
NB_FIXEDWIDTH: int
NB_HITTEST_NOWHERE: int
NB_HITTEST_ONICON: int
NB_HITTEST_ONITEM: int
NB_HITTEST_ONLABEL: int
NB_HITTEST_ONPAGE: int
NB_LEFT: int
NB_MULTILINE: int
NB_NOPAGETHEME: int
NB_RIGHT: int
NB_TOP: int
NO: int
NOR: RasterOperationMode
NORTH: Direction
NOT_FOUND: int
NO_BORDER: int
NO_DEFAULT: int
NO_FULL_REPAINT_ON_RESIZE: int
NO_IMAGE: int
NO_OP: RasterOperationMode
NotebookNameStr: bytes
NullAcceleratorTable: AcceleratorTable
NullBitmap: Bitmap
NullBrush: Brush
NullColour: Colour
NullCursor: Cursor
NullFont: Font
NullGraphicsBitmap: GraphicsBitmap
NullGraphicsBrush: GraphicsBrush
NullGraphicsFont: GraphicsFont
NullGraphicsMatrix: GraphicsMatrix
NullGraphicsPath: GraphicsPath
NullGraphicsPen: GraphicsPen
NullIcon: Icon
NullIconBundle: IconBundle
NullImage: Image
NullPalette: Palette
NullPen: Pen
OBJID_ALERT: AccObject
OBJID_CARET: AccObject
OBJID_CLIENT: AccObject
OBJID_CURSOR: AccObject
OBJID_HSCROLL: AccObject
OBJID_MENU: AccObject
OBJID_SIZEGRIP: AccObject
OBJID_SOUND: AccObject
OBJID_SYSMENU: AccObject
OBJID_TITLEBAR: AccObject
OBJID_VSCROLL: AccObject
OBJID_WINDOW: AccObject
ODDEVEN_RULE: PolygonFillMode
OK: int
OK_DEFAULT: int
OR: RasterOperationMode
ORIENTATION_MASK: Orientation
OR_INVERT: RasterOperationMode
OR_REVERSE: RasterOperationMode
OS_MAC: OperatingSystemId
OS_MAC_OS: OperatingSystemId
OS_MAC_OSX_DARWIN: OperatingSystemId
OS_UNIX: OperatingSystemId
OS_UNIX_AIX: OperatingSystemId
OS_UNIX_FREEBSD: OperatingSystemId
OS_UNIX_HPUX: OperatingSystemId
OS_UNIX_LINUX: OperatingSystemId
OS_UNIX_NETBSD: OperatingSystemId
OS_UNIX_OPENBSD: OperatingSystemId
OS_UNIX_SOLARIS: OperatingSystemId
OS_UNKNOWN: OperatingSystemId
OS_WINDOWS: OperatingSystemId
OS_WINDOWS_NT: OperatingSystemId
OutBottom: OutCode
OutLeft: OutCode
OutRegion: RegionContain
OutRight: OutCode
OutTop: OutCode
PAPER_10X11: PaperSize
PAPER_10X14: PaperSize
PAPER_11X17: PaperSize
PAPER_12X11: PaperSize
PAPER_15X11: PaperSize
PAPER_9X11: PaperSize
PAPER_A2: PaperSize
PAPER_A3: PaperSize
PAPER_A3_EXTRA: PaperSize
PAPER_A3_EXTRA_TRANSVERSE: PaperSize
PAPER_A3_ROTATED: PaperSize
PAPER_A3_TRANSVERSE: PaperSize
PAPER_A4: PaperSize
PAPER_A4SMALL: PaperSize
PAPER_A4_EXTRA: PaperSize
PAPER_A4_PLUS: PaperSize
PAPER_A4_ROTATED: PaperSize
PAPER_A4_TRANSVERSE: PaperSize
PAPER_A5: PaperSize
PAPER_A5_EXTRA: PaperSize
PAPER_A5_ROTATED: PaperSize
PAPER_A5_TRANSVERSE: PaperSize
PAPER_A6: PaperSize
PAPER_A6_ROTATED: PaperSize
PAPER_A_PLUS: PaperSize
PAPER_B4: PaperSize
PAPER_B4_JIS_ROTATED: PaperSize
PAPER_B5: PaperSize
PAPER_B5_EXTRA: PaperSize
PAPER_B5_JIS_ROTATED: PaperSize
PAPER_B5_TRANSVERSE: PaperSize
PAPER_B6_JIS: PaperSize
PAPER_B6_JIS_ROTATED: PaperSize
PAPER_B_PLUS: PaperSize
PAPER_CSHEET: PaperSize
PAPER_DBL_JAPANESE_POSTCARD: PaperSize
PAPER_DBL_JAPANESE_POSTCARD_ROTATED: PaperSize
PAPER_DSHEET: PaperSize
PAPER_ENV_10: PaperSize
PAPER_ENV_11: PaperSize
PAPER_ENV_12: PaperSize
PAPER_ENV_14: PaperSize
PAPER_ENV_9: PaperSize
PAPER_ENV_B4: PaperSize
PAPER_ENV_B5: PaperSize
PAPER_ENV_B6: PaperSize
PAPER_ENV_C3: PaperSize
PAPER_ENV_C4: PaperSize
PAPER_ENV_C5: PaperSize
PAPER_ENV_C6: PaperSize
PAPER_ENV_C65: PaperSize
PAPER_ENV_DL: PaperSize
PAPER_ENV_INVITE: PaperSize
PAPER_ENV_ITALY: PaperSize
PAPER_ENV_MONARCH: PaperSize
PAPER_ENV_PERSONAL: PaperSize
PAPER_ESHEET: PaperSize
PAPER_EXECUTIVE: PaperSize
PAPER_FANFOLD_LGL_GERMAN: PaperSize
PAPER_FANFOLD_STD_GERMAN: PaperSize
PAPER_FANFOLD_US: PaperSize
PAPER_FOLIO: PaperSize
PAPER_ISO_B4: PaperSize
PAPER_JAPANESE_POSTCARD: PaperSize
PAPER_JAPANESE_POSTCARD_ROTATED: PaperSize
PAPER_JENV_CHOU3: PaperSize
PAPER_JENV_CHOU3_ROTATED: PaperSize
PAPER_JENV_CHOU4: PaperSize
PAPER_JENV_CHOU4_ROTATED: PaperSize
PAPER_JENV_KAKU2: PaperSize
PAPER_JENV_KAKU2_ROTATED: PaperSize
PAPER_JENV_KAKU3: PaperSize
PAPER_JENV_KAKU3_ROTATED: PaperSize
PAPER_JENV_YOU4: PaperSize
PAPER_JENV_YOU4_ROTATED: PaperSize
PAPER_LEDGER: PaperSize
PAPER_LEGAL: PaperSize
PAPER_LEGAL_EXTRA: PaperSize
PAPER_LETTER: PaperSize
PAPER_LETTERSMALL: PaperSize
PAPER_LETTER_EXTRA: PaperSize
PAPER_LETTER_EXTRA_TRANSVERSE: PaperSize
PAPER_LETTER_PLUS: PaperSize
PAPER_LETTER_ROTATED: PaperSize
PAPER_LETTER_TRANSVERSE: PaperSize
PAPER_NONE: PaperSize
PAPER_NOTE: PaperSize
PAPER_P16K: PaperSize
PAPER_P16K_ROTATED: PaperSize
PAPER_P32K: PaperSize
PAPER_P32KBIG: PaperSize
PAPER_P32KBIG_ROTATED: PaperSize
PAPER_P32K_ROTATED: PaperSize
PAPER_PENV_1: PaperSize
PAPER_PENV_10: PaperSize
PAPER_PENV_10_ROTATED: PaperSize
PAPER_PENV_1_ROTATED: PaperSize
PAPER_PENV_2: PaperSize
PAPER_PENV_2_ROTATED: PaperSize
PAPER_PENV_3: PaperSize
PAPER_PENV_3_ROTATED: PaperSize
PAPER_PENV_4: PaperSize
PAPER_PENV_4_ROTATED: PaperSize
PAPER_PENV_5: PaperSize
PAPER_PENV_5_ROTATED: PaperSize
PAPER_PENV_6: PaperSize
PAPER_PENV_6_ROTATED: PaperSize
PAPER_PENV_7: PaperSize
PAPER_PENV_7_ROTATED: PaperSize
PAPER_PENV_8: PaperSize
PAPER_PENV_8_ROTATED: PaperSize
PAPER_PENV_9: PaperSize
PAPER_PENV_9_ROTATED: PaperSize
PAPER_QUARTO: PaperSize
PAPER_STATEMENT: PaperSize
PAPER_TABLOID: PaperSize
PAPER_TABLOID_EXTRA: PaperSize
PB_SMALL: int
PB_USE_TEXTCTRL: int
PD_APP_MODAL: int
PD_AUTO_HIDE: int
PD_CAN_ABORT: int
PD_CAN_SKIP: int
PD_ELAPSED_TIME: int
PD_ESTIMATED_TIME: int
PD_REMAINING_TIME: int
PD_SMOOTH: int
PENSTYLE_BDIAGONAL_HATCH: PenStyle
PENSTYLE_CROSSDIAG_HATCH: PenStyle
PENSTYLE_CROSS_HATCH: PenStyle
PENSTYLE_DOT: PenStyle
PENSTYLE_DOT_DASH: PenStyle
PENSTYLE_FDIAGONAL_HATCH: PenStyle
PENSTYLE_FIRST_HATCH: PenStyle
PENSTYLE_HORIZONTAL_HATCH: PenStyle
PENSTYLE_INVALID: PenStyle
PENSTYLE_LAST_HATCH: PenStyle
PENSTYLE_LONG_DASH: PenStyle
PENSTYLE_SHORT_DASH: PenStyle
PENSTYLE_SOLID: PenStyle
PENSTYLE_STIPPLE: PenStyle
PENSTYLE_STIPPLE_MASK: PenStyle
PENSTYLE_STIPPLE_MASK_OPAQUE: PenStyle
PENSTYLE_TRANSPARENT: PenStyle
PENSTYLE_USER_DASH: PenStyle
PENSTYLE_VERTICAL_HATCH: PenStyle
PEN_QUALITY_DEFAULT: PenQuality
PEN_QUALITY_HIGH: PenQuality
PEN_QUALITY_LOW: PenQuality
PNG_TYPE_COLOUR: ImagePNGType
PNG_TYPE_GREY: ImagePNGType
PNG_TYPE_GREY_RED: ImagePNGType
PNG_TYPE_PALETTE: ImagePNGType
POPUP_WINDOW: int
PORTRAIT: PrintOrientation
PORT_BASE: PortId
PORT_COCOA: PortId
PORT_DFB: PortId
PORT_GTK: PortId
PORT_MAC: PortId
PORT_MOTIF: PortId
PORT_MSW: PortId
PORT_QT: PortId
PORT_UNKNOWN: PortId
PORT_X11: PortId
POWER_BATTERY: PowerType
POWER_RESOURCE_SCREEN: PowerResourceKind
POWER_RESOURCE_SYSTEM: PowerResourceKind
POWER_SOCKET: PowerType
POWER_UNKNOWN: PowerType
PREVIEW_DEFAULT: int
PREVIEW_FIRST: int
PREVIEW_GOTO: int
PREVIEW_LAST: int
PREVIEW_NEXT: int
PREVIEW_PREVIOUS: int
PREVIEW_PRINT: int
PREVIEW_ZOOM: int
PRINTBIN_AUTO: PrintBin
PRINTBIN_CASSETTE: PrintBin
PRINTBIN_DEFAULT: PrintBin
PRINTBIN_ENVELOPE: PrintBin
PRINTBIN_ENVMANUAL: PrintBin
PRINTBIN_FORMSOURCE: PrintBin
PRINTBIN_LARGECAPACITY: PrintBin
PRINTBIN_LARGEFMT: PrintBin
PRINTBIN_LOWER: PrintBin
PRINTBIN_MANUAL: PrintBin
PRINTBIN_MIDDLE: PrintBin
PRINTBIN_ONLYONE: PrintBin
PRINTBIN_SMALLFMT: PrintBin
PRINTBIN_TRACTOR: PrintBin
PRINTBIN_USER: PrintBin
PRINTER_CANCELLED: PrinterError
PRINTER_ERROR: PrinterError
PRINTER_NO_ERROR: PrinterError
PRINT_MODE_FILE: PrintMode
PRINT_MODE_NONE: PrintMode
PRINT_MODE_PREVIEW: PrintMode
PRINT_MODE_PRINTER: PrintMode
PRINT_MODE_STREAM: PrintMode
PRINT_QUALITY_DRAFT: int
PRINT_QUALITY_HIGH: int
PRINT_QUALITY_LOW: int
PRINT_QUALITY_MEDIUM: int
PU_CONTAINS_CONTROLS: int
PanelNameStr: bytes
PartRegion: RegionContain
PercentOf: Relationship
Platform: str
PlatformInfo: tuple
Port: str
PreviewFrame_AppModal: PreviewFrameModalityKind
PreviewFrame_NonModal: PreviewFrameModalityKind
PreviewFrame_WindowModal: PreviewFrameModalityKind
RAISED_BORDER: int
RA_HORIZONTAL: int
RA_LEFTTORIGHT: int
RA_SPECIFY_COLS: int
RA_SPECIFY_ROWS: int
RA_TOPTOBOTTOM: int
RA_VERTICAL: int
RB_GROUP: int
RB_SINGLE: int
RELEASE_NUMBER: int
REMOVE_LEADING_SPACES: int
RESERVE_SPACE_EVEN_IF_HIDDEN: SizerFlagBits
RESET: int
RESIZE_BORDER: int
RETAINED: int
RIGHT: Direction
ROLE_NONE: AccRole
ROLE_SYSTEM_ALERT: AccRole
ROLE_SYSTEM_ANIMATION: AccRole
ROLE_SYSTEM_APPLICATION: AccRole
ROLE_SYSTEM_BORDER: AccRole
ROLE_SYSTEM_BUTTONDROPDOWN: AccRole
ROLE_SYSTEM_BUTTONDROPDOWNGRID: AccRole
ROLE_SYSTEM_BUTTONMENU: AccRole
ROLE_SYSTEM_CARET: AccRole
ROLE_SYSTEM_CELL: AccRole
ROLE_SYSTEM_CHARACTER: AccRole
ROLE_SYSTEM_CHART: AccRole
ROLE_SYSTEM_CHECKBUTTON: AccRole
ROLE_SYSTEM_CLIENT: AccRole
ROLE_SYSTEM_CLOCK: AccRole
ROLE_SYSTEM_COLUMN: AccRole
ROLE_SYSTEM_COLUMNHEADER: AccRole
ROLE_SYSTEM_COMBOBOX: AccRole
ROLE_SYSTEM_CURSOR: AccRole
ROLE_SYSTEM_DIAGRAM: AccRole
ROLE_SYSTEM_DIAL: AccRole
ROLE_SYSTEM_DIALOG: AccRole
ROLE_SYSTEM_DOCUMENT: AccRole
ROLE_SYSTEM_DROPLIST: AccRole
ROLE_SYSTEM_EQUATION: AccRole
ROLE_SYSTEM_GRAPHIC: AccRole
ROLE_SYSTEM_GRIP: AccRole
ROLE_SYSTEM_GROUPING: AccRole
ROLE_SYSTEM_HELPBALLOON: AccRole
ROLE_SYSTEM_HOTKEYFIELD: AccRole
ROLE_SYSTEM_INDICATOR: AccRole
ROLE_SYSTEM_LINK: AccRole
ROLE_SYSTEM_LIST: AccRole
ROLE_SYSTEM_LISTITEM: AccRole
ROLE_SYSTEM_MENUBAR: AccRole
ROLE_SYSTEM_MENUITEM: AccRole
ROLE_SYSTEM_MENUPOPUP: AccRole
ROLE_SYSTEM_OUTLINE: AccRole
ROLE_SYSTEM_OUTLINEITEM: AccRole
ROLE_SYSTEM_PAGETAB: AccRole
ROLE_SYSTEM_PAGETABLIST: AccRole
ROLE_SYSTEM_PANE: AccRole
ROLE_SYSTEM_PROGRESSBAR: AccRole
ROLE_SYSTEM_PROPERTYPAGE: AccRole
ROLE_SYSTEM_PUSHBUTTON: AccRole
ROLE_SYSTEM_RADIOBUTTON: AccRole
ROLE_SYSTEM_ROW: AccRole
ROLE_SYSTEM_ROWHEADER: AccRole
ROLE_SYSTEM_SCROLLBAR: AccRole
ROLE_SYSTEM_SEPARATOR: AccRole
ROLE_SYSTEM_SLIDER: AccRole
ROLE_SYSTEM_SOUND: AccRole
ROLE_SYSTEM_SPINBUTTON: AccRole
ROLE_SYSTEM_STATICTEXT: AccRole
ROLE_SYSTEM_STATUSBAR: AccRole
ROLE_SYSTEM_TABLE: AccRole
ROLE_SYSTEM_TEXT: AccRole
ROLE_SYSTEM_TITLEBAR: AccRole
ROLE_SYSTEM_TOOLBAR: AccRole
ROLE_SYSTEM_TOOLTIP: AccRole
ROLE_SYSTEM_WHITESPACE: AccRole
ROLE_SYSTEM_WINDOW: AccRole
RadioBoxNameStr: bytes
RadioButtonNameStr: bytes
RearrangeDialogNameStr: bytes
RearrangeListNameStr: bytes
Right: Edge
RightOf: Relationship
SB_FLAT: int
SB_HORIZONTAL: int
SB_NORMAL: int
SB_RAISED: int
SB_SUNKEN: int
SB_VERTICAL: int
SEND_EVENT_POST: int
SET: RasterOperationMode
SETUP: int
SHAPED: Stretch
SHOW_EFFECT_BLEND: ShowEffect
SHOW_EFFECT_EXPAND: ShowEffect
SHOW_EFFECT_MAX: ShowEffect
SHOW_EFFECT_NONE: ShowEffect
SHOW_EFFECT_ROLL_TO_BOTTOM: ShowEffect
SHOW_EFFECT_ROLL_TO_LEFT: ShowEffect
SHOW_EFFECT_ROLL_TO_RIGHT: ShowEffect
SHOW_EFFECT_ROLL_TO_TOP: ShowEffect
SHOW_EFFECT_SLIDE_TO_BOTTOM: ShowEffect
SHOW_EFFECT_SLIDE_TO_LEFT: ShowEffect
SHOW_EFFECT_SLIDE_TO_RIGHT: ShowEffect
SHOW_EFFECT_SLIDE_TO_TOP: ShowEffect
SHOW_SB_ALWAYS: ScrollbarVisibility
SHOW_SB_DEFAULT: ScrollbarVisibility
SHOW_SB_NEVER: ScrollbarVisibility
SHRINK: Stretch
SHUTDOWN_FORCE: ShutdownFlags
SHUTDOWN_LOGOFF: ShutdownFlags
SHUTDOWN_POWEROFF: ShutdownFlags
SHUTDOWN_REBOOT: ShutdownFlags
SIGABRT: Signal
SIGALRM: Signal
SIGBUS: Signal
SIGEMT: Signal
SIGFPE: Signal
SIGHUP: Signal
SIGILL: Signal
SIGINT: Signal
SIGKILL: Signal
SIGNONE: Signal
SIGPIPE: Signal
SIGQUIT: Signal
SIGSEGV: Signal
SIGSYS: Signal
SIGTERM: Signal
SIGTRAP: Signal
SIMPLE_BORDER: int
SIZER_FLAG_BITS_MASK: SizerFlagBits
SIZE_ALLOW_MINUS_ONE: int
SIZE_AUTO: int
SIZE_AUTO_HEIGHT: int
SIZE_AUTO_WIDTH: int
SIZE_FORCE: int
SIZE_FORCE_EVENT: int
SIZE_NO_ADJUSTMENTS: int
SIZE_USE_EXISTING: int
SL_AUTOTICKS: int
SL_BOTH: int
SL_BOTTOM: int
SL_HORIZONTAL: int
SL_INVERSE: int
SL_LABELS: int
SL_LEFT: int
SL_MIN_MAX_LABELS: int
SL_RIGHT: int
SL_SELRANGE: int
SL_TICKS: int
SL_TOP: int
SL_VALUE_LABEL: int
SL_VERTICAL: int
SOUTH: Direction
SPLIT_DRAG_DRAGGING: int
SPLIT_DRAG_LEFT_DOWN: int
SPLIT_DRAG_NONE: int
SPLIT_HORIZONTAL: SplitMode
SPLIT_VERTICAL: SplitMode
SP_3D: int
SP_3DBORDER: int
SP_3DSASH: int
SP_ARROW_KEYS: int
SP_BORDER: int
SP_HORIZONTAL: int
SP_LIVE_UPDATE: int
SP_NOBORDER: int
SP_NOSASH: int
SP_NO_XP_THEME: int
SP_PERMIT_UNSPLIT: int
SP_THIN_SASH: int
SP_VERTICAL: int
SP_WRAP: int
SRC_INVERT: RasterOperationMode
STATIC_BORDER: int
STAY_ON_TOP: int
STB_DEFAULT_STYLE: int
STB_ELLIPSIZE_END: int
STB_ELLIPSIZE_MIDDLE: int
STB_ELLIPSIZE_START: int
STB_SHOW_TIPS: int
STB_SIZEGRIP: int
STOCK_FOR_BUTTON: StockLabelQueryFlag
STOCK_NOFLAGS: StockLabelQueryFlag
STOCK_WITHOUT_ELLIPSIS: StockLabelQueryFlag
STOCK_WITH_ACCELERATOR: StockLabelQueryFlag
STOCK_WITH_MNEMONIC: StockLabelQueryFlag
STREAM_EOF: StreamError
STREAM_NO_ERROR: StreamError
STREAM_READ_ERROR: StreamError
STREAM_WRITE_ERROR: StreamError
STRETCH_MASK: Stretch
STRETCH_NOT: Stretch
ST_ELLIPSIZE_END: int
ST_ELLIPSIZE_MIDDLE: int
ST_ELLIPSIZE_START: int
ST_NO_AUTORESIZE: int
SUNKEN_BORDER: int
SVG_SHAPE_RENDERING_AUTO: SVGShapeRenderingMode
SVG_SHAPE_RENDERING_CRISP_EDGES: SVGShapeRenderingMode
SVG_SHAPE_RENDERING_GEOMETRIC_PRECISION: SVGShapeRenderingMode
SVG_SHAPE_RENDERING_OPTIMISE_SPEED: SVGShapeRenderingMode
SVG_SHAPE_RENDERING_OPTIMIZE_SPEED: SVGShapeRenderingMode
SYSTEM_MENU: int
SYS_ANSI_FIXED_FONT: SystemFont
SYS_ANSI_VAR_FONT: SystemFont
SYS_BORDER_X: SystemMetric
SYS_BORDER_Y: SystemMetric
SYS_CAN_DRAW_FRAME_DECORATIONS: SystemFeature
SYS_CAN_ICONIZE_FRAME: SystemFeature
SYS_CAPTION_Y: SystemMetric
SYS_CARET_OFF_MSEC: SystemMetric
SYS_CARET_ON_MSEC: SystemMetric
SYS_CARET_TIMEOUT_MSEC: SystemMetric
SYS_COLOUR_3DDKSHADOW: SystemColour
SYS_COLOUR_3DFACE: SystemColour
SYS_COLOUR_3DHIGHLIGHT: SystemColour
SYS_COLOUR_3DHILIGHT: SystemColour
SYS_COLOUR_3DLIGHT: SystemColour
SYS_COLOUR_3DSHADOW: SystemColour
SYS_COLOUR_ACTIVEBORDER: SystemColour
SYS_COLOUR_ACTIVECAPTION: SystemColour
SYS_COLOUR_APPWORKSPACE: SystemColour
SYS_COLOUR_BACKGROUND: SystemColour
SYS_COLOUR_BTNFACE: SystemColour
SYS_COLOUR_BTNHIGHLIGHT: SystemColour
SYS_COLOUR_BTNHILIGHT: SystemColour
SYS_COLOUR_BTNSHADOW: SystemColour
SYS_COLOUR_BTNTEXT: SystemColour
SYS_COLOUR_CAPTIONTEXT: SystemColour
SYS_COLOUR_DESKTOP: SystemColour
SYS_COLOUR_FRAMEBK: SystemColour
SYS_COLOUR_GRADIENTACTIVECAPTION: SystemColour
SYS_COLOUR_GRADIENTINACTIVECAPTION: SystemColour
SYS_COLOUR_GRAYTEXT: SystemColour
SYS_COLOUR_HIGHLIGHT: SystemColour
SYS_COLOUR_HIGHLIGHTTEXT: SystemColour
SYS_COLOUR_HOTLIGHT: SystemColour
SYS_COLOUR_INACTIVEBORDER: SystemColour
SYS_COLOUR_INACTIVECAPTION: SystemColour
SYS_COLOUR_INACTIVECAPTIONTEXT: SystemColour
SYS_COLOUR_INFOBK: SystemColour
SYS_COLOUR_INFOTEXT: SystemColour
SYS_COLOUR_LISTBOX: SystemColour
SYS_COLOUR_LISTBOXHIGHLIGHTTEXT: SystemColour
SYS_COLOUR_LISTBOXTEXT: SystemColour
SYS_COLOUR_MENU: SystemColour
SYS_COLOUR_MENUBAR: SystemColour
SYS_COLOUR_MENUHILIGHT: SystemColour
SYS_COLOUR_MENUTEXT: SystemColour
SYS_COLOUR_SCROLLBAR: SystemColour
SYS_COLOUR_WINDOW: SystemColour
SYS_COLOUR_WINDOWFRAME: SystemColour
SYS_COLOUR_WINDOWTEXT: SystemColour
SYS_CURSOR_X: SystemMetric
SYS_CURSOR_Y: SystemMetric
SYS_DCLICK_MSEC: SystemMetric
SYS_DCLICK_X: SystemMetric
SYS_DCLICK_Y: SystemMetric
SYS_DEFAULT_GUI_FONT: SystemFont
SYS_DEVICE_DEFAULT_FONT: SystemFont
SYS_DRAG_X: SystemMetric
SYS_DRAG_Y: SystemMetric
SYS_EDGE_X: SystemMetric
SYS_EDGE_Y: SystemMetric
SYS_FRAMESIZE_X: SystemMetric
SYS_FRAMESIZE_Y: SystemMetric
SYS_HSCROLL_ARROW_X: SystemMetric
SYS_HSCROLL_ARROW_Y: SystemMetric
SYS_HSCROLL_Y: SystemMetric
SYS_HTHUMB_X: SystemMetric
SYS_ICONSPACING_X: SystemMetric
SYS_ICONSPACING_Y: SystemMetric
SYS_ICON_X: SystemMetric
SYS_ICON_Y: SystemMetric
SYS_MENU_Y: SystemMetric
SYS_MOUSE_BUTTONS: SystemMetric
SYS_NETWORK_PRESENT: SystemMetric
SYS_OEM_FIXED_FONT: SystemFont
SYS_PENWINDOWS_PRESENT: SystemMetric
SYS_SCREEN_DESKTOP: SystemScreenType
SYS_SCREEN_NONE: SystemScreenType
SYS_SCREEN_PDA: SystemScreenType
SYS_SCREEN_SMALL: SystemScreenType
SYS_SCREEN_TINY: SystemScreenType
SYS_SCREEN_X: SystemMetric
SYS_SCREEN_Y: SystemMetric
SYS_SHOW_SOUNDS: SystemMetric
SYS_SMALLICON_X: SystemMetric
SYS_SMALLICON_Y: SystemMetric
SYS_SWAP_BUTTONS: SystemMetric
SYS_SYSTEM_FONT: SystemFont
SYS_TABLET_PRESENT: SystemFeature
SYS_VSCROLL_ARROW_X: SystemMetric
SYS_VSCROLL_ARROW_Y: SystemMetric
SYS_VSCROLL_X: SystemMetric
SYS_VTHUMB_Y: SystemMetric
SYS_WINDOWMIN_X: SystemMetric
SYS_WINDOWMIN_Y: SystemMetric
SameAs: Relationship
ScrollBarNameStr: bytes
SearchCtrlNameStr: bytes
SliderNameStr: bytes
StaticBitmapNameStr: bytes
StaticBoxNameStr: bytes
StaticLineNameStr: bytes
StaticTextNameStr: bytes
StatusBarNameStr: bytes
Strip_Accel: int
Strip_All: int
Strip_CJKMnemonics: int
Strip_Menu: int
Strip_Mnemonics: int
TAB_TRAVERSAL: int
TBK_BUTTONBAR: int
TBK_HORZ_LAYOUT: int
TB_BOTTOM: int
TB_DEFAULT_STYLE: int
TB_DOCKABLE: int
TB_FLAT: int
TB_HORIZONTAL: int
TB_HORZ_LAYOUT: int
TB_HORZ_TEXT: int
TB_LEFT: int
TB_NOALIGN: int
TB_NODIVIDER: int
TB_NOICONS: int
TB_NO_TOOLTIPS: int
TB_RIGHT: int
TB_TEXT: int
TB_TOP: int
TB_VERTICAL: int
TC_BOTTOM: int
TC_FIXEDWIDTH: int
TC_LEFT: int
TC_MULTILINE: int
TC_OWNERDRAW: int
TC_RIGHT: int
TC_RIGHTJUSTIFY: int
TC_TOP: int
TEXT_ALIGNMENT_CENTER: TextAttrAlignment
TEXT_ALIGNMENT_CENTRE: TextAttrAlignment
TEXT_ALIGNMENT_DEFAULT: TextAttrAlignment
TEXT_ALIGNMENT_JUSTIFIED: TextAttrAlignment
TEXT_ALIGNMENT_LEFT: TextAttrAlignment
TEXT_ALIGNMENT_RIGHT: TextAttrAlignment
TEXT_ATTR_ALIGNMENT: TextAttrFlags
TEXT_ATTR_ALL: TextAttrFlags
TEXT_ATTR_AVOID_PAGE_BREAK_AFTER: TextAttrFlags
TEXT_ATTR_AVOID_PAGE_BREAK_BEFORE: TextAttrFlags
TEXT_ATTR_BACKGROUND_COLOUR: TextAttrFlags
TEXT_ATTR_BULLET: TextAttrFlags
TEXT_ATTR_BULLET_NAME: TextAttrFlags
TEXT_ATTR_BULLET_NUMBER: TextAttrFlags
TEXT_ATTR_BULLET_STYLE: TextAttrFlags
TEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_ALIGN_LEFT: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_ARABIC: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_BITMAP: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_CONTINUATION: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_LETTERS_LOWER: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_LETTERS_UPPER: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_NONE: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_OUTLINE: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_PARENTHESES: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_PERIOD: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_ROMAN_LOWER: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_ROMAN_UPPER: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_STANDARD: TextAttrBulletStyle
TEXT_ATTR_BULLET_STYLE_SYMBOL: TextAttrBulletStyle
TEXT_ATTR_BULLET_TEXT: TextAttrFlags
TEXT_ATTR_CHARACTER: TextAttrFlags
TEXT_ATTR_CHARACTER_STYLE_NAME: TextAttrFlags
TEXT_ATTR_EFFECTS: TextAttrFlags
TEXT_ATTR_EFFECT_CAPITALS: TextAttrEffects
TEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH: TextAttrEffects
TEXT_ATTR_EFFECT_EMBOSS: TextAttrEffects
TEXT_ATTR_EFFECT_ENGRAVE: TextAttrEffects
TEXT_ATTR_EFFECT_NONE: TextAttrEffects
TEXT_ATTR_EFFECT_OUTLINE: TextAttrEffects
TEXT_ATTR_EFFECT_RTL: TextAttrEffects
TEXT_ATTR_EFFECT_SHADOW: TextAttrEffects
TEXT_ATTR_EFFECT_SMALL_CAPITALS: TextAttrEffects
TEXT_ATTR_EFFECT_STRIKETHROUGH: TextAttrEffects
TEXT_ATTR_EFFECT_SUBSCRIPT: TextAttrEffects
TEXT_ATTR_EFFECT_SUPERSCRIPT: TextAttrEffects
TEXT_ATTR_EFFECT_SUPPRESS_HYPHENATION: TextAttrEffects
TEXT_ATTR_FONT: TextAttrFlags
TEXT_ATTR_FONT_ENCODING: TextAttrFlags
TEXT_ATTR_FONT_FACE: TextAttrFlags
TEXT_ATTR_FONT_FAMILY: TextAttrFlags
TEXT_ATTR_FONT_ITALIC: TextAttrFlags
TEXT_ATTR_FONT_PIXEL_SIZE: TextAttrFlags
TEXT_ATTR_FONT_POINT_SIZE: TextAttrFlags
TEXT_ATTR_FONT_SIZE: TextAttrFlags
TEXT_ATTR_FONT_STRIKETHROUGH: TextAttrFlags
TEXT_ATTR_FONT_UNDERLINE: TextAttrFlags
TEXT_ATTR_FONT_WEIGHT: TextAttrFlags
TEXT_ATTR_LEFT_INDENT: TextAttrFlags
TEXT_ATTR_LINE_SPACING: TextAttrFlags
TEXT_ATTR_LINE_SPACING_HALF: TextAttrLineSpacing
TEXT_ATTR_LINE_SPACING_NORMAL: TextAttrLineSpacing
TEXT_ATTR_LINE_SPACING_TWICE: TextAttrLineSpacing
TEXT_ATTR_LIST_STYLE_NAME: TextAttrFlags
TEXT_ATTR_OUTLINE_LEVEL: TextAttrFlags
TEXT_ATTR_PAGE_BREAK: TextAttrFlags
TEXT_ATTR_PARAGRAPH: TextAttrFlags
TEXT_ATTR_PARAGRAPH_STYLE_NAME: TextAttrFlags
TEXT_ATTR_PARA_SPACING_AFTER: TextAttrFlags
TEXT_ATTR_PARA_SPACING_BEFORE: TextAttrFlags
TEXT_ATTR_RIGHT_INDENT: TextAttrFlags
TEXT_ATTR_TABS: TextAttrFlags
TEXT_ATTR_TEXT_COLOUR: TextAttrFlags
TEXT_ATTR_UNDERLINE_DOUBLE: TextAttrUnderlineType
TEXT_ATTR_UNDERLINE_NONE: TextAttrUnderlineType
TEXT_ATTR_UNDERLINE_SOLID: TextAttrUnderlineType
TEXT_ATTR_UNDERLINE_SPECIAL: TextAttrUnderlineType
TEXT_ATTR_URL: TextAttrFlags
TEXT_TYPE_ANY: int
TE_AUTO_URL: int
TE_BESTWRAP: int
TE_CENTER: int
TE_CENTRE: int
TE_CHARWRAP: int
TE_DONTWRAP: int
TE_HT_BEFORE: TextCtrlHitTestResult
TE_HT_BELOW: TextCtrlHitTestResult
TE_HT_BEYOND: TextCtrlHitTestResult
TE_HT_ON_TEXT: TextCtrlHitTestResult
TE_HT_UNKNOWN: TextCtrlHitTestResult
TE_LEFT: int
TE_MULTILINE: int
TE_NOHIDESEL: int
TE_NO_VSCROLL: int
TE_PASSWORD: int
TE_PROCESS_ENTER: int
TE_PROCESS_TAB: int
TE_READONLY: int
TE_RICH: int
TE_RICH2: int
TE_RIGHT: int
TE_WORDWRAP: int
TILE: Stretch
TIMER_CONTINUOUS: int
TIMER_ONE_SHOT: int
TINY_CAPTION: int
TITLEBAR_BUTTON_CLOSE: TitleBarButton
TITLEBAR_BUTTON_HELP: TitleBarButton
TITLEBAR_BUTTON_ICONIZE: TitleBarButton
TITLEBAR_BUTTON_MAXIMIZE: TitleBarButton
TITLEBAR_BUTTON_RESTORE: TitleBarButton
TOOL_STYLE_BUTTON: ToolBarToolStyle
TOOL_STYLE_CONTROL: ToolBarToolStyle
TOOL_STYLE_SEPARATOR: ToolBarToolStyle
TOP: Direction
TOUCH_ALL_GESTURES: int
TOUCH_HORIZONTAL_PAN_GESTURE: int
TOUCH_NONE: int
TOUCH_PAN_GESTURES: int
TOUCH_PRESS_GESTURES: int
TOUCH_ROTATE_GESTURE: int
TOUCH_VERTICAL_PAN_GESTURE: int
TOUCH_ZOOM_GESTURE: int
TRANSPARENT_WINDOW: int
TREE_HITTEST_ABOVE: int
TREE_HITTEST_BELOW: int
TREE_HITTEST_NOWHERE: int
TREE_HITTEST_ONITEM: int
TREE_HITTEST_ONITEMBUTTON: int
TREE_HITTEST_ONITEMICON: int
TREE_HITTEST_ONITEMINDENT: int
TREE_HITTEST_ONITEMLABEL: int
TREE_HITTEST_ONITEMLOWERPART: int
TREE_HITTEST_ONITEMRIGHT: int
TREE_HITTEST_ONITEMSTATEICON: int
TREE_HITTEST_ONITEMUPPERPART: int
TREE_HITTEST_TOLEFT: int
TREE_HITTEST_TORIGHT: int
TREE_ITEMSTATE_NEXT: int
TREE_ITEMSTATE_NONE: int
TREE_ITEMSTATE_PREV: int
TR_DEFAULT_STYLE: int
TR_EDIT_LABELS: int
TR_FULL_ROW_HIGHLIGHT: int
TR_HAS_BUTTONS: int
TR_HAS_VARIABLE_ROW_HEIGHT: int
TR_HIDE_ROOT: int
TR_LINES_AT_ROOT: int
TR_MULTIPLE: int
TR_NO_BUTTONS: int
TR_NO_LINES: int
TR_ROW_LINES: int
TR_SINGLE: int
TR_TWIST_BUTTONS: int
TextCtrlNameStr: bytes
TextEntryDialogStyle: int
TextFileType_Dos: TextFileType
TextFileType_Mac: TextFileType
TextFileType_None: TextFileType
TextFileType_Os2: TextFileType
TextFileType_Unix: TextFileType
TheMimeTypesManager: MimeTypesManager
ToolBarNameStr: bytes
Top: Edge
TransparentColour: Colour
TreeCtrlNameStr: bytes
TreeItemIcon_Expanded: TreeItemIcon
TreeItemIcon_Max: TreeItemIcon
TreeItemIcon_Normal: TreeItemIcon
TreeItemIcon_Selected: TreeItemIcon
TreeItemIcon_SelectedExpanded: TreeItemIcon
UINT16_MAX: int
UINT32_MAX: int
UINT64_MAX: int
UINT8_MAX: int
UP: Direction
UPDATE_UI_FROMIDLE: UpdateUI
UPDATE_UI_NONE: UpdateUI
UPDATE_UI_PROCESS_ALL: UpdateUIMode
UPDATE_UI_PROCESS_SPECIFIED: UpdateUIMode
UPDATE_UI_RECURSE: UpdateUI
USER_ATTENTION_ERROR: int
USER_ATTENTION_INFO: int
USE_ACCESSIBILITY: int
USE_FSWATCHER: int
USE_UIACTIONSIMULATOR: int
Unconstrained: Relationship
VERTICAL: Orientation
VListBoxNameStr: bytes
VSCROLL: int
WANTS_CHARS: int
WEST: Direction
WINDING_RULE: PolygonFillMode
WINDOW_STYLE_MASK: int
WINDOW_VARIANT_LARGE: WindowVariant
WINDOW_VARIANT_MAX: WindowVariant
WINDOW_VARIANT_MINI: WindowVariant
WINDOW_VARIANT_NORMAL: WindowVariant
WINDOW_VARIANT_SMALL: WindowVariant
WRAPSIZER_DEFAULT_FLAGS: int
WS_EX_BLOCK_EVENTS: int
WS_EX_CONTEXTHELP: int
WS_EX_PROCESS_IDLE: int
WS_EX_PROCESS_UI_UPDATES: int
WS_EX_THEMED_BACKGROUND: int
WS_EX_TRANSIENT: int
WXK_ADD: KeyCode
WXK_ALT: KeyCode
WXK_BACK: KeyCode
WXK_BROWSER_BACK: KeyCode
WXK_BROWSER_FAVORITES: KeyCode
WXK_BROWSER_FORWARD: KeyCode
WXK_BROWSER_HOME: KeyCode
WXK_BROWSER_REFRESH: KeyCode
WXK_BROWSER_SEARCH: KeyCode
WXK_BROWSER_STOP: KeyCode
WXK_CANCEL: KeyCode
WXK_CAPITAL: KeyCode
WXK_CATEGORY_ARROW: KeyCategoryFlags
WXK_CATEGORY_CUT: KeyCategoryFlags
WXK_CATEGORY_JUMP: KeyCategoryFlags
WXK_CATEGORY_NAVIGATION: KeyCategoryFlags
WXK_CATEGORY_PAGING: KeyCategoryFlags
WXK_CATEGORY_TAB: KeyCategoryFlags
WXK_CLEAR: KeyCode
WXK_COMMAND: KeyCode
WXK_CONTROL: KeyCode
WXK_CONTROL_A: KeyCode
WXK_CONTROL_B: KeyCode
WXK_CONTROL_C: KeyCode
WXK_CONTROL_D: KeyCode
WXK_CONTROL_E: KeyCode
WXK_CONTROL_F: KeyCode
WXK_CONTROL_G: KeyCode
WXK_CONTROL_H: KeyCode
WXK_CONTROL_I: KeyCode
WXK_CONTROL_J: KeyCode
WXK_CONTROL_K: KeyCode
WXK_CONTROL_L: KeyCode
WXK_CONTROL_M: KeyCode
WXK_CONTROL_N: KeyCode
WXK_CONTROL_O: KeyCode
WXK_CONTROL_P: KeyCode
WXK_CONTROL_Q: KeyCode
WXK_CONTROL_R: KeyCode
WXK_CONTROL_S: KeyCode
WXK_CONTROL_T: KeyCode
WXK_CONTROL_U: KeyCode
WXK_CONTROL_V: KeyCode
WXK_CONTROL_W: KeyCode
WXK_CONTROL_X: KeyCode
WXK_CONTROL_Y: KeyCode
WXK_CONTROL_Z: KeyCode
WXK_DECIMAL: KeyCode
WXK_DELETE: KeyCode
WXK_DIVIDE: KeyCode
WXK_DOWN: KeyCode
WXK_END: KeyCode
WXK_ESCAPE: KeyCode
WXK_EXECUTE: KeyCode
WXK_F1: KeyCode
WXK_F10: KeyCode
WXK_F11: KeyCode
WXK_F12: KeyCode
WXK_F13: KeyCode
WXK_F14: KeyCode
WXK_F15: KeyCode
WXK_F16: KeyCode
WXK_F17: KeyCode
WXK_F18: KeyCode
WXK_F19: KeyCode
WXK_F2: KeyCode
WXK_F20: KeyCode
WXK_F21: KeyCode
WXK_F22: KeyCode
WXK_F23: KeyCode
WXK_F24: KeyCode
WXK_F3: KeyCode
WXK_F4: KeyCode
WXK_F5: KeyCode
WXK_F6: KeyCode
WXK_F7: KeyCode
WXK_F8: KeyCode
WXK_F9: KeyCode
WXK_HELP: KeyCode
WXK_HOME: KeyCode
WXK_INSERT: KeyCode
WXK_LAUNCH_0: KeyCode
WXK_LAUNCH_1: KeyCode
WXK_LAUNCH_2: KeyCode
WXK_LAUNCH_3: KeyCode
WXK_LAUNCH_4: KeyCode
WXK_LAUNCH_5: KeyCode
WXK_LAUNCH_6: KeyCode
WXK_LAUNCH_7: KeyCode
WXK_LAUNCH_8: KeyCode
WXK_LAUNCH_9: KeyCode
WXK_LAUNCH_A: KeyCode
WXK_LAUNCH_APP1: KeyCode
WXK_LAUNCH_APP2: KeyCode
WXK_LAUNCH_B: KeyCode
WXK_LAUNCH_C: KeyCode
WXK_LAUNCH_D: KeyCode
WXK_LAUNCH_E: KeyCode
WXK_LAUNCH_F: KeyCode
WXK_LAUNCH_MAIL: KeyCode
WXK_LBUTTON: KeyCode
WXK_LEFT: KeyCode
WXK_MBUTTON: KeyCode
WXK_MEDIA_NEXT_TRACK: KeyCode
WXK_MEDIA_PLAY_PAUSE: KeyCode
WXK_MEDIA_PREV_TRACK: KeyCode
WXK_MEDIA_STOP: KeyCode
WXK_MENU: KeyCode
WXK_MULTIPLY: KeyCode
WXK_NONE: KeyCode
WXK_NUMLOCK: KeyCode
WXK_NUMPAD0: KeyCode
WXK_NUMPAD1: KeyCode
WXK_NUMPAD2: KeyCode
WXK_NUMPAD3: KeyCode
WXK_NUMPAD4: KeyCode
WXK_NUMPAD5: KeyCode
WXK_NUMPAD6: KeyCode
WXK_NUMPAD7: KeyCode
WXK_NUMPAD8: KeyCode
WXK_NUMPAD9: KeyCode
WXK_NUMPAD_ADD: KeyCode
WXK_NUMPAD_BEGIN: KeyCode
WXK_NUMPAD_DECIMAL: KeyCode
WXK_NUMPAD_DELETE: KeyCode
WXK_NUMPAD_DIVIDE: KeyCode
WXK_NUMPAD_DOWN: KeyCode
WXK_NUMPAD_END: KeyCode
WXK_NUMPAD_ENTER: KeyCode
WXK_NUMPAD_EQUAL: KeyCode
WXK_NUMPAD_F1: KeyCode
WXK_NUMPAD_F2: KeyCode
WXK_NUMPAD_F3: KeyCode
WXK_NUMPAD_F4: KeyCode
WXK_NUMPAD_HOME: KeyCode
WXK_NUMPAD_INSERT: KeyCode
WXK_NUMPAD_LEFT: KeyCode
WXK_NUMPAD_MULTIPLY: KeyCode
WXK_NUMPAD_PAGEDOWN: KeyCode
WXK_NUMPAD_PAGEUP: KeyCode
WXK_NUMPAD_RIGHT: KeyCode
WXK_NUMPAD_SEPARATOR: KeyCode
WXK_NUMPAD_SPACE: KeyCode
WXK_NUMPAD_SUBTRACT: KeyCode
WXK_NUMPAD_TAB: KeyCode
WXK_NUMPAD_UP: KeyCode
WXK_PAGEDOWN: KeyCode
WXK_PAGEUP: KeyCode
WXK_PAUSE: KeyCode
WXK_PRINT: KeyCode
WXK_RAW_CONTROL: KeyCode
WXK_RBUTTON: KeyCode
WXK_RETURN: KeyCode
WXK_RIGHT: KeyCode
WXK_SCROLL: KeyCode
WXK_SELECT: KeyCode
WXK_SEPARATOR: KeyCode
WXK_SHIFT: KeyCode
WXK_SNAPSHOT: KeyCode
WXK_SPACE: KeyCode
WXK_SPECIAL1: KeyCode
WXK_SPECIAL10: KeyCode
WXK_SPECIAL11: KeyCode
WXK_SPECIAL12: KeyCode
WXK_SPECIAL13: KeyCode
WXK_SPECIAL14: KeyCode
WXK_SPECIAL15: KeyCode
WXK_SPECIAL16: KeyCode
WXK_SPECIAL17: KeyCode
WXK_SPECIAL18: KeyCode
WXK_SPECIAL19: KeyCode
WXK_SPECIAL2: KeyCode
WXK_SPECIAL20: KeyCode
WXK_SPECIAL3: KeyCode
WXK_SPECIAL4: KeyCode
WXK_SPECIAL5: KeyCode
WXK_SPECIAL6: KeyCode
WXK_SPECIAL7: KeyCode
WXK_SPECIAL8: KeyCode
WXK_SPECIAL9: KeyCode
WXK_START: KeyCode
WXK_SUBTRACT: KeyCode
WXK_TAB: KeyCode
WXK_UP: KeyCode
WXK_VOLUME_DOWN: KeyCode
WXK_VOLUME_MUTE: KeyCode
WXK_VOLUME_UP: KeyCode
WXK_WINDOWS_LEFT: KeyCode
WXK_WINDOWS_MENU: KeyCode
WXK_WINDOWS_RIGHT: KeyCode
Width: Edge
XOR: RasterOperationMode
YES: int
YES_DEFAULT: int
YES_NO: int
wxEVT_ACTIVATE: int
wxEVT_ACTIVATE_APP: int
wxEVT_ANY: int
wxEVT_AUX1_DCLICK: int
wxEVT_AUX1_DOWN: int
wxEVT_AUX1_UP: int
wxEVT_AUX2_DCLICK: int
wxEVT_AUX2_DOWN: int
wxEVT_AUX2_UP: int
wxEVT_BUTTON: int
wxEVT_CHAR: int
wxEVT_CHAR_HOOK: int
wxEVT_CHECKBOX: int
wxEVT_CHECKLISTBOX: int
wxEVT_CHILD_FOCUS: int
wxEVT_CHOICE: int
wxEVT_CHOICEBOOK_PAGE_CHANGED: int
wxEVT_CHOICEBOOK_PAGE_CHANGING: int
wxEVT_CLIPBOARD_CHANGED: int
wxEVT_CLOSE_WINDOW: int
wxEVT_COLLAPSIBLEHEADER_CHANGED: int
wxEVT_COLLAPSIBLEPANE_CHANGED: int
wxEVT_COLOURPICKER_CHANGED: int
wxEVT_COLOURPICKER_CURRENT_CHANGED: int
wxEVT_COLOURPICKER_DIALOG_CANCELLED: int
wxEVT_COLOUR_CHANGED: int
wxEVT_COMBOBOX: int
wxEVT_COMBOBOX_CLOSEUP: int
wxEVT_COMBOBOX_DROPDOWN: int
wxEVT_COMMAND_ENTER: int
wxEVT_COMMAND_KILL_FOCUS: int
wxEVT_COMMAND_LEFT_CLICK: int
wxEVT_COMMAND_LEFT_DCLICK: int
wxEVT_COMMAND_RIGHT_CLICK: int
wxEVT_COMMAND_RIGHT_DCLICK: int
wxEVT_COMMAND_SET_FOCUS: int
wxEVT_CONTEXT_MENU: int
wxEVT_CREATE: int
wxEVT_DESTROY: int
wxEVT_DETAILED_HELP: int
wxEVT_DIRCTRL_FILEACTIVATED: int
wxEVT_DIRCTRL_SELECTIONCHANGED: int
wxEVT_DIRPICKER_CHANGED: int
wxEVT_DISPLAY_CHANGED: int
wxEVT_DPI_CHANGED: int
wxEVT_DROP_FILES: int
wxEVT_END_PROCESS: int
wxEVT_END_SESSION: int
wxEVT_ENTER_WINDOW: int
wxEVT_ERASE_BACKGROUND: int
wxEVT_FILECTRL_FILEACTIVATED: int
wxEVT_FILECTRL_FILTERCHANGED: int
wxEVT_FILECTRL_FOLDERCHANGED: int
wxEVT_FILECTRL_SELECTIONCHANGED: int
wxEVT_FILEPICKER_CHANGED: int
wxEVT_FIND: int
wxEVT_FIND_CLOSE: int
wxEVT_FIND_NEXT: int
wxEVT_FIND_REPLACE: int
wxEVT_FIND_REPLACE_ALL: int
wxEVT_FONTPICKER_CHANGED: int
wxEVT_FSWATCHER: int
wxEVT_FULLSCREEN: int
wxEVT_GESTURE_PAN: int
wxEVT_GESTURE_ROTATE: int
wxEVT_GESTURE_ZOOM: int
wxEVT_HEADER_BEGIN_REORDER: int
wxEVT_HEADER_BEGIN_RESIZE: int
wxEVT_HEADER_CLICK: int
wxEVT_HEADER_DCLICK: int
wxEVT_HEADER_DRAGGING_CANCELLED: int
wxEVT_HEADER_END_REORDER: int
wxEVT_HEADER_END_RESIZE: int
wxEVT_HEADER_MIDDLE_CLICK: int
wxEVT_HEADER_MIDDLE_DCLICK: int
wxEVT_HEADER_RESIZING: int
wxEVT_HEADER_RIGHT_CLICK: int
wxEVT_HEADER_RIGHT_DCLICK: int
wxEVT_HEADER_SEPARATOR_DCLICK: int
wxEVT_HELP: int
wxEVT_HIBERNATE: int
wxEVT_HOTKEY: int
wxEVT_ICONIZE: int
wxEVT_IDLE: int
wxEVT_INIT_DIALOG: int
wxEVT_JOY_BUTTON_DOWN: int
wxEVT_JOY_BUTTON_UP: int
wxEVT_JOY_MOVE: int
wxEVT_JOY_ZMOVE: int
wxEVT_KEY_DOWN: int
wxEVT_KEY_UP: int
wxEVT_KILL_FOCUS: int
wxEVT_LEAVE_WINDOW: int
wxEVT_LEFT_DCLICK: int
wxEVT_LEFT_DOWN: int
wxEVT_LEFT_UP: int
wxEVT_LISTBOOK_PAGE_CHANGED: int
wxEVT_LISTBOOK_PAGE_CHANGING: int
wxEVT_LISTBOX: int
wxEVT_LISTBOX_DCLICK: int
wxEVT_LIST_BEGIN_DRAG: int
wxEVT_LIST_BEGIN_LABEL_EDIT: int
wxEVT_LIST_BEGIN_RDRAG: int
wxEVT_LIST_CACHE_HINT: int
wxEVT_LIST_COL_BEGIN_DRAG: int
wxEVT_LIST_COL_CLICK: int
wxEVT_LIST_COL_DRAGGING: int
wxEVT_LIST_COL_END_DRAG: int
wxEVT_LIST_COL_RIGHT_CLICK: int
wxEVT_LIST_DELETE_ALL_ITEMS: int
wxEVT_LIST_DELETE_ITEM: int
wxEVT_LIST_END_LABEL_EDIT: int
wxEVT_LIST_INSERT_ITEM: int
wxEVT_LIST_ITEM_ACTIVATED: int
wxEVT_LIST_ITEM_CHECKED: int
wxEVT_LIST_ITEM_DESELECTED: int
wxEVT_LIST_ITEM_FOCUSED: int
wxEVT_LIST_ITEM_MIDDLE_CLICK: int
wxEVT_LIST_ITEM_RIGHT_CLICK: int
wxEVT_LIST_ITEM_SELECTED: int
wxEVT_LIST_ITEM_UNCHECKED: int
wxEVT_LIST_KEY_DOWN: int
wxEVT_LONG_PRESS: int
wxEVT_MAGNIFY: int
wxEVT_MAXIMIZE: int
wxEVT_MENU: int
wxEVT_MENU_CLOSE: int
wxEVT_MENU_HIGHLIGHT: int
wxEVT_MENU_OPEN: int
wxEVT_MIDDLE_DCLICK: int
wxEVT_MIDDLE_DOWN: int
wxEVT_MIDDLE_UP: int
wxEVT_MOTION: int
wxEVT_MOUSEWHEEL: int
wxEVT_MOUSE_CAPTURE_CHANGED: int
wxEVT_MOUSE_CAPTURE_LOST: int
wxEVT_MOVE: int
wxEVT_MOVE_END: int
wxEVT_MOVE_START: int
wxEVT_MOVING: int
wxEVT_NAVIGATION_KEY: int
wxEVT_NC_PAINT: int
wxEVT_NOTEBOOK_PAGE_CHANGED: int
wxEVT_NOTEBOOK_PAGE_CHANGING: int
wxEVT_NULL: int
wxEVT_PAINT: int
wxEVT_PALETTE_CHANGED: int
wxEVT_POWER_RESUME: int
wxEVT_POWER_SUSPENDED: int
wxEVT_POWER_SUSPENDING: int
wxEVT_POWER_SUSPEND_CANCEL: int
wxEVT_PRESS_AND_TAP: int
wxEVT_QUERY_END_SESSION: int
wxEVT_QUERY_NEW_PALETTE: int
wxEVT_RADIOBOX: int
wxEVT_RADIOBUTTON: int
wxEVT_RIGHT_DCLICK: int
wxEVT_RIGHT_DOWN: int
wxEVT_RIGHT_UP: int
wxEVT_SCROLLBAR: int
wxEVT_SCROLLWIN_BOTTOM: int
wxEVT_SCROLLWIN_LINEDOWN: int
wxEVT_SCROLLWIN_LINEUP: int
wxEVT_SCROLLWIN_PAGEDOWN: int
wxEVT_SCROLLWIN_PAGEUP: int
wxEVT_SCROLLWIN_THUMBRELEASE: int
wxEVT_SCROLLWIN_THUMBTRACK: int
wxEVT_SCROLLWIN_TOP: int
wxEVT_SCROLL_BOTTOM: int
wxEVT_SCROLL_CHANGED: int
wxEVT_SCROLL_LINEDOWN: int
wxEVT_SCROLL_LINEUP: int
wxEVT_SCROLL_PAGEDOWN: int
wxEVT_SCROLL_PAGEUP: int
wxEVT_SCROLL_THUMBRELEASE: int
wxEVT_SCROLL_THUMBTRACK: int
wxEVT_SCROLL_TOP: int
wxEVT_SEARCH: int
wxEVT_SEARCH_CANCEL: int
wxEVT_SET_CURSOR: int
wxEVT_SET_FOCUS: int
wxEVT_SHOW: int
wxEVT_SIZE: int
wxEVT_SIZING: int
wxEVT_SLIDER: int
wxEVT_SPIN: int
wxEVT_SPINCTRL: int
wxEVT_SPINCTRLDOUBLE: int
wxEVT_SPIN_DOWN: int
wxEVT_SPIN_UP: int
wxEVT_SPLITTER_DOUBLECLICKED: int
wxEVT_SPLITTER_SASH_POS_CHANGED: int
wxEVT_SPLITTER_SASH_POS_CHANGING: int
wxEVT_SPLITTER_SASH_POS_RESIZE: int
wxEVT_SPLITTER_UNSPLIT: int
wxEVT_SYS_COLOUR_CHANGED: int
wxEVT_TEXT: int
wxEVT_TEXT_COPY: int
wxEVT_TEXT_CUT: int
wxEVT_TEXT_ENTER: int
wxEVT_TEXT_MAXLEN: int
wxEVT_TEXT_PASTE: int
wxEVT_TEXT_URL: int
wxEVT_THREAD: int
wxEVT_TIMER: int
wxEVT_TOGGLEBUTTON: int
wxEVT_TOOL: int
wxEVT_TOOLBOOK_PAGE_CHANGED: int
wxEVT_TOOLBOOK_PAGE_CHANGING: int
wxEVT_TOOL_DROPDOWN: int
wxEVT_TOOL_ENTER: int
wxEVT_TOOL_RCLICKED: int
wxEVT_TREEBOOK_NODE_COLLAPSED: int
wxEVT_TREEBOOK_NODE_EXPANDED: int
wxEVT_TREEBOOK_PAGE_CHANGED: int
wxEVT_TREEBOOK_PAGE_CHANGING: int
wxEVT_TREE_BEGIN_DRAG: int
wxEVT_TREE_BEGIN_LABEL_EDIT: int
wxEVT_TREE_BEGIN_RDRAG: int
wxEVT_TREE_DELETE_ITEM: int
wxEVT_TREE_END_DRAG: int
wxEVT_TREE_END_LABEL_EDIT: int
wxEVT_TREE_GET_INFO: int
wxEVT_TREE_ITEM_ACTIVATED: int
wxEVT_TREE_ITEM_COLLAPSED: int
wxEVT_TREE_ITEM_COLLAPSING: int
wxEVT_TREE_ITEM_EXPANDED: int
wxEVT_TREE_ITEM_EXPANDING: int
wxEVT_TREE_ITEM_GETTOOLTIP: int
wxEVT_TREE_ITEM_MENU: int
wxEVT_TREE_ITEM_MIDDLE_CLICK: int
wxEVT_TREE_ITEM_RIGHT_CLICK: int
wxEVT_TREE_KEY_DOWN: int
wxEVT_TREE_SEL_CHANGED: int
wxEVT_TREE_SEL_CHANGING: int
wxEVT_TREE_SET_INFO: int
wxEVT_TREE_STATE_IMAGE_CLICK: int
wxEVT_TWO_FINGER_TAP: int
wxEVT_UPDATE_UI: int
wxEVT_VLBOX: int
wxEVT_WINDOW_MODAL_DIALOG_CLOSED: int
wxWidgets_version: str

class AccObject(int): ...

class AccRole(int): ...

class AccSelectionFlags(int): ...

class AccStatus(int): ...

class AcceleratorEntry(sip.wrapper):
    @classmethod
    def FromString(cls, str) -> bool: ...
    @classmethod
    def GetCommand(cls) -> int: ...
    @classmethod
    def GetFlags(cls) -> int: ...
    @classmethod
    def GetKeyCode(cls) -> int: ...
    @classmethod
    def GetMenuItem(cls) -> MenuItem: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def Set(cls, flags, keyCode, cmd, item=...) -> Any: ...
    @classmethod
    def ToRawString(cls) -> String: ...
    @classmethod
    def ToString(cls) -> String: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def Command(self): ...
    @property
    def Flags(self): ...
    @property
    def KeyCode(self): ...
    @property
    def MenuItem(self): ...

class AcceleratorEntryFlags(int): ...

class AcceleratorTable(Object):
    @classmethod
    def IsOk(cls) -> bool: ...

class Accessible(Object):
    Window: Incomplete
    @classmethod
    def DoDefaultAction(cls, childId) -> AccStatus: ...
    @classmethod
    def GetChild(cls, *args, **kwargs): ...
    @classmethod
    def GetChildCount(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultAction(cls, *args, **kwargs): ...
    @classmethod
    def GetDescription(cls, *args, **kwargs): ...
    @classmethod
    def GetFocus(cls, *args, **kwargs): ...
    @classmethod
    def GetHelpText(cls, *args, **kwargs): ...
    @classmethod
    def GetKeyboardShortcut(cls, *args, **kwargs): ...
    @classmethod
    def GetLocation(cls, *args, **kwargs): ...
    @classmethod
    def GetName(cls, *args, **kwargs): ...
    @classmethod
    def GetParent(cls, *args, **kwargs): ...
    @classmethod
    def GetRole(cls, *args, **kwargs): ...
    @classmethod
    def GetSelections(cls, *args, **kwargs): ...
    @classmethod
    def GetState(cls, *args, **kwargs): ...
    @classmethod
    def GetValue(cls, *args, **kwargs): ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def HitTest(cls, pt, childId, childObject) -> AccStatus: ...
    @classmethod
    def Navigate(cls, navDir, fromId, toId, toObject) -> AccStatus: ...
    @classmethod
    def NotifyEvent(cls, eventType, window, objectType, objectId) -> Any: ...
    @classmethod
    def Select(cls, childId, selectFlags) -> AccStatus: ...
    @classmethod
    def SetWindow(cls, window) -> Any: ...

class ActivateEvent(Event):
    class Reason(int):
        def __reduce__(self): ...
    Reason_Mouse: ClassVar[ActivateEvent.Reason] = ...
    Reason_Unknown: ClassVar[ActivateEvent.Reason] = ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetActivationReason(cls) -> Reason: ...
    @classmethod
    def GetActive(cls) -> bool: ...
    @property
    def Active(self): ...

class ActivityIndicator(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, winid=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsRunning(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def Start(cls) -> Any: ...
    @classmethod
    def Stop(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class AffineMatrix2D(AffineMatrix2DBase):
    @classmethod
    def Concat(cls, t) -> Any: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def Invert(cls) -> bool: ...
    @classmethod
    def IsEqual(cls, t) -> Any: ...
    @classmethod
    def IsIdentity(cls) -> bool: ...
    @classmethod
    def Mirror(cls, direction=...) -> Any: ...
    @classmethod
    def Rotate(cls, cRadians) -> Any: ...
    @classmethod
    def Scale(cls, xScale, yScale) -> Any: ...
    @classmethod
    def Set(cls, mat2D, tr) -> Any: ...
    @classmethod
    def TransformDistance(cls, p) -> Point2DDouble: ...
    @classmethod
    def TransformPoint(cls, p) -> Point2DDouble: ...
    @classmethod
    def Translate(cls, dx, dy) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class AffineMatrix2DBase(sip.wrapper):
    @classmethod
    def Concat(cls, t) -> Any: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def Invert(cls) -> bool: ...
    @classmethod
    def IsEqual(cls, t) -> bool: ...
    @classmethod
    def IsIdentity(cls) -> bool: ...
    @classmethod
    def Mirror(cls, direction=...) -> Any: ...
    @classmethod
    def Rotate(cls, cRadians) -> Any: ...
    @classmethod
    def Scale(cls, xScale, yScale) -> Any: ...
    @classmethod
    def Set(cls, mat2D, tr) -> Any: ...
    @classmethod
    def TransformDistance(cls, p) -> Point2DDouble: ...
    @classmethod
    def TransformPoint(cls, p) -> Point2DDouble: ...
    @classmethod
    def Translate(cls, dx, dy) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class Alignment(int): ...

class AlphaPixelData(PixelDataBase):
    @classmethod
    def GetPixels(cls) -> AlphaPixelData_Accessor: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Pixels(self): ...

class AlphaPixelData_Accessor(sip.wrapper):
    @classmethod
    def Get(cls) -> PyObject: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def MoveTo(cls, data, x, y) -> Any: ...
    @classmethod
    def Offset(cls, data, x, y) -> Any: ...
    @classmethod
    def OffsetX(cls, data, x) -> Any: ...
    @classmethod
    def OffsetY(cls, data, y) -> Any: ...
    @classmethod
    def Reset(cls, data) -> Any: ...
    @classmethod
    def Set(cls, red, green, blue, alpha) -> Any: ...
    @classmethod
    def nextPixel(cls) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class AntialiasMode(int): ...

class AnyButton(Control):
    Bitmap: Incomplete
    BitmapCurrent: Incomplete
    BitmapDisabled: Incomplete
    BitmapFocus: Incomplete
    BitmapLabel: Incomplete
    BitmapMargins: Incomplete
    BitmapPressed: Incomplete
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapCurrent(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapDisabled(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapFocus(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapLabel(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapMargins(cls) -> Size: ...
    @classmethod
    def GetBitmapPressed(cls) -> Bitmap: ...
    @classmethod
    def SetBitmap(cls, bitmap, dir=...) -> Any: ...
    @classmethod
    def SetBitmapCurrent(cls, bitmap) -> Any: ...
    @classmethod
    def SetBitmapDisabled(cls, bitmap) -> Any: ...
    @classmethod
    def SetBitmapFocus(cls, bitmap) -> Any: ...
    @classmethod
    def SetBitmapLabel(cls, bitmap) -> Any: ...
    @overload
    @classmethod
    def SetBitmapMargins(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def SetBitmapMargins(cls, sz) -> Any: ...
    @classmethod
    def SetBitmapPosition(cls, dir) -> Any: ...
    @classmethod
    def SetBitmapPressed(cls, bitmap) -> Any: ...

class AppAssertMode(int): ...

class AppConsole(EvtHandler, EventFilter):
    AppDisplayName: Incomplete
    AppName: Incomplete
    ClassName: Incomplete
    VendorDisplayName: Incomplete
    VendorName: Incomplete
    @classmethod
    def DeletePendingEvents(cls) -> Any: ...
    @classmethod
    def ExitMainLoop(cls) -> Any: ...
    @classmethod
    def FilterEvent(cls, event) -> int: ...
    @classmethod
    def GetAppDisplayName(cls) -> String: ...
    @classmethod
    def GetAppName(cls) -> String: ...
    @classmethod
    def GetClassName(cls) -> String: ...
    @classmethod
    def GetInstance(cls) -> AppConsole: ...
    @classmethod
    def GetMainLoop(cls) -> EventLoopBase: ...
    @classmethod
    def GetTraits(cls) -> AppTraits: ...
    @classmethod
    def GetVendorDisplayName(cls) -> String: ...
    @classmethod
    def GetVendorName(cls) -> String: ...
    @classmethod
    def HasPendingEvents(cls) -> bool: ...
    @classmethod
    def IsMainLoopRunning(cls) -> bool: ...
    @classmethod
    def IsScheduledForDestruction(cls, object) -> bool: ...
    @classmethod
    def MainLoop(cls) -> int: ...
    @classmethod
    def OnEventLoopEnter(cls, loop) -> Any: ...
    @classmethod
    def OnEventLoopExit(cls, loop) -> Any: ...
    @classmethod
    def OnExit(cls) -> int: ...
    @classmethod
    def OnInit(cls) -> bool: ...
    @classmethod
    def OnRun(cls) -> int: ...
    @classmethod
    def ProcessPendingEvents(cls) -> Any: ...
    @classmethod
    def ResumeProcessingOfPendingEvents(cls) -> Any: ...
    @classmethod
    def ScheduleForDestruction(cls, object) -> Any: ...
    @classmethod
    def SetAppDisplayName(cls, name) -> Any: ...
    @classmethod
    def SetAppName(cls, name) -> Any: ...
    @classmethod
    def SetCLocale(cls) -> Any: ...
    @classmethod
    def SetClassName(cls, name) -> Any: ...
    @classmethod
    def SetInstance(cls, app) -> Any: ...
    @classmethod
    def SetVendorDisplayName(cls, name) -> Any: ...
    @classmethod
    def SetVendorName(cls, name) -> Any: ...
    @classmethod
    def SuspendProcessingOfPendingEvents(cls) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @classmethod
    def UsesEventLoop(cls) -> bool: ...
    @classmethod
    def Yield(cls, onlyIfNeeded=...) -> bool: ...
    @property
    def Traits(self): ...

class AppTraits(sip.wrapper):
    @classmethod
    def CreateConfig(cls) -> ConfigBase: ...
    @classmethod
    def CreateEventLoop(cls) -> EventLoopBase: ...
    @classmethod
    def CreateLogTarget(cls) -> Log: ...
    @classmethod
    def GetAssertStackTrace(cls) -> String: ...
    @classmethod
    def GetDesktopEnvironment(cls) -> String: ...
    @classmethod
    def GetStandardPaths(cls) -> StandardPaths: ...
    @classmethod
    def GetToolkitVersion(cls, *args, **kwargs): ...
    @classmethod
    def HasStderr(cls) -> bool: ...
    @classmethod
    def IsUsingUniversalWidgets(cls) -> bool: ...
    @classmethod
    def SafeMessageBox(cls, text, title) -> bool: ...
    @classmethod
    def ShowAssertDialog(cls, msg) -> bool: ...
    @property
    def AssertStackTrace(self): ...
    @property
    def DesktopEnvironment(self): ...
    @property
    def StandardPaths(self): ...
    @property
    def ToolkitVersion(self): ...

class Architecture(int): ...

class ArchiveFSHandler(FileSystemHandler):
    def CanOpen(self, location: Any) -> bool: ...
    @classmethod
    def Cleanup(cls) -> Any: ...
    def FindFirst(self, spec: Any, flags: int = ...) -> Any: ...
    def FindNext(self) -> Any: ...
    @classmethod
    def GetAnchor(cls, *args, **kwargs): ...
    @classmethod
    def GetLeftLocation(cls, *args, **kwargs): ...
    @classmethod
    def GetProtocol(cls, *args, **kwargs): ...
    @classmethod
    def GetRightLocation(cls, *args, **kwargs): ...
    def OpenFile(self, fs: FileSystem, location: Any) -> FSFile | None: ...

class ArrayVideoModes(sip.wrapper):
    def append(self, obj: VideoMode) -> Any: ...
    def index(self, obj: VideoMode) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class ArtProvider(Object):
    @classmethod
    def CreateBitmap(cls, id, client, size) -> Bitmap: ...
    @classmethod
    def CreateIconBundle(cls, id, client) -> IconBundle: ...
    @classmethod
    def Delete(cls, provider) -> bool: ...
    @classmethod
    def GetBitmap(cls, id, client=..., size=...) -> Bitmap: ...
    @classmethod
    def GetBitmapBundle(cls, id, client=..., size=...) -> BitmapBundle: ...
    @classmethod
    def GetDIPSizeHint(cls, client) -> Size: ...
    @classmethod
    def GetIcon(cls, id, client=..., size=...) -> Icon: ...
    @classmethod
    def GetIconBundle(cls, id, client=...) -> IconBundle: ...
    @classmethod
    def GetMessageBoxIcon(cls, flags) -> Icon: ...
    @classmethod
    def GetMessageBoxIconId(cls, flags) -> ArtID: ...
    @classmethod
    def GetNativeDIPSizeHint(cls, client) -> Size: ...
    @classmethod
    def GetNativeSizeHint(cls, client, win=...) -> Size: ...
    @classmethod
    def GetSizeHint(cls, client, win=...) -> Size: ...
    @classmethod
    def HasNativeProvider(cls) -> bool: ...
    @classmethod
    def Pop(cls) -> bool: ...
    @classmethod
    def Push(cls, provider) -> Any: ...
    @classmethod
    def PushBack(cls, provider) -> Any: ...
    @classmethod
    def Remove(cls, provider) -> bool: ...

class AutoBufferedPaintDC(DC): ...

class BackgroundStyle(int): ...

class BatteryState(int): ...

class Bitmap(GDIObject):
    Depth: Incomplete
    Handle: Incomplete
    Height: Incomplete
    Mask: Incomplete
    Palette: Incomplete
    ScaleFactor: Incomplete
    Size: Incomplete
    Width: Incomplete
    @classmethod
    def ConvertToDisabled(cls, brightness=...) -> Bitmap: ...
    @classmethod
    def ConvertToImage(cls) -> Image: ...
    @classmethod
    def CopyFromBuffer(cls, data, format=..., stride=...) -> Any: ...
    @classmethod
    def CopyFromIcon(cls, icon) -> bool: ...
    @classmethod
    def CopyToBuffer(cls, data, format=..., stride=...) -> Any: ...
    @overload
    @classmethod
    def Create(cls, width, height, depth=...) -> bool: ...
    @overload
    @classmethod
    def Create(cls, sz, depth=...) -> bool: ...
    @overload
    @classmethod
    def Create(cls, width, height, dc) -> bool: ...
    @classmethod
    def CreateScaled(cls, width, height, depth, logicalScale) -> bool: ...
    @overload
    @classmethod
    def CreateWithDIPSize(cls, size, scale, depth=...) -> bool: ...
    @overload
    @classmethod
    def CreateWithDIPSize(cls, width, height, scale, depth=...) -> bool: ...
    @classmethod
    def FromBuffer(cls, width, height, data) -> Bitmap: ...
    @classmethod
    def FromBufferAndAlpha(cls, width, height, data, alpha) -> Bitmap: ...
    @classmethod
    def FromBufferRGBA(cls, width, height, data) -> Bitmap: ...
    @classmethod
    def FromPNGData(cls, data) -> Bitmap: ...
    @classmethod
    def FromRGBA(cls, width, height, red=..., green=..., blue=..., alpha=...) -> Bitmap: ...
    @classmethod
    def GetDIPSize(cls) -> Size: ...
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetHandle(cls) -> long: ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetLogicalHeight(cls) -> double: ...
    @classmethod
    def GetLogicalSize(cls) -> Size: ...
    @classmethod
    def GetLogicalWidth(cls) -> double: ...
    @classmethod
    def GetMask(cls) -> Mask: ...
    @classmethod
    def GetPalette(cls) -> Palette: ...
    @classmethod
    def GetScaleFactor(cls) -> double: ...
    @classmethod
    def GetScaledHeight(cls) -> double: ...
    @classmethod
    def GetScaledSize(cls) -> Size: ...
    @classmethod
    def GetScaledWidth(cls) -> double: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetSubBitmap(cls, rect) -> Bitmap: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def HasAlpha(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def LoadFile(cls, name, type=...) -> bool: ...
    @classmethod
    def NewFromPNGData(cls, data, size) -> Bitmap: ...
    @classmethod
    def Rescale(cls, bmp, sizeNeeded) -> Any: ...
    @classmethod
    def ResetAlpha(cls) -> Any: ...
    @classmethod
    def SaveFile(cls, name, type, palette=...) -> bool: ...
    @classmethod
    def SetDepth(cls, depth) -> Any: ...
    @classmethod
    def SetHandle(cls, handle) -> Any: ...
    @classmethod
    def SetHeight(cls, height) -> Any: ...
    @classmethod
    def SetMask(cls, mask) -> Any: ...
    @classmethod
    def SetMaskColour(cls, colour) -> Any: ...
    @classmethod
    def SetPalette(cls, palette) -> Any: ...
    @classmethod
    def SetScaleFactor(cls, scale) -> Any: ...
    @classmethod
    def SetSize(cls, size) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    @classmethod
    def UseAlpha(cls, use=...) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def DIPSize(self): ...
    @property
    def LogicalHeight(self): ...
    @property
    def LogicalSize(self): ...
    @property
    def LogicalWidth(self): ...
    @property
    def ScaledHeight(self): ...
    @property
    def ScaledSize(self): ...
    @property
    def ScaledWidth(self): ...

class BitmapBufferFormat(int): ...

class BitmapBundle(sip.wrapper):
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def FromBitmap(cls, bitmap) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromBitmaps(cls, bitmaps) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromBitmaps(cls, bitmap1, bitmap2) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromFiles(cls, path, filename, extension=...) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromFiles(cls, fullpathname) -> BitmapBundle: ...
    @classmethod
    def FromIconBundle(cls, iconBundle) -> BitmapBundle: ...
    @classmethod
    def FromImage(cls, image) -> BitmapBundle: ...
    @classmethod
    def FromImpl(cls, impl) -> BitmapBundle: ...
    @classmethod
    def FromResources(cls, name) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromSVG(cls, data, sizeDef) -> BitmapBundle: ...
    @overload
    @classmethod
    def FromSVG(cls, data, len, sizeDef) -> BitmapBundle: ...
    @classmethod
    def FromSVGFile(cls, path, sizeDef) -> BitmapBundle: ...
    @classmethod
    def FromSVGResource(cls, name, sizeDef) -> BitmapBundle: ...
    @classmethod
    def GetBitmap(cls, size) -> Bitmap: ...
    @classmethod
    def GetBitmapFor(cls, window) -> Bitmap: ...
    @classmethod
    def GetDefaultSize(cls) -> Size: ...
    @classmethod
    def GetIcon(cls, size) -> Icon: ...
    @classmethod
    def GetIconFor(cls, window) -> Icon: ...
    @classmethod
    def GetPreferredBitmapSizeAtScale(cls, scale) -> Size: ...
    @classmethod
    def GetPreferredBitmapSizeFor(cls, window) -> Size: ...
    @classmethod
    def GetPreferredLogicalSizeFor(cls, window) -> Size: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsSameAs(cls, other) -> bool: ...
    @property
    def DefaultSize(self): ...

class BitmapBundleImpl(RefCounter):
    @classmethod
    def DoGetPreferredSize(cls, scale) -> Size: ...
    @classmethod
    def GetBitmap(cls, size) -> Bitmap: ...
    @classmethod
    def GetDefaultSize(cls) -> Size: ...
    @classmethod
    def GetIndexToUpscale(cls, size) -> size_t: ...
    @classmethod
    def GetNextAvailableScale(cls, *args, **kwargs): ...
    @classmethod
    def GetPreferredBitmapSizeAtScale(cls, scale) -> Size: ...
    @property
    def DefaultSize(self): ...

class BitmapButton(Button):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., bitmap=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def CreateCloseButton(cls, parent, winid, name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def NewCloseButton(cls, parent, winid, name=...) -> BitmapButton: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class BitmapDataObject(DataObjectSimple):
    Bitmap: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    def GetDataHere(self, buf: wx.siplib.voidptr | None) -> bool: ...
    def GetDataSize(self) -> int: ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def SetBitmap(cls, bitmap) -> Any: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @property
    def AllFormats(self): ...

class BitmapToggleButton(ToggleButton):
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., val=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, state) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class BitmapType(int): ...

class Bitness(int): ...

class BookCtrlBase(Control, WithImages):
    NO_IMAGE: ClassVar[int] = ...
    Selection: Incomplete
    @classmethod
    def AddPage(cls, page, text, select=..., imageId=...) -> bool: ...
    @classmethod
    def AdvanceSelection(cls, forward=...) -> Any: ...
    @classmethod
    def ChangeSelection(cls, page) -> int: ...
    @classmethod
    def Create(cls, parent, winid, pos=..., size=..., style=..., name=...) -> bool: ...
    @classmethod
    def DeleteAllPages(cls) -> bool: ...
    @classmethod
    def DeletePage(cls, page) -> bool: ...
    @classmethod
    def FindPage(cls, page) -> int: ...
    @classmethod
    def GetControlSizer(cls) -> Sizer: ...
    @classmethod
    def GetCurrentPage(cls) -> Window: ...
    @classmethod
    def GetPage(cls, page) -> Window: ...
    @classmethod
    def GetPageCount(cls) -> size_t: ...
    @classmethod
    def GetPageImage(cls, nPage) -> int: ...
    @classmethod
    def GetPageText(cls, nPage) -> String: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    @classmethod
    def InsertPage(cls, index, page, text, select=..., imageId=...) -> bool: ...
    @classmethod
    def RemovePage(cls, page) -> bool: ...
    @classmethod
    def SetPageImage(cls, page, image) -> bool: ...
    @classmethod
    def SetPageSize(cls, size) -> Any: ...
    @classmethod
    def SetPageText(cls, page, text) -> bool: ...
    @classmethod
    def SetSelection(cls, page) -> int: ...
    @property
    def ControlSizer(self): ...
    @property
    def CurrentPage(self): ...
    @property
    def PageCount(self): ...

class BookCtrlEvent(NotifyEvent):
    OldSelection: Incomplete
    Selection: Incomplete
    @classmethod
    def GetOldSelection(cls) -> int: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def SetOldSelection(cls, page) -> Any: ...
    @classmethod
    def SetSelection(cls, page) -> Any: ...

class Border(int): ...

class BoxSizer(Sizer):
    Orientation: Incomplete
    @classmethod
    def AddSpacer(cls, size) -> SizerItem: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def GetOrientation(cls) -> int: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetOrientation(cls, orient) -> Any: ...

class Brush(GDIObject):
    Colour: Incomplete
    Stipple: Incomplete
    Style: Incomplete
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetStipple(cls) -> Bitmap: ...
    @classmethod
    def GetStyle(cls) -> BrushStyle: ...
    @classmethod
    def IsHatch(cls) -> bool: ...
    @classmethod
    def IsNonTransparent(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsTransparent(cls) -> bool: ...
    @classmethod
    def MacSetTheme(cls, macThemeBrushID) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, colour) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, red, green, blue) -> Any: ...
    @classmethod
    def SetStipple(cls, bitmap) -> Any: ...
    @classmethod
    def SetStyle(cls, style) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class BrushList(sip.wrapper):
    @classmethod
    def FindOrCreateBrush(cls, colour, style=...) -> Brush: ...

class BrushStyle(int): ...

class BufferedDC(MemoryDC):
    Style: Incomplete
    @classmethod
    def GetStyle(cls) -> int: ...
    @overload
    @classmethod
    def Init(cls, dc, area, style=...) -> Any: ...
    @overload
    @classmethod
    def Init(cls, dc, buffer=..., style=...) -> Any: ...
    @classmethod
    def SetStyle(cls, style) -> Any: ...
    @classmethod
    def UnMask(cls) -> Any: ...

class BufferedPaintDC(BufferedDC): ...

class BusyCursor(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class BusyInfo(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def UpdateLabel(cls, str) -> Any: ...
    @classmethod
    def UpdateText(cls, str) -> Any: ...

class BusyInfoFlags(sip.wrapper):
    @classmethod
    def Background(cls, background) -> BusyInfoFlags: ...
    @classmethod
    def Foreground(cls, foreground) -> BusyInfoFlags: ...
    @classmethod
    def Icon(cls, icon) -> BusyInfoFlags: ...
    @classmethod
    def Label(cls, label) -> BusyInfoFlags: ...
    @classmethod
    def Parent(cls, parent) -> BusyInfoFlags: ...
    @classmethod
    def Text(cls, text) -> BusyInfoFlags: ...
    @classmethod
    def Title(cls, title) -> BusyInfoFlags: ...
    @classmethod
    def Transparency(cls, alpha) -> BusyInfoFlags: ...

class Button(AnyButton):
    AuthNeeded: Incomplete
    Label: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetAuthNeeded(cls) -> bool: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultSize(cls, win=...) -> Size: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetAuthNeeded(cls, needed=...) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDefault(cls) -> Window: ...
    @classmethod
    def SetLabel(cls, label) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class Caret(sip.wrapper):
    Size: Incomplete
    @overload
    @classmethod
    def Create(cls, window, width, height) -> bool: ...
    @overload
    @classmethod
    def Create(cls, window, size) -> bool: ...
    @classmethod
    def GetBlinkTime(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def Hide(cls) -> Any: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsVisible(cls) -> bool: ...
    @overload
    @classmethod
    def Move(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def Move(cls, pt) -> Any: ...
    @classmethod
    def SetBlinkTime(cls, milliseconds) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, size) -> Any: ...
    @classmethod
    def Show(cls, show=...) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls, *args, **kwargs): ...
    @property
    def Position(self): ...
    @property
    def Window(self): ...

class CheckBox(Control):
    ThreeStateValue: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def Get3StateValue(cls) -> CheckBoxState: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def Is3State(cls) -> bool: ...
    @classmethod
    def Is3rdStateAllowedForUser(cls) -> bool: ...
    @classmethod
    def IsChecked(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def Set3StateValue(cls, state) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, state) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class CheckBoxState(int): ...

class CheckListBox(ListBox):
    GetChecked: ClassVar[Callable] = ...
    GetCheckedItems: ClassVar[Callable] = ...
    GetCheckedStrings: ClassVar[Callable] = ...
    SetChecked: ClassVar[Callable] = ...
    SetCheckedItems: ClassVar[Callable] = ...
    SetCheckedStrings: ClassVar[Callable] = ...
    Checked: Incomplete
    CheckedItems: Incomplete
    CheckedStrings: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Check(cls, item, check=...) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., choices=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetCount(self) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetSelection(self) -> int: ...
    @classmethod
    def GetSelections(cls) -> ArrayInt: ...
    def GetString(self, n: int) -> Any: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsChecked(cls, item) -> bool: ...
    def IsSelected(self, n: int) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetSelection(self, n: int) -> Any: ...
    def SetString(self, n: int, s: Any) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class ChildFocusEvent(CommandEvent):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @property
    def Window(self): ...

class Choice(Control, ItemContainer):
    Columns: Incomplete
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., choices=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def FindString(cls, string, caseSensitive=...) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColumns(cls) -> int: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    @classmethod
    def GetCurrentSelection(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetString(cls, n) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsSorted(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetColumns(cls, n=...) -> Any: ...
    @classmethod
    def SetSelection(cls, n) -> Any: ...
    @classmethod
    def SetString(cls, n, string) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Count(self): ...
    @property
    def CurrentSelection(self): ...

class Choicebook(BookCtrlBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def ChangeSelection(self, page: int) -> int: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @overload
    @classmethod
    def GetChoiceCtrl(cls) -> Choice: ...
    @overload
    @classmethod
    def GetChoiceCtrl(cls) -> Choice: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetPageImage(self, nPage: int) -> int: ...
    def GetPageText(self, nPage: int) -> Any: ...
    def GetSelection(self) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def InsertPage(self, index: int, page: Window | None, text: Any, select: bool = ..., imageId: int = ...) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetPageImage(self, page: int, image: int) -> bool: ...
    def SetPageText(self, page: int, text: Any) -> bool: ...
    def SetSelection(self, page: int) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ChoiceCtrl(self): ...

class ClassInfo(sip.wrapper):
    @classmethod
    def CreateObject(cls) -> Object: ...
    @classmethod
    def FindClass(cls, className) -> ClassInfo: ...
    @classmethod
    def GetBaseClassName1(cls) -> Char: ...
    @classmethod
    def GetBaseClassName2(cls) -> Char: ...
    @classmethod
    def GetClassName(cls) -> Char: ...
    @classmethod
    def GetSize(cls) -> int: ...
    @classmethod
    def IsDynamic(cls) -> bool: ...
    @classmethod
    def IsKindOf(cls, info) -> bool: ...
    @property
    def BaseClassName1(self): ...
    @property
    def BaseClassName2(self): ...
    @property
    def ClassName(self): ...
    @property
    def Size(self): ...

class ClientDC(WindowDC): ...

class ClientDataContainer(sip.wrapper):
    GetClientObject: ClassVar[Callable] = ...
    SetClientObject: ClassVar[Callable] = ...
    ClientData: Incomplete
    @classmethod
    def GetClientData(cls) -> ClientData: ...
    @classmethod
    def SetClientData(cls, data) -> Any: ...

class Clipboard(Object):
    @classmethod
    def AddData(cls, data) -> bool: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def Close(cls) -> Any: ...
    @classmethod
    def Flush(cls) -> bool: ...
    @classmethod
    def Get(cls) -> Clipboard: ...
    @classmethod
    def GetData(cls, data) -> bool: ...
    @classmethod
    def IsOpened(cls) -> bool: ...
    @classmethod
    def IsSupported(cls, format) -> bool: ...
    @classmethod
    def IsUsingPrimarySelection(cls) -> bool: ...
    @classmethod
    def Open(cls) -> bool: ...
    @classmethod
    def SetData(cls, data) -> bool: ...
    @classmethod
    def UsePrimarySelection(cls, primary=...) -> Any: ...

class ClipboardTextEvent(CommandEvent):
    def Clone(self) -> Event | None: ...

class CloseEvent(Event):
    LoggingOff: Incomplete
    @classmethod
    def CanVeto(cls) -> bool: ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetLoggingOff(cls) -> bool: ...
    @classmethod
    def GetVeto(cls) -> bool: ...
    @classmethod
    def SetCanVeto(cls, canVeto) -> Any: ...
    @classmethod
    def SetLoggingOff(cls, loggingOff) -> Any: ...
    @classmethod
    def Veto(cls, veto=...) -> Any: ...

class CollapsibleHeaderCtrl(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsCollapsed(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetCollapsed(cls, collapsed=...) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class CollapsiblePane(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Collapse(cls, collapse=...) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def Expand(cls) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPane(cls) -> Window: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsCollapsed(cls) -> bool: ...
    @classmethod
    def IsExpanded(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Pane(self): ...

class CollapsiblePaneEvent(CommandEvent):
    Collapsed: Incomplete
    @classmethod
    def GetCollapsed(cls) -> bool: ...
    @classmethod
    def SetCollapsed(cls, collapsed) -> Any: ...

class Colour(Object):
    GetIM: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    RGB: Incomplete
    RGBA: Incomplete
    @classmethod
    def Alpha(cls) -> unsignedchar: ...
    @classmethod
    def AlphaBlend(cls, fg, bg, alpha) -> unsignedchar: ...
    @classmethod
    def Blue(cls) -> unsignedchar: ...
    @overload
    @classmethod
    def ChangeLightness(cls, ialpha) -> Colour: ...
    @overload
    @classmethod
    def ChangeLightness(cls, r, g, b, ialpha) -> Any: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetAlpha(cls) -> unsignedint: ...
    @classmethod
    def GetAsString(cls, flags=...) -> String: ...
    @classmethod
    def GetBlue(cls) -> unsignedint: ...
    @classmethod
    def GetGreen(cls) -> unsignedint: ...
    @classmethod
    def GetLuminance(cls) -> double: ...
    @classmethod
    def GetPixel(cls) -> IntPtr: ...
    @classmethod
    def GetRGB(cls) -> Uint32: ...
    @classmethod
    def GetRGBA(cls) -> Uint32: ...
    @classmethod
    def GetRed(cls) -> unsignedint: ...
    @classmethod
    def Green(cls) -> unsignedchar: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsSolid(cls) -> bool: ...
    @classmethod
    def MakeDisabled(cls, brightness=...) -> Colour: ...
    @classmethod
    def MakeGrey(cls, *args, **kwargs): ...
    @classmethod
    def MakeMono(cls, *args, **kwargs): ...
    @classmethod
    def Red(cls) -> unsignedchar: ...
    @overload
    @classmethod
    def Set(cls, red, green, blue, alpha=...) -> Any: ...
    @overload
    @classmethod
    def Set(cls, RGB) -> Any: ...
    @overload
    @classmethod
    def Set(cls, str) -> bool: ...
    @classmethod
    def SetRGB(cls, colRGB) -> Any: ...
    @classmethod
    def SetRGBA(cls, colRGBA) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Pixel(self): ...
    @property
    def alpha(self): ...
    @property
    def blue(self): ...
    @property
    def green(self): ...
    @property
    def red(self): ...

class ColourData(Object):
    NUM_CUSTOM: ClassVar[int] = ...
    ChooseAlpha: Incomplete
    ChooseFull: Incomplete
    Colour: Incomplete
    @classmethod
    def FromString(cls, str) -> bool: ...
    @classmethod
    def GetChooseAlpha(cls) -> bool: ...
    @classmethod
    def GetChooseFull(cls) -> bool: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetCustomColour(cls, i) -> Colour: ...
    @classmethod
    def SetChooseAlpha(cls, flag) -> Any: ...
    @classmethod
    def SetChooseFull(cls, flag) -> Any: ...
    @classmethod
    def SetColour(cls, colour) -> Any: ...
    @classmethod
    def SetCustomColour(cls, i, colour) -> Any: ...
    @classmethod
    def ToString(cls) -> String: ...

class ColourDatabase(sip.wrapper):
    FindColour: ClassVar[Callable] = ...
    @classmethod
    def AddColour(cls, colourName, colour) -> Any: ...
    @classmethod
    def Find(cls, colourName) -> Colour: ...
    @classmethod
    def FindName(cls, colour) -> String: ...

class ColourDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, data=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColourData(cls) -> ColourData: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ColourData(self): ...

class ColourDialogEvent(CommandEvent):
    Colour: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def SetColour(cls, colour) -> Any: ...

class ColourPickerCtrl(PickerBase):
    Colour: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., colour=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPickerStyle(cls, *args, **kwargs): ...
    @classmethod
    def GetTextCtrlStyle(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PostCreation(cls, *args, **kwargs): ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, col) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, colname) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def UpdatePickerFromTextCtrl(self) -> Any: ...
    def UpdateTextCtrlFromPicker(self) -> Any: ...
    def Validate(self) -> bool: ...

class ColourPickerEvent(CommandEvent):
    Colour: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def SetColour(cls, pos) -> Any: ...

class ComboBox(Control, ItemContainer, TextEntry):
    GetMark: ClassVar[Callable] = ...
    SetMark: ClassVar[Callable] = ...
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., choices=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def FindString(cls, string, caseSensitive=...) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    @classmethod
    def GetCurrentSelection(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @overload
    @classmethod
    def GetInsertionPoint(cls) -> long: ...
    @overload
    @classmethod
    def GetInsertionPoint(cls) -> Any: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetString(cls, n) -> String: ...
    @classmethod
    def GetStringSelection(cls) -> String: ...
    @classmethod
    def GetTextSelection(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsListEmpty(cls) -> bool: ...
    @classmethod
    def IsTextEmpty(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def Popup(cls) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @overload
    @classmethod
    def SetSelection(cls, from_, to_) -> Any: ...
    @overload
    @classmethod
    def SetSelection(cls, n) -> Any: ...
    @overload
    @classmethod
    def SetSelection(cls) -> Any: ...
    @classmethod
    def SetString(cls, n, text) -> Any: ...
    @classmethod
    def SetTextSelection(cls, from_, to_) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, text) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Count(self): ...
    @property
    def CurrentSelection(self): ...
    @property
    def InsertionPoint(self): ...
    @property
    def StringSelection(self): ...

class ComboCtrl(Control, TextEntry):
    CustomPaintWidth: Incomplete
    Hint: Incomplete
    InsertionPoint: Incomplete
    Margins: Incomplete
    PopupControl: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AnimateShow(cls, rect, flags) -> bool: ...
    @classmethod
    def Copy(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def Cut(cls) -> Any: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    @classmethod
    def DoSetPopupControl(cls, popup) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    @classmethod
    def DoShowPopup(cls, rect, flags) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnablePopupAnimation(cls, enable=...) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBitmapDisabled(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapHover(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapNormal(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapPressed(cls) -> Bitmap: ...
    @classmethod
    def GetButtonSize(cls) -> Size: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCustomPaintWidth(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFeatures(cls) -> int: ...
    @classmethod
    def GetHint(cls) -> String: ...
    @classmethod
    def GetInsertionPoint(cls) -> long: ...
    @classmethod
    def GetLastPosition(cls) -> long: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMargins(cls) -> Point: ...
    @classmethod
    def GetPopupControl(cls) -> ComboPopup: ...
    @classmethod
    def GetPopupWindow(cls) -> Window: ...
    @classmethod
    def GetTextCtrl(cls) -> TextCtrl: ...
    @classmethod
    def GetTextRect(cls) -> Rect: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> String: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HidePopup(cls, generateEvent=...) -> Any: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsKeyPopupToggle(cls, event) -> bool: ...
    @classmethod
    def IsPopupShown(cls) -> bool: ...
    @classmethod
    def IsPopupWindowState(cls, state) -> bool: ...
    @classmethod
    def OnButtonClick(cls) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def Paste(cls) -> Any: ...
    @classmethod
    def Popup(cls) -> Any: ...
    @classmethod
    def PrepareBackground(cls, dc, rect, flags) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Remove(cls, frm, to) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Replace(cls, frm, to, text) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetButtonBitmaps(cls, bmpNormal, pushButtonBg=..., bmpPressed=..., bmpHover=..., bmpDisabled=...) -> Any: ...
    @classmethod
    def SetButtonPosition(cls, width=..., height=..., side=..., spacingX=...) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetCustomPaintWidth(cls, width) -> Any: ...
    @classmethod
    def SetHint(cls, hint) -> bool: ...
    @classmethod
    def SetInsertionPoint(cls, pos) -> Any: ...
    @classmethod
    def SetInsertionPointEnd(cls) -> Any: ...
    @classmethod
    def SetMainControl(cls, win) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, pt) -> bool: ...
    @overload
    @classmethod
    def SetMargins(cls, left, top=...) -> bool: ...
    @classmethod
    def SetPopupAnchor(cls, anchorSide) -> Any: ...
    @classmethod
    def SetPopupControl(cls, popup) -> Any: ...
    @classmethod
    def SetPopupExtents(cls, extLeft, extRight) -> Any: ...
    @classmethod
    def SetPopupMaxHeight(cls, height) -> Any: ...
    @classmethod
    def SetPopupMinWidth(cls, width) -> Any: ...
    @classmethod
    def SetSelection(cls, frm, to) -> Any: ...
    @classmethod
    def SetText(cls, value) -> Any: ...
    @classmethod
    def SetTextCtrlStyle(cls, style) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    @classmethod
    def SetValueByUser(cls, value) -> Any: ...
    @classmethod
    def ShouldDrawFocus(cls) -> bool: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowPopup(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Undo(cls) -> Any: ...
    @classmethod
    def UseAltPopupWindow(cls, enable=...) -> Any: ...
    def Validate(self) -> bool: ...
    @property
    def BitmapDisabled(self): ...
    @property
    def BitmapHover(self): ...
    @property
    def BitmapNormal(self): ...
    @property
    def BitmapPressed(self): ...
    @property
    def ButtonSize(self): ...
    @property
    def LastPosition(self): ...
    @property
    def PopupWindow(self): ...
    @property
    def TextCtrl(self): ...
    @property
    def TextRect(self): ...

class ComboCtrlFeatures(sip.wrapper):
    All: ClassVar[int] = ...
    BitmapButton: ClassVar[int] = ...
    Borderless: ClassVar[int] = ...
    ButtonSpacing: ClassVar[int] = ...
    MovableButton: ClassVar[int] = ...
    PaintControl: ClassVar[int] = ...
    PaintWritable: ClassVar[int] = ...
    TextIndent: ClassVar[int] = ...

class ComboPopup(sip.wrapper):
    StringValue: Incomplete
    @classmethod
    def Create(cls, parent) -> bool: ...
    @classmethod
    def DestroyPopup(cls) -> Any: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    @classmethod
    def FindItem(cls, item, trueItem=...) -> bool: ...
    @classmethod
    def GetAdjustedSize(cls, minWidth, prefHeight, maxHeight) -> Size: ...
    @classmethod
    def GetComboCtrl(cls) -> ComboCtrl: ...
    @classmethod
    def GetControl(cls) -> Window: ...
    @classmethod
    def GetStringValue(cls) -> String: ...
    @classmethod
    def Init(cls) -> Any: ...
    @classmethod
    def IsCreated(cls) -> bool: ...
    @classmethod
    def LazyCreate(cls) -> bool: ...
    @classmethod
    def OnComboDoubleClick(cls) -> Any: ...
    @classmethod
    def OnComboKeyEvent(cls, event) -> Any: ...
    @classmethod
    def OnDismiss(cls) -> Any: ...
    @classmethod
    def OnPopup(cls) -> Any: ...
    @classmethod
    def PaintComboControl(cls, dc, rect) -> Any: ...
    @classmethod
    def SetStringValue(cls, value) -> Any: ...
    @property
    def ComboCtrl(self): ...
    @property
    def Control(self): ...

class Command(Object):
    @classmethod
    def CanUndo(cls) -> bool: ...
    @classmethod
    def Do(cls) -> bool: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def Undo(cls) -> bool: ...
    @property
    def Name(self): ...

class CommandEvent(Event):
    GetClientObject: ClassVar[Callable] = ...
    SetClientObject: ClassVar[Callable] = ...
    ClientData: Incomplete
    ExtraLong: Incomplete
    Int: Incomplete
    String: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetClientData(cls) -> ClientData: ...
    @classmethod
    def GetExtraLong(cls) -> long: ...
    @classmethod
    def GetInt(cls) -> int: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetString(cls) -> String: ...
    @classmethod
    def IsChecked(cls) -> bool: ...
    @classmethod
    def IsSelection(cls) -> bool: ...
    @classmethod
    def SetClientData(cls, data) -> Any: ...
    @classmethod
    def SetExtraLong(cls, extraLong) -> Any: ...
    @classmethod
    def SetInt(cls, intCommand) -> Any: ...
    @classmethod
    def SetString(cls, string) -> Any: ...
    @property
    def Selection(self): ...

class CommandList(sip.wrapper):
    def index(self, obj: Command | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class CommandList_iterator(sip.wrapper):
    def __next__(self): ...

class CommandProcessor(Object):
    EditMenu: Incomplete
    RedoAccelerator: Incomplete
    UndoAccelerator: Incomplete
    @classmethod
    def CanRedo(cls) -> bool: ...
    @classmethod
    def CanUndo(cls) -> bool: ...
    @classmethod
    def ClearCommands(cls) -> Any: ...
    @classmethod
    def GetCommands(cls) -> CommandList: ...
    @classmethod
    def GetCurrentCommand(cls) -> Command: ...
    @classmethod
    def GetEditMenu(cls) -> Menu: ...
    @classmethod
    def GetMaxCommands(cls) -> int: ...
    @classmethod
    def GetRedoAccelerator(cls) -> String: ...
    @classmethod
    def GetRedoMenuLabel(cls) -> String: ...
    @classmethod
    def GetUndoAccelerator(cls) -> String: ...
    @classmethod
    def GetUndoMenuLabel(cls) -> String: ...
    @classmethod
    def Initialize(cls) -> Any: ...
    @classmethod
    def IsDirty(cls) -> bool: ...
    @classmethod
    def MarkAsSaved(cls) -> Any: ...
    @classmethod
    def Redo(cls) -> bool: ...
    @classmethod
    def SetEditMenu(cls, menu) -> Any: ...
    @classmethod
    def SetMenuStrings(cls) -> Any: ...
    @classmethod
    def SetRedoAccelerator(cls, accel) -> Any: ...
    @classmethod
    def SetUndoAccelerator(cls, accel) -> Any: ...
    @classmethod
    def Store(cls, command) -> Any: ...
    @classmethod
    def Submit(cls, command, storeIt=...) -> bool: ...
    @classmethod
    def Undo(cls) -> bool: ...
    @property
    def Commands(self): ...
    @property
    def CurrentCommand(self): ...
    @property
    def MaxCommands(self): ...
    @property
    def RedoMenuLabel(self): ...
    @property
    def UndoMenuLabel(self): ...

class CompositionMode(int): ...

class Config(ConfigBase):
    def DeleteAll(self) -> bool: ...
    def DeleteEntry(self, key: Any, bDeleteGroupIfEmpty: bool = ...) -> bool: ...
    def DeleteGroup(self, key: Any) -> bool: ...
    def Flush(self, bCurrentOnly: bool = ...) -> bool: ...
    def GetNumberOfEntries(self, bRecursive: bool = ...) -> int: ...
    def GetNumberOfGroups(self, bRecursive: bool = ...) -> int: ...
    def GetPath(self) -> Any: ...
    def HasEntry(self, strName: Any) -> bool: ...
    def HasGroup(self, strName: Any) -> bool: ...
    def RenameEntry(self, oldName: Any, newName: Any) -> bool: ...
    def RenameGroup(self, oldName: Any, newName: Any) -> bool: ...
    def SetPath(self, strPath: Any) -> Any: ...

class ConfigBase(Object):
    class EntryType(int):
        def __reduce__(self): ...
    ReadInt: ClassVar[Callable] = ...
    Type_Boolean: ClassVar[ConfigBase.EntryType] = ...
    Type_Float: ClassVar[ConfigBase.EntryType] = ...
    Type_Integer: ClassVar[ConfigBase.EntryType] = ...
    Type_String: ClassVar[ConfigBase.EntryType] = ...
    Type_Unknown: ClassVar[ConfigBase.EntryType] = ...
    Path: Incomplete
    @classmethod
    def Create(cls) -> ConfigBase: ...
    @classmethod
    def DeleteAll(cls) -> bool: ...
    @classmethod
    def DeleteEntry(cls, key, bDeleteGroupIfEmpty=...) -> bool: ...
    @classmethod
    def DeleteGroup(cls, key) -> bool: ...
    @classmethod
    def DontCreateOnDemand(cls) -> Any: ...
    @classmethod
    def Exists(cls, strName) -> bool: ...
    @classmethod
    def Flush(cls, bCurrentOnly=...) -> bool: ...
    @classmethod
    def Get(cls, CreateOnDemand=...) -> ConfigBase: ...
    @classmethod
    def GetAppName(cls) -> String: ...
    @classmethod
    def GetEntryType(cls, name) -> ConfigBase.EntryType: ...
    @classmethod
    def GetFirstEntry(cls) -> PyObject: ...
    @classmethod
    def GetFirstGroup(cls) -> PyObject: ...
    @classmethod
    def GetNextEntry(cls, index) -> PyObject: ...
    @classmethod
    def GetNextGroup(cls, index) -> PyObject: ...
    @classmethod
    def GetNumberOfEntries(cls, bRecursive=...) -> size_t: ...
    @classmethod
    def GetNumberOfGroups(cls, bRecursive=...) -> size_t: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetVendorName(cls) -> String: ...
    @classmethod
    def HasEntry(cls, strName) -> bool: ...
    @classmethod
    def HasGroup(cls, strName) -> bool: ...
    @classmethod
    def IsExpandingEnvVars(cls) -> bool: ...
    @classmethod
    def IsRecordingDefaults(cls) -> bool: ...
    @overload
    @classmethod
    def Read(cls, key, defaultVal=...) -> String: ...
    @overload
    @classmethod
    def Read(cls) -> Any: ...
    @classmethod
    def ReadBool(cls, key, defaultVal=...) -> bool: ...
    @classmethod
    def ReadDouble(cls, key, defaultVal) -> double: ...
    @classmethod
    def ReadFloat(cls, key, defaultVal=...) -> double: ...
    @classmethod
    def ReadLong(cls, key, defaultVal) -> long: ...
    @classmethod
    def ReadLongLong(cls, key, defaultVal) -> LongLong_t: ...
    @classmethod
    def RenameEntry(cls, oldName, newName) -> bool: ...
    @classmethod
    def RenameGroup(cls, oldName, newName) -> bool: ...
    @classmethod
    def Set(cls, pConfig) -> ConfigBase: ...
    @classmethod
    def SetExpandEnvVars(cls, bDoIt=...) -> Any: ...
    @classmethod
    def SetPath(cls, strPath) -> Any: ...
    @classmethod
    def SetRecordDefaults(cls, bDoIt=...) -> Any: ...
    @classmethod
    def Write(cls, key, value) -> bool: ...
    @classmethod
    def WriteBool(cls, key, value) -> bool: ...
    @classmethod
    def WriteFloat(cls, key, value) -> bool: ...
    @classmethod
    def WriteInt(cls, key, value) -> bool: ...
    @property
    def AppName(self): ...
    @property
    def FirstEntry(self): ...
    @property
    def FirstGroup(self): ...
    @property
    def NextEntry(self): ...
    @property
    def NextGroup(self): ...
    @property
    def NumberOfEntries(self): ...
    @property
    def NumberOfGroups(self): ...
    @property
    def VendorName(self): ...

class ConfigPathChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def Name(cls) -> String: ...
    @classmethod
    def UpdateIfDeleted(cls) -> Any: ...

class ContentProtection(int): ...

class ContextHelp(Object):
    @classmethod
    def BeginContextHelp(cls, window) -> bool: ...
    @classmethod
    def EndContextHelp(cls) -> bool: ...

class ContextHelpButton(BitmapButton):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class ContextMenuEvent(CommandEvent):
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def SetPosition(cls, point) -> Any: ...

class Control(Window):
    Label: Incomplete
    LabelText: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Command(cls, event) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def Ellipsize(cls, label, dc, mode, maxWidth, flags=...) -> String: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EscapeMnemonics(cls, text) -> String: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    @overload
    @classmethod
    def GetLabelText(cls) -> String: ...
    @overload
    @classmethod
    def GetLabelText(cls, label) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSizeFromText(cls, text) -> Size: ...
    @overload
    @classmethod
    def GetSizeFromTextSize(cls, xlen, ylen=...) -> Size: ...
    @overload
    @classmethod
    def GetSizeFromTextSize(cls, tsize) -> Size: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def RemoveMnemonics(cls, str) -> String: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetLabel(cls, label) -> Any: ...
    @classmethod
    def SetLabelMarkup(cls, markup) -> bool: ...
    @classmethod
    def SetLabelText(cls, text) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class ControlWithItems(Control, ItemContainer): ...

class Cursor(GDIObject):
    Handle: Incomplete
    @classmethod
    def GetHandle(cls) -> long: ...
    @classmethod
    def GetHotSpot(cls) -> Point: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def SetHandle(cls, handle) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def HotSpot(self): ...

class CustomDataObject(DataObjectSimple):
    Data: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetData(cls) -> PyObject: ...
    def GetDataHere(self, buf: wx.siplib.voidptr | None) -> bool: ...
    def GetDataSize(self) -> int: ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def GetSize(cls) -> size_t: ...
    @overload
    @classmethod
    def SetData(cls, buf) -> bool: ...
    @overload
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @property
    def AllFormats(self): ...
    @property
    def Size(self): ...

class DC(Object):
    DrawEllipseList: ClassVar[Callable] = ...
    DrawImageLabel: ClassVar[Callable] = ...
    DrawLineList: ClassVar[Callable] = ...
    DrawLinesFromBuffer: ClassVar[Callable] = ...
    DrawPointList: ClassVar[Callable] = ...
    DrawPolygonList: ClassVar[Callable] = ...
    DrawRectangleList: ClassVar[Callable] = ...
    DrawTextList: ClassVar[Callable] = ...
    GetBoundingBox: ClassVar[Callable] = ...
    GetCGContext: ClassVar[Callable] = ...
    GetClippingRect: ClassVar[Callable] = ...
    GetGdkDrawable: ClassVar[Callable] = ...
    GetHDC: ClassVar[Callable] = ...
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    Background: Incomplete
    BackgroundMode: Incomplete
    Brush: Incomplete
    DeviceOrigin: Incomplete
    Font: Incomplete
    GraphicsContext: Incomplete
    LayoutDirection: Incomplete
    LogicalFunction: Incomplete
    MapMode: Incomplete
    Pen: Incomplete
    TextBackground: Incomplete
    TextForeground: Incomplete
    TransformMatrix: Incomplete
    @classmethod
    def Blit(cls, xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc=..., useMask=..., xsrcMask=..., ysrcMask=...) -> bool: ...
    @classmethod
    def CalcBoundingBox(cls, x, y) -> Any: ...
    @classmethod
    def CanDrawBitmap(cls) -> bool: ...
    @classmethod
    def CanGetTextExtent(cls) -> bool: ...
    @classmethod
    def CanUseTransformMatrix(cls) -> bool: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def CopyAttributes(cls, dc) -> Any: ...
    @overload
    @classmethod
    def CrossHair(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def CrossHair(cls, pt) -> Any: ...
    @classmethod
    def DestroyClippingRegion(cls) -> Any: ...
    @overload
    @classmethod
    def DeviceToLogical(cls, x, y) -> Point: ...
    @overload
    @classmethod
    def DeviceToLogical(cls, pt) -> Point: ...
    @overload
    @classmethod
    def DeviceToLogicalRel(cls, x, y) -> Size: ...
    @overload
    @classmethod
    def DeviceToLogicalRel(cls, dim) -> Size: ...
    @classmethod
    def DeviceToLogicalX(cls, x) -> Coord: ...
    @classmethod
    def DeviceToLogicalXRel(cls, x) -> Coord: ...
    @classmethod
    def DeviceToLogicalY(cls, y) -> Coord: ...
    @classmethod
    def DeviceToLogicalYRel(cls, y) -> Coord: ...
    @overload
    @classmethod
    def DrawArc(cls, xStart, yStart, xEnd, yEnd, xc, yc) -> Any: ...
    @overload
    @classmethod
    def DrawArc(cls, ptStart, ptEnd, centre) -> Any: ...
    @overload
    @classmethod
    def DrawBitmap(cls, bitmap, x, y, useMask=...) -> Any: ...
    @overload
    @classmethod
    def DrawBitmap(cls, bmp, pt, useMask=...) -> Any: ...
    @overload
    @classmethod
    def DrawCheckMark(cls, x, y, width, height) -> Any: ...
    @overload
    @classmethod
    def DrawCheckMark(cls, rect) -> Any: ...
    @overload
    @classmethod
    def DrawCircle(cls, x, y, radius) -> Any: ...
    @overload
    @classmethod
    def DrawCircle(cls, pt, radius) -> Any: ...
    @overload
    @classmethod
    def DrawEllipse(cls, x, y, width, height) -> Any: ...
    @overload
    @classmethod
    def DrawEllipse(cls, pt, size) -> Any: ...
    @overload
    @classmethod
    def DrawEllipse(cls, rect) -> Any: ...
    @overload
    @classmethod
    def DrawEllipticArc(cls, x, y, width, height, start, end) -> Any: ...
    @overload
    @classmethod
    def DrawEllipticArc(cls, pt, sz, sa, ea) -> Any: ...
    @overload
    @classmethod
    def DrawIcon(cls, icon, x, y) -> Any: ...
    @overload
    @classmethod
    def DrawIcon(cls, icon, pt) -> Any: ...
    @overload
    @classmethod
    def DrawLabel(cls, text, bitmap, rect, alignment=..., indexAccel=...) -> Rect: ...
    @overload
    @classmethod
    def DrawLabel(cls, text, rect, alignment=..., indexAccel=...) -> Any: ...
    @overload
    @classmethod
    def DrawLabel(cls, text, rect, alignment=..., indexAccel=...) -> Any: ...
    @overload
    @classmethod
    def DrawLine(cls, x1, y1, x2, y2) -> Any: ...
    @overload
    @classmethod
    def DrawLine(cls, pt1, pt2) -> Any: ...
    @classmethod
    def DrawLines(cls, points, xoffset=..., yoffset=...) -> Any: ...
    @overload
    @classmethod
    def DrawPoint(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def DrawPoint(cls, pt) -> Any: ...
    @classmethod
    def DrawPolygon(cls, points, xoffset=..., yoffset=..., fill_style=...) -> Any: ...
    @overload
    @classmethod
    def DrawRectangle(cls, x, y, width, height) -> Any: ...
    @overload
    @classmethod
    def DrawRectangle(cls, pt, sz) -> Any: ...
    @overload
    @classmethod
    def DrawRectangle(cls, rect) -> Any: ...
    @overload
    @classmethod
    def DrawRotatedText(cls, text, x, y, angle) -> Any: ...
    @overload
    @classmethod
    def DrawRotatedText(cls, text, point, angle) -> Any: ...
    @overload
    @classmethod
    def DrawRoundedRectangle(cls, x, y, width, height, radius) -> Any: ...
    @overload
    @classmethod
    def DrawRoundedRectangle(cls, pt, sz, radius) -> Any: ...
    @overload
    @classmethod
    def DrawRoundedRectangle(cls, rect, radius) -> Any: ...
    @overload
    @classmethod
    def DrawSpline(cls, points) -> Any: ...
    @overload
    @classmethod
    def DrawSpline(cls, x1, y1, x2, y2, x3, y3) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, text, x, y) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, text, pt) -> Any: ...
    @classmethod
    def EndDoc(cls) -> Any: ...
    @classmethod
    def EndPage(cls) -> Any: ...
    @overload
    @classmethod
    def FloodFill(cls, x, y, colour, style=...) -> bool: ...
    @overload
    @classmethod
    def FloodFill(cls, pt, col, style=...) -> bool: ...
    @overload
    @classmethod
    def FromDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def FromDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def FromDIP(cls, d) -> int: ...
    @classmethod
    def GetAsBitmap(cls, subrect=...) -> Bitmap: ...
    @classmethod
    def GetBackground(cls) -> Brush: ...
    @classmethod
    def GetBackgroundMode(cls) -> int: ...
    @classmethod
    def GetBrush(cls) -> Brush: ...
    @classmethod
    def GetCharHeight(cls) -> Coord: ...
    @classmethod
    def GetCharWidth(cls) -> Coord: ...
    @classmethod
    def GetClippingBox(cls, *args, **kwargs): ...
    @classmethod
    def GetContentScaleFactor(cls) -> double: ...
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetDeviceOrigin(cls) -> Point: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetFontMetrics(cls) -> FontMetrics: ...
    @classmethod
    def GetFullMultiLineTextExtent(cls, *args, **kwargs): ...
    @classmethod
    def GetFullTextExtent(cls, *args, **kwargs): ...
    @classmethod
    def GetGraphicsContext(cls) -> GraphicsContext: ...
    @classmethod
    def GetHandle(cls) -> UIntPtr: ...
    @classmethod
    def GetLayoutDirection(cls) -> LayoutDirection: ...
    @classmethod
    def GetLogicalFunction(cls) -> RasterOperationMode: ...
    @classmethod
    def GetLogicalOrigin(cls, *args, **kwargs): ...
    @classmethod
    def GetLogicalScale(cls, *args, **kwargs): ...
    @classmethod
    def GetMapMode(cls) -> MappingMode: ...
    @classmethod
    def GetMultiLineTextExtent(cls, st) -> Size: ...
    @classmethod
    def GetPPI(cls) -> Size: ...
    @classmethod
    def GetPartialTextExtents(cls, text) -> ArrayInt: ...
    @classmethod
    def GetPen(cls) -> Pen: ...
    @classmethod
    def GetPixel(cls, x, y) -> Colour: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetSizeMM(cls) -> Size: ...
    @classmethod
    def GetTextBackground(cls) -> Colour: ...
    @classmethod
    def GetTextExtent(cls, st) -> Size: ...
    @classmethod
    def GetTextForeground(cls) -> Colour: ...
    @classmethod
    def GetTransformMatrix(cls) -> AffineMatrix2D: ...
    @classmethod
    def GetUserScale(cls, *args, **kwargs): ...
    @overload
    @classmethod
    def GradientFillConcentric(cls, rect, initialColour, destColour) -> Any: ...
    @overload
    @classmethod
    def GradientFillConcentric(cls, rect, initialColour, destColour, circleCenter) -> Any: ...
    @classmethod
    def GradientFillLinear(cls, rect, initialColour, destColour, nDirection=...) -> Any: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @overload
    @classmethod
    def LogicalToDevice(cls, x, y) -> Point: ...
    @overload
    @classmethod
    def LogicalToDevice(cls, pt) -> Point: ...
    @overload
    @classmethod
    def LogicalToDeviceRel(cls, x, y) -> Size: ...
    @overload
    @classmethod
    def LogicalToDeviceRel(cls, dim) -> Size: ...
    @classmethod
    def LogicalToDeviceX(cls, x) -> Coord: ...
    @classmethod
    def LogicalToDeviceXRel(cls, x) -> Coord: ...
    @classmethod
    def LogicalToDeviceY(cls, y) -> Coord: ...
    @classmethod
    def LogicalToDeviceYRel(cls, y) -> Coord: ...
    @classmethod
    def MaxX(cls) -> Coord: ...
    @classmethod
    def MaxY(cls) -> Coord: ...
    @classmethod
    def MinX(cls) -> Coord: ...
    @classmethod
    def MinY(cls) -> Coord: ...
    @classmethod
    def ResetBoundingBox(cls) -> Any: ...
    @classmethod
    def ResetTransformMatrix(cls) -> Any: ...
    @classmethod
    def SetAxisOrientation(cls, xLeftRight, yBottomUp) -> Any: ...
    @classmethod
    def SetBackground(cls, brush) -> Any: ...
    @classmethod
    def SetBackgroundMode(cls, mode) -> Any: ...
    @classmethod
    def SetBrush(cls, brush) -> Any: ...
    @overload
    @classmethod
    def SetClippingRegion(cls, x, y, width, height) -> Any: ...
    @overload
    @classmethod
    def SetClippingRegion(cls, pt, sz) -> Any: ...
    @overload
    @classmethod
    def SetClippingRegion(cls, rect) -> Any: ...
    @classmethod
    def SetDeviceClippingRegion(cls, region) -> Any: ...
    @classmethod
    def SetDeviceOrigin(cls, x, y) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> Any: ...
    @classmethod
    def SetGraphicsContext(cls, ctx) -> Any: ...
    @classmethod
    def SetLayoutDirection(cls, dir) -> Any: ...
    @classmethod
    def SetLogicalFunction(cls, function) -> Any: ...
    @classmethod
    def SetLogicalOrigin(cls, x, y) -> Any: ...
    @classmethod
    def SetLogicalScale(cls, x, y) -> Any: ...
    @classmethod
    def SetMapMode(cls, mode) -> Any: ...
    @classmethod
    def SetPalette(cls, palette) -> Any: ...
    @classmethod
    def SetPen(cls, pen) -> Any: ...
    @classmethod
    def SetTextBackground(cls, colour) -> Any: ...
    @classmethod
    def SetTextForeground(cls, colour) -> Any: ...
    @classmethod
    def SetTransformMatrix(cls, matrix) -> bool: ...
    @classmethod
    def SetUserScale(cls, xScale, yScale) -> Any: ...
    @classmethod
    def StartDoc(cls, message) -> bool: ...
    @classmethod
    def StartPage(cls) -> Any: ...
    @classmethod
    def StretchBlit(cls, xdest, ydest, dstWidth, dstHeight, source, xsrc, ysrc, srcWidth, srcHeight, logicalFunc=..., useMask=..., xsrcMask=..., ysrcMask=...) -> bool: ...
    @overload
    @classmethod
    def ToDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def ToDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ToDIP(cls, d) -> int: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def AsBitmap(self): ...
    @property
    def BoundingBox(self): ...
    @property
    def CGContext(self): ...
    @property
    def CharHeight(self): ...
    @property
    def CharWidth(self): ...
    @property
    def ClippingRect(self): ...
    @property
    def ContentScaleFactor(self): ...
    @property
    def Depth(self): ...
    @property
    def FontMetrics(self): ...
    @property
    def GdkDrawable(self): ...
    @property
    def HDC(self): ...
    @property
    def Handle(self): ...
    @property
    def MultiLineTextExtent(self): ...
    @property
    def PPI(self): ...
    @property
    def Pixel(self): ...
    @property
    def Size(self): ...
    @property
    def SizeMM(self): ...
    @property
    def TextExtent(self): ...

class DCBrushChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class DCClipper(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class DCFontChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def Set(cls, font) -> Any: ...

class DCOverlay(sip.wrapper):
    @classmethod
    def Clear(cls) -> Any: ...

class DCPenChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class DCTextBgColourChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def Set(cls, col) -> Any: ...

class DCTextBgModeChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class DCTextColourChanger(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def Set(cls, col) -> Any: ...

class DPIChangedEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetNewDPI(cls) -> Size: ...
    @classmethod
    def GetOldDPI(cls) -> Size: ...
    @classmethod
    def Scale(cls, sz) -> Size: ...
    @classmethod
    def ScaleX(cls, x) -> int: ...
    @classmethod
    def ScaleY(cls, y) -> int: ...
    @property
    def NewDPI(self): ...
    @property
    def OldDPI(self): ...

class DashCArrayHolder(sip.wrapper): ...

class DataFormat(sip.wrapper):
    Id: Incomplete
    Type: Incomplete
    @classmethod
    def GetId(cls) -> String: ...
    @classmethod
    def GetType(cls) -> DataFormatId: ...
    @classmethod
    def SetId(cls, format) -> Any: ...
    @classmethod
    def SetType(cls, type) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class DataFormatId(int): ...

class DataObject(sip.wrapper):
    class Direction(int):
        def __reduce__(self): ...
    Both: ClassVar[DataObject.Direction] = ...
    Get: ClassVar[DataObject.Direction] = ...
    Set: ClassVar[DataObject.Direction] = ...
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetDataHere(cls, format, buf) -> bool: ...
    @classmethod
    def GetDataSize(cls, format) -> size_t: ...
    @classmethod
    def GetFormatCount(cls, dir=...) -> size_t: ...
    @classmethod
    def GetPreferredFormat(cls, dir=...) -> DataFormat: ...
    @classmethod
    def IsSupported(cls, format, dir=...) -> bool: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @property
    def AllFormats(self): ...
    @property
    def DataHere(self): ...
    @property
    def FormatCount(self): ...
    @property
    def PreferredFormat(self): ...

class DataObjectComposite(DataObject):
    @classmethod
    def Add(cls, dataObject, preferred=...) -> Any: ...
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetDataHere(cls, *args, **kwargs): ...
    @classmethod
    def GetDataSize(cls, *args, **kwargs): ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    @classmethod
    def GetObject(cls, format, dir=...) -> DataObjectSimple: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def GetReceivedFormat(cls) -> DataFormat: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @property
    def AllFormats(self): ...
    @property
    def ReceivedFormat(self): ...

class DataObjectSimple(DataObject):
    Format: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetDataHere(cls, buf) -> bool: ...
    @classmethod
    def GetDataSize(cls) -> size_t: ...
    @classmethod
    def GetFormat(cls) -> DataFormat: ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @overload
    @classmethod
    def SetData(cls, buf) -> bool: ...
    @overload
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @classmethod
    def SetFormat(cls, format) -> Any: ...
    @property
    def AllFormats(self): ...
    @property
    def DataHere(self): ...
    @property
    def DataSize(self): ...

class DateSpan(sip.wrapper):
    @classmethod
    def Add(cls, other) -> DateSpan: ...
    @classmethod
    def Day(cls) -> DateSpan: ...
    @classmethod
    def Days(cls, days) -> DateSpan: ...
    @classmethod
    def GetDays(cls) -> int: ...
    @classmethod
    def GetMonths(cls) -> int: ...
    @classmethod
    def GetTotalDays(cls) -> int: ...
    @classmethod
    def GetTotalMonths(cls) -> int: ...
    @classmethod
    def GetWeeks(cls) -> int: ...
    @classmethod
    def GetYears(cls) -> int: ...
    @classmethod
    def Month(cls) -> DateSpan: ...
    @classmethod
    def Months(cls, mon) -> DateSpan: ...
    @classmethod
    def Multiply(cls, factor) -> DateSpan: ...
    @classmethod
    def Neg(cls) -> DateSpan: ...
    @classmethod
    def Negate(cls) -> DateSpan: ...
    @classmethod
    def SetDays(cls, n) -> DateSpan: ...
    @classmethod
    def SetMonths(cls, n) -> DateSpan: ...
    @classmethod
    def SetWeeks(cls, n) -> DateSpan: ...
    @classmethod
    def SetYears(cls, n) -> DateSpan: ...
    @classmethod
    def Subtract(cls, other) -> DateSpan: ...
    @classmethod
    def Week(cls) -> DateSpan: ...
    @classmethod
    def Weeks(cls, weeks) -> DateSpan: ...
    @classmethod
    def Year(cls) -> DateSpan: ...
    @classmethod
    def Years(cls, years) -> DateSpan: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...

class DateTime(sip.wrapper):
    class Calendar(int):
        def __reduce__(self): ...

    class Country(int):
        def __reduce__(self): ...

    class Month(int):
        def __reduce__(self): ...

    class NameFlags(int):
        def __reduce__(self): ...

    class TZ(int):
        def __reduce__(self): ...

    class TimeZone(sip.wrapper):
        @classmethod
        def GetOffset(cls) -> long: ...
        @classmethod
        def IsLocal(cls) -> bool: ...
        @classmethod
        def Make(cls, offset) -> DateTime.TimeZone: ...
        @property
        def Offset(self): ...

    class Tm(sip.wrapper):
        @classmethod
        def GetWeekDay(cls) -> DateTime.WeekDay: ...
        @classmethod
        def IsValid(cls) -> bool: ...
        @property
        def WeekDay(self): ...

    class WeekDay(int):
        def __reduce__(self): ...

    class WeekFlags(int):
        def __reduce__(self): ...

    class Year(int):
        def __reduce__(self): ...
    ADT: ClassVar[DateTime.TZ] = ...
    AKDT: ClassVar[DateTime.TZ] = ...
    AKST: ClassVar[DateTime.TZ] = ...
    AST: ClassVar[DateTime.TZ] = ...
    A_CST: ClassVar[DateTime.TZ] = ...
    A_ESST: ClassVar[DateTime.TZ] = ...
    A_EST: ClassVar[DateTime.TZ] = ...
    A_WST: ClassVar[DateTime.TZ] = ...
    Apr: ClassVar[DateTime.Month] = ...
    Aug: ClassVar[DateTime.Month] = ...
    CDT: ClassVar[DateTime.TZ] = ...
    CEST: ClassVar[DateTime.TZ] = ...
    CET: ClassVar[DateTime.TZ] = ...
    CST: ClassVar[DateTime.TZ] = ...
    Country_Default: ClassVar[DateTime.Country] = ...
    Country_EEC: ClassVar[DateTime.Country] = ...
    Country_Unknown: ClassVar[DateTime.Country] = ...
    Country_WesternEurope_End: ClassVar[DateTime.Country] = ...
    Country_WesternEurope_Start: ClassVar[DateTime.Country] = ...
    Dec: ClassVar[DateTime.Month] = ...
    Default_First: ClassVar[DateTime.WeekFlags] = ...
    EDT: ClassVar[DateTime.TZ] = ...
    EEST: ClassVar[DateTime.TZ] = ...
    EET: ClassVar[DateTime.TZ] = ...
    EST: ClassVar[DateTime.TZ] = ...
    Feb: ClassVar[DateTime.Month] = ...
    France: ClassVar[DateTime.Country] = ...
    Fri: ClassVar[DateTime.WeekDay] = ...
    GMT0: ClassVar[DateTime.TZ] = ...
    GMT1: ClassVar[DateTime.TZ] = ...
    GMT10: ClassVar[DateTime.TZ] = ...
    GMT11: ClassVar[DateTime.TZ] = ...
    GMT12: ClassVar[DateTime.TZ] = ...
    GMT13: ClassVar[DateTime.TZ] = ...
    GMT2: ClassVar[DateTime.TZ] = ...
    GMT3: ClassVar[DateTime.TZ] = ...
    GMT4: ClassVar[DateTime.TZ] = ...
    GMT5: ClassVar[DateTime.TZ] = ...
    GMT6: ClassVar[DateTime.TZ] = ...
    GMT7: ClassVar[DateTime.TZ] = ...
    GMT8: ClassVar[DateTime.TZ] = ...
    GMT9: ClassVar[DateTime.TZ] = ...
    GMT_1: ClassVar[DateTime.TZ] = ...
    GMT_10: ClassVar[DateTime.TZ] = ...
    GMT_11: ClassVar[DateTime.TZ] = ...
    GMT_12: ClassVar[DateTime.TZ] = ...
    GMT_2: ClassVar[DateTime.TZ] = ...
    GMT_3: ClassVar[DateTime.TZ] = ...
    GMT_4: ClassVar[DateTime.TZ] = ...
    GMT_5: ClassVar[DateTime.TZ] = ...
    GMT_6: ClassVar[DateTime.TZ] = ...
    GMT_7: ClassVar[DateTime.TZ] = ...
    GMT_8: ClassVar[DateTime.TZ] = ...
    GMT_9: ClassVar[DateTime.TZ] = ...
    Germany: ClassVar[DateTime.Country] = ...
    Gregorian: ClassVar[DateTime.Calendar] = ...
    HST: ClassVar[DateTime.TZ] = ...
    Inv_Month: ClassVar[DateTime.Month] = ...
    Inv_WeekDay: ClassVar[DateTime.WeekDay] = ...
    Inv_Year: ClassVar[DateTime.Year] = ...
    Jan: ClassVar[DateTime.Month] = ...
    Jul: ClassVar[DateTime.Month] = ...
    Julian: ClassVar[DateTime.Calendar] = ...
    Jun: ClassVar[DateTime.Month] = ...
    Local: ClassVar[DateTime.TZ] = ...
    MDT: ClassVar[DateTime.TZ] = ...
    MSD: ClassVar[DateTime.TZ] = ...
    MSK: ClassVar[DateTime.TZ] = ...
    MST: ClassVar[DateTime.TZ] = ...
    Mar: ClassVar[DateTime.Month] = ...
    May: ClassVar[DateTime.Month] = ...
    Mon: ClassVar[DateTime.WeekDay] = ...
    Monday_First: ClassVar[DateTime.WeekFlags] = ...
    NZDT: ClassVar[DateTime.TZ] = ...
    NZST: ClassVar[DateTime.TZ] = ...
    Name_Abbr: ClassVar[DateTime.NameFlags] = ...
    Name_Full: ClassVar[DateTime.NameFlags] = ...
    Nov: ClassVar[DateTime.Month] = ...
    Oct: ClassVar[DateTime.Month] = ...
    PDT: ClassVar[DateTime.TZ] = ...
    PST: ClassVar[DateTime.TZ] = ...
    Russia: ClassVar[DateTime.Country] = ...
    Sat: ClassVar[DateTime.WeekDay] = ...
    Sep: ClassVar[DateTime.Month] = ...
    Sun: ClassVar[DateTime.WeekDay] = ...
    Sunday_First: ClassVar[DateTime.WeekFlags] = ...
    Thu: ClassVar[DateTime.WeekDay] = ...
    Tue: ClassVar[DateTime.WeekDay] = ...
    UK: ClassVar[DateTime.Country] = ...
    USA: ClassVar[DateTime.Country] = ...
    UTC: ClassVar[DateTime.TZ] = ...
    WEST: ClassVar[DateTime.TZ] = ...
    WET: ClassVar[DateTime.TZ] = ...
    Wed: ClassVar[DateTime.WeekDay] = ...
    JDN: Incomplete
    day: Incomplete
    hour: Incomplete
    millisecond: Incomplete
    minute: Incomplete
    month: Incomplete
    second: Incomplete
    year: Incomplete
    @overload
    @classmethod
    def Add(cls, diff) -> DateTime: ...
    @overload
    @classmethod
    def Add(cls, diff) -> DateTime: ...
    @classmethod
    def ConvertYearToBC(cls, year) -> int: ...
    @classmethod
    def DiffAsDateSpan(cls, dt) -> DateSpan: ...
    @classmethod
    def Format(cls, format=..., tz=...) -> String: ...
    @classmethod
    def FormatDate(cls) -> String: ...
    @classmethod
    def FormatISOCombined(cls, sep=...) -> String: ...
    @classmethod
    def FormatISODate(cls) -> String: ...
    @classmethod
    def FormatISOTime(cls) -> String: ...
    @classmethod
    def FormatTime(cls) -> String: ...
    @classmethod
    def FromDMY(cls, day, month, year=..., hour=..., minute=..., second=..., millisecond=...) -> DateTime: ...
    @classmethod
    def FromHMS(cls, hour, minute=..., second=..., millisecond=...) -> DateTime: ...
    @classmethod
    def FromJDN(cls, jdn) -> DateTime: ...
    @classmethod
    def FromTimeT(cls, timet) -> DateTime: ...
    @classmethod
    def FromTimezone(cls, tz, noDST=...) -> DateTime: ...
    @classmethod
    def GetAmPmStrings(cls, *args, **kwargs): ...
    @classmethod
    def GetAsDOS(cls) -> unsignedlong: ...
    @classmethod
    def GetBeginDST(cls, year=..., country=...) -> DateTime: ...
    @classmethod
    def GetCentury(cls, tz=...) -> int: ...
    @classmethod
    def GetCountry(cls) -> Country: ...
    @classmethod
    def GetCurrentMonth(cls, cal=...) -> DateTime.Month: ...
    @classmethod
    def GetCurrentYear(cls, cal=...) -> int: ...
    @classmethod
    def GetDateOnly(cls) -> DateTime: ...
    @classmethod
    def GetDay(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetDayOfYear(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetEndDST(cls, year=..., country=...) -> DateTime: ...
    @classmethod
    def GetEnglishMonthName(cls, month, flags=...) -> String: ...
    @classmethod
    def GetEnglishWeekDayName(cls, weekday, flags=...) -> String: ...
    @classmethod
    def GetFirstWeekDay(cls, firstDay) -> bool: ...
    @classmethod
    def GetHour(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetJDN(cls) -> double: ...
    @classmethod
    def GetJulianDayNumber(cls) -> double: ...
    @classmethod
    def GetLastMonthDay(cls, month=..., year=...) -> DateTime: ...
    @classmethod
    def GetLastWeekDay(cls, weekday, month=..., year=...) -> DateTime: ...
    @classmethod
    def GetMJD(cls) -> double: ...
    @classmethod
    def GetMillisecond(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetMinute(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetModifiedJulianDayNumber(cls) -> double: ...
    @classmethod
    def GetMonth(cls, tz=...) -> DateTime.Month: ...
    @classmethod
    def GetMonthName(cls, month, flags=...) -> String: ...
    @classmethod
    def GetNextWeekDay(cls, weekday) -> DateTime: ...
    @classmethod
    def GetNumberOfDays(cls, month, year=..., cal=...) -> unsignedshort: ...
    @classmethod
    def GetPrevWeekDay(cls, weekday) -> DateTime: ...
    @classmethod
    def GetRataDie(cls) -> double: ...
    @classmethod
    def GetSecond(cls, tz=...) -> unsignedshort: ...
    @classmethod
    def GetTicks(cls) -> time_t: ...
    @classmethod
    def GetTimeNow(cls) -> time_t: ...
    @classmethod
    def GetTm(cls, tz=...) -> DateTime.Tm: ...
    @classmethod
    def GetValue(cls) -> LongLong: ...
    @classmethod
    def GetWeekBasedYear(cls, tz) -> int: ...
    @overload
    @classmethod
    def GetWeekDay(cls, tz=...) -> DateTime.WeekDay: ...
    @overload
    @classmethod
    def GetWeekDay(cls, weekday, n=..., month=..., year=...) -> DateTime: ...
    @classmethod
    def GetWeekDayInSameWeek(cls, weekday, flags=...) -> DateTime: ...
    @classmethod
    def GetWeekDayName(cls, weekday, flags=...) -> String: ...
    @classmethod
    def GetWeekOfMonth(cls, flags=..., tz=...) -> unsignedshort: ...
    @classmethod
    def GetWeekOfYear(cls, flags=..., tz=...) -> unsignedshort: ...
    @classmethod
    def GetYear(cls, tz=...) -> int: ...
    @classmethod
    def GetYearDay(cls, yday) -> DateTime: ...
    @classmethod
    def IsBetween(cls, t1, t2) -> bool: ...
    @classmethod
    def IsDST(cls, country=...) -> int: ...
    @classmethod
    def IsDSTApplicable(cls, year=..., country=...) -> bool: ...
    @classmethod
    def IsEarlierThan(cls, datetime) -> bool: ...
    @classmethod
    def IsEqualTo(cls, datetime) -> bool: ...
    @classmethod
    def IsEqualUpTo(cls, dt, ts) -> bool: ...
    @classmethod
    def IsLaterThan(cls, datetime) -> bool: ...
    @classmethod
    def IsLeapYear(cls, year=..., cal=...) -> bool: ...
    @classmethod
    def IsSameDate(cls, dt) -> bool: ...
    @classmethod
    def IsSameTime(cls, dt) -> bool: ...
    @classmethod
    def IsStrictlyBetween(cls, t1, t2) -> bool: ...
    @classmethod
    def IsValid(cls) -> bool: ...
    @classmethod
    def IsWestEuropeanCountry(cls, country=...) -> bool: ...
    @classmethod
    def IsWorkDay(cls, country=...) -> bool: ...
    @classmethod
    def MakeFromTimezone(cls, tz, noDST=...) -> DateTime: ...
    @classmethod
    def MakeTimezone(cls, tz, noDST=...) -> DateTime: ...
    @classmethod
    def MakeUTC(cls, noDST=...) -> DateTime: ...
    @classmethod
    def Now(cls) -> DateTime: ...
    @classmethod
    def ParseDate(cls, date) -> int: ...
    @classmethod
    def ParseDateTime(cls, datetime) -> int: ...
    @overload
    @classmethod
    def ParseFormat(cls, date, format, dateDef) -> int: ...
    @overload
    @classmethod
    def ParseFormat(cls, date, format) -> int: ...
    @overload
    @classmethod
    def ParseFormat(cls, date) -> int: ...
    @overload
    @classmethod
    def ParseFormat(cls, date, format) -> int: ...
    @overload
    @classmethod
    def ParseFormat(cls, date) -> int: ...
    @classmethod
    def ParseISOCombined(cls, date, sep=...) -> bool: ...
    @classmethod
    def ParseISODate(cls, date) -> bool: ...
    @classmethod
    def ParseISOTime(cls, date) -> bool: ...
    @classmethod
    def ParseRfc822Date(cls, date) -> int: ...
    @classmethod
    def ParseTime(cls, time) -> int: ...
    @classmethod
    def ResetTime(cls) -> DateTime: ...
    @classmethod
    def Set(cls, day, month, year=..., hour=..., minute=..., second=..., millisec=...) -> DateTime: ...
    @classmethod
    def SetCountry(cls, country) -> Any: ...
    @classmethod
    def SetDay(cls, day) -> DateTime: ...
    @classmethod
    def SetFromDOS(cls, ddt) -> DateTime: ...
    @classmethod
    def SetHMS(cls, hour, minute=..., second=..., millisec=...) -> DateTime: ...
    @classmethod
    def SetHour(cls, hour) -> DateTime: ...
    @classmethod
    def SetJDN(cls, jdn) -> DateTime: ...
    @classmethod
    def SetMillisecond(cls, millisecond) -> DateTime: ...
    @classmethod
    def SetMinute(cls, minute) -> DateTime: ...
    @classmethod
    def SetMonth(cls, month) -> DateTime: ...
    @classmethod
    def SetSecond(cls, second) -> DateTime: ...
    @classmethod
    def SetTimeT(cls, timet) -> DateTime: ...
    @classmethod
    def SetTm(cls, tm) -> DateTime: ...
    @classmethod
    def SetToCurrent(cls) -> DateTime: ...
    @classmethod
    def SetToLastMonthDay(cls, month=..., year=...) -> DateTime: ...
    @classmethod
    def SetToLastWeekDay(cls, weekday, month=..., year=...) -> bool: ...
    @classmethod
    def SetToNextWeekDay(cls, weekday) -> DateTime: ...
    @classmethod
    def SetToPrevWeekDay(cls, weekday) -> DateTime: ...
    @classmethod
    def SetToWeekDay(cls, weekday, n=..., month=..., year=...) -> bool: ...
    @classmethod
    def SetToWeekDayInSameWeek(cls, weekday, flags=...) -> DateTime: ...
    @classmethod
    def SetToWeekOfYear(cls, year, numWeek, weekday=...) -> DateTime: ...
    @classmethod
    def SetToYearDay(cls, yday) -> DateTime: ...
    @classmethod
    def SetYear(cls, year) -> DateTime: ...
    @overload
    @classmethod
    def Subtract(cls, diff) -> DateTime: ...
    @overload
    @classmethod
    def Subtract(cls, diff) -> DateTime: ...
    @overload
    @classmethod
    def Subtract(cls, dt) -> TimeSpan: ...
    @classmethod
    def ToTimezone(cls, tz, noDST=...) -> DateTime: ...
    @classmethod
    def ToUTC(cls, noDST=...) -> DateTime: ...
    @classmethod
    def Today(cls) -> DateTime: ...
    @classmethod
    def UNow(cls) -> DateTime: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...
    @property
    def DayOfYear(self): ...
    @property
    def JulianDayNumber(self): ...
    @property
    def LastMonthDay(self): ...
    @property
    def MJD(self): ...
    @property
    def ModifiedJulianDayNumber(self): ...
    @property
    def RataDie(self): ...
    @property
    def Ticks(self): ...
    @property
    def WeekOfMonth(self): ...
    @property
    def WeekOfYear(self): ...

class DelegateRendererNative(RendererNative):
    @classmethod
    def DrawCheckBox(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawCheckMark(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawComboBoxDropButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawDropArrow(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawFocusRect(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawHeaderButton(cls, win, dc, rect, flags=..., sortArrow=..., params=...) -> int: ...
    @classmethod
    def DrawHeaderButtonContents(cls, win, dc, rect, flags=..., sortArrow=..., params=...) -> int: ...
    @classmethod
    def DrawItemSelectionRect(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawPushButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawSplitterBorder(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawSplitterSash(cls, win, dc, size, position, orient, flags=...) -> Any: ...
    @classmethod
    def DrawTitleBarBitmap(cls, *args, **kwargs): ...
    @classmethod
    def DrawTreeItemButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def GetCheckBoxSize(cls, win, flags=...) -> Size: ...
    @classmethod
    def GetCheckMarkSize(cls, win) -> Size: ...
    @classmethod
    def GetExpanderSize(cls, win) -> Size: ...
    @classmethod
    def GetHeaderButtonHeight(cls, win) -> int: ...
    @classmethod
    def GetHeaderButtonMargin(cls, win) -> int: ...
    @classmethod
    def GetSplitterParams(cls, win) -> SplitterRenderParams: ...
    @classmethod
    def GetVersion(cls) -> RendererVersion: ...
    @property
    def Version(self): ...

class Dialog(TopLevelWindow):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    AffirmativeId: Incomplete
    EscapeId: Incomplete
    LayoutAdaptationDone: Incomplete
    LayoutAdaptationLevel: Incomplete
    LayoutAdaptationMode: Incomplete
    ReturnCode: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddMainButtonId(cls, id) -> Any: ...
    @classmethod
    def CanDoLayoutAdaptation(cls) -> bool: ...
    @classmethod
    def Centre(cls, direction=...) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    @classmethod
    def CreateButtonSizer(cls, flags) -> Sizer: ...
    @classmethod
    def CreateSeparatedButtonSizer(cls, flags) -> Sizer: ...
    @classmethod
    def CreateSeparatedSizer(cls, sizer) -> Sizer: ...
    @classmethod
    def CreateStdDialogButtonSizer(cls, flags) -> StdDialogButtonSizer: ...
    @classmethod
    def CreateTextSizer(cls, message, widthMax=...) -> Sizer: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoLayoutAdaptation(cls) -> bool: ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableLayoutAdaptation(cls, enable) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EndModal(cls, retCode) -> Any: ...
    @classmethod
    def GetAffirmativeId(cls) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetContentWindow(cls) -> Window: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEscapeId(cls) -> int: ...
    @classmethod
    def GetLayoutAdaptationDone(cls) -> bool: ...
    @classmethod
    def GetLayoutAdaptationLevel(cls) -> int: ...
    @classmethod
    def GetLayoutAdaptationMode(cls) -> DialogLayoutAdaptationMode: ...
    @classmethod
    def GetLayoutAdapter(cls) -> DialogLayoutAdapter: ...
    @classmethod
    def GetMainButtonIds(cls) -> ArrayInt: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetReturnCode(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def Iconize(cls, iconize=...) -> Any: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsIconized(cls) -> bool: ...
    @classmethod
    def IsLayoutAdaptationEnabled(cls) -> bool: ...
    @classmethod
    def IsMainButtonId(cls, id) -> bool: ...
    @classmethod
    def IsModal(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetAffirmativeId(cls, id) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetEscapeId(cls, id) -> Any: ...
    @classmethod
    def SetIcon(cls, icon) -> Any: ...
    @classmethod
    def SetIcons(cls, icons) -> Any: ...
    @classmethod
    def SetLayoutAdaptationDone(cls, done) -> Any: ...
    @classmethod
    def SetLayoutAdaptationLevel(cls, level) -> Any: ...
    @classmethod
    def SetLayoutAdaptationMode(cls, mode) -> Any: ...
    @classmethod
    def SetLayoutAdapter(cls, adapter) -> DialogLayoutAdapter: ...
    @classmethod
    def SetReturnCode(cls, retCode) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def Show(cls, show=...) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    @classmethod
    def ShowWindowModal(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ContentWindow(self): ...
    @property
    def MainButtonIds(self): ...

class DialogLayoutAdaptationMode(int): ...

class DialogLayoutAdapter(sip.wrapper):
    @classmethod
    def CanDoLayoutAdaptation(cls, dialog) -> bool: ...
    @classmethod
    def DoLayoutAdaptation(cls, dialog) -> bool: ...

class DirDialog(Dialog):
    Message: Incomplete
    Path: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetPaths(cls, paths) -> Any: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetMessage(cls, message) -> Any: ...
    @classmethod
    def SetPath(cls, path) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class DirFilterListCtrl(Choice):
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=...) -> bool: ...
    @classmethod
    def DoEnable(cls, *args, **kwargs): ...
    @classmethod
    def DoFreeze(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoMoveWindow(cls, *args, **kwargs): ...
    @classmethod
    def DoSetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSizeHints(cls, *args, **kwargs): ...
    @classmethod
    def DoSetWindowVariant(cls, *args, **kwargs): ...
    @classmethod
    def DoThaw(cls, *args, **kwargs): ...
    @classmethod
    def FillFilterList(cls, filter, defaultFilter) -> Any: ...
    @classmethod
    def GetDefaultBorder(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorderForControl(cls, *args, **kwargs): ...
    @classmethod
    def HasTransparentBackground(cls, *args, **kwargs): ...
    @classmethod
    def Init(cls) -> Any: ...
    @classmethod
    def ProcessEvent(cls, *args, **kwargs): ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class DirPickerCtrl(PickerBase):
    Path: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., path=..., message=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetPickerStyle(cls, *args, **kwargs): ...
    @classmethod
    def GetTextCtrlStyle(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PostCreation(cls, *args, **kwargs): ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetInitialDirectory(cls, dir) -> Any: ...
    @classmethod
    def SetPath(cls, dirname) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def UpdatePickerFromTextCtrl(self) -> Any: ...
    def UpdateTextCtrlFromPicker(self) -> Any: ...
    def Validate(self) -> bool: ...

class Direction(int): ...

class Display(sip.wrapper):
    @classmethod
    def ChangeMode(cls, mode=...) -> bool: ...
    @classmethod
    def GetClientArea(cls) -> Rect: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    @classmethod
    def GetCurrentMode(cls) -> VideoMode: ...
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetFromPoint(cls, pt) -> int: ...
    @classmethod
    def GetFromWindow(cls, win) -> int: ...
    @classmethod
    def GetGeometry(cls) -> Rect: ...
    @classmethod
    def GetModes(cls, mode=...) -> ArrayVideoModes: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetPPI(cls) -> Size: ...
    @classmethod
    def GetScaleFactor(cls) -> double: ...
    @classmethod
    def GetStdPPI(cls) -> Size: ...
    @classmethod
    def GetStdPPIValue(cls) -> int: ...
    @classmethod
    def IsPrimary(cls) -> bool: ...
    @property
    def ClientArea(self): ...
    @property
    def CurrentMode(self): ...
    @property
    def Geometry(self): ...
    @property
    def Name(self): ...

class DisplayChangedEvent(Event):
    def Clone(self) -> Event | None: ...

class DragImage(Object):
    @overload
    @classmethod
    def BeginDrag(cls, hotspot, window, fullScreen=..., rect=...) -> bool: ...
    @overload
    @classmethod
    def BeginDrag(cls, hotspot, window, boundingWindow) -> bool: ...
    @classmethod
    def EndDrag(cls) -> bool: ...
    @classmethod
    def Hide(cls) -> bool: ...
    @classmethod
    def Move(cls, pt) -> bool: ...
    @classmethod
    def Show(cls) -> bool: ...

class DragResult(int): ...

class DropFilesEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetFiles(cls) -> PyObject: ...
    @classmethod
    def GetNumberOfFiles(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @property
    def Files(self): ...
    @property
    def NumberOfFiles(self): ...
    @property
    def Position(self): ...

class DropSource(sip.wrapper):
    @classmethod
    def DoDragDrop(cls, flags=...) -> DragResult: ...
    @classmethod
    def GetDataObject(cls) -> DataObject: ...
    @classmethod
    def GiveFeedback(cls, effect) -> bool: ...
    @classmethod
    def SetCursor(cls, res, cursor) -> Any: ...
    @classmethod
    def SetData(cls, data) -> Any: ...
    @classmethod
    def SetIcon(cls, res, icon) -> Any: ...
    @property
    def DataObject(self): ...

class DropTarget(sip.wrapper):
    DataObject: Incomplete
    DefaultAction: Incomplete
    @classmethod
    def GetData(cls) -> bool: ...
    @classmethod
    def GetDataObject(cls) -> DataObject: ...
    @classmethod
    def GetDefaultAction(cls) -> DragResult: ...
    @classmethod
    def OnData(cls, x, y, defResult) -> DragResult: ...
    @classmethod
    def OnDragOver(cls, x, y, defResult) -> DragResult: ...
    @classmethod
    def OnDrop(cls, x, y) -> bool: ...
    @classmethod
    def OnEnter(cls, x, y, defResult) -> DragResult: ...
    @classmethod
    def OnLeave(cls) -> Any: ...
    @classmethod
    def SetDataObject(cls, data) -> Any: ...
    @classmethod
    def SetDefaultAction(cls, action) -> Any: ...
    @property
    def Data(self): ...

class DuplexMode(int): ...

class Edge(int): ...

class EllipsizeFlags(int): ...

class EllipsizeMode(int): ...

class Endianness(int): ...

class EraseEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetDC(cls) -> DC: ...
    @property
    def DC(self): ...

class Event(Object):
    EventObject: Incomplete
    EventType: Incomplete
    Id: Incomplete
    Timestamp: Incomplete
    @classmethod
    def Clone(cls) -> Event: ...
    @classmethod
    def GetEventCategory(cls) -> EventCategory: ...
    @classmethod
    def GetEventObject(cls) -> Object: ...
    @classmethod
    def GetEventType(cls) -> EventType: ...
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetSkipped(cls) -> bool: ...
    @classmethod
    def GetTimestamp(cls) -> long: ...
    @classmethod
    def IsCommandEvent(cls) -> bool: ...
    @classmethod
    def ResumePropagation(cls, propagationLevel) -> Any: ...
    @classmethod
    def SetEventObject(cls, object) -> Any: ...
    @classmethod
    def SetEventType(cls, type) -> Any: ...
    @classmethod
    def SetId(cls, id) -> Any: ...
    @classmethod
    def SetTimestamp(cls, timeStamp=...) -> Any: ...
    @classmethod
    def ShouldPropagate(cls) -> bool: ...
    @classmethod
    def Skip(cls, skip=...) -> Any: ...
    @classmethod
    def StopPropagation(cls) -> int: ...
    @property
    def Skipped(self): ...

class EventBlocker(EvtHandler):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def Block(cls, eventType) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class EventCategory(int): ...

class EventFilter(sip.wrapper):
    Event_Ignore: ClassVar[int] = ...
    Event_Processed: ClassVar[int] = ...
    Event_Skip: ClassVar[int] = ...
    @classmethod
    def FilterEvent(cls, event) -> int: ...

class EventLoopActivator(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class EventLoopBase(sip.wrapper):
    @classmethod
    def Dispatch(cls) -> bool: ...
    @classmethod
    def DispatchTimeout(cls, timeout) -> int: ...
    @classmethod
    def Exit(cls, rc=...) -> Any: ...
    @classmethod
    def GetActive(cls) -> EventLoopBase: ...
    @classmethod
    def IsEventAllowedInsideYield(cls, cat) -> bool: ...
    @classmethod
    def IsMain(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsRunning(cls) -> bool: ...
    @classmethod
    def IsYielding(cls) -> bool: ...
    @classmethod
    def Pending(cls) -> bool: ...
    @classmethod
    def ProcessIdle(cls) -> bool: ...
    @classmethod
    def Run(cls) -> int: ...
    @classmethod
    def ScheduleExit(cls, rc=...) -> Any: ...
    @classmethod
    def SetActive(cls, loop) -> Any: ...
    @classmethod
    def WakeUp(cls) -> Any: ...
    @classmethod
    def WakeUpIdle(cls) -> Any: ...
    @classmethod
    def Yield(cls, onlyIfNeeded=...) -> bool: ...
    @classmethod
    def YieldFor(cls, eventsToProcess) -> bool: ...

class EventPropagation(int): ...

class EvtHandler(Object, Trackable):
    Bind: ClassVar[Callable] = ...
    Unbind: ClassVar[Callable] = ...
    EvtHandlerEnabled: Incomplete
    NextHandler: Incomplete
    PreviousHandler: Incomplete
    @classmethod
    def AddFilter(cls, filter) -> Any: ...
    @classmethod
    def AddPendingEvent(cls, event) -> Any: ...
    @classmethod
    def Connect(cls, id, lastId, eventType, func) -> Any: ...
    @classmethod
    def DeletePendingEvents(cls) -> Any: ...
    @classmethod
    def Disconnect(cls, id, lastId=..., eventType=..., func=...) -> bool: ...
    @classmethod
    def GetEvtHandlerEnabled(cls) -> bool: ...
    @classmethod
    def GetNextHandler(cls) -> EvtHandler: ...
    @classmethod
    def GetPreviousHandler(cls) -> EvtHandler: ...
    @classmethod
    def IsUnlinked(cls) -> bool: ...
    @classmethod
    def ProcessEvent(cls, event) -> bool: ...
    @classmethod
    def ProcessEventLocally(cls, event) -> bool: ...
    @classmethod
    def ProcessPendingEvents(cls) -> Any: ...
    @classmethod
    def QueueEvent(cls, event) -> Any: ...
    @classmethod
    def RemoveFilter(cls, filter) -> Any: ...
    @classmethod
    def SafelyProcessEvent(cls, event) -> bool: ...
    @classmethod
    def SetEvtHandlerEnabled(cls, enabled) -> Any: ...
    @classmethod
    def SetNextHandler(cls, handler) -> Any: ...
    @classmethod
    def SetPreviousHandler(cls, handler) -> Any: ...
    @classmethod
    def TryAfter(cls, event) -> bool: ...
    @classmethod
    def TryBefore(cls, event) -> bool: ...
    @classmethod
    def Unlink(cls) -> Any: ...

class ExecuteEnv(sip.wrapper): ...

class FSFile(Object):
    @classmethod
    def DetachStream(cls) -> InputStream: ...
    @classmethod
    def GetAnchor(cls) -> String: ...
    @classmethod
    def GetLocation(cls) -> String: ...
    @classmethod
    def GetMimeType(cls) -> String: ...
    @classmethod
    def GetModificationTime(cls) -> DateTime: ...
    @classmethod
    def GetStream(cls) -> InputStream: ...
    @property
    def Anchor(self): ...
    @property
    def Location(self): ...
    @property
    def MimeType(self): ...
    @property
    def ModificationTime(self): ...
    @property
    def Stream(self): ...

class FSWFlags(int): ...

class FSWWarningType(int): ...

class FileConfig(ConfigBase):
    Path: Incomplete
    @classmethod
    def DeleteAll(cls) -> bool: ...
    @classmethod
    def DeleteEntry(cls, key, bDeleteGroupIfEmpty=...) -> bool: ...
    @classmethod
    def DeleteGroup(cls, key) -> bool: ...
    @classmethod
    def DisableAutoSave(cls) -> Any: ...
    @classmethod
    def EnableAutoSave(cls) -> Any: ...
    @classmethod
    def Flush(cls, bCurrentOnly=...) -> bool: ...
    @classmethod
    def GetGlobalFileName(cls, szFile) -> String: ...
    @classmethod
    def GetLocalFileName(cls, szFile, style=...) -> String: ...
    @classmethod
    def GetNumberOfEntries(cls, bRecursive=...) -> size_t: ...
    @classmethod
    def GetNumberOfGroups(cls, bRecursive=...) -> size_t: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def HasEntry(cls, strName) -> bool: ...
    @classmethod
    def HasGroup(cls, strName) -> bool: ...
    @classmethod
    def RenameEntry(cls, oldName, newName) -> bool: ...
    @classmethod
    def RenameGroup(cls, oldName, newName) -> bool: ...
    @classmethod
    def Save(cls, os) -> bool: ...
    @classmethod
    def SetPath(cls, strPath) -> Any: ...
    @classmethod
    def SetUmask(cls, mode) -> Any: ...
    @property
    def NumberOfEntries(self): ...
    @property
    def NumberOfGroups(self): ...

class FileCtrl(Control):
    Directory: Incomplete
    Filename: Incomplete
    FilterIndex: Incomplete
    Path: Incomplete
    Wildcard: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., defaultDirectory=..., defaultFilename=..., wildCard=..., style=..., pos=..., size=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDirectory(cls) -> String: ...
    @classmethod
    def GetFilename(cls) -> String: ...
    @classmethod
    def GetFilenames(cls) -> ArrayString: ...
    @classmethod
    def GetFilterIndex(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetPaths(cls) -> ArrayString: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetWildcard(cls) -> String: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDirectory(cls, directory) -> bool: ...
    @classmethod
    def SetFilename(cls, filename) -> bool: ...
    @classmethod
    def SetFilterIndex(cls, filterIndex) -> Any: ...
    @classmethod
    def SetPath(cls, path) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetWildcard(cls, wildCard) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowHidden(cls, show) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Filenames(self): ...
    @property
    def Paths(self): ...

class FileCtrlEvent(CommandEvent):
    Directory: Incomplete
    Files: Incomplete
    FilterIndex: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetDirectory(cls) -> String: ...
    @classmethod
    def GetFile(cls) -> String: ...
    @classmethod
    def GetFiles(cls) -> ArrayString: ...
    @classmethod
    def GetFilterIndex(cls) -> int: ...
    @classmethod
    def SetDirectory(cls, directory) -> Any: ...
    @classmethod
    def SetFiles(cls, files) -> Any: ...
    @classmethod
    def SetFilterIndex(cls, index) -> Any: ...
    @property
    def File(self): ...

class FileDataObject(DataObjectSimple):
    @classmethod
    def AddFile(cls, file) -> Any: ...
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    def GetDataHere(self, buf: wx.siplib.voidptr | None) -> bool: ...
    def GetDataSize(self) -> int: ...
    @classmethod
    def GetFilenames(cls) -> ArrayString: ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @property
    def AllFormats(self): ...
    @property
    def Filenames(self): ...

class FileDialog(Dialog):
    Directory: Incomplete
    Filename: Incomplete
    FilterIndex: Incomplete
    Message: Incomplete
    Path: Incomplete
    Wildcard: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddShortcut(cls, directory, flags=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCurrentlySelectedFilename(cls) -> String: ...
    @classmethod
    def GetCurrentlySelectedFilterIndex(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDirectory(cls) -> String: ...
    @classmethod
    def GetExtraControl(cls) -> Window: ...
    @classmethod
    def GetFilename(cls) -> String: ...
    @classmethod
    def GetFilenames(cls) -> ArrayString: ...
    @classmethod
    def GetFilterIndex(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetPaths(cls) -> ArrayString: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetWildcard(cls) -> String: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetCustomizeHook(cls, customizeHook) -> bool: ...
    @classmethod
    def SetDirectory(cls, directory) -> Any: ...
    @classmethod
    def SetFilename(cls, setfilename) -> Any: ...
    @classmethod
    def SetFilterIndex(cls, filterIndex) -> Any: ...
    @classmethod
    def SetMessage(cls, message) -> Any: ...
    @classmethod
    def SetPath(cls, path) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetWildcard(cls, wildCard) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def CurrentlySelectedFilename(self): ...
    @property
    def CurrentlySelectedFilterIndex(self): ...
    @property
    def ExtraControl(self): ...
    @property
    def Filenames(self): ...
    @property
    def Paths(self): ...

class FileDialogButton(FileDialogCustomControl): ...

class FileDialogCheckBox(FileDialogCustomControl):
    Value: Incomplete
    @classmethod
    def GetValue(cls) -> bool: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...

class FileDialogChoice(FileDialogCustomControl):
    Selection: Incomplete
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def SetSelection(cls, n) -> Any: ...

class FileDialogCustomControl(EvtHandler):
    @classmethod
    def Disable(cls) -> Any: ...
    @classmethod
    def Enable(cls, enable=...) -> Any: ...
    @classmethod
    def Hide(cls) -> Any: ...
    @classmethod
    def Show(cls, show=...) -> Any: ...

class FileDialogCustomize(sip.wrapper):
    @classmethod
    def AddButton(cls, label) -> FileDialogButton: ...
    @classmethod
    def AddCheckBox(cls, label) -> FileDialogCheckBox: ...
    @classmethod
    def AddChoice(cls, strings) -> FileDialogChoice: ...
    @classmethod
    def AddRadioButton(cls, label) -> FileDialogRadioButton: ...
    @classmethod
    def AddStaticText(cls, label) -> FileDialogStaticText: ...
    @classmethod
    def AddTextCtrl(cls, label=...) -> FileDialogTextCtrl: ...

class FileDialogCustomizeHook(sip.wrapper):
    @classmethod
    def AddCustomControls(cls, customizer) -> Any: ...
    @classmethod
    def TransferDataFromCustomControls(cls) -> Any: ...
    @classmethod
    def UpdateCustomControls(cls) -> Any: ...

class FileDialogRadioButton(FileDialogCustomControl):
    Value: Incomplete
    @classmethod
    def GetValue(cls) -> bool: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...

class FileDialogStaticText(FileDialogCustomControl):
    @classmethod
    def SetLabelText(cls, text) -> Any: ...

class FileDialogTextCtrl(FileDialogCustomControl):
    Value: Incomplete
    @classmethod
    def GetValue(cls) -> String: ...
    @classmethod
    def SetValue(cls, text) -> Any: ...

class FileDirPickerEvent(CommandEvent):
    Path: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def SetPath(cls, path) -> Any: ...

class FileDropTarget(DropTarget):
    def OnData(self, x: int, y: int, def_: DragResult) -> DragResult: ...
    @overload
    @classmethod
    def OnDrop(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def OnDrop(cls) -> Any: ...
    @classmethod
    def OnDropFiles(cls, x, y, filenames) -> bool: ...

class FileHistory(Object):
    BaseId: Incomplete
    MenuPathStyle: Incomplete
    @classmethod
    def AddFileToHistory(cls, filename) -> Any: ...
    @overload
    @classmethod
    def AddFilesToMenu(cls) -> Any: ...
    @overload
    @classmethod
    def AddFilesToMenu(cls, menu) -> Any: ...
    @classmethod
    def GetBaseId(cls) -> WindowID: ...
    @classmethod
    def GetCount(cls) -> size_t: ...
    @classmethod
    def GetHistoryFile(cls, index) -> String: ...
    @classmethod
    def GetMaxFiles(cls) -> int: ...
    @classmethod
    def GetMenuPathStyle(cls) -> FileHistoryMenuPathStyle: ...
    @classmethod
    def GetMenus(cls) -> FileHistoryMenuList: ...
    @classmethod
    def Load(cls, config) -> Any: ...
    @classmethod
    def RemoveFileFromHistory(cls, i) -> Any: ...
    @classmethod
    def RemoveMenu(cls, menu) -> Any: ...
    @classmethod
    def Save(cls, config) -> Any: ...
    @classmethod
    def SetBaseId(cls, baseId) -> Any: ...
    @classmethod
    def SetMenuPathStyle(cls, style) -> Any: ...
    @classmethod
    def UseMenu(cls, menu) -> Any: ...
    @property
    def Count(self): ...
    @property
    def MaxFiles(self): ...
    @property
    def Menus(self): ...

class FileHistoryMenuList(sip.wrapper):
    def index(self, obj: Menu | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class FileHistoryMenuList_iterator(sip.wrapper):
    def __next__(self): ...

class FileHistoryMenuPathStyle(int): ...

class FilePickerCtrl(PickerBase):
    Path: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., path=..., message=..., wildcard=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def GetPickerStyle(cls, *args, **kwargs): ...
    @classmethod
    def GetTextCtrlStyle(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PostCreation(cls, *args, **kwargs): ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetInitialDirectory(cls, dir) -> Any: ...
    @classmethod
    def SetPath(cls, filename) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def UpdatePickerFromTextCtrl(self) -> Any: ...
    def UpdateTextCtrlFromPicker(self) -> Any: ...
    def Validate(self) -> bool: ...

class FileSystem(Object):
    @classmethod
    def AddHandler(cls, handler) -> Any: ...
    @classmethod
    def ChangePathTo(cls, location, is_dir=...) -> Any: ...
    @classmethod
    def FileNameToURL(cls, filename) -> String: ...
    @classmethod
    def FindFileInPath(cls, pStr, path, file) -> bool: ...
    @classmethod
    def FindFirst(cls, wildcard, flags=...) -> String: ...
    @classmethod
    def FindNext(cls) -> String: ...
    @classmethod
    def GetPath(cls) -> String: ...
    @classmethod
    def HasHandlerForPath(cls, location) -> bool: ...
    @classmethod
    def OpenFile(cls, location, flags=...) -> FSFile: ...
    @classmethod
    def RemoveHandler(cls, handler) -> FileSystemHandler: ...
    @classmethod
    def URLToFileName(cls, url) -> FileName: ...
    @property
    def Path(self): ...

class FileSystemHandler(Object):
    @classmethod
    def CanOpen(cls, location) -> bool: ...
    @classmethod
    def FindFirst(cls, wildcard, flags=...) -> String: ...
    @classmethod
    def FindNext(cls) -> String: ...
    @classmethod
    def GetAnchor(cls, location) -> String: ...
    @classmethod
    def GetLeftLocation(cls, location) -> String: ...
    @classmethod
    def GetMimeTypeFromExt(cls, location) -> String: ...
    @classmethod
    def GetProtocol(cls, location) -> String: ...
    @classmethod
    def GetRightLocation(cls, location) -> String: ...
    @classmethod
    def OpenFile(cls, fs, location) -> FSFile: ...

class FileSystemOpenFlags(int): ...

class FileSystemWatcher(EvtHandler):
    @classmethod
    def Add(cls, path, events=...) -> bool: ...
    @classmethod
    def AddTree(cls, path, events=..., filter=...) -> bool: ...
    @classmethod
    def GetWatchedPaths(cls, paths) -> int: ...
    @classmethod
    def GetWatchedPathsCount(cls) -> int: ...
    @classmethod
    def Remove(cls, path) -> bool: ...
    @classmethod
    def RemoveAll(cls) -> bool: ...
    @classmethod
    def RemoveTree(cls, path) -> bool: ...
    @classmethod
    def SetOwner(cls, handler) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @property
    def WatchedPathsCount(self): ...

class FileSystemWatcherEvent(Event):
    @classmethod
    def Clone(cls) -> Event: ...
    @classmethod
    def GetChangeType(cls) -> int: ...
    @classmethod
    def GetErrorDescription(cls) -> String: ...
    @classmethod
    def GetNewPath(cls) -> FileName: ...
    @classmethod
    def GetPath(cls) -> FileName: ...
    @classmethod
    def GetWarningType(cls) -> FSWWarningType: ...
    @classmethod
    def IsError(cls) -> bool: ...
    @classmethod
    def ToString(cls) -> String: ...
    @property
    def ChangeType(self): ...
    @property
    def ErrorDescription(self): ...
    @property
    def NewPath(self): ...
    @property
    def Path(self): ...
    @property
    def WarningType(self): ...

class FileTranslationsLoader(TranslationsLoader):
    @classmethod
    def AddCatalogLookupPathPrefix(cls, prefix) -> Any: ...
    def GetAvailableTranslations(self, domain: Any) -> Any: ...
    def LoadCatalog(self, domain: Any, lang: Any) -> MsgCatalog | None: ...

class FileType(sip.wrapper):
    class MessageParameters(sip.wrapper):
        @classmethod
        def GetFileName(cls) -> String: ...
        @classmethod
        def GetMimeType(cls) -> String: ...
        @classmethod
        def GetParamValue(cls, name) -> String: ...
        @property
        def FileName(self): ...
        @property
        def MimeType(self): ...
    @classmethod
    def ExpandCommand(cls, command, params) -> String: ...
    @classmethod
    def GetAllCommands(cls, *args, **kwargs): ...
    @classmethod
    def GetDescription(cls) -> String: ...
    @classmethod
    def GetExpandedCommand(cls, verb, params) -> String: ...
    @classmethod
    def GetExtensions(cls) -> ArrayString: ...
    @classmethod
    def GetIcon(cls) -> Icon: ...
    @classmethod
    def GetIconInfo(cls) -> PyObject: ...
    @classmethod
    def GetIconLocation(cls) -> IconLocation: ...
    @classmethod
    def GetMimeType(cls) -> String: ...
    @classmethod
    def GetMimeTypes(cls) -> ArrayString: ...
    @overload
    @classmethod
    def GetOpenCommand(cls, params) -> String: ...
    @overload
    @classmethod
    def GetOpenCommand(cls, filename) -> String: ...
    @classmethod
    def GetPrintCommand(cls, params) -> String: ...
    @property
    def Description(self): ...
    @property
    def Extensions(self): ...
    @property
    def Icon(self): ...
    @property
    def IconInfo(self): ...
    @property
    def IconLocation(self): ...
    @property
    def MimeType(self): ...
    @property
    def MimeTypes(self): ...
    @property
    def OpenCommand(self): ...
    @property
    def PrintCommand(self): ...

class FileTypeInfo(sip.wrapper):
    Description: Incomplete
    OpenCommand: Incomplete
    PrintCommand: Incomplete
    ShortDesc: Incomplete
    @classmethod
    def AddExtension(cls, ext) -> Any: ...
    @classmethod
    def GetDescription(cls) -> String: ...
    @classmethod
    def GetExtensions(cls) -> ArrayString: ...
    @classmethod
    def GetExtensionsCount(cls) -> size_t: ...
    @classmethod
    def GetIconFile(cls) -> String: ...
    @classmethod
    def GetIconIndex(cls) -> int: ...
    @classmethod
    def GetMimeType(cls) -> String: ...
    @classmethod
    def GetOpenCommand(cls) -> String: ...
    @classmethod
    def GetPrintCommand(cls) -> String: ...
    @classmethod
    def GetShortDesc(cls) -> String: ...
    @classmethod
    def SetDescription(cls, description) -> Any: ...
    @classmethod
    def SetIcon(cls, iconFile, iconIndex=...) -> Any: ...
    @classmethod
    def SetOpenCommand(cls, command) -> Any: ...
    @classmethod
    def SetPrintCommand(cls, command) -> Any: ...
    @classmethod
    def SetShortDesc(cls, shortDesc) -> Any: ...
    @property
    def Extensions(self): ...
    @property
    def ExtensionsCount(self): ...
    @property
    def IconFile(self): ...
    @property
    def IconIndex(self): ...
    @property
    def MimeType(self): ...

class FilterFSHandler(FileSystemHandler):
    def CanOpen(self, location: Any) -> bool: ...
    def FindFirst(self, spec: Any, flags: int = ...) -> Any: ...
    def FindNext(self) -> Any: ...
    @classmethod
    def GetAnchor(cls, *args, **kwargs): ...
    @classmethod
    def GetLeftLocation(cls, *args, **kwargs): ...
    @classmethod
    def GetProtocol(cls, *args, **kwargs): ...
    @classmethod
    def GetRightLocation(cls, *args, **kwargs): ...
    def OpenFile(self, fs: FileSystem, location: Any) -> FSFile | None: ...

class FindDialogEvent(CommandEvent):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetDialog(cls) -> FindReplaceDialog: ...
    @classmethod
    def GetFindString(cls) -> String: ...
    @classmethod
    def GetFlags(cls) -> int: ...
    @classmethod
    def GetReplaceString(cls) -> String: ...
    @property
    def Dialog(self): ...
    @property
    def FindString(self): ...
    @property
    def Flags(self): ...
    @property
    def ReplaceString(self): ...

class FindReplaceData(Object):
    FindString: Incomplete
    Flags: Incomplete
    ReplaceString: Incomplete
    @classmethod
    def GetFindString(cls) -> String: ...
    @classmethod
    def GetFlags(cls) -> int: ...
    @classmethod
    def GetReplaceString(cls) -> String: ...
    @classmethod
    def SetFindString(cls, str) -> Any: ...
    @classmethod
    def SetFlags(cls, flags) -> Any: ...
    @classmethod
    def SetReplaceString(cls, str) -> Any: ...

class FindReplaceDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, data, title=..., style=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetData(cls) -> FindReplaceData: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Data(self): ...

class FindReplaceDialogStyles(int): ...

class FindReplaceFlags(int): ...

class FlexGridSizer(GridSizer):
    FlexibleDirection: Incomplete
    NonFlexibleGrowMode: Incomplete
    @classmethod
    def AddGrowableCol(cls, idx, proportion=...) -> Any: ...
    @classmethod
    def AddGrowableRow(cls, idx, proportion=...) -> Any: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def GetColWidths(cls) -> ArrayInt: ...
    @classmethod
    def GetFlexibleDirection(cls) -> int: ...
    @classmethod
    def GetNonFlexibleGrowMode(cls) -> FlexSizerGrowMode: ...
    @classmethod
    def GetRowHeights(cls) -> ArrayInt: ...
    @classmethod
    def IsColGrowable(cls, idx) -> bool: ...
    @classmethod
    def IsRowGrowable(cls, idx) -> bool: ...
    @classmethod
    def RemoveGrowableCol(cls, idx) -> Any: ...
    @classmethod
    def RemoveGrowableRow(cls, idx) -> Any: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetFlexibleDirection(cls, direction) -> Any: ...
    @classmethod
    def SetNonFlexibleGrowMode(cls, mode) -> Any: ...
    @property
    def ColWidths(self): ...
    @property
    def RowHeights(self): ...

class FlexSizerGrowMode(int): ...

class FloodFillStyle(int): ...

class FocusEvent(Event):
    Window: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def SetWindow(cls, win) -> Any: ...

class Font(GDIObject):
    GetNoAntiAliasing: ClassVar[Callable] = ...
    SetNoAntiAliasing: ClassVar[Callable] = ...
    Encoding: Incomplete
    FaceName: Incomplete
    Family: Incomplete
    NativeFontInfoDesc: Incomplete
    NativeFontInfoUserDesc: Incomplete
    PixelSize: Incomplete
    PointSize: Incomplete
    Style: Incomplete
    Weight: Incomplete
    @classmethod
    def AddPrivateFont(cls, filename) -> bool: ...
    @classmethod
    def Bold(cls) -> Font: ...
    @classmethod
    def CanUsePrivateFont(cls) -> bool: ...
    @classmethod
    def GetBaseFont(cls) -> Font: ...
    @classmethod
    def GetDefaultEncoding(cls) -> FontEncoding: ...
    @classmethod
    def GetEncoding(cls) -> FontEncoding: ...
    @classmethod
    def GetFaceName(cls) -> String: ...
    @classmethod
    def GetFamily(cls) -> FontFamily: ...
    @classmethod
    def GetFractionalPointSize(cls) -> double: ...
    @classmethod
    def GetHFONT(cls) -> void: ...
    @classmethod
    def GetNativeFontInfo(cls) -> NativeFontInfo: ...
    @classmethod
    def GetNativeFontInfoDesc(cls) -> String: ...
    @classmethod
    def GetNativeFontInfoUserDesc(cls) -> String: ...
    @classmethod
    def GetNumericWeight(cls) -> int: ...
    @classmethod
    def GetNumericWeightOf(cls, weight) -> int: ...
    @classmethod
    def GetPangoFontDescription(cls) -> void: ...
    @classmethod
    def GetPixelSize(cls) -> Size: ...
    @classmethod
    def GetPointSize(cls) -> int: ...
    @classmethod
    def GetStrikethrough(cls) -> bool: ...
    @classmethod
    def GetStyle(cls) -> FontStyle: ...
    @classmethod
    def GetUnderlined(cls) -> bool: ...
    @classmethod
    def GetWeight(cls) -> FontWeight: ...
    @classmethod
    def IsFixedWidth(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def Italic(cls) -> Font: ...
    @classmethod
    def Larger(cls) -> Font: ...
    @classmethod
    def MakeBold(cls) -> Font: ...
    @classmethod
    def MakeItalic(cls) -> Font: ...
    @classmethod
    def MakeLarger(cls) -> Font: ...
    @classmethod
    def MakeSmaller(cls) -> Font: ...
    @classmethod
    def MakeStrikethrough(cls) -> Font: ...
    @classmethod
    def MakeUnderlined(cls) -> Font: ...
    @overload
    @classmethod
    def New(cls, pointSize, family, style, weight, underline=..., faceName=..., encoding=...) -> Font: ...
    @overload
    @classmethod
    def New(cls, pointSize, family, flags=..., faceName=..., encoding=...) -> Font: ...
    @overload
    @classmethod
    def New(cls, pixelSize, family, style, weight, underline=..., faceName=..., encoding=...) -> Font: ...
    @overload
    @classmethod
    def New(cls, pixelSize, family, flags=..., faceName=..., encoding=...) -> Font: ...
    @overload
    @classmethod
    def New(cls, nativeInfo) -> Font: ...
    @overload
    @classmethod
    def New(cls, nativeInfoString) -> Font: ...
    @classmethod
    def OSXGetCGFont(cls) -> void: ...
    @classmethod
    def Scale(cls, x) -> Font: ...
    @classmethod
    def Scaled(cls, x) -> Font: ...
    @classmethod
    def SetDefaultEncoding(cls, encoding) -> Any: ...
    @classmethod
    def SetEncoding(cls, encoding) -> Any: ...
    @classmethod
    def SetFaceName(cls, faceName) -> bool: ...
    @classmethod
    def SetFamily(cls, family) -> Any: ...
    @classmethod
    def SetFractionalPointSize(cls, pointSize) -> Any: ...
    @overload
    @classmethod
    def SetNativeFontInfo(cls, info) -> bool: ...
    @overload
    @classmethod
    def SetNativeFontInfo(cls, info) -> Any: ...
    @classmethod
    def SetNativeFontInfoUserDesc(cls, info) -> bool: ...
    @classmethod
    def SetNumericWeight(cls, weight) -> Any: ...
    @classmethod
    def SetPixelSize(cls, pixelSize) -> Any: ...
    @classmethod
    def SetPointSize(cls, pointSize) -> Any: ...
    @classmethod
    def SetStrikethrough(cls, strikethrough) -> Any: ...
    @classmethod
    def SetStyle(cls, style) -> Any: ...
    @classmethod
    def SetSymbolicSize(cls, size) -> Any: ...
    @classmethod
    def SetSymbolicSizeRelativeTo(cls, size, base) -> Any: ...
    @classmethod
    def SetUnderlined(cls, underlined) -> Any: ...
    @classmethod
    def SetWeight(cls, weight) -> Any: ...
    @classmethod
    def Smaller(cls) -> Font: ...
    @classmethod
    def Strikethrough(cls) -> Font: ...
    @classmethod
    def Underlined(cls) -> Font: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class FontData(Object):
    AllowSymbols: Incomplete
    ChosenFont: Incomplete
    Colour: Incomplete
    InitialFont: Incomplete
    ShowHelp: Incomplete
    @classmethod
    def EnableEffects(cls, enable) -> Any: ...
    @classmethod
    def GetAllowSymbols(cls) -> bool: ...
    @classmethod
    def GetChosenFont(cls) -> Font: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetEnableEffects(cls) -> bool: ...
    @classmethod
    def GetInitialFont(cls) -> Font: ...
    @classmethod
    def GetRestrictSelection(cls) -> int: ...
    @classmethod
    def GetShowHelp(cls) -> bool: ...
    @classmethod
    def RestrictSelection(cls, flags) -> Any: ...
    @classmethod
    def SetAllowSymbols(cls, allowSymbols) -> Any: ...
    @classmethod
    def SetChosenFont(cls, font) -> Any: ...
    @classmethod
    def SetColour(cls, colour) -> Any: ...
    @classmethod
    def SetInitialFont(cls, font) -> Any: ...
    @classmethod
    def SetRange(cls, min, max) -> Any: ...
    @classmethod
    def SetShowHelp(cls, showHelp) -> Any: ...

class FontDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @overload
    @classmethod
    def Create(cls, parent) -> bool: ...
    @overload
    @classmethod
    def Create(cls, parent, data) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFontData(cls) -> FontData: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def FontData(self): ...

class FontEncoding(int): ...

class FontEnumerator(sip.wrapper):
    @classmethod
    def EnumerateEncodings(cls, font=...) -> bool: ...
    @classmethod
    def EnumerateFacenames(cls, encoding=..., fixedWidthOnly=...) -> bool: ...
    @classmethod
    def GetEncodings(cls, facename=...) -> ArrayString: ...
    @classmethod
    def GetFacenames(cls, encoding=..., fixedWidthOnly=...) -> ArrayString: ...
    @classmethod
    def InvalidateCache(cls) -> Any: ...
    @classmethod
    def IsValidFacename(cls, facename) -> bool: ...
    @classmethod
    def OnFacename(cls, font) -> bool: ...
    @classmethod
    def OnFontEncoding(cls, font, encoding) -> bool: ...

class FontFamily(int): ...

class FontFlag(int): ...

class FontInfo(sip.wrapper):
    @classmethod
    def AllFlags(cls, flags) -> FontInfo: ...
    @classmethod
    def AntiAliased(cls, antiAliased=...) -> FontInfo: ...
    @classmethod
    def Bold(cls, bold=...) -> FontInfo: ...
    @classmethod
    def Encoding(cls, encoding) -> FontInfo: ...
    @classmethod
    def FaceName(cls, faceName) -> FontInfo: ...
    @classmethod
    def Family(cls, family) -> FontInfo: ...
    @classmethod
    def GetWeightClosestToNumericValue(cls, numWeight) -> FontWeight: ...
    @classmethod
    def Italic(cls, italic=...) -> FontInfo: ...
    @classmethod
    def Light(cls, light=...) -> FontInfo: ...
    @classmethod
    def Slant(cls, slant=...) -> FontInfo: ...
    @classmethod
    def Strikethrough(cls, strikethrough=...) -> FontInfo: ...
    @classmethod
    def Style(cls, style) -> FontInfo: ...
    @classmethod
    def Underlined(cls, underlined=...) -> FontInfo: ...
    @classmethod
    def Weight(cls, weight) -> FontInfo: ...

class FontList(sip.wrapper):
    @overload
    @classmethod
    def FindOrCreateFont(cls, point_size, family, style, weight, underline=..., facename=..., encoding=...) -> Font: ...
    @overload
    @classmethod
    def FindOrCreateFont(cls, fontInfo) -> Font: ...

class FontMapper(sip.wrapper):
    @classmethod
    def CharsetToEncoding(cls, charset, interactive=...) -> FontEncoding: ...
    @classmethod
    def Get(cls) -> FontMapper: ...
    @classmethod
    def GetAllEncodingNames(cls, encoding) -> ArrayString: ...
    @classmethod
    def GetAltForEncoding(cls, *args, **kwargs): ...
    @classmethod
    def GetEncoding(cls, n) -> FontEncoding: ...
    @classmethod
    def GetEncodingDescription(cls, encoding) -> String: ...
    @classmethod
    def GetEncodingFromName(cls, encoding) -> FontEncoding: ...
    @classmethod
    def GetEncodingName(cls, encoding) -> String: ...
    @classmethod
    def GetSupportedEncodingsCount(cls) -> size_t: ...
    @classmethod
    def IsEncodingAvailable(cls, encoding, facename=...) -> bool: ...
    @classmethod
    def Set(cls, mapper) -> FontMapper: ...
    @classmethod
    def SetConfigPath(cls, prefix) -> Any: ...
    @classmethod
    def SetDialogParent(cls, parent) -> Any: ...
    @classmethod
    def SetDialogTitle(cls, title) -> Any: ...

class FontMetrics(sip.wrapper): ...

class FontPickerCtrl(PickerBase):
    MaxPointSize: Incomplete
    MinPointSize: Incomplete
    SelectedColour: Incomplete
    SelectedFont: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., font=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMaxPointSize(cls) -> unsignedint: ...
    @classmethod
    def GetMinPointSize(cls) -> unsignedint: ...
    @classmethod
    def GetPickerStyle(cls, *args, **kwargs): ...
    @classmethod
    def GetSelectedColour(cls) -> Colour: ...
    @classmethod
    def GetSelectedFont(cls) -> Font: ...
    @classmethod
    def GetTextCtrlStyle(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PostCreation(cls, *args, **kwargs): ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetMaxPointSize(cls, max) -> Any: ...
    @classmethod
    def SetMinPointSize(cls, min) -> Any: ...
    @classmethod
    def SetSelectedColour(cls, colour) -> Any: ...
    @classmethod
    def SetSelectedFont(cls, font) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def UpdatePickerFromTextCtrl(self) -> Any: ...
    def UpdateTextCtrlFromPicker(self) -> Any: ...
    def Validate(self) -> bool: ...

class FontPickerEvent(CommandEvent):
    Font: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def SetFont(cls, f) -> Any: ...

class FontStyle(int): ...

class FontSymbolicSize(int): ...

class FontWeight(int): ...

class Frame(TopLevelWindow):
    MenuBar: Incomplete
    StatusBar: Incomplete
    StatusBarPane: Incomplete
    ToolBar: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Centre(cls, direction=...) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    @classmethod
    def CreateStatusBar(cls, number=..., style=..., id=..., name=...) -> StatusBar: ...
    @classmethod
    def CreateToolBar(cls, style=..., id=..., name=...) -> ToolBar: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGiveHelp(cls, text, show) -> Any: ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    @classmethod
    def GetClientAreaOrigin(cls) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMenuBar(cls) -> MenuBar: ...
    @classmethod
    def GetStatusBar(cls) -> StatusBar: ...
    @classmethod
    def GetStatusBarPane(cls) -> int: ...
    @classmethod
    def GetToolBar(cls) -> ToolBar: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def OnCreateStatusBar(cls, number, style, id, name) -> StatusBar: ...
    @classmethod
    def OnCreateToolBar(cls, style, id, name) -> ToolBar: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PopStatusText(cls, number=...) -> Any: ...
    @classmethod
    def ProcessCommand(cls, id) -> bool: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def PushStatusText(cls, text, number=...) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetMenuBar(cls, menuBar) -> Any: ...
    @classmethod
    def SetStatusBar(cls, statusBar) -> Any: ...
    @classmethod
    def SetStatusBarPane(cls, n) -> Any: ...
    @classmethod
    def SetStatusText(cls, text, number=...) -> Any: ...
    @classmethod
    def SetStatusWidths(cls, widths) -> Any: ...
    @classmethod
    def SetToolBar(cls, toolBar) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class FullScreenEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def IsFullScreen(cls) -> bool: ...

class GBPosition(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Col: Incomplete
    Row: Incomplete
    col: Incomplete
    row: Incomplete
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetCol(cls) -> int: ...
    @classmethod
    def GetRow(cls) -> int: ...
    @classmethod
    def Set(cls, row=..., col=...) -> Any: ...
    @classmethod
    def SetCol(cls, col) -> Any: ...
    @classmethod
    def SetRow(cls, row) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class GBSizerItem(SizerItem):
    GBSizer: Incomplete
    Pos: Incomplete
    Span: Incomplete
    @classmethod
    def GetEndPos(cls, *args, **kwargs): ...
    @classmethod
    def GetGBSizer(cls) -> GridBagSizer: ...
    @classmethod
    def GetPos(cls) -> GBPosition: ...
    @classmethod
    def GetSpan(cls) -> GBSpan: ...
    @overload
    @classmethod
    def Intersects(cls, other) -> bool: ...
    @overload
    @classmethod
    def Intersects(cls, pos, span) -> bool: ...
    @classmethod
    def SetGBSizer(cls, sizer) -> Any: ...
    @classmethod
    def SetPos(cls, pos) -> bool: ...
    @classmethod
    def SetSpan(cls, span) -> bool: ...

class GBSpan(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Colspan: Incomplete
    Rowspan: Incomplete
    colspan: Incomplete
    rowspan: Incomplete
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetColspan(cls) -> int: ...
    @classmethod
    def GetRowspan(cls) -> int: ...
    @classmethod
    def Set(cls, rowspan=..., colspan=...) -> Any: ...
    @classmethod
    def SetColspan(cls, colspan) -> Any: ...
    @classmethod
    def SetRowspan(cls, rowspan) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class GCDC(DC):
    GraphicsContext: Incomplete
    @classmethod
    def GetGraphicsContext(cls) -> GraphicsContext: ...
    @classmethod
    def SetGraphicsContext(cls, context) -> Any: ...

class GDIObject(Object): ...

class GIFHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveAnimation(cls, images, stream, verbose=..., delayMilliSecs=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class GUIEventLoop(EventLoopBase):
    def Dispatch(self) -> bool: ...
    def DispatchTimeout(self, timeout: int) -> int: ...
    def Exit(self, rc: int = ...) -> Any: ...
    @classmethod
    def OnExit(cls, *args, **kwargs): ...
    def Pending(self) -> bool: ...
    def Run(self) -> int: ...
    def ScheduleExit(self, rc: int = ...) -> Any: ...
    def WakeUp(self) -> Any: ...
    def YieldFor(self, eventsToProcess: int) -> bool: ...

class Gauge(Control):
    Range: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., range=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetRange(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsVertical(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Pulse(cls) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetRange(cls, range) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, pos) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class GenericDirCtrl(Control):
    DefaultPath: Incomplete
    Filter: Incomplete
    FilterIndex: Incomplete
    Path: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CollapsePath(cls, path) -> bool: ...
    @classmethod
    def CollapseTree(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., dir=..., pos=..., size=..., style=..., filter=..., defaultFilter=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def ExpandPath(cls, path) -> bool: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultPath(cls) -> String: ...
    @classmethod
    def GetFilePath(cls) -> String: ...
    @classmethod
    def GetFilePaths(cls, paths) -> Any: ...
    @classmethod
    def GetFilter(cls) -> String: ...
    @classmethod
    def GetFilterIndex(cls) -> int: ...
    @classmethod
    def GetFilterListCtrl(cls) -> DirFilterListCtrl: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @overload
    @classmethod
    def GetPath(cls) -> String: ...
    @overload
    @classmethod
    def GetPath(cls, itemId) -> String: ...
    @classmethod
    def GetPaths(cls) -> list: ...
    @classmethod
    def GetRootId(cls) -> TreeItemId: ...
    @classmethod
    def GetTreeCtrl(cls) -> TreeCtrl: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    @classmethod
    def Init(cls) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def ReCreateTree(cls) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SelectPath(cls, path, select=...) -> Any: ...
    @classmethod
    def SelectPaths(cls, paths) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDefaultPath(cls, path) -> Any: ...
    @classmethod
    def SetFilter(cls, filter) -> Any: ...
    @classmethod
    def SetFilterIndex(cls, n) -> Any: ...
    @classmethod
    def SetPath(cls, path) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowHidden(cls, show) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def UnselectAll(cls) -> Any: ...
    def Validate(self) -> bool: ...
    @property
    def FilePath(self): ...
    @property
    def FilterListCtrl(self): ...
    @property
    def Paths(self): ...
    @property
    def RootId(self): ...
    @property
    def TreeCtrl(self): ...

class GenericDragImage(Object):
    @overload
    @classmethod
    def BeginDrag(cls, hotspot, window, fullScreen=..., rect=...) -> bool: ...
    @overload
    @classmethod
    def BeginDrag(cls, hotspot, window, boundingWindow) -> bool: ...
    @classmethod
    def DoDrawImage(cls, dc, pos) -> bool: ...
    @classmethod
    def EndDrag(cls) -> bool: ...
    @classmethod
    def GetImageRect(cls, pos) -> Rect: ...
    @classmethod
    def Hide(cls) -> bool: ...
    @classmethod
    def Move(cls, pt) -> bool: ...
    @classmethod
    def Show(cls) -> bool: ...
    @classmethod
    def UpdateBackingFromWindow(cls, windowDC, destDC, sourceRect, destRect) -> bool: ...

class GenericMessageDialog(Dialog):
    ExtendedMessage: Incomplete
    HelpLabel: Incomplete
    Message: Incomplete
    OKLabel: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddMessageDialogCheckBox(cls, sizer) -> Any: ...
    @classmethod
    def AddMessageDialogDetails(cls, sizer) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetCancelLabel(cls) -> String: ...
    @classmethod
    def GetCaption(cls) -> String: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEffectiveIcon(cls) -> long: ...
    @classmethod
    def GetExtendedMessage(cls) -> String: ...
    @classmethod
    def GetHelpLabel(cls) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetMessageDialogStyle(cls) -> long: ...
    @classmethod
    def GetNoLabel(cls) -> String: ...
    @classmethod
    def GetOKLabel(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetYesLabel(cls) -> String: ...
    @classmethod
    def HasCustomLabels(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetExtendedMessage(cls, extendedMessage) -> Any: ...
    @classmethod
    def SetHelpLabel(cls, help) -> bool: ...
    @classmethod
    def SetMessage(cls, message) -> Any: ...
    @classmethod
    def SetOKCancelLabels(cls, ok, cancel) -> bool: ...
    @classmethod
    def SetOKLabel(cls, ok) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetYesNoCancelLabels(cls, yes, no, cancel) -> bool: ...
    @classmethod
    def SetYesNoLabels(cls, yes, no) -> bool: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def CancelLabel(self): ...
    @property
    def Caption(self): ...
    @property
    def EffectiveIcon(self): ...
    @property
    def MessageDialogStyle(self): ...
    @property
    def NoLabel(self): ...
    @property
    def YesLabel(self): ...

class GenericProgressDialog(Dialog):
    Range: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetRange(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Pulse(cls, *args, **kwargs): ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Resume(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetRange(cls, maximum) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Update(cls, *args, **kwargs): ...
    def Validate(self) -> bool: ...
    @classmethod
    def WasCancelled(cls) -> bool: ...
    @classmethod
    def WasSkipped(cls) -> bool: ...
    @property
    def Message(self): ...
    @property
    def Value(self): ...

class GenericStaticBitmap(Control):
    class ScaleMode(int):
        def __reduce__(self): ...
    Scale_AspectFill: ClassVar[GenericStaticBitmap.ScaleMode] = ...
    Scale_AspectFit: ClassVar[GenericStaticBitmap.ScaleMode] = ...
    Scale_Fill: ClassVar[GenericStaticBitmap.ScaleMode] = ...
    Scale_None: ClassVar[GenericStaticBitmap.ScaleMode] = ...
    Bitmap: Incomplete
    Icon: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., bitmap=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetIcon(cls) -> Icon: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetScaleMode(cls) -> ScaleMode: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetBitmap(cls, label) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetIcon(cls, label) -> Any: ...
    @classmethod
    def SetScaleMode(cls, scaleMode) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class GeometryCentre(int): ...

class GestureEvent(Event):
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def IsGestureEnd(cls) -> bool: ...
    @classmethod
    def IsGestureStart(cls) -> bool: ...
    @classmethod
    def SetGestureEnd(cls, isEnd=...) -> Any: ...
    @classmethod
    def SetGestureStart(cls, isStart=...) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...

class GradientType(int): ...

class GraphicsBitmap(GraphicsObject):
    @classmethod
    def ConvertToImage(cls) -> Image: ...
    @classmethod
    def GetNativeBitmap(cls) -> void: ...
    @property
    def NativeBitmap(self): ...

class GraphicsBrush(GraphicsObject): ...

class GraphicsContext(GraphicsObject):
    DrawRotatedText: ClassVar[Callable] = ...
    AntialiasMode: Incomplete
    CompositionMode: Incomplete
    InterpolationQuality: Incomplete
    Transform: Incomplete
    @classmethod
    def BeginLayer(cls, opacity) -> Any: ...
    @overload
    @classmethod
    def Clip(cls, region) -> Any: ...
    @overload
    @classmethod
    def Clip(cls, x, y, w, h) -> Any: ...
    @classmethod
    def ConcatTransform(cls, matrix) -> Any: ...
    @overload
    @classmethod
    def Create(cls, window) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, windowDC) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, memoryDC) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, printerDC) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, metaFileDC) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, image) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls) -> GraphicsContext: ...
    @overload
    @classmethod
    def Create(cls, autoPaintDC) -> GraphicsContext: ...
    @classmethod
    def CreateBitmap(cls, bitmap) -> GraphicsBitmap: ...
    @classmethod
    def CreateBitmapFromImage(cls, image) -> GraphicsBitmap: ...
    @classmethod
    def CreateBrush(cls, brush) -> GraphicsBrush: ...
    @overload
    @classmethod
    def CreateFont(cls, font, col=...) -> GraphicsFont: ...
    @overload
    @classmethod
    def CreateFont(cls, sizeInPixels, facename, flags=..., col=...) -> GraphicsFont: ...
    @classmethod
    def CreateFromNative(cls, context) -> GraphicsContext: ...
    @classmethod
    def CreateFromNativeWindow(cls, window) -> GraphicsContext: ...
    @classmethod
    def CreateFromUnknownDC(cls, dc) -> GraphicsContext: ...
    @overload
    @classmethod
    def CreateLinearGradientBrush(cls, x1, y1, x2, y2, c1, c2, matrix=...) -> GraphicsBrush: ...
    @overload
    @classmethod
    def CreateLinearGradientBrush(cls, x1, y1, x2, y2, stops, matrix=...) -> GraphicsBrush: ...
    @overload
    @classmethod
    def CreateMatrix(cls, a=..., b=..., c=..., d=..., tx=..., ty=...) -> GraphicsMatrix: ...
    @overload
    @classmethod
    def CreateMatrix(cls, mat) -> GraphicsMatrix: ...
    @classmethod
    def CreatePath(cls) -> GraphicsPath: ...
    @overload
    @classmethod
    def CreatePen(cls, pen) -> GraphicsPen: ...
    @overload
    @classmethod
    def CreatePen(cls, info) -> GraphicsPen: ...
    @overload
    @classmethod
    def CreateRadialGradientBrush(cls, startX, startY, endX, endY, radius, oColor, cColor, matrix=...) -> GraphicsBrush: ...
    @overload
    @classmethod
    def CreateRadialGradientBrush(cls, startX, startY, endX, endY, radius, stops, matrix=...) -> GraphicsBrush: ...
    @classmethod
    def CreateSubBitmap(cls, bitmap, x, y, w, h) -> GraphicsBitmap: ...
    @classmethod
    def DisableOffset(cls) -> Any: ...
    @overload
    @classmethod
    def DrawBitmap(cls, bmp, x, y, w, h) -> Any: ...
    @overload
    @classmethod
    def DrawBitmap(cls, bmp, x, y, w, h) -> Any: ...
    @classmethod
    def DrawEllipse(cls, x, y, w, h) -> Any: ...
    @classmethod
    def DrawIcon(cls, icon, x, y, w, h) -> Any: ...
    @classmethod
    def DrawLines(cls, point2Ds, fillStyle=...) -> Any: ...
    @classmethod
    def DrawPath(cls, path, fillStyle=...) -> Any: ...
    @classmethod
    def DrawRectangle(cls, x, y, w, h) -> Any: ...
    @classmethod
    def DrawRoundedRectangle(cls, x, y, w, h, radius) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, str, x, y) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, str, x, y, angle) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, str, x, y, backgroundBrush) -> Any: ...
    @overload
    @classmethod
    def DrawText(cls, str, x, y, angle, backgroundBrush) -> Any: ...
    @classmethod
    def EnableOffset(cls, enable=...) -> Any: ...
    @classmethod
    def EndDoc(cls) -> Any: ...
    @classmethod
    def EndLayer(cls) -> Any: ...
    @classmethod
    def EndPage(cls) -> Any: ...
    @classmethod
    def FillPath(cls, path, fillStyle=...) -> Any: ...
    @classmethod
    def Flush(cls) -> Any: ...
    @overload
    @classmethod
    def FromDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def FromDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def FromDIP(cls, d) -> int: ...
    @classmethod
    def GetAntialiasMode(cls) -> AntialiasMode: ...
    @classmethod
    def GetClipBox(cls, x, y, w, h) -> Any: ...
    @classmethod
    def GetCompositionMode(cls) -> CompositionMode: ...
    @classmethod
    def GetDPI(cls, *args, **kwargs): ...
    @classmethod
    def GetFullTextExtent(cls, *args, **kwargs): ...
    @classmethod
    def GetInterpolationQuality(cls) -> InterpolationQuality: ...
    @classmethod
    def GetNativeContext(cls) -> void: ...
    @classmethod
    def GetPartialTextExtents(cls, text) -> ArrayDouble: ...
    @classmethod
    def GetSize(cls, *args, **kwargs): ...
    def GetTextExtent(self, text: Any) -> Any: ...
    @classmethod
    def GetTransform(cls) -> GraphicsMatrix: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def OffsetEnabled(cls) -> bool: ...
    @classmethod
    def PopState(cls) -> Any: ...
    @classmethod
    def PushState(cls) -> Any: ...
    @classmethod
    def ResetClip(cls) -> Any: ...
    @classmethod
    def Rotate(cls, angle) -> Any: ...
    @classmethod
    def Scale(cls, xScale, yScale) -> Any: ...
    @classmethod
    def SetAntialiasMode(cls, antialias) -> bool: ...
    @overload
    @classmethod
    def SetBrush(cls, brush) -> Any: ...
    @overload
    @classmethod
    def SetBrush(cls, brush) -> Any: ...
    @classmethod
    def SetCompositionMode(cls, op) -> bool: ...
    @overload
    @classmethod
    def SetFont(cls, font, colour) -> Any: ...
    @overload
    @classmethod
    def SetFont(cls, font) -> Any: ...
    @classmethod
    def SetInterpolationQuality(cls, interpolation) -> bool: ...
    @overload
    @classmethod
    def SetPen(cls, pen) -> Any: ...
    @overload
    @classmethod
    def SetPen(cls, pen) -> Any: ...
    @classmethod
    def SetTransform(cls, matrix) -> Any: ...
    @classmethod
    def ShouldOffset(cls) -> bool: ...
    @classmethod
    def StartDoc(cls, message) -> bool: ...
    @classmethod
    def StartPage(cls, width=..., height=...) -> Any: ...
    @classmethod
    def StrokeLine(cls, x1, y1, x2, y2) -> Any: ...
    @classmethod
    def StrokeLineSegments(cls, beginPoint2Ds, endPoint2Ds) -> Any: ...
    @classmethod
    def StrokeLines(cls, point2Ds) -> Any: ...
    @classmethod
    def StrokePath(cls, path) -> Any: ...
    @overload
    @classmethod
    def ToDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def ToDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ToDIP(cls, d) -> int: ...
    @classmethod
    def Translate(cls, dx, dy) -> Any: ...
    @property
    def NativeContext(self): ...
    @property
    def TextExtent(self): ...
    @property
    def Window(self): ...

class GraphicsFont(GraphicsObject): ...

class GraphicsGradientStop(sip.wrapper):
    Colour: Incomplete
    Position: Incomplete
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetPosition(cls) -> float: ...
    @classmethod
    def SetColour(cls, col) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...

class GraphicsGradientStops(sip.wrapper):
    EndColour: Incomplete
    StartColour: Incomplete
    @overload
    @classmethod
    def Add(cls, stop) -> Any: ...
    @overload
    @classmethod
    def Add(cls, col, pos) -> Any: ...
    @classmethod
    def GetCount(cls) -> size_t: ...
    @classmethod
    def GetEndColour(cls) -> Colour: ...
    @classmethod
    def GetStartColour(cls) -> Colour: ...
    @classmethod
    def Item(cls, n) -> GraphicsGradientStop: ...
    @classmethod
    def SetEndColour(cls, col) -> Any: ...
    @classmethod
    def SetStartColour(cls, col) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    @property
    def Count(self): ...

class GraphicsMatrix(GraphicsObject):
    @classmethod
    def Concat(cls, t) -> Any: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetNativeMatrix(cls) -> void: ...
    @classmethod
    def Invert(cls) -> Any: ...
    @classmethod
    def IsEqual(cls, t) -> bool: ...
    @classmethod
    def IsIdentity(cls) -> bool: ...
    @classmethod
    def Rotate(cls, angle) -> Any: ...
    @classmethod
    def Scale(cls, xScale, yScale) -> Any: ...
    @classmethod
    def Set(cls, a=..., b=..., c=..., d=..., tx=..., ty=...) -> Any: ...
    @classmethod
    def TransformDistance(cls, *args, **kwargs): ...
    @classmethod
    def TransformPoint(cls, *args, **kwargs): ...
    @classmethod
    def Translate(cls, dx, dy) -> Any: ...
    @property
    def NativeMatrix(self): ...

class GraphicsObject(Object):
    @classmethod
    def GetRenderer(cls) -> GraphicsRenderer: ...
    @classmethod
    def IsNull(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Renderer(self): ...

class GraphicsPath(GraphicsObject):
    @overload
    @classmethod
    def AddArc(cls, x, y, r, startAngle, endAngle, clockwise) -> Any: ...
    @overload
    @classmethod
    def AddArc(cls, c, r, startAngle, endAngle, clockwise) -> Any: ...
    @classmethod
    def AddArcToPoint(cls, x1, y1, x2, y2, r) -> Any: ...
    @classmethod
    def AddCircle(cls, x, y, r) -> Any: ...
    @overload
    @classmethod
    def AddCurveToPoint(cls, cx1, cy1, cx2, cy2, x, y) -> Any: ...
    @overload
    @classmethod
    def AddCurveToPoint(cls, c1, c2, e) -> Any: ...
    @classmethod
    def AddEllipse(cls, x, y, w, h) -> Any: ...
    @overload
    @classmethod
    def AddLineToPoint(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def AddLineToPoint(cls, p) -> Any: ...
    @classmethod
    def AddPath(cls, path) -> Any: ...
    @classmethod
    def AddQuadCurveToPoint(cls, cx, cy, x, y) -> Any: ...
    @classmethod
    def AddRectangle(cls, x, y, w, h) -> Any: ...
    @classmethod
    def AddRoundedRectangle(cls, x, y, w, h, radius) -> Any: ...
    @classmethod
    def CloseSubpath(cls) -> Any: ...
    @overload
    @classmethod
    def Contains(cls, c, fillStyle=...) -> bool: ...
    @overload
    @classmethod
    def Contains(cls, x, y, fillStyle=...) -> bool: ...
    @classmethod
    def GetBox(cls) -> Rect2D: ...
    @classmethod
    def GetCurrentPoint(cls) -> Point2D: ...
    @classmethod
    def GetNativePath(cls) -> void: ...
    @overload
    @classmethod
    def MoveToPoint(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def MoveToPoint(cls, p) -> Any: ...
    @classmethod
    def Transform(cls, matrix) -> Any: ...
    @classmethod
    def UnGetNativePath(cls, p) -> Any: ...
    @property
    def Box(self): ...
    @property
    def CurrentPoint(self): ...
    @property
    def NativePath(self): ...

class GraphicsPen(GraphicsObject): ...

class GraphicsPenInfo(sip.wrapper):
    @classmethod
    def Cap(cls, cap) -> GraphicsPenInfo: ...
    @classmethod
    def Colour(cls, col) -> GraphicsPenInfo: ...
    @classmethod
    def GetCap(cls) -> PenCap: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetEndX(cls) -> Double: ...
    @classmethod
    def GetEndY(cls) -> Double: ...
    @classmethod
    def GetGradientType(cls) -> GradientType: ...
    @classmethod
    def GetJoin(cls) -> PenJoin: ...
    @classmethod
    def GetRadius(cls) -> Double: ...
    @classmethod
    def GetStartX(cls) -> Double: ...
    @classmethod
    def GetStartY(cls) -> Double: ...
    @classmethod
    def GetStipple(cls) -> Bitmap: ...
    @classmethod
    def GetStops(cls) -> GraphicsGradientStops: ...
    @classmethod
    def GetStyle(cls) -> PenStyle: ...
    @classmethod
    def GetWidth(cls) -> Double: ...
    @classmethod
    def GetX1(cls) -> Double: ...
    @classmethod
    def GetX2(cls) -> Double: ...
    @classmethod
    def GetY1(cls) -> Double: ...
    @classmethod
    def GetY2(cls) -> Double: ...
    @classmethod
    def IsTransparent(cls) -> bool: ...
    @classmethod
    def Join(cls, join) -> GraphicsPenInfo: ...
    @overload
    @classmethod
    def LinearGradient(cls, x1, y1, x2, y2, c1, c2, matrix=...) -> GraphicsPenInfo: ...
    @overload
    @classmethod
    def LinearGradient(cls, x1, y1, x2, y2, stops, matrix=...) -> GraphicsPenInfo: ...
    @overload
    @classmethod
    def RadialGradient(cls, startX, startY, endX, endY, radius, oColor, cColor, matrix=...) -> GraphicsPenInfo: ...
    @overload
    @classmethod
    def RadialGradient(cls, startX, startY, endX, endY, radius, stops, matrix=...) -> GraphicsPenInfo: ...
    @classmethod
    def Stipple(cls, stipple) -> GraphicsPenInfo: ...
    @classmethod
    def Style(cls, style) -> GraphicsPenInfo: ...
    @classmethod
    def Width(cls, width) -> GraphicsPenInfo: ...
    @property
    def EndX(self): ...
    @property
    def EndY(self): ...
    @property
    def GradientType(self): ...
    @property
    def Radius(self): ...
    @property
    def StartX(self): ...
    @property
    def StartY(self): ...
    @property
    def Stops(self): ...
    @property
    def X1(self): ...
    @property
    def X2(self): ...
    @property
    def Y1(self): ...
    @property
    def Y2(self): ...

class GraphicsRenderer(Object):
    CreateContext: ClassVar[Callable] = ...
    CreateContextFromImage: ClassVar[Callable] = ...
    CreateContextFromUnknownDC: ClassVar[Callable] = ...
    GetType: ClassVar[Callable] = ...
    @classmethod
    def CreateBitmap(cls, bitmap) -> GraphicsBitmap: ...
    @classmethod
    def CreateBitmapFromImage(cls, image) -> GraphicsBitmap: ...
    @classmethod
    def CreateBitmapFromNativeBitmap(cls, bitmap) -> GraphicsBitmap: ...
    @classmethod
    def CreateBrush(cls, brush) -> GraphicsBrush: ...
    @classmethod
    def CreateContextFromNativeContext(cls, context) -> GraphicsContext: ...
    @classmethod
    def CreateContextFromNativeWindow(cls, window) -> GraphicsContext: ...
    @overload
    @classmethod
    def CreateFont(cls, font, col=...) -> GraphicsFont: ...
    @overload
    @classmethod
    def CreateFont(cls, sizeInPixels, facename, flags=..., col=...) -> GraphicsFont: ...
    @classmethod
    def CreateFontAtDPI(cls, font, dpi, col=...) -> GraphicsFont: ...
    @classmethod
    def CreateImageFromBitmap(cls, bmp) -> Image: ...
    @classmethod
    def CreateLinearGradientBrush(cls, x1, y1, x2, y2, stops, matrix=...) -> GraphicsBrush: ...
    @classmethod
    def CreateMatrix(cls, a=..., b=..., c=..., d=..., tx=..., ty=...) -> GraphicsMatrix: ...
    @classmethod
    def CreateMeasuringContext(cls) -> GraphicsContext: ...
    @classmethod
    def CreatePath(cls) -> GraphicsPath: ...
    @classmethod
    def CreatePen(cls, info) -> GraphicsPen: ...
    @classmethod
    def CreateRadialGradientBrush(cls, startX, startY, endX, endY, radius, stops, matrix=...) -> GraphicsBrush: ...
    @classmethod
    def CreateSubBitmap(cls, bitmap, x, y, w, h) -> GraphicsBitmap: ...
    @classmethod
    def GetCairoRenderer(cls) -> GraphicsRenderer: ...
    @classmethod
    def GetDefaultRenderer(cls) -> GraphicsRenderer: ...
    @classmethod
    def GetDirect2DRenderer(cls) -> GraphicsRenderer: ...
    @classmethod
    def GetGDIPlusRenderer(cls) -> GraphicsRenderer: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetVersion(cls, major, minor=..., micro=...) -> Any: ...
    @property
    def Name(self): ...
    @property
    def Type(self): ...

class GridBagSizer(FlexGridSizer):
    CheckForIntersectionPos: ClassVar[Callable] = ...
    EmptyCellSize: Incomplete
    @overload
    @classmethod
    def Add(cls, window, pos, span=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, sizer, pos, span=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, item) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, width, height, pos, span=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @overload
    @classmethod
    def CheckForIntersection(cls, item, excludeItem=...) -> bool: ...
    @overload
    @classmethod
    def CheckForIntersection(cls, pos, span, excludeItem=...) -> bool: ...
    @overload
    @classmethod
    def FindItem(cls, window) -> GBSizerItem: ...
    @overload
    @classmethod
    def FindItem(cls, sizer) -> GBSizerItem: ...
    @classmethod
    def FindItemAtPoint(cls, pt) -> GBSizerItem: ...
    @classmethod
    def FindItemAtPosition(cls, pos) -> GBSizerItem: ...
    @classmethod
    def FindItemWithData(cls, userData) -> GBSizerItem: ...
    @classmethod
    def GetCellSize(cls, row, col) -> Size: ...
    @classmethod
    def GetEmptyCellSize(cls) -> Size: ...
    @overload
    @classmethod
    def GetItemPosition(cls, window) -> GBPosition: ...
    @overload
    @classmethod
    def GetItemPosition(cls, sizer) -> GBPosition: ...
    @overload
    @classmethod
    def GetItemPosition(cls, index) -> GBPosition: ...
    @overload
    @classmethod
    def GetItemSpan(cls, window) -> GBSpan: ...
    @overload
    @classmethod
    def GetItemSpan(cls, sizer) -> GBSpan: ...
    @overload
    @classmethod
    def GetItemSpan(cls, index) -> GBSpan: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetEmptyCellSize(cls, sz) -> Any: ...
    @overload
    @classmethod
    def SetItemPosition(cls, window, pos) -> bool: ...
    @overload
    @classmethod
    def SetItemPosition(cls, sizer, pos) -> bool: ...
    @overload
    @classmethod
    def SetItemPosition(cls, index, pos) -> bool: ...
    @overload
    @classmethod
    def SetItemSpan(cls, window, span) -> bool: ...
    @overload
    @classmethod
    def SetItemSpan(cls, sizer, span) -> bool: ...
    @overload
    @classmethod
    def SetItemSpan(cls, index, span) -> bool: ...

class GridSizer(Sizer):
    CalcRowsCols: ClassVar[Callable] = ...
    Cols: Incomplete
    HGap: Incomplete
    Rows: Incomplete
    VGap: Incomplete
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def GetCols(cls) -> int: ...
    @classmethod
    def GetEffectiveColsCount(cls) -> int: ...
    @classmethod
    def GetEffectiveRowsCount(cls) -> int: ...
    @classmethod
    def GetHGap(cls) -> int: ...
    @classmethod
    def GetRows(cls) -> int: ...
    @classmethod
    def GetVGap(cls) -> int: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetCols(cls, cols) -> Any: ...
    @classmethod
    def SetHGap(cls, gap) -> Any: ...
    @classmethod
    def SetRows(cls, rows) -> Any: ...
    @classmethod
    def SetVGap(cls, gap) -> Any: ...
    @property
    def EffectiveColsCount(self): ...
    @property
    def EffectiveRowsCount(self): ...

class HScrolledWindow(Panel, VarHScrollHelper):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EstimateTotalSize(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalWidth(cls, *args, **kwargs): ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNonOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientation(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientationTargetSize(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def OnGetColumnWidth(cls, *args, **kwargs): ...
    @classmethod
    def OnGetColumnsWidthHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitSize(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitsSizeHint(cls, *args, **kwargs): ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class HTMLDataObject(DataObjectSimple):
    HTML: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    def GetDataHere(self, buf: wx.siplib.voidptr | None) -> bool: ...
    def GetDataSize(self) -> int: ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    @classmethod
    def GetHTML(cls) -> String: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @classmethod
    def SetHTML(cls, html) -> Any: ...
    @property
    def AllFormats(self): ...

class HVScrolledWindow(Panel, VarHVScrollHelper):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EstimateTotalHeight(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalWidth(cls, *args, **kwargs): ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def OnGetColumnWidth(cls, *args, **kwargs): ...
    @classmethod
    def OnGetColumnsWidthHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetRowHeight(cls, *args, **kwargs): ...
    @classmethod
    def OnGetRowsHeightHint(cls, *args, **kwargs): ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class HeaderButtonParams(sip.wrapper): ...

class HeaderColumn(sip.wrapper):
    @classmethod
    def GetAlignment(cls) -> Alignment: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapBundle(cls) -> BitmapBundle: ...
    @classmethod
    def GetFlags(cls) -> int: ...
    @classmethod
    def GetMinWidth(cls) -> int: ...
    @classmethod
    def GetTitle(cls) -> String: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def HasFlag(cls, flag) -> bool: ...
    @classmethod
    def IsHidden(cls) -> bool: ...
    @classmethod
    def IsReorderable(cls) -> bool: ...
    @classmethod
    def IsResizeable(cls) -> bool: ...
    @classmethod
    def IsShown(cls) -> bool: ...
    @classmethod
    def IsSortKey(cls) -> bool: ...
    @classmethod
    def IsSortOrderAscending(cls) -> bool: ...
    @classmethod
    def IsSortable(cls) -> bool: ...
    @property
    def Alignment(self): ...
    @property
    def Bitmap(self): ...
    @property
    def BitmapBundle(self): ...
    @property
    def Flags(self): ...
    @property
    def Hidden(self): ...
    @property
    def MinWidth(self): ...
    @property
    def Reorderable(self): ...
    @property
    def Resizeable(self): ...
    @property
    def Shown(self): ...
    @property
    def SortKey(self): ...
    @property
    def SortOrderAscending(self): ...
    @property
    def Sortable(self): ...
    @property
    def Title(self): ...
    @property
    def Width(self): ...

class HeaderColumnSimple(SettableHeaderColumn):
    Alignment: Incomplete
    Bitmap: Incomplete
    Flags: Incomplete
    MinWidth: Incomplete
    Title: Incomplete
    Width: Incomplete
    @classmethod
    def GetAlignment(cls) -> Alignment: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetBitmapBundle(cls) -> BitmapBundle: ...
    @classmethod
    def GetFlags(cls) -> int: ...
    @classmethod
    def GetMinWidth(cls) -> int: ...
    @classmethod
    def GetTitle(cls) -> String: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def IsSortKey(cls) -> bool: ...
    @classmethod
    def IsSortOrderAscending(cls) -> bool: ...
    @classmethod
    def SetAlignment(cls, align) -> Any: ...
    @classmethod
    def SetBitmap(cls, bitmap) -> Any: ...
    @classmethod
    def SetFlags(cls, flags) -> Any: ...
    @classmethod
    def SetMinWidth(cls, minWidth) -> Any: ...
    @classmethod
    def SetSortOrder(cls, ascending) -> Any: ...
    @classmethod
    def SetTitle(cls, title) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    @property
    def BitmapBundle(self): ...

class HeaderCtrl(Control):
    ColumnCount: Incomplete
    ColumnsOrder: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddColumnsItems(cls, menu, idColumnsBase=...) -> Any: ...
    @classmethod
    def Create(cls, parent, winid=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColumn(cls, idx) -> HeaderColumn: ...
    @classmethod
    def GetColumnAt(cls, pos) -> unsignedint: ...
    @classmethod
    def GetColumnCount(cls) -> unsignedint: ...
    @classmethod
    def GetColumnPos(cls, idx) -> unsignedint: ...
    @overload
    @classmethod
    def GetColumnTitleWidth(cls, col) -> int: ...
    @overload
    @classmethod
    def GetColumnTitleWidth(cls, idx) -> int: ...
    @classmethod
    def GetColumnsOrder(cls) -> ArrayInt: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def MoveColumnInOrderArray(cls, order, idx, pos) -> Any: ...
    @classmethod
    def OnColumnCountChanging(cls, count) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ResetColumnsOrder(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetColumnCount(cls, count) -> Any: ...
    @classmethod
    def SetColumnsOrder(cls, order) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowColumnsMenu(cls, pt, title=...) -> bool: ...
    @classmethod
    def ShowCustomizeDialog(cls) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def UpdateColumn(cls, idx) -> Any: ...
    @classmethod
    def UpdateColumnVisibility(cls, idx, show) -> Any: ...
    @classmethod
    def UpdateColumnWidthToFit(cls, idx, widthTitle) -> bool: ...
    @classmethod
    def UpdateColumnsOrder(cls, order) -> Any: ...
    def Validate(self) -> bool: ...

class HeaderCtrlEvent(NotifyEvent):
    Column: Incomplete
    NewOrder: Incomplete
    Width: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetColumn(cls) -> int: ...
    @classmethod
    def GetNewOrder(cls) -> unsignedint: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def SetColumn(cls, col) -> Any: ...
    @classmethod
    def SetNewOrder(cls, order) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...

class HeaderCtrlSimple(HeaderCtrl):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AppendColumn(cls, col) -> Any: ...
    @classmethod
    def DeleteColumn(cls, idx) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBestFittingWidth(cls, idx) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetColumn(self, idx: int) -> HeaderColumn: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HideColumn(cls, idx) -> Any: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def InsertColumn(cls, col, idx) -> Any: ...
    def OnColumnCountChanging(self, count: int) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def RemoveSortIndicator(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowColumn(cls, idx, show=...) -> Any: ...
    @classmethod
    def ShowSortIndicator(cls, idx, sortOrder=...) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def UpdateColumnVisibility(self, idx: int, show: bool) -> Any: ...
    def UpdateColumnWidthToFit(self, idx: int, widthTitle: int) -> bool: ...
    def UpdateColumnsOrder(self, order: Any) -> Any: ...
    def Validate(self) -> bool: ...

class HeaderSortIconType(int): ...

class HelpControllerBase(Object):
    FrameParameters: Incomplete
    ParentWindow: Incomplete
    @classmethod
    def DisplayBlock(cls, blockNo) -> bool: ...
    @classmethod
    def DisplayContents(cls) -> bool: ...
    @classmethod
    def DisplayContextPopup(cls, contextId) -> bool: ...
    @overload
    @classmethod
    def DisplaySection(cls, section) -> bool: ...
    @overload
    @classmethod
    def DisplaySection(cls, sectionNo) -> bool: ...
    @classmethod
    def DisplayTextPopup(cls, text, pos) -> bool: ...
    @classmethod
    def GetFrameParameters(cls, *args, **kwargs): ...
    @classmethod
    def GetParentWindow(cls) -> Window: ...
    @classmethod
    def Initialize(cls, file) -> bool: ...
    @classmethod
    def KeywordSearch(cls, keyWord, mode=...) -> bool: ...
    @classmethod
    def LoadFile(cls, file=...) -> bool: ...
    @classmethod
    def OnQuit(cls) -> Any: ...
    @classmethod
    def Quit(cls) -> bool: ...
    @classmethod
    def SetFrameParameters(cls, titleFormat, size, pos=..., newFrameEachTime=...) -> Any: ...
    @classmethod
    def SetParentWindow(cls, parentWindow) -> Any: ...
    @classmethod
    def SetViewer(cls, viewer, flags=...) -> Any: ...

class HelpControllerHelpProvider(SimpleHelpProvider):
    HelpController: Incomplete
    @classmethod
    def GetHelpController(cls) -> HelpControllerBase: ...
    @classmethod
    def SetHelpController(cls, hc) -> Any: ...

class HelpEvent(CommandEvent):
    class Origin(int):
        def __reduce__(self): ...
    Origin_HelpButton: ClassVar[HelpEvent.Origin] = ...
    Origin_Keyboard: ClassVar[HelpEvent.Origin] = ...
    Origin_Unknown: ClassVar[HelpEvent.Origin] = ...
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetOrigin(cls) -> HelpEvent.Origin: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def SetOrigin(cls, origin) -> Any: ...
    @classmethod
    def SetPosition(cls, pt) -> Any: ...

class HelpProvider(sip.wrapper):
    @overload
    @classmethod
    def AddHelp(cls, window, text) -> Any: ...
    @overload
    @classmethod
    def AddHelp(cls, id, text) -> Any: ...
    @classmethod
    def Get(cls) -> HelpProvider: ...
    @classmethod
    def GetHelp(cls, window) -> String: ...
    @classmethod
    def RemoveHelp(cls, window) -> Any: ...
    @classmethod
    def Set(cls, helpProvider) -> HelpProvider: ...
    @classmethod
    def ShowHelp(cls, window) -> bool: ...
    @classmethod
    def ShowHelpAtPoint(cls, window, point, origin) -> bool: ...

class HelpSearchMode(int): ...

class HitTest(int): ...

class IFFHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class Icon(GDIObject):
    Depth: Incomplete
    Handle: Incomplete
    Height: Incomplete
    Width: Incomplete
    @classmethod
    def CopyFromBitmap(cls, bmp) -> Any: ...
    @classmethod
    def CreateFromHICON(cls, hicon) -> bool: ...
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetHandle(cls) -> long: ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetLogicalHeight(cls) -> double: ...
    @classmethod
    def GetLogicalSize(cls) -> Size: ...
    @classmethod
    def GetLogicalWidth(cls) -> double: ...
    @classmethod
    def GetScaleFactor(cls) -> double: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def LoadFile(cls, name, type=..., desiredWidth=..., desiredHeight=...) -> bool: ...
    @classmethod
    def SetDepth(cls, depth) -> Any: ...
    @classmethod
    def SetHandle(cls, handle) -> Any: ...
    @classmethod
    def SetHeight(cls, height) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def LogicalHeight(self): ...
    @property
    def LogicalSize(self): ...
    @property
    def LogicalWidth(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def Size(self): ...

class IconBundle(GDIObject):
    FALLBACK_NEAREST_LARGER: ClassVar[int] = ...
    FALLBACK_NONE: ClassVar[int] = ...
    FALLBACK_SYSTEM: ClassVar[int] = ...
    @overload
    @classmethod
    def AddIcon(cls, file, type=...) -> Any: ...
    @overload
    @classmethod
    def AddIcon(cls, stream, type=...) -> Any: ...
    @overload
    @classmethod
    def AddIcon(cls, icon) -> Any: ...
    @overload
    @classmethod
    def GetIcon(cls, size, flags=...) -> Icon: ...
    @overload
    @classmethod
    def GetIcon(cls, size=..., flags=...) -> Icon: ...
    @classmethod
    def GetIconByIndex(cls, n) -> Icon: ...
    @classmethod
    def GetIconCount(cls) -> size_t: ...
    @classmethod
    def GetIconOfExactSize(cls, size) -> Icon: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @property
    def Icon(self): ...
    @property
    def IconCount(self): ...

class IconLocation(sip.wrapper):
    FileName: Incomplete
    Index: Incomplete
    @classmethod
    def GetFileName(cls) -> String: ...
    @classmethod
    def GetIndex(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def SetFileName(cls, filename) -> Any: ...
    @classmethod
    def SetIndex(cls, num) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class IconizeEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def IsIconized(cls) -> bool: ...

class IdManager(sip.wrapper):
    @classmethod
    def ReserveId(cls, count=...) -> WindowID: ...
    @classmethod
    def UnreserveId(cls, id, count=...) -> Any: ...

class IdleEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetMode(cls) -> IdleMode: ...
    @classmethod
    def MoreRequested(cls) -> bool: ...
    @classmethod
    def RequestMore(cls, needMore=...) -> Any: ...
    @classmethod
    def SetMode(cls, mode) -> Any: ...

class IdleMode(int): ...

class Image(Object):
    class HSVValue(sip.wrapper): ...
    class RGBValue(sip.wrapper): ...
    ConvertToBitmap: ClassVar[Callable] = ...
    ConvertToMonoBitmap: ClassVar[Callable] = ...
    Type: Incomplete
    @classmethod
    def AddHandler(cls, handler) -> Any: ...
    @classmethod
    def AdjustChannels(cls, factor_red, factor_green, factor_blue, factor_alpha=...) -> Image: ...
    @classmethod
    def Blur(cls, blurRadius) -> Image: ...
    @classmethod
    def BlurHorizontal(cls, blurRadius) -> Image: ...
    @classmethod
    def BlurVertical(cls, blurRadius) -> Image: ...
    @overload
    @classmethod
    def CanRead(cls, filename) -> bool: ...
    @overload
    @classmethod
    def CanRead(cls, stream) -> bool: ...
    @classmethod
    def ChangeBrightness(cls, factor) -> Any: ...
    @classmethod
    def ChangeHSV(cls, angleH, factorS, factorV) -> Any: ...
    @classmethod
    def ChangeLightness(cls, alpha) -> Image: ...
    @classmethod
    def ChangeSaturation(cls, factor) -> Any: ...
    @classmethod
    def CleanUpHandlers(cls) -> Any: ...
    @classmethod
    def Clear(cls, value=...) -> Any: ...
    @classmethod
    def ClearAlpha(cls) -> Any: ...
    @classmethod
    def ComputeHistogram(cls, histogram) -> unsignedlong: ...
    @overload
    @classmethod
    def ConvertAlphaToMask(cls, threshold=...) -> bool: ...
    @overload
    @classmethod
    def ConvertAlphaToMask(cls, mr, mg, mb, threshold=...) -> bool: ...
    @classmethod
    def ConvertToDisabled(cls, brightness=...) -> Image: ...
    @overload
    @classmethod
    def ConvertToGreyscale(cls, weight_r, weight_g, weight_b) -> Image: ...
    @overload
    @classmethod
    def ConvertToGreyscale(cls) -> Image: ...
    @classmethod
    def ConvertToMono(cls, r, g, b) -> Image: ...
    @classmethod
    def ConvertToRegion(cls, R=..., G=..., B=..., tolerance=...) -> Region: ...
    @classmethod
    def Copy(cls) -> Image: ...
    @overload
    @classmethod
    def Create(cls, width, height, clear=...) -> bool: ...
    @overload
    @classmethod
    def Create(cls, sz, clear=...) -> bool: ...
    @overload
    @classmethod
    def Create(cls, width, height, data) -> bool: ...
    @overload
    @classmethod
    def Create(cls, width, height, data, alpha) -> bool: ...
    @overload
    @classmethod
    def Create(cls, size, data) -> bool: ...
    @overload
    @classmethod
    def Create(cls, size, data, alpha) -> bool: ...
    @classmethod
    def Destroy(cls) -> Any: ...
    @classmethod
    def FindFirstUnusedColour(cls, *args, **kwargs): ...
    @overload
    @classmethod
    def FindHandler(cls, name) -> ImageHandler: ...
    @overload
    @classmethod
    def FindHandler(cls, extension, imageType) -> ImageHandler: ...
    @overload
    @classmethod
    def FindHandler(cls, imageType) -> ImageHandler: ...
    @classmethod
    def FindHandlerMime(cls, mimetype) -> ImageHandler: ...
    @overload
    @classmethod
    def GetAlpha(cls, x, y) -> unsignedchar: ...
    @overload
    @classmethod
    def GetAlpha(cls) -> PyObject: ...
    @classmethod
    def GetAlphaBuffer(cls) -> PyObject: ...
    @classmethod
    def GetBlue(cls, x, y) -> unsignedchar: ...
    @classmethod
    def GetData(cls) -> PyObject: ...
    @classmethod
    def GetDataBuffer(cls) -> PyObject: ...
    @classmethod
    def GetDefaultLoadFlags(cls) -> int: ...
    @classmethod
    def GetGreen(cls, x, y) -> unsignedchar: ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @overload
    @classmethod
    def GetImageCount(cls, filename, type=...) -> int: ...
    @overload
    @classmethod
    def GetImageCount(cls, stream, type=...) -> int: ...
    @classmethod
    def GetImageExtWildcard(cls) -> String: ...
    @classmethod
    def GetLoadFlags(cls) -> int: ...
    @classmethod
    def GetMaskBlue(cls) -> unsignedchar: ...
    @classmethod
    def GetMaskGreen(cls) -> unsignedchar: ...
    @classmethod
    def GetMaskRed(cls) -> unsignedchar: ...
    @classmethod
    def GetOption(cls, name) -> String: ...
    @classmethod
    def GetOptionInt(cls, name) -> int: ...
    @classmethod
    def GetOrFindMaskColour(cls, *args, **kwargs): ...
    @classmethod
    def GetPalette(cls) -> Palette: ...
    @classmethod
    def GetRed(cls, x, y) -> unsignedchar: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetSubImage(cls, rect) -> Image: ...
    @classmethod
    def GetType(cls) -> BitmapType: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def HSVtoRGB(cls, hsv) -> Image.RGBValue: ...
    @classmethod
    def HasAlpha(cls) -> bool: ...
    @classmethod
    def HasMask(cls) -> bool: ...
    @classmethod
    def HasOption(cls, name) -> bool: ...
    @classmethod
    def InitAlpha(cls) -> Any: ...
    @classmethod
    def InitStandardHandlers(cls) -> Any: ...
    @classmethod
    def InsertHandler(cls, handler) -> Any: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsTransparent(cls, x, y, threshold=...) -> bool: ...
    @overload
    @classmethod
    def LoadFile(cls, stream, type=..., index=...) -> bool: ...
    @overload
    @classmethod
    def LoadFile(cls, name, type=..., index=...) -> bool: ...
    @overload
    @classmethod
    def LoadFile(cls, name, mimetype, index=...) -> bool: ...
    @overload
    @classmethod
    def LoadFile(cls, stream, mimetype, index=...) -> bool: ...
    @classmethod
    def Mirror(cls, horizontally=...) -> Image: ...
    @classmethod
    def Paste(cls, image, x, y, alphaBlend=...) -> Any: ...
    @classmethod
    def RGBtoHSV(cls, rgb) -> Image.HSVValue: ...
    @classmethod
    def RemoveHandler(cls, name) -> bool: ...
    @classmethod
    def Replace(cls, r1, g1, b1, r2, g2, b2) -> Any: ...
    @classmethod
    def Rescale(cls, width, height, quality=...) -> Image: ...
    @classmethod
    def Resize(cls, size, pos, red=..., green=..., blue=...) -> Image: ...
    @classmethod
    def Rotate(cls, angle, rotationCentre, interpolating=..., offsetAfterRotation=...) -> Image: ...
    @classmethod
    def Rotate180(cls) -> Image: ...
    @classmethod
    def Rotate90(cls, clockwise=...) -> Image: ...
    @classmethod
    def RotateHue(cls, angle) -> Any: ...
    @overload
    @classmethod
    def SaveFile(cls, stream, mimetype) -> bool: ...
    @overload
    @classmethod
    def SaveFile(cls, name, type) -> bool: ...
    @overload
    @classmethod
    def SaveFile(cls, name, mimetype) -> bool: ...
    @overload
    @classmethod
    def SaveFile(cls, name) -> bool: ...
    @overload
    @classmethod
    def SaveFile(cls, stream, type) -> bool: ...
    @classmethod
    def Scale(cls, width, height, quality=...) -> Image: ...
    @overload
    @classmethod
    def SetAlpha(cls, x, y, alpha) -> Any: ...
    @overload
    @classmethod
    def SetAlpha(cls, alpha) -> Any: ...
    @classmethod
    def SetAlphaBuffer(cls, alpha) -> Any: ...
    @overload
    @classmethod
    def SetData(cls, data) -> Any: ...
    @overload
    @classmethod
    def SetData(cls, data, new_width, new_height) -> Any: ...
    @overload
    @classmethod
    def SetDataBuffer(cls, data) -> Any: ...
    @overload
    @classmethod
    def SetDataBuffer(cls, data, new_width, new_height) -> Any: ...
    @classmethod
    def SetDefaultLoadFlags(cls, flags) -> Any: ...
    @classmethod
    def SetLoadFlags(cls, flags) -> Any: ...
    @classmethod
    def SetMask(cls, hasMask=...) -> Any: ...
    @classmethod
    def SetMaskColour(cls, red, green, blue) -> Any: ...
    @classmethod
    def SetMaskFromImage(cls, mask, mr, mg, mb) -> bool: ...
    @overload
    @classmethod
    def SetOption(cls, name, value) -> Any: ...
    @overload
    @classmethod
    def SetOption(cls, name, value) -> Any: ...
    @classmethod
    def SetPalette(cls, palette) -> Any: ...
    @overload
    @classmethod
    def SetRGB(cls, x, y, r, g, b) -> Any: ...
    @overload
    @classmethod
    def SetRGB(cls, rect, red, green, blue) -> Any: ...
    @classmethod
    def SetType(cls, type) -> Any: ...
    @classmethod
    def Size(cls, size, pos, red=..., green=..., blue=...) -> Image: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Height(self): ...
    @property
    def MaskBlue(self): ...
    @property
    def MaskGreen(self): ...
    @property
    def MaskRed(self): ...
    @property
    def Width(self): ...

class ImageAlphaBlendMode(int): ...

class ImageArray(sip.wrapper):
    def append(self, obj: Image) -> Any: ...
    def index(self, obj: Image) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class ImageDataObject(CustomDataObject):
    Image: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetDataHere(cls, *args, **kwargs): ...
    @classmethod
    def GetDataSize(cls, *args, **kwargs): ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    @classmethod
    def GetImage(cls) -> Image: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @classmethod
    def SetImage(cls, image) -> Any: ...
    @property
    def AllFormats(self): ...

class ImageHandler(Object):
    AltExtensions: Incomplete
    Extension: Incomplete
    MimeType: Incomplete
    Name: Incomplete
    Type: Incomplete
    @overload
    @classmethod
    def CanRead(cls, stream) -> bool: ...
    @overload
    @classmethod
    def CanRead(cls, filename) -> bool: ...
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, stream) -> int: ...
    @classmethod
    def GetAltExtensions(cls) -> ArrayString: ...
    @classmethod
    def GetExtension(cls) -> String: ...
    @classmethod
    def GetImageCount(cls, stream) -> int: ...
    @classmethod
    def GetMimeType(cls) -> String: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetType(cls) -> BitmapType: ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...
    @classmethod
    def SetAltExtensions(cls, extensions) -> Any: ...
    @classmethod
    def SetExtension(cls, extension) -> Any: ...
    @classmethod
    def SetMimeType(cls, mimetype) -> Any: ...
    @classmethod
    def SetName(cls, name) -> Any: ...
    @classmethod
    def SetType(cls, type) -> Any: ...

class ImageHistogram(sip.wrapper):
    @classmethod
    def FindFirstUnusedColour(cls, *args, **kwargs): ...
    @classmethod
    def MakeKey(cls, r, g, b) -> unsignedlong: ...

class ImageList(Object):
    @overload
    @classmethod
    def Add(cls, bitmap, mask=...) -> int: ...
    @overload
    @classmethod
    def Add(cls, bitmap, maskColour) -> int: ...
    @overload
    @classmethod
    def Add(cls, icon) -> int: ...
    @classmethod
    def Create(cls, width, height, mask=..., initialCount=...) -> bool: ...
    @classmethod
    def Destroy(cls) -> Any: ...
    @classmethod
    def Draw(cls, index, dc, x, y, flags=..., solidBackground=...) -> bool: ...
    @classmethod
    def GetBitmap(cls, index) -> Bitmap: ...
    @classmethod
    def GetIcon(cls, index) -> Icon: ...
    @classmethod
    def GetImageCount(cls) -> int: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def Remove(cls, index) -> bool: ...
    @classmethod
    def RemoveAll(cls) -> bool: ...
    @overload
    @classmethod
    def Replace(cls, index, bitmap, mask=...) -> bool: ...
    @overload
    @classmethod
    def Replace(cls, index, icon) -> bool: ...
    @property
    def ImageCount(self): ...
    @property
    def Size(self): ...

class ImagePNGType(int): ...

class ImageResizeQuality(int): ...

class ImageResolution(int): ...

class IndividualLayoutConstraint(Object):
    Done: Incomplete
    Margin: Incomplete
    Relationship: Incomplete
    Value: Incomplete
    @classmethod
    def Above(cls, sibling, margin=...) -> Any: ...
    @classmethod
    def Absolute(cls, val) -> Any: ...
    @classmethod
    def AsIs(cls) -> Any: ...
    @classmethod
    def Below(cls, sibling, margin=...) -> Any: ...
    @classmethod
    def GetDone(cls) -> bool: ...
    @classmethod
    def GetEdge(cls, which, thisWin, other) -> int: ...
    @classmethod
    def GetMargin(cls) -> int: ...
    @classmethod
    def GetMyEdge(cls) -> Edge: ...
    @classmethod
    def GetOtherEdge(cls) -> int: ...
    @classmethod
    def GetOtherWindow(cls) -> Window: ...
    @classmethod
    def GetPercent(cls) -> int: ...
    @classmethod
    def GetRelationship(cls) -> Relationship: ...
    @classmethod
    def GetValue(cls) -> int: ...
    @classmethod
    def LeftOf(cls, sibling, margin=...) -> Any: ...
    @classmethod
    def PercentOf(cls, otherW, wh, per) -> Any: ...
    @classmethod
    def ResetIfWin(cls, otherW) -> bool: ...
    @classmethod
    def RightOf(cls, sibling, margin=...) -> Any: ...
    @classmethod
    def SameAs(cls, otherW, edge, margin=...) -> Any: ...
    @classmethod
    def SatisfyConstraint(cls, constraints, win) -> bool: ...
    @classmethod
    def Set(cls, rel, otherW, otherE, val=..., margin=...) -> Any: ...
    @classmethod
    def SetDone(cls, d) -> Any: ...
    @classmethod
    def SetEdge(cls, which) -> Any: ...
    @classmethod
    def SetMargin(cls, m) -> Any: ...
    @classmethod
    def SetRelationship(cls, r) -> Any: ...
    @classmethod
    def SetValue(cls, v) -> Any: ...
    @classmethod
    def Unconstrained(cls) -> Any: ...
    @property
    def MyEdge(self): ...
    @property
    def OtherEdge(self): ...
    @property
    def OtherWindow(self): ...
    @property
    def Percent(self): ...

class InfoBar(Control):
    EffectDuration: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    @classmethod
    def AddButton(cls, btnid, label=...) -> Any: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, winid=...) -> bool: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetButtonCount(cls) -> size_t: ...
    @classmethod
    def GetButtonId(cls, idx) -> WindowID: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEffectDuration(cls) -> int: ...
    @classmethod
    def GetHideEffect(cls) -> ShowEffect: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetShowEffect(cls) -> ShowEffect: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def HasButtonId(cls, btnid) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def RemoveButton(cls, btnid) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetEffectDuration(cls, duration) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> bool: ...
    @classmethod
    def SetShowHideEffects(cls, showEffect, hideEffect) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowMessage(cls, msg, flags=...) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ButtonCount(self): ...
    @property
    def HideEffect(self): ...
    @property
    def ShowEffect(self): ...

class InitDialogEvent(Event):
    def Clone(self) -> Event | None: ...

class InputStream(StreamBase):
    @classmethod
    def CanRead(cls) -> bool: ...
    @classmethod
    def Eof(cls) -> bool: ...
    @classmethod
    def GetC(cls) -> int: ...
    @classmethod
    def LastRead(cls) -> size_t: ...
    @classmethod
    def Peek(cls) -> char: ...
    @overload
    @classmethod
    def Read(cls, buffer, size) -> InputStream: ...
    @overload
    @classmethod
    def Read(cls, stream_out) -> InputStream: ...
    @classmethod
    def ReadAll(cls, buffer, size) -> bool: ...
    @classmethod
    def SeekI(cls, pos, mode=...) -> FileOffset: ...
    @classmethod
    def TellI(cls) -> FileOffset: ...
    @overload
    @classmethod
    def Ungetch(cls, buffer, size) -> size_t: ...
    @overload
    @classmethod
    def Ungetch(cls, c) -> bool: ...
    @classmethod
    def close(cls) -> Any: ...
    @classmethod
    def eof(cls) -> bool: ...
    @classmethod
    def flush(cls) -> Any: ...
    @overload
    @classmethod
    def read(cls) -> PyObject: ...
    @overload
    @classmethod
    def read(cls, size) -> PyObject: ...
    @overload
    @classmethod
    def readline(cls) -> PyObject: ...
    @overload
    @classmethod
    def readline(cls, size) -> PyObject: ...
    @overload
    @classmethod
    def readlines(cls) -> PyObject: ...
    @overload
    @classmethod
    def readlines(cls, sizehint) -> PyObject: ...
    @classmethod
    def seek(cls, offset, whence=...) -> Any: ...
    @classmethod
    def tell(cls) -> FileOffset: ...
    @property
    def C(self): ...

class IntCArrayHolder(sip.wrapper): ...

class InternetFSHandler(FileSystemHandler):
    def CanOpen(self, location: Any) -> bool: ...
    def FindFirst(self, spec: Any, flags: int = ...) -> Any: ...
    def FindNext(self) -> Any: ...
    @classmethod
    def GetAnchor(cls, *args, **kwargs): ...
    @classmethod
    def GetLeftLocation(cls, *args, **kwargs): ...
    @classmethod
    def GetProtocol(cls, *args, **kwargs): ...
    @classmethod
    def GetRightLocation(cls, *args, **kwargs): ...
    def OpenFile(self, fs: FileSystem, location: Any) -> FSFile | None: ...

class InterpolationQuality(int): ...

class ItemAttr(sip.wrapper):
    BackgroundColour: Incomplete
    Font: Incomplete
    TextColour: Incomplete
    @classmethod
    def GetBackgroundColour(cls) -> Colour: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetTextColour(cls) -> Colour: ...
    @classmethod
    def HasBackgroundColour(cls) -> bool: ...
    @classmethod
    def HasColours(cls) -> bool: ...
    @classmethod
    def HasFont(cls) -> bool: ...
    @classmethod
    def HasTextColour(cls) -> bool: ...
    @classmethod
    def IsDefault(cls) -> bool: ...
    @classmethod
    def SetBackgroundColour(cls, colour) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> Any: ...
    @classmethod
    def SetTextColour(cls, colour) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ItemContainer(ItemContainerImmutable):
    AppendItems: ClassVar[Callable] = ...
    GetClientObject: ClassVar[Callable] = ...
    GetItems: ClassVar[Callable] = ...
    SetClientObject: ClassVar[Callable] = ...
    SetItems: ClassVar[Callable] = ...
    Items: Incomplete
    @overload
    @classmethod
    def Append(cls, item) -> int: ...
    @overload
    @classmethod
    def Append(cls, item, clientData) -> int: ...
    @overload
    @classmethod
    def Append(cls, items) -> int: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def Delete(cls, n) -> Any: ...
    @classmethod
    def DetachClientObject(cls, n) -> ClientData: ...
    @classmethod
    def GetClientData(cls, n) -> ClientData: ...
    @classmethod
    def HasClientData(cls) -> bool: ...
    @classmethod
    def HasClientObjectData(cls) -> bool: ...
    @classmethod
    def HasClientUntypedData(cls) -> bool: ...
    @overload
    @classmethod
    def Insert(cls, item, pos) -> int: ...
    @overload
    @classmethod
    def Insert(cls, item, pos, clientData) -> int: ...
    @overload
    @classmethod
    def Insert(cls, items, pos) -> int: ...
    @classmethod
    def Set(cls, items) -> Any: ...
    @classmethod
    def SetClientData(cls, n, data) -> Any: ...

class ItemContainerImmutable(sip.wrapper):
    Selection: Incomplete
    StringSelection: Incomplete
    @classmethod
    def FindString(cls, string, caseSensitive=...) -> int: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetString(cls, n) -> String: ...
    @classmethod
    def GetStringSelection(cls) -> String: ...
    @classmethod
    def GetStrings(cls) -> ArrayString: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def Select(cls, n) -> Any: ...
    @classmethod
    def SetSelection(cls, n) -> Any: ...
    @classmethod
    def SetString(cls, n, string) -> Any: ...
    @classmethod
    def SetStringSelection(cls, string) -> bool: ...
    @property
    def Count(self): ...
    @property
    def Strings(self): ...

class ItemKind(int): ...

class JPEGHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def GetLibraryVersionInfo(cls) -> VersionInfo: ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class JoystickEvent(Event):
    @classmethod
    def ButtonDown(cls, button=...) -> bool: ...
    @classmethod
    def ButtonIsDown(cls, button=...) -> bool: ...
    @classmethod
    def ButtonUp(cls, button=...) -> bool: ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetButtonChange(cls) -> int: ...
    @classmethod
    def GetButtonOrdinal(cls) -> int: ...
    @classmethod
    def GetButtonState(cls) -> int: ...
    @classmethod
    def GetJoystick(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetZPosition(cls) -> int: ...
    @classmethod
    def IsButton(cls) -> bool: ...
    @classmethod
    def IsMove(cls) -> bool: ...
    @classmethod
    def IsZMove(cls) -> bool: ...
    @property
    def ButtonChange(self): ...
    @property
    def ButtonOrdinal(self): ...
    @property
    def ButtonState(self): ...
    @property
    def Joystick(self): ...
    @property
    def Position(self): ...
    @property
    def ZPosition(self): ...

class KeyCategoryFlags(int): ...

class KeyCode(int): ...

class KeyEvent(Event, KeyboardState):
    KeyCode: Incomplete
    RawKeyCode: Incomplete
    RawKeyFlags: Incomplete
    UnicodeKey: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def DoAllowNextEvent(cls) -> Any: ...
    @classmethod
    def GetKeyCode(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetRawKeyCode(cls) -> Uint32: ...
    @classmethod
    def GetRawKeyFlags(cls) -> Uint32: ...
    @classmethod
    def GetUnicodeKey(cls) -> int: ...
    @classmethod
    def GetX(cls) -> Coord: ...
    @classmethod
    def GetY(cls) -> Coord: ...
    @classmethod
    def IsAutoRepeat(cls) -> bool: ...
    @classmethod
    def IsKeyInCategory(cls, category) -> bool: ...
    @classmethod
    def IsNextEventAllowed(cls) -> bool: ...
    @classmethod
    def SetKeyCode(cls, keyCode) -> Any: ...
    @classmethod
    def SetRawKeyCode(cls, rawKeyCode) -> Any: ...
    @classmethod
    def SetRawKeyFlags(cls, rawFlags) -> Any: ...
    @classmethod
    def SetUnicodeKey(cls, uniChar) -> Any: ...
    @property
    def Position(self): ...
    @property
    def X(self): ...
    @property
    def Y(self): ...

class KeyModifier(int): ...

class KeyboardState(sip.wrapper):
    altDown: Incomplete
    controlDown: Incomplete
    m_altDown: Incomplete
    m_controlDown: Incomplete
    m_metaDown: Incomplete
    m_shiftDown: Incomplete
    metaDown: Incomplete
    rawControlDown: Incomplete
    shiftDown: Incomplete
    @classmethod
    def AltDown(cls) -> bool: ...
    @classmethod
    def CmdDown(cls) -> bool: ...
    @classmethod
    def ControlDown(cls) -> bool: ...
    @classmethod
    def GetModifiers(cls) -> int: ...
    @classmethod
    def HasAnyModifiers(cls) -> bool: ...
    @classmethod
    def HasModifiers(cls) -> bool: ...
    @classmethod
    def MetaDown(cls) -> bool: ...
    @classmethod
    def RawControlDown(cls) -> bool: ...
    @classmethod
    def SetAltDown(cls, down) -> Any: ...
    @classmethod
    def SetControlDown(cls, down) -> Any: ...
    @classmethod
    def SetMetaDown(cls, down) -> Any: ...
    @classmethod
    def SetRawControlDown(cls, down) -> Any: ...
    @classmethod
    def SetShiftDown(cls, down) -> Any: ...
    @classmethod
    def ShiftDown(cls) -> bool: ...
    @property
    def cmdDown(self): ...

class KillError(int): ...

class KillFlags(int): ...

class Language(int): ...

class LanguageInfo(sip.wrapper):
    @classmethod
    def GetCanonicalWithRegion(cls) -> String: ...
    @classmethod
    def GetLocaleName(cls) -> String: ...
    @property
    def CanonicalWithRegion(self): ...
    @property
    def LocaleName(self): ...

class LayoutConstraints(Object):
    @classmethod
    def AreSatisfied(cls) -> bool: ...
    @classmethod
    def SatisfyConstraints(cls, win, noChanges) -> bool: ...

class LayoutDirection(int): ...

class LinuxDistributionInfo(sip.wrapper):
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ListBox(Control, ItemContainer):
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., choices=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def Deselect(cls, n) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EnsureVisible(cls, n) -> Any: ...
    @classmethod
    def FindString(cls, string, caseSensitive=...) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    @classmethod
    def GetCountPerPage(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetSelections(cls) -> ArrayInt: ...
    @classmethod
    def GetString(cls, n) -> String: ...
    @classmethod
    def GetTopItem(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @overload
    @classmethod
    def HitTest(cls, point) -> int: ...
    @overload
    @classmethod
    def HitTest(cls, x, y) -> int: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def InsertItems(cls, items, pos) -> Any: ...
    @classmethod
    def IsSelected(cls, n) -> bool: ...
    @classmethod
    def IsSorted(cls) -> bool: ...
    @classmethod
    def MSWSetTabStops(cls, tabStops) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @overload
    @classmethod
    def SetFirstItem(cls, n) -> Any: ...
    @overload
    @classmethod
    def SetFirstItem(cls, string) -> Any: ...
    @classmethod
    def SetItemBackgroundColour(cls, item, c) -> Any: ...
    @classmethod
    def SetItemFont(cls, item, f) -> Any: ...
    @classmethod
    def SetItemForegroundColour(cls, item, c) -> Any: ...
    @classmethod
    def SetSelection(cls, n) -> Any: ...
    @classmethod
    def SetString(cls, n, string) -> Any: ...
    @overload
    @classmethod
    def SetStringSelection(cls, s, select) -> bool: ...
    @overload
    @classmethod
    def SetStringSelection(cls, s) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Count(self): ...
    @property
    def CountPerPage(self): ...
    @property
    def Selections(self): ...
    @property
    def TopItem(self): ...

class ListColumnFormat(int): ...

class ListCtrl(Control):
    Append: ClassVar[Callable] = ...
    ClearColumnImage: ClassVar[Callable] = ...
    FindItemAtPos: ClassVar[Callable] = ...
    FindItemData: ClassVar[Callable] = ...
    Focus: ClassVar[Callable] = ...
    GetFirstSelected: ClassVar[Callable] = ...
    GetFocusedItem: ClassVar[Callable] = ...
    GetNextSelected: ClassVar[Callable] = ...
    InsertImageItem: ClassVar[Callable] = ...
    InsertImageStringItem: ClassVar[Callable] = ...
    InsertStringItem: ClassVar[Callable] = ...
    IsSelected: ClassVar[Callable] = ...
    Select: ClassVar[Callable] = ...
    SetColumnImage: ClassVar[Callable] = ...
    SetStringItem: ClassVar[Callable] = ...
    AlternateRowColour: Incomplete
    Column: Incomplete
    ColumnsOrder: Incomplete
    Item: Incomplete
    ItemCount: Incomplete
    ItemPosition: Incomplete
    TextColour: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AppendColumn(cls, heading, format=..., width=...) -> long: ...
    @classmethod
    def Arrange(cls, flag=...) -> bool: ...
    @classmethod
    def AssignImageList(cls, imageList, which) -> Any: ...
    @classmethod
    def CheckItem(cls, item, check=...) -> Any: ...
    @classmethod
    def ClearAll(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def DeleteAllColumns(cls) -> bool: ...
    @classmethod
    def DeleteAllItems(cls) -> bool: ...
    @classmethod
    def DeleteColumn(cls, col) -> bool: ...
    @classmethod
    def DeleteItem(cls, item) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EditLabel(cls, item) -> TextCtrl: ...
    @classmethod
    def EnableAlternateRowColours(cls, enable=...) -> Any: ...
    @classmethod
    def EnableBellOnNoMatch(cls, on=...) -> Any: ...
    @classmethod
    def EnableCheckBoxes(cls, enable=...) -> bool: ...
    @classmethod
    def EnableSystemTheme(cls, enable=...) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EnsureVisible(cls, item) -> bool: ...
    @classmethod
    def ExtendRulesAndAlternateColour(cls, extend=...) -> Any: ...
    @overload
    @classmethod
    def FindItem(cls, start, str, partial=...) -> long: ...
    @overload
    @classmethod
    def FindItem(cls, start, data) -> long: ...
    @overload
    @classmethod
    def FindItem(cls, start, pt, direction) -> long: ...
    @classmethod
    def GetAlternateRowColour(cls) -> Colour: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColumn(cls, col) -> ListItem: ...
    @classmethod
    def GetColumnCount(cls) -> int: ...
    @classmethod
    def GetColumnIndexFromOrder(cls, pos) -> int: ...
    @classmethod
    def GetColumnOrder(cls, col) -> int: ...
    @classmethod
    def GetColumnWidth(cls, col) -> int: ...
    @classmethod
    def GetColumnsOrder(cls) -> ArrayInt: ...
    @classmethod
    def GetCountPerPage(cls) -> int: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEditControl(cls) -> TextCtrl: ...
    @classmethod
    def GetImageList(cls, which) -> ImageList: ...
    @classmethod
    def GetItem(cls, itemIdx, col=...) -> ListItem: ...
    @classmethod
    def GetItemBackgroundColour(cls, item) -> Colour: ...
    @classmethod
    def GetItemCount(cls) -> int: ...
    @classmethod
    def GetItemData(cls, item) -> long: ...
    @classmethod
    def GetItemFont(cls, item) -> Font: ...
    @classmethod
    def GetItemPosition(cls, item) -> Point: ...
    @classmethod
    def GetItemRect(cls, item, code=...) -> Rect: ...
    @classmethod
    def GetItemSpacing(cls) -> Size: ...
    @classmethod
    def GetItemState(cls, item, stateMask) -> int: ...
    @classmethod
    def GetItemText(cls, item, col=...) -> String: ...
    @classmethod
    def GetItemTextColour(cls, item) -> Colour: ...
    @classmethod
    def GetMainWindow(cls) -> Window: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNextItem(cls, item, geometry=..., state=...) -> long: ...
    @classmethod
    def GetSelectedItemCount(cls) -> int: ...
    @classmethod
    def GetSortIndicator(cls) -> int: ...
    @classmethod
    def GetSubItemRect(cls, item, subItem, rect, code=...) -> bool: ...
    @classmethod
    def GetTextColour(cls) -> Colour: ...
    @classmethod
    def GetTopItem(cls) -> long: ...
    @classmethod
    def GetUpdatedAscendingSortIndicator(cls, col) -> bool: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetViewRect(cls) -> Rect: ...
    @classmethod
    def HasCheckBoxes(cls) -> bool: ...
    @classmethod
    def HasColumnOrderSupport(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    @classmethod
    def HitTestSubItem(cls, *args, **kwargs): ...
    @classmethod
    def InReportView(cls) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @overload
    @classmethod
    def InsertColumn(cls, col, info) -> long: ...
    @overload
    @classmethod
    def InsertColumn(cls, col, heading, format=..., width=...) -> long: ...
    @overload
    @classmethod
    def InsertItem(cls, info) -> long: ...
    @overload
    @classmethod
    def InsertItem(cls, index, label) -> long: ...
    @overload
    @classmethod
    def InsertItem(cls, index, imageIndex) -> long: ...
    @overload
    @classmethod
    def InsertItem(cls, index, label, imageIndex) -> long: ...
    @classmethod
    def IsAscendingSortIndicator(cls) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def IsItemChecked(cls, item) -> bool: ...
    @classmethod
    def IsVirtual(cls) -> bool: ...
    @classmethod
    def IsVisible(cls, item) -> bool: ...
    @classmethod
    def OnGetItemAttr(cls, item) -> ItemAttr: ...
    @classmethod
    def OnGetItemColumnImage(cls, item, column) -> int: ...
    @classmethod
    def OnGetItemImage(cls, item) -> int: ...
    @classmethod
    def OnGetItemIsChecked(cls, item) -> bool: ...
    @classmethod
    def OnGetItemText(cls, item, column) -> String: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def RefreshItem(cls, item) -> Any: ...
    @classmethod
    def RefreshItems(cls, itemFrom, itemTo) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def RemoveSortIndicator(cls) -> Any: ...
    @classmethod
    def ScrollList(cls, dx, dy) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetAlternateRowColour(cls, colour) -> Any: ...
    @classmethod
    def SetBackgroundColour(cls, col) -> bool: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetColumn(cls, col, item) -> bool: ...
    @classmethod
    def SetColumnWidth(cls, col, width) -> bool: ...
    @classmethod
    def SetColumnsOrder(cls, orders) -> bool: ...
    @classmethod
    def SetHeaderAttr(cls, attr) -> bool: ...
    @classmethod
    def SetImageList(cls, imageList, which) -> Any: ...
    @overload
    @classmethod
    def SetItem(cls, info) -> bool: ...
    @overload
    @classmethod
    def SetItem(cls, index, column, label, imageId=...) -> bool: ...
    @classmethod
    def SetItemBackgroundColour(cls, item, col) -> Any: ...
    @classmethod
    def SetItemColumnImage(cls, item, column, image) -> bool: ...
    @classmethod
    def SetItemCount(cls, count) -> Any: ...
    @classmethod
    def SetItemData(cls, item, data) -> bool: ...
    @classmethod
    def SetItemFont(cls, item, font) -> Any: ...
    @classmethod
    def SetItemImage(cls, item, image, selImage=...) -> bool: ...
    @classmethod
    def SetItemPosition(cls, item, pos) -> bool: ...
    @classmethod
    def SetItemState(cls, item, state, stateMask) -> bool: ...
    @classmethod
    def SetItemText(cls, item, text) -> Any: ...
    @classmethod
    def SetItemTextColour(cls, item, col) -> Any: ...
    @classmethod
    def SetNormalImages(cls, images) -> Any: ...
    @classmethod
    def SetSingleStyle(cls, style, add=...) -> Any: ...
    @classmethod
    def SetSmallImages(cls, images) -> Any: ...
    @classmethod
    def SetTextColour(cls, col) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetWindowStyleFlag(cls, style) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowSortIndicator(cls, col, ascending=...) -> Any: ...
    @classmethod
    def SortItems(cls, fnSortCallBack) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ColumnCount(self): ...
    @property
    def CountPerPage(self): ...
    @property
    def EditControl(self): ...
    @property
    def FocusedItem(self): ...
    @property
    def ItemRect(self): ...
    @property
    def ItemSpacing(self): ...
    @property
    def MainWindow(self): ...
    @property
    def SelectedItemCount(self): ...
    @property
    def SortIndicator(self): ...
    @property
    def TopItem(self): ...
    @property
    def ViewRect(self): ...

class ListEvent(NotifyEvent):
    CacheFrom: Incomplete
    CacheTo: Incomplete
    Column: Incomplete
    Index: Incomplete
    Item: Incomplete
    KeyCode: Incomplete
    Point: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetCacheFrom(cls) -> long: ...
    @classmethod
    def GetCacheTo(cls) -> long: ...
    @classmethod
    def GetColumn(cls) -> int: ...
    @classmethod
    def GetData(cls) -> UIntPtr: ...
    @classmethod
    def GetImage(cls) -> int: ...
    @classmethod
    def GetIndex(cls) -> long: ...
    @classmethod
    def GetItem(cls) -> ListItem: ...
    @classmethod
    def GetKeyCode(cls) -> int: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    @classmethod
    def GetMask(cls) -> long: ...
    @classmethod
    def GetPoint(cls) -> Point: ...
    @classmethod
    def GetText(cls) -> String: ...
    @classmethod
    def IsEditCancelled(cls) -> bool: ...
    @classmethod
    def SetCacheFrom(cls, cacheFrom) -> Any: ...
    @classmethod
    def SetCacheTo(cls, cacheTo) -> Any: ...
    @classmethod
    def SetColumn(cls, col) -> Any: ...
    @classmethod
    def SetIndex(cls, index) -> Any: ...
    @classmethod
    def SetItem(cls, item) -> Any: ...
    @classmethod
    def SetKeyCode(cls, code) -> Any: ...
    @classmethod
    def SetPoint(cls, point) -> Any: ...
    @property
    def Data(self): ...
    @property
    def Image(self): ...
    @property
    def Label(self): ...
    @property
    def Mask(self): ...
    @property
    def Text(self): ...

class ListItem(Object):
    Align: Incomplete
    BackgroundColour: Incomplete
    Column: Incomplete
    Data: Incomplete
    Font: Incomplete
    Id: Incomplete
    Image: Incomplete
    Mask: Incomplete
    State: Incomplete
    Text: Incomplete
    TextColour: Incomplete
    Width: Incomplete
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def GetAlign(cls) -> ListColumnFormat: ...
    @classmethod
    def GetBackgroundColour(cls) -> Colour: ...
    @classmethod
    def GetColumn(cls) -> int: ...
    @classmethod
    def GetData(cls) -> long: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetId(cls) -> long: ...
    @classmethod
    def GetImage(cls) -> int: ...
    @classmethod
    def GetMask(cls) -> long: ...
    @classmethod
    def GetState(cls) -> long: ...
    @classmethod
    def GetText(cls) -> String: ...
    @classmethod
    def GetTextColour(cls) -> Colour: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def SetAlign(cls, align) -> Any: ...
    @classmethod
    def SetBackgroundColour(cls, colBack) -> Any: ...
    @classmethod
    def SetColumn(cls, col) -> Any: ...
    @classmethod
    def SetData(cls, data) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> Any: ...
    @classmethod
    def SetId(cls, id) -> Any: ...
    @classmethod
    def SetImage(cls, image) -> Any: ...
    @classmethod
    def SetMask(cls, mask) -> Any: ...
    @classmethod
    def SetState(cls, state) -> Any: ...
    @classmethod
    def SetStateMask(cls, stateMask) -> Any: ...
    @classmethod
    def SetText(cls, text) -> Any: ...
    @classmethod
    def SetTextColour(cls, colText) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...

class ListView(ListCtrl):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ClearColumnImage(cls, col) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def Focus(cls, index) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFirstSelected(cls) -> long: ...
    @classmethod
    def GetFocusedItem(cls) -> long: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNextSelected(cls, item) -> long: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsSelected(cls, index) -> bool: ...
    @classmethod
    def OnGetItemAttr(cls, *args, **kwargs): ...
    @classmethod
    def OnGetItemColumnImage(cls, *args, **kwargs): ...
    @classmethod
    def OnGetItemImage(cls, *args, **kwargs): ...
    @classmethod
    def OnGetItemIsChecked(cls, *args, **kwargs): ...
    @classmethod
    def OnGetItemText(cls, *args, **kwargs): ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Select(cls, n, on=...) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetColumnImage(cls, col, image) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def FirstSelected(self): ...
    @property
    def FocusedItem(self): ...

class Listbook(BookCtrlBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def ChangeSelection(self, page: int) -> int: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @overload
    @classmethod
    def GetListView(cls) -> ListView: ...
    @overload
    @classmethod
    def GetListView(cls) -> ListView: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetPageImage(self, nPage: int) -> int: ...
    def GetPageText(self, nPage: int) -> Any: ...
    def GetSelection(self) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def InsertPage(self, index: int, page: Window | None, text: Any, select: bool = ..., imageId: int = ...) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetPageImage(self, page: int, image: int) -> bool: ...
    def SetPageText(self, page: int, text: Any) -> bool: ...
    def SetSelection(self, page: int) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ListView(self): ...

class Locale(sip.wrapper):
    @overload
    @classmethod
    def AddCatalog(cls, domain) -> bool: ...
    @overload
    @classmethod
    def AddCatalog(cls, domain, msgIdLanguage) -> bool: ...
    @overload
    @classmethod
    def AddCatalog(cls, domain, msgIdLanguage, msgIdCharset) -> bool: ...
    @overload
    @classmethod
    def AddCatalogLookupPathPrefix(cls, prefix) -> Any: ...
    @overload
    @classmethod
    def AddCatalogLookupPathPrefix(cls) -> Any: ...
    @classmethod
    def AddLanguage(cls, info) -> Any: ...
    @classmethod
    def FindLanguageInfo(cls, locale) -> LanguageInfo: ...
    @classmethod
    def GetCanonicalName(cls) -> String: ...
    @overload
    @classmethod
    def GetHeaderValue(cls, header, domain=...) -> String: ...
    @overload
    @classmethod
    def GetHeaderValue(cls) -> Any: ...
    @classmethod
    def GetInfo(cls, index, cat=...) -> String: ...
    @classmethod
    def GetLanguage(cls) -> int: ...
    @classmethod
    def GetLanguageCanonicalName(cls, lang) -> String: ...
    @classmethod
    def GetLanguageInfo(cls, lang) -> LanguageInfo: ...
    @classmethod
    def GetLanguageName(cls, lang) -> String: ...
    @classmethod
    def GetLocale(cls) -> String: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetOSInfo(cls, index, cat=...) -> String: ...
    @overload
    @classmethod
    def GetString(cls, origString, domain=...) -> String: ...
    @overload
    @classmethod
    def GetString(cls, origString, origString2, n, domain=...) -> String: ...
    @classmethod
    def GetSysName(cls) -> String: ...
    @classmethod
    def GetSystemEncoding(cls) -> FontEncoding: ...
    @classmethod
    def GetSystemEncodingName(cls) -> String: ...
    @classmethod
    def GetSystemLanguage(cls) -> int: ...
    @overload
    @classmethod
    def Init(cls, language=..., flags=...) -> bool: ...
    @overload
    @classmethod
    def Init(cls, name, shortName=..., locale=..., bLoadDefault=...) -> bool: ...
    @classmethod
    def IsAvailable(cls, lang) -> bool: ...
    @overload
    @classmethod
    def IsLoaded(cls, domain) -> bool: ...
    @overload
    @classmethod
    def IsLoaded(cls) -> Any: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls, *args, **kwargs): ...
    @property
    def CanonicalName(self): ...
    @property
    def Language(self): ...
    @property
    def Locale(self): ...
    @property
    def Name(self): ...
    @property
    def SysName(self): ...

class LocaleCategory(int): ...

class LocaleForm(int): ...

class LocaleInfo(int): ...

class LocaleInitFlags(int): ...

class LocaleName(int): ...

class LocaleTagType(int): ...

class Log(sip.wrapper):
    @classmethod
    def AddTraceMask(cls, mask) -> Any: ...
    @classmethod
    def ClearTraceMasks(cls) -> Any: ...
    @classmethod
    def DisableTimestamp(cls) -> Any: ...
    @classmethod
    def DoLogRecord(cls, level, msg, info) -> Any: ...
    @classmethod
    def DoLogText(cls, msg) -> Any: ...
    @classmethod
    def DoLogTextAtLevel(cls, level, msg) -> Any: ...
    @classmethod
    def DontCreateOnDemand(cls) -> Any: ...
    @classmethod
    def EnableLogging(cls, enable=...) -> bool: ...
    @classmethod
    def Flush(cls) -> Any: ...
    @classmethod
    def FlushActive(cls) -> Any: ...
    @classmethod
    def GetActiveTarget(cls) -> Log: ...
    @classmethod
    def GetLogLevel(cls) -> LogLevel: ...
    @classmethod
    def GetRepetitionCounting(cls) -> bool: ...
    @classmethod
    def GetTimestamp(cls) -> String: ...
    @classmethod
    def GetTraceMasks(cls) -> ArrayString: ...
    @classmethod
    def GetVerbose(cls) -> bool: ...
    @classmethod
    def IsAllowedTraceMask(cls, mask) -> bool: ...
    @classmethod
    def IsEnabled(cls) -> bool: ...
    @classmethod
    def IsLevelEnabled(cls, level, component) -> bool: ...
    @classmethod
    def LogRecord(cls, level, msg, info) -> Any: ...
    @classmethod
    def RemoveTraceMask(cls, mask) -> Any: ...
    @classmethod
    def Resume(cls) -> Any: ...
    @classmethod
    def SetActiveTarget(cls, logtarget) -> Log: ...
    @classmethod
    def SetComponentLevel(cls, component, level) -> Any: ...
    @classmethod
    def SetFormatter(cls, formatter) -> LogFormatter: ...
    @classmethod
    def SetLogLevel(cls, logLevel) -> Any: ...
    @classmethod
    def SetRepetitionCounting(cls, repetCounting=...) -> Any: ...
    @classmethod
    def SetThreadActiveTarget(cls, logger) -> Log: ...
    @classmethod
    def SetTimestamp(cls, format) -> Any: ...
    @classmethod
    def SetVerbose(cls, verbose=...) -> Any: ...
    @classmethod
    def Suspend(cls) -> Any: ...

class LogBuffer(Log):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...
    @classmethod
    def Flush(cls) -> Any: ...
    @classmethod
    def GetBuffer(cls) -> String: ...
    @property
    def Buffer(self): ...

class LogChain(Log):
    @classmethod
    def DetachOldLog(cls) -> Any: ...
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...
    @classmethod
    def GetOldLog(cls) -> Log: ...
    @classmethod
    def IsPassingMessages(cls) -> bool: ...
    @classmethod
    def PassMessages(cls, passMessages) -> Any: ...
    @classmethod
    def SetLog(cls, logger) -> Any: ...
    @property
    def OldLog(self): ...

class LogFormatter(sip.wrapper):
    @classmethod
    def Format(cls, level, msg, info) -> String: ...
    @classmethod
    def FormatTime(cls, time) -> String: ...

class LogGui(Log):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...
    @classmethod
    def Flush(cls) -> Any: ...

class LogInterposer(LogChain):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...

class LogInterposerTemp(LogChain):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...

class LogLevelValues(int): ...

class LogNull(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class LogRecordInfo(sip.wrapper): ...

class LogStderr(Log):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...

class LogTextCtrl(Log):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...

class LogWindow(LogInterposer):
    @classmethod
    def DoLogRecord(cls, *args, **kwargs): ...
    @classmethod
    def DoLogText(cls, *args, **kwargs): ...
    @classmethod
    def DoLogTextAtLevel(cls, *args, **kwargs): ...
    @classmethod
    def GetFrame(cls) -> Frame: ...
    @classmethod
    def OnFrameClose(cls, frame) -> bool: ...
    @classmethod
    def OnFrameDelete(cls, frame) -> Any: ...
    @classmethod
    def Show(cls, show=...) -> Any: ...
    @property
    def Frame(self): ...

class LongPressEvent(GestureEvent):
    def Clone(self) -> Event | None: ...

class MDIChildFrame(MDIChildFrameBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    @classmethod
    def Activate(cls) -> Any: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetMDIParent(cls) -> MDIParentFrame: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsAlwaysMaximized(cls) -> bool: ...
    @classmethod
    def Maximize(cls, maximize=...) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Restore(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def MDIParent(self): ...

class MDIChildFrameBase(Frame):
    def Activate(self) -> Any: ...
    @classmethod
    def DoEnable(cls, *args, **kwargs): ...
    @classmethod
    def DoFreeze(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoMoveWindow(cls, *args, **kwargs): ...
    @classmethod
    def DoSetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSizeHints(cls, *args, **kwargs): ...
    @classmethod
    def DoSetWindowVariant(cls, *args, **kwargs): ...
    @classmethod
    def DoThaw(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorder(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorderForControl(cls, *args, **kwargs): ...
    def GetMDIParent(self) -> MDIParentFrame | None: ...
    @classmethod
    def HasTransparentBackground(cls, *args, **kwargs): ...
    def IsTopLevel(self) -> bool: ...
    @classmethod
    def ProcessEvent(cls, *args, **kwargs): ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class MDIClientWindow(Window):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CreateClient(cls, parent, style=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class MDIParentFrame(Frame):
    WindowMenu: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    @classmethod
    def ActivateNext(cls) -> Any: ...
    @classmethod
    def ActivatePrevious(cls) -> Any: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ArrangeIcons(cls) -> Any: ...
    @classmethod
    def Cascade(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetActiveChild(cls) -> MDIChildFrame: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetClientWindow(cls) -> MDIClientWindow: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetWindowMenu(cls) -> Menu: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsTDI(cls) -> bool: ...
    @classmethod
    def OnCreateClient(cls) -> MDIClientWindow: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetWindowMenu(cls, menu) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def Tile(cls, orient=...) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ActiveChild(self): ...
    @property
    def ClientWindow(self): ...

class MappingMode(int): ...

class Mask(Object):
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @property
    def Bitmap(self): ...

class Matrix2D(sip.wrapper): ...

class MaximizeEvent(Event):
    def Clone(self) -> Event | None: ...

class MemoryDC(DC):
    @classmethod
    def GetSelectedBitmap(cls) -> Bitmap: ...
    @classmethod
    def SelectObject(cls, bitmap) -> Any: ...
    @classmethod
    def SelectObjectAsSource(cls, bitmap) -> Any: ...
    @property
    def SelectedBitmap(self): ...

class MemoryFSHandler(FileSystemHandler):
    @overload
    @classmethod
    def AddFile(cls, filename, image, type) -> Any: ...
    @overload
    @classmethod
    def AddFile(cls, filename, bitmap, type) -> Any: ...
    @overload
    @classmethod
    def AddFile(cls, filename, textdata) -> Any: ...
    @overload
    @classmethod
    def AddFile(cls, filename, binarydata) -> Any: ...
    @overload
    @classmethod
    def AddFileWithMimeType(cls, filename, textdata, mimetype) -> Any: ...
    @overload
    @classmethod
    def AddFileWithMimeType(cls, filename, binarydata, mimetype) -> Any: ...
    def CanOpen(self, location: Any) -> bool: ...
    def FindFirst(self, spec: Any, flags: int = ...) -> Any: ...
    def FindNext(self) -> Any: ...
    @classmethod
    def GetAnchor(cls, *args, **kwargs): ...
    @classmethod
    def GetLeftLocation(cls, *args, **kwargs): ...
    @classmethod
    def GetProtocol(cls, *args, **kwargs): ...
    @classmethod
    def GetRightLocation(cls, *args, **kwargs): ...
    def OpenFile(self, fs: FileSystem, location: Any) -> FSFile | None: ...
    @classmethod
    def RemoveFile(cls, filename) -> Any: ...

class Menu(EvtHandler):
    AppendItem: ClassVar[Callable] = ...
    AppendMenu: ClassVar[Callable] = ...
    InsertItem: ClassVar[Callable] = ...
    InsertMenu: ClassVar[Callable] = ...
    PrependItem: ClassVar[Callable] = ...
    PrependMenu: ClassVar[Callable] = ...
    RemoveItem: ClassVar[Callable] = ...
    RemoveMenu: ClassVar[Callable] = ...
    InvokingWindow: Incomplete
    Parent: Incomplete
    Title: Incomplete
    @overload
    @classmethod
    def Append(cls, id, item=..., helpString=..., kind=...) -> MenuItem: ...
    @overload
    @classmethod
    def Append(cls, id, item, subMenu, helpString=...) -> MenuItem: ...
    @overload
    @classmethod
    def Append(cls, menuItem) -> MenuItem: ...
    @classmethod
    def AppendCheckItem(cls, id, item, help=...) -> MenuItem: ...
    @classmethod
    def AppendRadioItem(cls, id, item, help=...) -> MenuItem: ...
    @classmethod
    def AppendSeparator(cls) -> MenuItem: ...
    @classmethod
    def AppendSubMenu(cls, submenu, text, help=...) -> MenuItem: ...
    @classmethod
    def Attach(cls, menubar) -> Any: ...
    @classmethod
    def Break(cls) -> Any: ...
    @classmethod
    def Check(cls, id, check) -> Any: ...
    @overload
    @classmethod
    def Delete(cls, id) -> bool: ...
    @overload
    @classmethod
    def Delete(cls, item) -> bool: ...
    @overload
    @classmethod
    def DestroyItem(cls, id) -> bool: ...
    @overload
    @classmethod
    def DestroyItem(cls, item) -> bool: ...
    @classmethod
    def Detach(cls) -> Any: ...
    @classmethod
    def Enable(cls, id, enable) -> Any: ...
    @classmethod
    def FindChildItem(cls, *args, **kwargs): ...
    @classmethod
    def FindItem(cls, itemString) -> int: ...
    @overload
    @classmethod
    def FindItemById(cls, id) -> MenuItem: ...
    @overload
    @classmethod
    def FindItemById(cls, id) -> MenuItem: ...
    @classmethod
    def FindItemByPosition(cls, position) -> MenuItem: ...
    @classmethod
    def GetHelpString(cls, id) -> String: ...
    @classmethod
    def GetInvokingWindow(cls) -> Window: ...
    @classmethod
    def GetLabel(cls, id) -> String: ...
    @classmethod
    def GetLabelText(cls, id) -> String: ...
    @classmethod
    def GetMenuItemCount(cls) -> size_t: ...
    @classmethod
    def GetMenuItems(cls) -> MenuItemList: ...
    @classmethod
    def GetParent(cls) -> Menu: ...
    @classmethod
    def GetStyle(cls) -> long: ...
    @classmethod
    def GetTitle(cls) -> String: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @overload
    @classmethod
    def Insert(cls, pos, menuItem) -> MenuItem: ...
    @overload
    @classmethod
    def Insert(cls, pos, id, item=..., helpString=..., kind=...) -> MenuItem: ...
    @overload
    @classmethod
    def Insert(cls, pos, id, text, submenu, help=...) -> MenuItem: ...
    @classmethod
    def InsertCheckItem(cls, pos, id, item, helpString=...) -> MenuItem: ...
    @classmethod
    def InsertRadioItem(cls, pos, id, item, helpString=...) -> MenuItem: ...
    @classmethod
    def InsertSeparator(cls, pos) -> MenuItem: ...
    @classmethod
    def IsAttached(cls) -> bool: ...
    @classmethod
    def IsChecked(cls, id) -> bool: ...
    @classmethod
    def IsEnabled(cls, id) -> bool: ...
    @overload
    @classmethod
    def Prepend(cls, menuItem) -> MenuItem: ...
    @overload
    @classmethod
    def Prepend(cls, id, item=..., helpString=..., kind=...) -> MenuItem: ...
    @overload
    @classmethod
    def Prepend(cls, id, text, subMenu, help=...) -> MenuItem: ...
    @classmethod
    def PrependCheckItem(cls, id, item, helpString=...) -> MenuItem: ...
    @classmethod
    def PrependRadioItem(cls, id, item, helpString=...) -> MenuItem: ...
    @classmethod
    def PrependSeparator(cls) -> MenuItem: ...
    @overload
    @classmethod
    def Remove(cls, id) -> MenuItem: ...
    @overload
    @classmethod
    def Remove(cls, item) -> MenuItem: ...
    @classmethod
    def SetHelpString(cls, id, helpString) -> Any: ...
    @classmethod
    def SetInvokingWindow(cls, win) -> Any: ...
    @classmethod
    def SetLabel(cls, id, label) -> Any: ...
    @classmethod
    def SetParent(cls, parent) -> Any: ...
    @classmethod
    def SetTitle(cls, title) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @classmethod
    def UpdateUI(cls, source=...) -> Any: ...
    @property
    def MenuItemCount(self): ...
    @property
    def MenuItems(self): ...
    @property
    def Style(self): ...
    @property
    def Window(self): ...

class MenuBar(Window):
    GetMenus: ClassVar[Callable] = ...
    SetMenus: ClassVar[Callable] = ...
    Menus: Incomplete
    @classmethod
    def Append(cls, menu, title) -> bool: ...
    @classmethod
    def Attach(cls, frame) -> Any: ...
    @classmethod
    def Check(cls, id, check) -> Any: ...
    @classmethod
    def Detach(cls) -> Any: ...
    @classmethod
    def DoEnable(cls, *args, **kwargs): ...
    @classmethod
    def DoFreeze(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoMoveWindow(cls, *args, **kwargs): ...
    @classmethod
    def DoSetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSizeHints(cls, *args, **kwargs): ...
    @classmethod
    def DoSetWindowVariant(cls, *args, **kwargs): ...
    @classmethod
    def DoThaw(cls, *args, **kwargs): ...
    @classmethod
    def Enable(cls, id, enable) -> Any: ...
    @classmethod
    def EnableTop(cls, pos, enable) -> Any: ...
    @classmethod
    def FindItem(cls, *args, **kwargs): ...
    @overload
    @classmethod
    def FindItemById(cls, id) -> MenuItem: ...
    @overload
    @classmethod
    def FindItemById(cls, id) -> MenuItem: ...
    @classmethod
    def FindMenu(cls, title) -> int: ...
    @classmethod
    def FindMenuItem(cls, menuString, itemString) -> int: ...
    @classmethod
    def GetDefaultBorder(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorderForControl(cls, *args, **kwargs): ...
    @classmethod
    def GetFrame(cls) -> Frame: ...
    @classmethod
    def GetHelpString(cls, id) -> String: ...
    @classmethod
    def GetLabel(cls, id) -> String: ...
    @classmethod
    def GetMenu(cls, menuIndex) -> Menu: ...
    @classmethod
    def GetMenuCount(cls) -> size_t: ...
    @classmethod
    def GetMenuLabel(cls, pos) -> String: ...
    @classmethod
    def GetMenuLabelText(cls, pos) -> String: ...
    @classmethod
    def Insert(cls, pos, menu, title) -> bool: ...
    @classmethod
    def IsAttached(cls) -> bool: ...
    @classmethod
    def IsChecked(cls, id) -> bool: ...
    @classmethod
    def IsEnabled(cls, id) -> bool: ...
    @classmethod
    def IsEnabledTop(cls, pos) -> bool: ...
    @classmethod
    def MacGetCommonMenuBar(cls) -> MenuBar: ...
    @classmethod
    def MacSetCommonMenuBar(cls, menubar) -> Any: ...
    @classmethod
    def OSXGetAppleMenu(cls) -> Menu: ...
    @classmethod
    def ProcessEvent(cls, *args, **kwargs): ...
    @classmethod
    def Refresh(cls, eraseBackground=..., rect=...) -> Any: ...
    @classmethod
    def Remove(cls, pos) -> Menu: ...
    @classmethod
    def Replace(cls, pos, menu, title) -> Menu: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetHelpString(cls, id, helpString) -> Any: ...
    @classmethod
    def SetLabel(cls, id, label) -> Any: ...
    @classmethod
    def SetMenuLabel(cls, pos, label) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class MenuEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetMenu(cls) -> Menu: ...
    @classmethod
    def GetMenuId(cls) -> int: ...
    @classmethod
    def IsPopup(cls) -> bool: ...
    @property
    def Menu(self): ...
    @property
    def MenuId(self): ...

class MenuItem(Object):
    Accel: Incomplete
    BackgroundColour: Incomplete
    Bitmap: Incomplete
    DisabledBitmap: Incomplete
    Enabled: Incomplete
    Font: Incomplete
    Help: Incomplete
    ItemLabel: Incomplete
    MarginWidth: Incomplete
    Menu: Incomplete
    SubMenu: Incomplete
    TextColour: Incomplete
    @classmethod
    def AddExtraAccel(cls, accel) -> Any: ...
    @classmethod
    def Check(cls, check=...) -> Any: ...
    @classmethod
    def ClearExtraAccels(cls) -> Any: ...
    @classmethod
    def Enable(cls, enable=...) -> Any: ...
    @classmethod
    def GetAccel(cls) -> AcceleratorEntry: ...
    @classmethod
    def GetBackgroundColour(cls) -> Colour: ...
    @overload
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @overload
    @classmethod
    def GetBitmap(cls, checked) -> Bitmap: ...
    @classmethod
    def GetBitmapBundle(cls) -> BitmapBundle: ...
    @classmethod
    def GetDisabledBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetHelp(cls) -> String: ...
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetItemLabel(cls) -> String: ...
    @classmethod
    def GetItemLabelText(cls) -> String: ...
    @classmethod
    def GetKind(cls) -> ItemKind: ...
    @classmethod
    def GetLabelText(cls, text) -> String: ...
    @classmethod
    def GetMarginWidth(cls) -> int: ...
    @classmethod
    def GetMenu(cls) -> Menu: ...
    @classmethod
    def GetSubMenu(cls) -> Menu: ...
    @classmethod
    def GetTextColour(cls) -> Colour: ...
    @classmethod
    def IsCheck(cls) -> bool: ...
    @classmethod
    def IsCheckable(cls) -> bool: ...
    @classmethod
    def IsChecked(cls) -> bool: ...
    @classmethod
    def IsEnabled(cls) -> bool: ...
    @classmethod
    def IsRadio(cls) -> bool: ...
    @classmethod
    def IsSeparator(cls) -> bool: ...
    @classmethod
    def IsSubMenu(cls) -> bool: ...
    @classmethod
    def SetAccel(cls, accel) -> Any: ...
    @classmethod
    def SetBackgroundColour(cls, colour) -> Any: ...
    @overload
    @classmethod
    def SetBitmap(cls, bmp) -> Any: ...
    @overload
    @classmethod
    def SetBitmap(cls, bmp, checked) -> Any: ...
    @classmethod
    def SetBitmaps(cls, checked, unchecked=...) -> Any: ...
    @classmethod
    def SetDisabledBitmap(cls, disabled) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> Any: ...
    @classmethod
    def SetHelp(cls, helpString) -> Any: ...
    @classmethod
    def SetItemLabel(cls, label) -> Any: ...
    @classmethod
    def SetMarginWidth(cls, width) -> Any: ...
    @classmethod
    def SetMenu(cls, menu) -> Any: ...
    @classmethod
    def SetSubMenu(cls, menu) -> Any: ...
    @classmethod
    def SetTextColour(cls, colour) -> Any: ...
    @property
    def BitmapBundle(self): ...
    @property
    def Id(self): ...
    @property
    def ItemLabelText(self): ...
    @property
    def Kind(self): ...

class MenuItemList(sip.wrapper):
    def index(self, obj: MenuItem | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class MenuItemList_iterator(sip.wrapper):
    def __next__(self): ...

class MenuList(sip.wrapper):
    def index(self, obj: Menu | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class MenuList_iterator(sip.wrapper):
    def __next__(self): ...

class MessageDialog(Dialog):
    ExtendedMessage: Incomplete
    HelpLabel: Incomplete
    Message: Incomplete
    OKLabel: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetCancelLabel(cls) -> String: ...
    @classmethod
    def GetCaption(cls) -> String: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEffectiveIcon(cls) -> long: ...
    @classmethod
    def GetExtendedMessage(cls) -> String: ...
    @classmethod
    def GetHelpLabel(cls) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetMessageDialogStyle(cls) -> long: ...
    @classmethod
    def GetNoLabel(cls) -> String: ...
    @classmethod
    def GetOKLabel(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetYesLabel(cls) -> String: ...
    @classmethod
    def HasCustomLabels(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetExtendedMessage(cls, extendedMessage) -> Any: ...
    @classmethod
    def SetHelpLabel(cls, help) -> bool: ...
    @classmethod
    def SetMessage(cls, message) -> Any: ...
    @classmethod
    def SetOKCancelLabels(cls, ok, cancel) -> bool: ...
    @classmethod
    def SetOKLabel(cls, ok) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetYesNoCancelLabels(cls, yes, no, cancel) -> bool: ...
    @classmethod
    def SetYesNoLabels(cls, yes, no) -> bool: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def CancelLabel(self): ...
    @property
    def Caption(self): ...
    @property
    def EffectiveIcon(self): ...
    @property
    def MessageDialogStyle(self): ...
    @property
    def NoLabel(self): ...
    @property
    def YesLabel(self): ...

class Metafile(Object):
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def Play(cls, dc) -> bool: ...
    @classmethod
    def SetClipboard(cls, width=..., height=...) -> bool: ...

class MetafileDC(DC):
    @classmethod
    def Close(cls) -> Metafile: ...

class MimeTypesManager(sip.wrapper):
    @classmethod
    def AddFallbacks(cls, fallbacks) -> Any: ...
    @classmethod
    def Associate(cls, ftInfo) -> FileType: ...
    @classmethod
    def EnumAllFileTypes(cls) -> ArrayString: ...
    @classmethod
    def GetFileTypeFromExtension(cls, extension) -> FileType: ...
    @classmethod
    def GetFileTypeFromMimeType(cls, mimeType) -> FileType: ...
    @classmethod
    def IsOfType(cls, mimeType, wildcard) -> bool: ...
    @classmethod
    def Unassociate(cls, ft) -> bool: ...

class MiniFrame(Frame):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class MirrorDC(DC): ...

class ModalDialogHook(sip.wrapper):
    @classmethod
    def Enter(cls, dialog) -> int: ...
    @classmethod
    def Exit(cls, dialog) -> Any: ...
    @classmethod
    def Register(cls) -> Any: ...
    @classmethod
    def Unregister(cls) -> Any: ...

class MouseButton(int): ...

class MouseCaptureChangedEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetCapturedWindow(cls) -> Window: ...
    @property
    def CapturedWindow(self): ...

class MouseCaptureLostEvent(Event):
    def Clone(self) -> Event | None: ...

class MouseEvent(Event, MouseState):
    ColumnsPerAction: Incomplete
    LinesPerAction: Incomplete
    WheelAxis: Incomplete
    WheelDelta: Incomplete
    WheelRotation: Incomplete
    @classmethod
    def Aux1DClick(cls) -> bool: ...
    @classmethod
    def Aux1Down(cls) -> bool: ...
    @classmethod
    def Aux1Up(cls) -> bool: ...
    @classmethod
    def Aux2DClick(cls) -> bool: ...
    @classmethod
    def Aux2Down(cls) -> bool: ...
    @classmethod
    def Aux2Up(cls) -> bool: ...
    @classmethod
    def Button(cls, but) -> bool: ...
    @classmethod
    def ButtonDClick(cls, but=...) -> bool: ...
    @classmethod
    def ButtonDown(cls, but=...) -> bool: ...
    @classmethod
    def ButtonUp(cls, but=...) -> bool: ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def Dragging(cls) -> bool: ...
    @classmethod
    def Entering(cls) -> bool: ...
    @classmethod
    def GetButton(cls) -> int: ...
    @classmethod
    def GetClickCount(cls) -> int: ...
    @classmethod
    def GetColumnsPerAction(cls) -> int: ...
    @classmethod
    def GetLinesPerAction(cls) -> int: ...
    @classmethod
    def GetLogicalPosition(cls, dc) -> Point: ...
    @classmethod
    def GetMagnification(cls) -> float: ...
    @classmethod
    def GetWheelAxis(cls) -> MouseWheelAxis: ...
    @classmethod
    def GetWheelDelta(cls) -> int: ...
    @classmethod
    def GetWheelRotation(cls) -> int: ...
    @classmethod
    def IsButton(cls) -> bool: ...
    @classmethod
    def IsPageScroll(cls) -> bool: ...
    @classmethod
    def IsWheelInverted(cls) -> bool: ...
    @classmethod
    def Leaving(cls) -> bool: ...
    @classmethod
    def LeftDClick(cls) -> bool: ...
    @classmethod
    def LeftDown(cls) -> bool: ...
    @classmethod
    def LeftUp(cls) -> bool: ...
    @classmethod
    def Magnify(cls) -> bool: ...
    @classmethod
    def MetaDown(cls) -> bool: ...
    @classmethod
    def MiddleDClick(cls) -> bool: ...
    @classmethod
    def MiddleDown(cls) -> bool: ...
    @classmethod
    def MiddleUp(cls) -> bool: ...
    @classmethod
    def Moving(cls) -> bool: ...
    @classmethod
    def RightDClick(cls) -> bool: ...
    @classmethod
    def RightDown(cls) -> bool: ...
    @classmethod
    def RightUp(cls) -> bool: ...
    @classmethod
    def SetColumnsPerAction(cls, columnsPerAction) -> Any: ...
    @classmethod
    def SetLinesPerAction(cls, linesPerAction) -> Any: ...
    @classmethod
    def SetWheelAxis(cls, wheelAxis) -> Any: ...
    @classmethod
    def SetWheelDelta(cls, wheelDelta) -> Any: ...
    @classmethod
    def SetWheelRotation(cls, wheelRotation) -> Any: ...

class MouseEventsManager(EvtHandler):
    @classmethod
    def Create(cls, win) -> bool: ...
    @classmethod
    def MouseClickBegin(cls, item) -> Any: ...
    @classmethod
    def MouseClickCancelled(cls, item) -> Any: ...
    @classmethod
    def MouseClicked(cls, item) -> bool: ...
    @classmethod
    def MouseDragBegin(cls, item, pos) -> bool: ...
    @classmethod
    def MouseDragCancelled(cls, item) -> Any: ...
    @classmethod
    def MouseDragEnd(cls, item, pos) -> Any: ...
    @classmethod
    def MouseDragging(cls, item, pos) -> Any: ...
    @classmethod
    def MouseHitTest(cls, pos) -> int: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class MouseState(KeyboardState):
    Position: Incomplete
    X: Incomplete
    Y: Incomplete
    aux1IsDown: Incomplete
    aux2IsDown: Incomplete
    leftIsDown: Incomplete
    middleIsDown: Incomplete
    rightIsDown: Incomplete
    x: Incomplete
    y: Incomplete
    @classmethod
    def Aux1IsDown(cls) -> bool: ...
    @classmethod
    def Aux2IsDown(cls) -> bool: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetX(cls) -> Coord: ...
    @classmethod
    def GetY(cls) -> Coord: ...
    @classmethod
    def LeftIsDown(cls) -> bool: ...
    @classmethod
    def MiddleIsDown(cls) -> bool: ...
    @classmethod
    def RightIsDown(cls) -> bool: ...
    @classmethod
    def SetAux1Down(cls, down) -> Any: ...
    @classmethod
    def SetAux2Down(cls, down) -> Any: ...
    @classmethod
    def SetLeftDown(cls, down) -> Any: ...
    @classmethod
    def SetMiddleDown(cls, down) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...
    @classmethod
    def SetRightDown(cls, down) -> Any: ...
    @classmethod
    def SetState(cls, state) -> Any: ...
    @classmethod
    def SetX(cls, x) -> Any: ...
    @classmethod
    def SetY(cls, y) -> Any: ...

class MouseWheelAxis(int): ...

class MoveEvent(Event):
    Position: Incomplete
    Rect: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetRect(cls) -> Rect: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...
    @classmethod
    def SetRect(cls, rect) -> Any: ...

class MsgCatalog(sip.wrapper): ...

class MultiChoiceDialog(Dialog):
    Selections: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSelections(cls) -> ArrayInt: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetSelections(cls, selections) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class NativeFontInfo(sip.wrapper):
    Encoding: Incomplete
    FaceName: Incomplete
    Family: Incomplete
    FractionalPointSize: Incomplete
    NumericWeight: Incomplete
    PointSize: Incomplete
    Style: Incomplete
    Underlined: Incomplete
    Weight: Incomplete
    @classmethod
    def FromString(cls, s) -> bool: ...
    @classmethod
    def FromUserString(cls, s) -> bool: ...
    @classmethod
    def GetEncoding(cls) -> FontEncoding: ...
    @classmethod
    def GetFaceName(cls) -> String: ...
    @classmethod
    def GetFamily(cls) -> FontFamily: ...
    @classmethod
    def GetFractionalPointSize(cls) -> float: ...
    @classmethod
    def GetNumericWeight(cls) -> int: ...
    @classmethod
    def GetPointSize(cls) -> int: ...
    @classmethod
    def GetStyle(cls) -> FontStyle: ...
    @classmethod
    def GetUnderlined(cls) -> bool: ...
    @classmethod
    def GetWeight(cls) -> FontWeight: ...
    @classmethod
    def Init(cls) -> Any: ...
    @classmethod
    def InitFromFont(cls, font) -> Any: ...
    @classmethod
    def SetEncoding(cls, encoding) -> Any: ...
    @overload
    @classmethod
    def SetFaceName(cls, facename) -> bool: ...
    @overload
    @classmethod
    def SetFaceName(cls, facenames) -> Any: ...
    @classmethod
    def SetFamily(cls, family) -> Any: ...
    @classmethod
    def SetFractionalPointSize(cls, pointsize) -> Any: ...
    @classmethod
    def SetNumericWeight(cls, weight) -> Any: ...
    @classmethod
    def SetPointSize(cls, pointsize) -> Any: ...
    @classmethod
    def SetStyle(cls, style) -> Any: ...
    @classmethod
    def SetUnderlined(cls, underlined) -> Any: ...
    @classmethod
    def SetWeight(cls, weight) -> Any: ...
    @classmethod
    def ToString(cls) -> String: ...
    @classmethod
    def ToUserString(cls) -> String: ...

class NativePixelData(PixelDataBase):
    @classmethod
    def GetPixels(cls) -> NativePixelData_Accessor: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Pixels(self): ...

class NativePixelData_Accessor(sip.wrapper):
    @classmethod
    def Get(cls) -> PyObject: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def MoveTo(cls, data, x, y) -> Any: ...
    @classmethod
    def Offset(cls, data, x, y) -> Any: ...
    @classmethod
    def OffsetX(cls, data, x) -> Any: ...
    @classmethod
    def OffsetY(cls, data, y) -> Any: ...
    @classmethod
    def Reset(cls, data) -> Any: ...
    @classmethod
    def Set(cls, red, green, blue) -> Any: ...
    @classmethod
    def nextPixel(cls) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class NavDir(int): ...

class NavigationKeyEvent(Event):
    class NavigationKeyEventFlags(int):
        def __reduce__(self): ...
    FromTab: ClassVar[NavigationKeyEvent.NavigationKeyEventFlags] = ...
    IsBackward: ClassVar[NavigationKeyEvent.NavigationKeyEventFlags] = ...
    IsForward: ClassVar[NavigationKeyEvent.NavigationKeyEventFlags] = ...
    WinChange: ClassVar[NavigationKeyEvent.NavigationKeyEventFlags] = ...
    CurrentFocus: Incomplete
    Direction: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetCurrentFocus(cls) -> Window: ...
    @classmethod
    def GetDirection(cls) -> bool: ...
    @classmethod
    def IsFromTab(cls) -> bool: ...
    @classmethod
    def IsWindowChange(cls) -> bool: ...
    @classmethod
    def SetCurrentFocus(cls, currentFocus) -> Any: ...
    @classmethod
    def SetDirection(cls, direction) -> Any: ...
    @classmethod
    def SetFlags(cls, flags) -> Any: ...
    @classmethod
    def SetFromTab(cls, fromTab) -> Any: ...
    @classmethod
    def SetWindowChange(cls, windowChange) -> Any: ...

class NonOwnedWindow(Window):
    @classmethod
    def DoEnable(cls, *args, **kwargs): ...
    @classmethod
    def DoFreeze(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoMoveWindow(cls, *args, **kwargs): ...
    @classmethod
    def DoSetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSizeHints(cls, *args, **kwargs): ...
    @classmethod
    def DoSetWindowVariant(cls, *args, **kwargs): ...
    @classmethod
    def DoThaw(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorder(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorderForControl(cls, *args, **kwargs): ...
    @classmethod
    def ProcessEvent(cls, *args, **kwargs): ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @overload
    @classmethod
    def SetShape(cls, region) -> bool: ...
    @overload
    @classmethod
    def SetShape(cls, path) -> bool: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...

class Notebook(BookCtrlBase):
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ChangeSelection(cls, page) -> int: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPageImage(cls, nPage) -> int: ...
    @classmethod
    def GetPageText(cls, nPage) -> String: ...
    @classmethod
    def GetRowCount(cls) -> int: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetThemeBackgroundColour(cls) -> Colour: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def InsertPage(cls, index, page, text, select=..., imageId=...) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetPadding(cls, padding) -> Any: ...
    @classmethod
    def SetPageImage(cls, page, image) -> bool: ...
    @classmethod
    def SetPageText(cls, page, text) -> bool: ...
    @classmethod
    def SetSelection(cls, page) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def RowCount(self): ...
    @property
    def ThemeBackgroundColour(self): ...

class NotifyEvent(CommandEvent):
    @classmethod
    def Allow(cls) -> Any: ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def IsAllowed(cls) -> bool: ...
    @classmethod
    def Veto(cls) -> Any: ...

class NumberEntryDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, message, prompt, caption, value, min, max, pos=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> long: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Value(self): ...

class Object(sip.wrapper):
    RefData: Incomplete
    @classmethod
    def Destroy(cls) -> Any: ...
    @classmethod
    def GetClassInfo(cls) -> ClassInfo: ...
    @classmethod
    def GetClassName(cls) -> Char: ...
    @classmethod
    def GetRefData(cls) -> ObjectRefData: ...
    @classmethod
    def IsSameAs(cls, obj) -> bool: ...
    @classmethod
    def Ref(cls, clone) -> Any: ...
    @classmethod
    def SetRefData(cls, data) -> Any: ...
    @classmethod
    def UnRef(cls) -> Any: ...
    @classmethod
    def UnShare(cls) -> Any: ...
    @property
    def ClassInfo(self): ...
    @property
    def ClassName(self): ...

class OperatingSystemId(int): ...

class Orientation(int): ...

class OutCode(int): ...

class OutputStream(StreamBase):
    @classmethod
    def Close(cls) -> bool: ...
    @classmethod
    def LastWrite(cls) -> size_t: ...
    @classmethod
    def PutC(cls, c) -> Any: ...
    @classmethod
    def SeekO(cls, pos, mode=...) -> FileOffset: ...
    @classmethod
    def TellO(cls) -> FileOffset: ...
    @overload
    @classmethod
    def Write(cls, buffer, size) -> OutputStream: ...
    @overload
    @classmethod
    def Write(cls, stream_in) -> OutputStream: ...
    @classmethod
    def WriteAll(cls, buffer, size) -> bool: ...
    @classmethod
    def close(cls) -> Any: ...
    @classmethod
    def eof(cls) -> bool: ...
    @classmethod
    def flush(cls) -> Any: ...
    @classmethod
    def seek(cls, offset, whence=...) -> Any: ...
    @classmethod
    def tell(cls) -> FileOffset: ...
    @classmethod
    def write(cls, data) -> PyObject: ...

class Overlay(sip.wrapper):
    @classmethod
    def Reset(cls) -> Any: ...

class PCXHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class PNGHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class PNMHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class PageSetupDialog(Object):
    @classmethod
    def GetPageSetupData(cls) -> PageSetupDialogData: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    @property
    def PageSetupData(self): ...

class PageSetupDialogData(Object):
    MarginBottomRight: Incomplete
    MarginTopLeft: Incomplete
    MinMarginBottomRight: Incomplete
    MinMarginTopLeft: Incomplete
    PaperId: Incomplete
    PaperSize: Incomplete
    PrintData: Incomplete
    @classmethod
    def EnableHelp(cls, flag) -> Any: ...
    @classmethod
    def EnableMargins(cls, flag) -> Any: ...
    @classmethod
    def EnableOrientation(cls, flag) -> Any: ...
    @classmethod
    def EnablePaper(cls, flag) -> Any: ...
    @classmethod
    def EnablePrinter(cls, flag) -> Any: ...
    @classmethod
    def GetDefaultInfo(cls) -> bool: ...
    @classmethod
    def GetDefaultMinMargins(cls) -> bool: ...
    @classmethod
    def GetEnableHelp(cls) -> bool: ...
    @classmethod
    def GetEnableMargins(cls) -> bool: ...
    @classmethod
    def GetEnableOrientation(cls) -> bool: ...
    @classmethod
    def GetEnablePaper(cls) -> bool: ...
    @classmethod
    def GetEnablePrinter(cls) -> bool: ...
    @classmethod
    def GetMarginBottomRight(cls) -> Point: ...
    @classmethod
    def GetMarginTopLeft(cls) -> Point: ...
    @classmethod
    def GetMinMarginBottomRight(cls) -> Point: ...
    @classmethod
    def GetMinMarginTopLeft(cls) -> Point: ...
    @classmethod
    def GetPaperId(cls) -> PaperSize: ...
    @classmethod
    def GetPaperSize(cls) -> Size: ...
    @classmethod
    def GetPrintData(cls) -> PrintData: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def SetDefaultInfo(cls, flag) -> Any: ...
    @classmethod
    def SetDefaultMinMargins(cls, flag) -> Any: ...
    @classmethod
    def SetMarginBottomRight(cls, pt) -> Any: ...
    @classmethod
    def SetMarginTopLeft(cls, pt) -> Any: ...
    @classmethod
    def SetMinMarginBottomRight(cls, pt) -> Any: ...
    @classmethod
    def SetMinMarginTopLeft(cls, pt) -> Any: ...
    @classmethod
    def SetPaperId(cls, id) -> Any: ...
    @classmethod
    def SetPaperSize(cls, size) -> Any: ...
    @classmethod
    def SetPrintData(cls, printData) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class PaintDC(ClientDC): ...

class PaintEvent(Event):
    def Clone(self) -> Event | None: ...

class Palette(GDIObject):
    @classmethod
    def Create(cls, red, green, blue) -> bool: ...
    @classmethod
    def GetColoursCount(cls) -> int: ...
    @classmethod
    def GetPixel(cls, red, green, blue) -> int: ...
    @classmethod
    def GetRGB(cls, *args, **kwargs): ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @property
    def ColoursCount(self): ...
    @property
    def RGB(self): ...

class PaletteChangedEvent(Event):
    ChangedWindow: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetChangedWindow(cls) -> Window: ...
    @classmethod
    def SetChangedWindow(cls, win) -> Any: ...

class PanGestureEvent(GestureEvent):
    Delta: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetDelta(cls) -> Point: ...
    @classmethod
    def SetDelta(cls, delta) -> Any: ...

class Panel(Window):
    @overload
    @classmethod
    def AcceptsFocus(cls) -> bool: ...
    @overload
    @classmethod
    def AcceptsFocus(cls) -> Any: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    @classmethod
    def InitDialog(cls) -> Any: ...
    @classmethod
    def Layout(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @overload
    @classmethod
    def SetFocus(cls) -> Any: ...
    @overload
    @classmethod
    def SetFocus(cls) -> Any: ...
    @classmethod
    def SetFocusIgnoringChildren(cls) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PaperSize(int): ...

class PasswordEntryDialog(TextEntryDialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class Pen(GDIObject):
    Cap: Incomplete
    Colour: Incomplete
    Dashes: Incomplete
    Join: Incomplete
    Quality: Incomplete
    Stipple: Incomplete
    Style: Incomplete
    Width: Incomplete
    @classmethod
    def GetCap(cls) -> PenCap: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetDashes(cls) -> ArrayInt: ...
    @classmethod
    def GetJoin(cls) -> PenJoin: ...
    @classmethod
    def GetQuality(cls) -> PenQuality: ...
    @classmethod
    def GetStipple(cls) -> Bitmap: ...
    @classmethod
    def GetStyle(cls) -> PenStyle: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def IsNonTransparent(cls) -> bool: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsTransparent(cls) -> bool: ...
    @classmethod
    def SetCap(cls, capStyle) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, colour) -> Any: ...
    @overload
    @classmethod
    def SetColour(cls, red, green, blue) -> Any: ...
    @classmethod
    def SetDashes(cls, dashes) -> Any: ...
    @classmethod
    def SetJoin(cls, join_style) -> Any: ...
    @classmethod
    def SetQuality(cls, quality) -> Any: ...
    @classmethod
    def SetStipple(cls, stipple) -> Any: ...
    @classmethod
    def SetStyle(cls, style) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PenCap(int): ...

class PenInfo(sip.wrapper):
    @classmethod
    def Cap(cls, cap) -> PenInfo: ...
    @classmethod
    def Colour(cls, col) -> PenInfo: ...
    @classmethod
    def GetCap(cls) -> PenCap: ...
    @classmethod
    def GetColour(cls) -> Colour: ...
    @classmethod
    def GetJoin(cls) -> PenJoin: ...
    @classmethod
    def GetQuality(cls) -> PenQuality: ...
    @classmethod
    def GetStipple(cls) -> Bitmap: ...
    @classmethod
    def GetStyle(cls) -> PenStyle: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def HighQuality(cls) -> PenInfo: ...
    @classmethod
    def IsTransparent(cls) -> bool: ...
    @classmethod
    def Join(cls, join) -> PenInfo: ...
    @classmethod
    def LowQuality(cls) -> PenInfo: ...
    @classmethod
    def Quality(cls, quality) -> PenInfo: ...
    @classmethod
    def Stipple(cls, stipple) -> PenInfo: ...
    @classmethod
    def Style(cls, style) -> PenInfo: ...
    @classmethod
    def Width(cls, width) -> PenInfo: ...

class PenJoin(int): ...

class PenList(sip.wrapper):
    @classmethod
    def FindOrCreatePen(cls, colour, width=..., style=...) -> Pen: ...

class PenQuality(int): ...

class PenStyle(int): ...

class PickerBase(Control):
    InternalMargin: Incomplete
    PickerCtrl: Incomplete
    PickerCtrlProportion: Incomplete
    TextCtrl: Incomplete
    TextCtrlProportion: Incomplete
    @classmethod
    def CreateBase(cls, parent, id=..., text=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def DoEnable(cls, *args, **kwargs): ...
    @classmethod
    def DoFreeze(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetBestSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoMoveWindow(cls, *args, **kwargs): ...
    @classmethod
    def DoSetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSize(cls, *args, **kwargs): ...
    @classmethod
    def DoSetSizeHints(cls, *args, **kwargs): ...
    @classmethod
    def DoSetWindowVariant(cls, *args, **kwargs): ...
    @classmethod
    def DoThaw(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorder(cls, *args, **kwargs): ...
    @classmethod
    def GetDefaultBorderForControl(cls, *args, **kwargs): ...
    @classmethod
    def GetInternalMargin(cls) -> int: ...
    @classmethod
    def GetPickerCtrl(cls) -> Control: ...
    @classmethod
    def GetPickerCtrlProportion(cls) -> int: ...
    @classmethod
    def GetPickerStyle(cls, style) -> long: ...
    @classmethod
    def GetTextCtrl(cls) -> TextCtrl: ...
    @classmethod
    def GetTextCtrlProportion(cls) -> int: ...
    @classmethod
    def GetTextCtrlStyle(cls, style) -> long: ...
    @classmethod
    def HasTextCtrl(cls) -> bool: ...
    @classmethod
    def HasTransparentBackground(cls, *args, **kwargs): ...
    @classmethod
    def IsPickerCtrlGrowable(cls) -> bool: ...
    @classmethod
    def IsTextCtrlGrowable(cls) -> bool: ...
    @classmethod
    def PostCreation(cls) -> Any: ...
    @classmethod
    def ProcessEvent(cls, *args, **kwargs): ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetInternalMargin(cls, margin) -> Any: ...
    @classmethod
    def SetPickerCtrl(cls, picker) -> Any: ...
    @classmethod
    def SetPickerCtrlGrowable(cls, grow=...) -> Any: ...
    @classmethod
    def SetPickerCtrlProportion(cls, prop) -> Any: ...
    @classmethod
    def SetTextCtrl(cls, text) -> Any: ...
    @classmethod
    def SetTextCtrlGrowable(cls, grow=...) -> Any: ...
    @classmethod
    def SetTextCtrlProportion(cls, prop) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @classmethod
    def UpdatePickerFromTextCtrl(cls) -> Any: ...
    @classmethod
    def UpdateTextCtrlFromPicker(cls) -> Any: ...

class PixelDataBase(sip.wrapper):
    __iter__: ClassVar[Callable] = ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetOrigin(cls) -> Point: ...
    @classmethod
    def GetRowStride(cls) -> int: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @property
    def Height(self): ...
    @property
    def Origin(self): ...
    @property
    def RowStride(self): ...
    @property
    def Size(self): ...
    @property
    def Width(self): ...

class PlatformId(sip.wrapper): ...

class PlatformInformation(sip.wrapper):
    Architecture: Incomplete
    Bitness: Incomplete
    DesktopEnvironment: Incomplete
    Endianness: Incomplete
    LinuxDistributionInfo: Incomplete
    OperatingSystemDescription: Incomplete
    OperatingSystemId: Incomplete
    PortId: Incomplete
    @classmethod
    def CheckOSVersion(cls, major, minor, micro=...) -> bool: ...
    @classmethod
    def CheckToolkitVersion(cls, major, minor, micro=...) -> bool: ...
    @classmethod
    def Get(cls) -> PlatformInfo: ...
    @classmethod
    def GetArch(cls, arch) -> Architecture: ...
    @classmethod
    def GetArchName(cls) -> String: ...
    @classmethod
    def GetArchitecture(cls) -> Architecture: ...
    @classmethod
    def GetBitness(cls) -> Bitness: ...
    @overload
    @classmethod
    def GetBitnessName(cls, bitness) -> String: ...
    @overload
    @classmethod
    def GetBitnessName(cls) -> String: ...
    @classmethod
    def GetCpuArchitectureName(cls) -> String: ...
    @classmethod
    def GetDesktopEnvironment(cls) -> String: ...
    @classmethod
    def GetEndianness(cls) -> Endianness: ...
    @classmethod
    def GetEndiannessName(cls) -> String: ...
    @classmethod
    def GetLinuxDistributionInfo(cls) -> LinuxDistributionInfo: ...
    @classmethod
    def GetNativeCpuArchitectureName(cls) -> String: ...
    @classmethod
    def GetOSMajorVersion(cls) -> int: ...
    @classmethod
    def GetOSMicroVersion(cls) -> int: ...
    @classmethod
    def GetOSMinorVersion(cls) -> int: ...
    @classmethod
    def GetOperatingSystemDescription(cls) -> String: ...
    @classmethod
    def GetOperatingSystemDirectory(cls) -> String: ...
    @classmethod
    def GetOperatingSystemFamilyName(cls) -> String: ...
    @classmethod
    def GetOperatingSystemId(cls) -> OperatingSystemId: ...
    @classmethod
    def GetOperatingSystemIdName(cls) -> String: ...
    @classmethod
    def GetPortId(cls) -> PortId: ...
    @classmethod
    def GetPortIdName(cls) -> String: ...
    @classmethod
    def GetPortIdShortName(cls) -> String: ...
    @classmethod
    def GetToolkitMajorVersion(cls) -> int: ...
    @classmethod
    def GetToolkitMicroVersion(cls) -> int: ...
    @classmethod
    def GetToolkitMinorVersion(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsUsingUniversalWidgets(cls) -> bool: ...
    @classmethod
    def SetArchitecture(cls, n) -> Any: ...
    @classmethod
    def SetBitness(cls, n) -> Any: ...
    @classmethod
    def SetDesktopEnvironment(cls, de) -> Any: ...
    @classmethod
    def SetEndianness(cls, n) -> Any: ...
    @classmethod
    def SetLinuxDistributionInfo(cls, di) -> Any: ...
    @classmethod
    def SetOSVersion(cls, major, minor, micro=...) -> Any: ...
    @classmethod
    def SetOperatingSystemDescription(cls, desc) -> Any: ...
    @classmethod
    def SetOperatingSystemId(cls, n) -> Any: ...
    @classmethod
    def SetPortId(cls, n) -> Any: ...
    @classmethod
    def SetToolkitVersion(cls, major, minor, micro=...) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def ArchName(self): ...
    @property
    def BitnessName(self): ...
    @property
    def CpuArchitectureName(self): ...
    @property
    def EndiannessName(self): ...
    @property
    def NativeCpuArchitectureName(self): ...
    @property
    def OSMajorVersion(self): ...
    @property
    def OSMicroVersion(self): ...
    @property
    def OSMinorVersion(self): ...
    @property
    def OperatingSystemFamilyName(self): ...
    @property
    def OperatingSystemIdName(self): ...
    @property
    def PortIdName(self): ...
    @property
    def PortIdShortName(self): ...
    @property
    def ToolkitMajorVersion(self): ...
    @property
    def ToolkitMicroVersion(self): ...
    @property
    def ToolkitMinorVersion(self): ...

class Point(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def IsFullySpecified(cls) -> bool: ...
    @classmethod
    def SetDefaults(cls, pt) -> Any: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...
    @property
    def IM(self): ...

class Point2D(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    VectorAngle: Incomplete
    VectorLength: Incomplete
    @classmethod
    def Get(cls) -> PyObject: ...
    @classmethod
    def GetCrossProduct(cls, vec) -> Double: ...
    @classmethod
    def GetDistance(cls, pt) -> Double: ...
    @classmethod
    def GetDistanceSquare(cls, pt) -> Double: ...
    @classmethod
    def GetDotProduct(cls, vec) -> Double: ...
    @classmethod
    def GetFloor(cls, *args, **kwargs): ...
    @classmethod
    def GetRounded(cls, *args, **kwargs): ...
    @classmethod
    def GetVectorAngle(cls) -> Double: ...
    @classmethod
    def GetVectorLength(cls) -> Double: ...
    @classmethod
    def Normalize(cls) -> Any: ...
    @classmethod
    def SetVectorAngle(cls, degrees) -> Any: ...
    @classmethod
    def SetVectorLength(cls, length) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    @property
    def IM(self): ...

class PointList(sip.wrapper):
    def index(self, obj: Point | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class PointList_iterator(sip.wrapper):
    def __next__(self): ...

class PolygonFillMode(int): ...

class PopupTransientWindow(PopupWindow):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def OnDismiss(cls) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def Popup(cls, focus=...) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def ProcessLeftDown(cls, event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PopupWindow(NonOwnedWindow):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, flags=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def Position(cls, ptOrigin, sizePopup) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PortId(int): ...

class Position(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Col: Incomplete
    Column: Incomplete
    Row: Incomplete
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetCol(cls) -> int: ...
    @classmethod
    def GetColumn(cls) -> int: ...
    @classmethod
    def GetRow(cls) -> int: ...
    @classmethod
    def SetCol(cls, column) -> Any: ...
    @classmethod
    def SetColumn(cls, column) -> Any: ...
    @classmethod
    def SetRow(cls, row) -> Any: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...
    @property
    def IM(self): ...

class PostScriptDC(DC): ...

class PowerEvent(Event):
    def Clone(self) -> Event | None: ...
    @classmethod
    def IsVetoed(cls) -> bool: ...
    @classmethod
    def Veto(cls) -> Any: ...

class PowerResource(sip.wrapper):
    @classmethod
    def Acquire(cls, kind, reason=...) -> bool: ...
    @classmethod
    def Release(cls, kind) -> Any: ...

class PowerResourceBlocker(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...
    @classmethod
    def IsInEffect(cls) -> bool: ...

class PowerResourceKind(int): ...

class PowerType(int): ...

class PreferencesEditor(sip.wrapper):
    @classmethod
    def AddPage(cls, page) -> Any: ...
    @classmethod
    def Dismiss(cls) -> Any: ...
    @classmethod
    def ShouldApplyChangesImmediately(cls) -> bool: ...
    @classmethod
    def Show(cls, parent) -> Any: ...
    @classmethod
    def ShownModally(cls) -> bool: ...

class PreferencesPage(sip.wrapper):
    @classmethod
    def CreateWindow(cls, parent) -> Window: ...
    @classmethod
    def GetIcon(cls) -> BitmapBundle: ...
    @classmethod
    def GetLargeIcon(cls) -> Bitmap: ...
    @classmethod
    def GetName(cls) -> String: ...
    @property
    def Icon(self): ...
    @property
    def LargeIcon(self): ...
    @property
    def Name(self): ...

class PressAndTapEvent(GestureEvent):
    def Clone(self) -> Event | None: ...

class PreviewCanvas(ScrolledWindow):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSizeAvailableForScrollTarget(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def OnPaint(cls, event) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShouldScrollToChildOnFocus(cls, *args, **kwargs): ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PreviewControlBar(Panel):
    ZoomControl: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CreateButtons(cls) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPrintPreview(cls) -> PrintPreview: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetZoomControl(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetZoomControl(cls, percent) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def PrintPreview(self): ...

class PreviewFrame(Frame):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CreateCanvas(cls) -> Any: ...
    @classmethod
    def CreateControlBar(cls) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def Initialize(cls) -> Any: ...
    @classmethod
    def InitializeWithModality(cls, kind) -> Any: ...
    @classmethod
    def OnCloseWindow(cls, event) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PreviewFrameModalityKind(int): ...

class PrintAbortDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetProgress(cls, currentPage, totalPages, currentCopy, totalCopies) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class PrintBin(int): ...

class PrintData(Object):
    Bin: Incomplete
    Collate: Incomplete
    Colour: Incomplete
    Duplex: Incomplete
    Filename: Incomplete
    NoCopies: Incomplete
    Orientation: Incomplete
    PaperId: Incomplete
    PaperSize: Incomplete
    PrintMode: Incomplete
    PrinterName: Incomplete
    PrivData: Incomplete
    Quality: Incomplete
    @classmethod
    def GetBin(cls) -> PrintBin: ...
    @classmethod
    def GetCollate(cls) -> bool: ...
    @classmethod
    def GetColour(cls) -> bool: ...
    @classmethod
    def GetDuplex(cls) -> DuplexMode: ...
    @classmethod
    def GetFilename(cls) -> String: ...
    @classmethod
    def GetNoCopies(cls) -> int: ...
    @classmethod
    def GetOrientation(cls) -> PrintOrientation: ...
    @classmethod
    def GetPaperId(cls) -> PaperSize: ...
    @classmethod
    def GetPaperSize(cls) -> Size: ...
    @classmethod
    def GetPrintMode(cls) -> PrintMode: ...
    @classmethod
    def GetPrinterName(cls) -> String: ...
    @classmethod
    def GetPrivData(cls) -> PyObject: ...
    @classmethod
    def GetQuality(cls) -> PrintQuality: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def SetBin(cls, flag) -> Any: ...
    @classmethod
    def SetCollate(cls, flag) -> Any: ...
    @classmethod
    def SetColour(cls, flag) -> Any: ...
    @classmethod
    def SetDuplex(cls, mode) -> Any: ...
    @classmethod
    def SetFilename(cls, filename) -> Any: ...
    @classmethod
    def SetNoCopies(cls, n) -> Any: ...
    @classmethod
    def SetOrientation(cls, orientation) -> Any: ...
    @classmethod
    def SetPaperId(cls, paperId) -> Any: ...
    @overload
    @classmethod
    def SetPaperSize(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetPaperSize(cls, sz) -> Any: ...
    @classmethod
    def SetPrintMode(cls, printMode) -> Any: ...
    @classmethod
    def SetPrinterName(cls, printerName) -> Any: ...
    @classmethod
    def SetPrivData(cls, data) -> Any: ...
    @classmethod
    def SetQuality(cls, quality) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...

class PrintDialog(Object):
    @classmethod
    def GetPrintDC(cls) -> DC: ...
    @classmethod
    def GetPrintData(cls) -> PrintData: ...
    @classmethod
    def GetPrintDialogData(cls) -> PrintDialogData: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    @property
    def PrintDC(self): ...
    @property
    def PrintData(self): ...
    @property
    def PrintDialogData(self): ...

class PrintDialogData(Object):
    Collate: Incomplete
    FromPage: Incomplete
    MaxPage: Incomplete
    MinPage: Incomplete
    NoCopies: Incomplete
    PrintData: Incomplete
    PrintToFile: Incomplete
    Selection: Incomplete
    ToPage: Incomplete
    @classmethod
    def EnableHelp(cls, flag) -> Any: ...
    @classmethod
    def EnablePageNumbers(cls, flag) -> Any: ...
    @classmethod
    def EnablePrintToFile(cls, flag) -> Any: ...
    @classmethod
    def EnableSelection(cls, flag) -> Any: ...
    @classmethod
    def GetAllPages(cls) -> bool: ...
    @classmethod
    def GetCollate(cls) -> bool: ...
    @classmethod
    def GetFromPage(cls) -> int: ...
    @classmethod
    def GetMaxPage(cls) -> int: ...
    @classmethod
    def GetMinPage(cls) -> int: ...
    @classmethod
    def GetNoCopies(cls) -> int: ...
    @classmethod
    def GetPrintData(cls) -> PrintData: ...
    @classmethod
    def GetPrintToFile(cls) -> bool: ...
    @classmethod
    def GetSelection(cls) -> bool: ...
    @classmethod
    def GetToPage(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def SetCollate(cls, flag) -> Any: ...
    @classmethod
    def SetFromPage(cls, page) -> Any: ...
    @classmethod
    def SetMaxPage(cls, page) -> Any: ...
    @classmethod
    def SetMinPage(cls, page) -> Any: ...
    @classmethod
    def SetNoCopies(cls, n) -> Any: ...
    @classmethod
    def SetPrintData(cls, printData) -> Any: ...
    @classmethod
    def SetPrintToFile(cls, flag) -> Any: ...
    @classmethod
    def SetSelection(cls, flag) -> Any: ...
    @classmethod
    def SetToPage(cls, page) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def AllPages(self): ...

class PrintMode(int): ...

class PrintOrientation(int): ...

class PrintPreview(Object):
    Ok: ClassVar[Callable] = ...
    Canvas: Incomplete
    CurrentPage: Incomplete
    Frame: Incomplete
    Printout: Incomplete
    Zoom: Incomplete
    @classmethod
    def GetCanvas(cls) -> PreviewCanvas: ...
    @classmethod
    def GetCurrentPage(cls) -> int: ...
    @classmethod
    def GetFrame(cls) -> Frame: ...
    @classmethod
    def GetMaxPage(cls) -> int: ...
    @classmethod
    def GetMinPage(cls) -> int: ...
    @classmethod
    def GetPrintout(cls) -> Printout: ...
    @classmethod
    def GetPrintoutForPrinting(cls) -> Printout: ...
    @classmethod
    def GetZoom(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def PaintPage(cls, canvas, dc) -> bool: ...
    @classmethod
    def Print(cls, prompt) -> bool: ...
    @classmethod
    def RenderPage(cls, pageNum) -> bool: ...
    @classmethod
    def SetCanvas(cls, window) -> Any: ...
    @classmethod
    def SetCurrentPage(cls, pageNum) -> bool: ...
    @classmethod
    def SetFrame(cls, frame) -> Any: ...
    @classmethod
    def SetPrintout(cls, printout) -> Any: ...
    @classmethod
    def SetZoom(cls, percent) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls, *args, **kwargs): ...
    @property
    def MaxPage(self): ...
    @property
    def MinPage(self): ...
    @property
    def PrintoutForPrinting(self): ...

class Printer(Object):
    @classmethod
    def CreateAbortWindow(cls, parent, printout) -> PrintAbortDialog: ...
    @classmethod
    def GetAbort(cls) -> bool: ...
    @classmethod
    def GetLastError(cls) -> PrinterError: ...
    @classmethod
    def GetPrintDialogData(cls) -> PrintDialogData: ...
    @classmethod
    def Print(cls, parent, printout, prompt=...) -> bool: ...
    @classmethod
    def PrintDialog(cls, parent) -> DC: ...
    @classmethod
    def ReportError(cls, parent, printout, message) -> Any: ...
    @classmethod
    def Setup(cls, parent) -> bool: ...
    @property
    def Abort(self): ...
    @property
    def PrintDialogData(self): ...

class PrinterDC(DC):
    @classmethod
    def GetPaperRect(cls) -> Rect: ...
    @property
    def PaperRect(self): ...

class PrinterError(int): ...

class Printout(Object):
    @classmethod
    def FitThisSizeToPage(cls, imageSize) -> Any: ...
    @classmethod
    def FitThisSizeToPageMargins(cls, imageSize, pageSetupData) -> Any: ...
    @classmethod
    def FitThisSizeToPaper(cls, imageSize) -> Any: ...
    @classmethod
    def GetDC(cls) -> DC: ...
    @classmethod
    def GetLogicalPageMarginsRect(cls, pageSetupData) -> Rect: ...
    @classmethod
    def GetLogicalPageRect(cls) -> Rect: ...
    @classmethod
    def GetLogicalPaperRect(cls) -> Rect: ...
    @classmethod
    def GetPPIPrinter(cls, *args, **kwargs): ...
    @classmethod
    def GetPPIScreen(cls, *args, **kwargs): ...
    @classmethod
    def GetPageInfo(cls, *args, **kwargs): ...
    @classmethod
    def GetPageSizeMM(cls, *args, **kwargs): ...
    @classmethod
    def GetPageSizePixels(cls, *args, **kwargs): ...
    @classmethod
    def GetPaperRectPixels(cls) -> Rect: ...
    @classmethod
    def GetPreview(cls) -> PrintPreview: ...
    @classmethod
    def GetTitle(cls) -> String: ...
    @classmethod
    def HasPage(cls, pageNum) -> bool: ...
    @classmethod
    def IsPreview(cls) -> bool: ...
    @classmethod
    def MapScreenSizeToDevice(cls) -> Any: ...
    @classmethod
    def MapScreenSizeToPage(cls) -> Any: ...
    @overload
    @classmethod
    def MapScreenSizeToPageMargins(cls, pageSetupData) -> Any: ...
    @overload
    @classmethod
    def MapScreenSizeToPageMargins(cls) -> Any: ...
    @classmethod
    def MapScreenSizeToPaper(cls) -> Any: ...
    @classmethod
    def OffsetLogicalOrigin(cls, xoff, yoff) -> Any: ...
    @classmethod
    def OnBeginDocument(cls, startPage, endPage) -> bool: ...
    @classmethod
    def OnBeginPrinting(cls) -> Any: ...
    @classmethod
    def OnEndDocument(cls) -> Any: ...
    @classmethod
    def OnEndPrinting(cls) -> Any: ...
    @classmethod
    def OnPreparePrinting(cls) -> Any: ...
    @classmethod
    def OnPrintPage(cls, pageNum) -> bool: ...
    @classmethod
    def SetLogicalOrigin(cls, x, y) -> Any: ...
    @property
    def DC(self): ...
    @property
    def LogicalPageRect(self): ...
    @property
    def LogicalPaperRect(self): ...
    @property
    def PaperRectPixels(self): ...
    @property
    def Preview(self): ...
    @property
    def Title(self): ...

class Process(EvtHandler):
    @classmethod
    def Activate(cls) -> bool: ...
    @classmethod
    def CloseOutput(cls) -> Any: ...
    @classmethod
    def Detach(cls) -> Any: ...
    @classmethod
    def Exists(cls, pid) -> bool: ...
    @classmethod
    def GetErrorStream(cls) -> InputStream: ...
    @classmethod
    def GetInputStream(cls) -> InputStream: ...
    @classmethod
    def GetOutputStream(cls) -> OutputStream: ...
    @classmethod
    def GetPid(cls) -> long: ...
    @classmethod
    def IsErrorAvailable(cls) -> bool: ...
    @classmethod
    def IsInputAvailable(cls) -> bool: ...
    @classmethod
    def IsInputOpened(cls) -> bool: ...
    @classmethod
    def Kill(cls, pid, sig=..., flags=...) -> KillError: ...
    @classmethod
    def OnTerminate(cls, pid, status) -> Any: ...
    @classmethod
    def Open(cls, cmd, flags=...) -> Process: ...
    @classmethod
    def Redirect(cls) -> Any: ...
    @classmethod
    def SetPriority(cls, priority) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @property
    def ErrorStream(self): ...
    @property
    def InputStream(self): ...
    @property
    def OutputStream(self): ...
    @property
    def Pid(self): ...

class ProcessEvent(Event):
    @classmethod
    def GetExitCode(cls) -> int: ...
    @classmethod
    def GetPid(cls) -> int: ...
    @property
    def ExitCode(self): ...
    @property
    def Pid(self): ...

class ProgressDialog(GenericProgressDialog):
    Range: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMessage(cls) -> String: ...
    @classmethod
    def GetRange(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Pulse(cls, *args, **kwargs): ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Resume(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetRange(cls, maximum) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Update(cls, *args, **kwargs): ...
    def Validate(self) -> bool: ...
    @classmethod
    def WasCancelled(cls) -> bool: ...
    @classmethod
    def WasSkipped(cls) -> bool: ...
    @property
    def Message(self): ...
    @property
    def Value(self): ...

class PropagateOnce(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class PropagationDisabler(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class PyApp(AppConsole):
    AssertMode: Incomplete
    DisplayMode: Incomplete
    ExitOnFrameDelete: Incomplete
    TopWindow: Incomplete
    UseBestVisual: Incomplete
    @classmethod
    def GTKAllowDiagnosticsControl(cls) -> Any: ...
    @classmethod
    def GTKSuppressDiagnostics(cls, flags=...) -> Any: ...
    @classmethod
    def GetAssertMode(cls) -> AppAssertMode: ...
    @classmethod
    def GetComCtl32Version(cls) -> int: ...
    @classmethod
    def GetDisplayMode(cls) -> VideoMode: ...
    @classmethod
    def GetExitOnFrameDelete(cls) -> bool: ...
    @classmethod
    def GetLayoutDirection(cls) -> LayoutDirection: ...
    @classmethod
    def GetMacAboutMenuItemId(cls) -> int: ...
    @classmethod
    def GetMacExitMenuItemId(cls) -> int: ...
    @classmethod
    def GetMacHelpMenuTitleName(cls) -> Any: ...
    @classmethod
    def GetMacPreferencesMenuItemId(cls) -> int: ...
    @classmethod
    def GetMainTopWindow(cls) -> Window: ...
    @classmethod
    def GetTopWindow(cls) -> Window: ...
    @classmethod
    def GetUseBestVisual(cls) -> bool: ...
    @classmethod
    def IsActive(cls) -> bool: ...
    @classmethod
    def IsDisplayAvailable(cls) -> bool: ...
    @classmethod
    def MacHideApp(cls) -> Any: ...
    @classmethod
    def MacNewFile(cls) -> Any: ...
    @classmethod
    def MacOpenFile(cls, fileName) -> Any: ...
    @classmethod
    def MacOpenFiles(cls, fileNames) -> Any: ...
    @classmethod
    def MacOpenURL(cls, url) -> Any: ...
    @classmethod
    def MacPrintFile(cls, fileName) -> Any: ...
    @classmethod
    def MacReopenApp(cls) -> Any: ...
    def MainLoop(self) -> int: ...
    @classmethod
    def OSXEnableAutomaticTabbing(cls, enable) -> Any: ...
    @classmethod
    def OSXIsGUIApplication(cls) -> bool: ...
    def OnExit(self) -> int: ...
    def OnInit(self) -> bool: ...
    def OnInitGui(self) -> bool: ...
    def OnPreInit(self) -> Any: ...
    def OnRun(self) -> int: ...
    @classmethod
    def SafeYield(cls, win, onlyIfNeeded) -> bool: ...
    @classmethod
    def SafeYieldFor(cls, win, eventsToProcess) -> bool: ...
    @classmethod
    def SetAssertMode(cls, wxAppAssertMode) -> Any: ...
    @classmethod
    def SetDisplayMode(cls, info) -> bool: ...
    @classmethod
    def SetExitOnFrameDelete(cls, flag) -> Any: ...
    @classmethod
    def SetMacAboutMenuItemId(cls, val: int) -> Any: ...
    @classmethod
    def SetMacExitMenuItemId(cls, val: int) -> Any: ...
    @classmethod
    def SetMacHelpMenuTitleName(cls, val: Any) -> Any: ...
    @classmethod
    def SetMacPreferencesMenuItemId(cls, val: int) -> Any: ...
    @classmethod
    def SetNativeTheme(cls, theme) -> bool: ...
    @classmethod
    def SetTopWindow(cls, window) -> Any: ...
    @classmethod
    def SetUseBestVisual(cls, flag, forceTrueColour=...) -> Any: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @property
    def LayoutDirection(self): ...

class PyAssertionError(AssertionError): ...

class PyCommandEvent(CommandEvent):
    Clone: ClassVar[Callable] = ...
    def __delattr__(self, name): ...
    @classmethod
    def __getattr__(cls, name) -> PyObject: ...
    def __setattr__(self, name, value): ...

class PyEvent(Event):
    Clone: ClassVar[Callable] = ...
    def __delattr__(self, name): ...
    @classmethod
    def __getattr__(cls, name) -> PyObject: ...
    def __setattr__(self, name, value): ...

class PyNoAppError(RuntimeError): ...

class QueryNewPaletteEvent(Event):
    PaletteRealized: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPaletteRealized(cls) -> bool: ...
    @classmethod
    def SetPaletteRealized(cls, realized) -> Any: ...

class RadioBox(Control, ItemContainerImmutable):
    GetItemLabel: ClassVar[Callable] = ...
    SetItemLabel: ClassVar[Callable] = ...
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., choices=..., majorDimension=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableItem(cls, n, enable=...) -> bool: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def FindString(cls, string, bCase=...) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetColumnCount(cls) -> unsignedint: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetItemFromPoint(cls, pt) -> int: ...
    @classmethod
    def GetItemHelpText(cls, item) -> String: ...
    @classmethod
    def GetItemToolTip(cls, item) -> ToolTip: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetRowCount(cls) -> unsignedint: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetString(cls, n) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsItemEnabled(cls, n) -> bool: ...
    @classmethod
    def IsItemShown(cls, n) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetItemHelpText(cls, item, helptext) -> Any: ...
    @classmethod
    def SetItemToolTip(cls, item, text) -> Any: ...
    @classmethod
    def SetSelection(cls, n) -> Any: ...
    @classmethod
    def SetString(cls, n, string) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowItem(cls, item, show=...) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ColumnCount(self): ...
    @property
    def Count(self): ...
    @property
    def RowCount(self): ...

class RadioButton(Control):
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFirstInGroup(cls) -> RadioButton: ...
    @classmethod
    def GetLastInGroup(cls) -> RadioButton: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNextInGroup(cls) -> RadioButton: ...
    @classmethod
    def GetPreviousInGroup(cls) -> RadioButton: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def FirstInGroup(self): ...
    @property
    def LastInGroup(self): ...
    @property
    def NextInGroup(self): ...
    @property
    def PreviousInGroup(self): ...

class RasterOperationMode(int): ...

class RealPoint(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...
    @property
    def IM(self): ...

class RearrangeCtrl(Panel):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., order=..., items=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetList(cls) -> RearrangeList: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def List(self): ...

class RearrangeDialog(Dialog):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddExtraControls(cls, win) -> Any: ...
    @classmethod
    def Create(cls, parent, message, title=..., order=..., items=..., pos=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetList(cls) -> RearrangeList: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetOrder(cls) -> ArrayInt: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def List(self): ...
    @property
    def Order(self): ...

class RearrangeList(CheckListBox):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CanMoveCurrentDown(cls) -> bool: ...
    @classmethod
    def CanMoveCurrentUp(cls) -> bool: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., order=..., items=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCurrentOrder(cls) -> ArrayInt: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def MoveCurrentDown(cls) -> bool: ...
    @classmethod
    def MoveCurrentUp(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def CurrentOrder(self): ...

class Rect(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Bottom: Incomplete
    BottomLeft: Incomplete
    BottomRight: Incomplete
    Height: Incomplete
    Left: Incomplete
    Position: Incomplete
    Right: Incomplete
    Size: Incomplete
    Top: Incomplete
    TopLeft: Incomplete
    TopRight: Incomplete
    Width: Incomplete
    X: Incomplete
    Y: Incomplete
    bottom: Incomplete
    bottomLeft: Incomplete
    bottomRight: Incomplete
    left: Incomplete
    right: Incomplete
    top: Incomplete
    topLeft: Incomplete
    topRight: Incomplete
    @classmethod
    def CenterIn(cls, r, dir=...) -> Rect: ...
    @classmethod
    def CentreIn(cls, r, dir=...) -> Rect: ...
    @overload
    @classmethod
    def Contains(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def Contains(cls, pt) -> bool: ...
    @overload
    @classmethod
    def Contains(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Deflate(cls, dx, dy) -> Rect: ...
    @overload
    @classmethod
    def Deflate(cls, diff) -> Rect: ...
    @overload
    @classmethod
    def Deflate(cls, diff) -> Rect: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetBottom(cls) -> int: ...
    @classmethod
    def GetBottomLeft(cls) -> Point: ...
    @classmethod
    def GetBottomRight(cls) -> Point: ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetLeft(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetRight(cls) -> int: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetTop(cls) -> int: ...
    @classmethod
    def GetTopLeft(cls) -> Point: ...
    @classmethod
    def GetTopRight(cls) -> Point: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def GetX(cls) -> int: ...
    @classmethod
    def GetY(cls) -> int: ...
    @overload
    @classmethod
    def Inflate(cls, dx, dy) -> Rect: ...
    @overload
    @classmethod
    def Inflate(cls, diff) -> Rect: ...
    @overload
    @classmethod
    def Inflate(cls, diff) -> Rect: ...
    @classmethod
    def Intersect(cls, rect) -> Rect: ...
    @classmethod
    def Intersects(cls, rect) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @overload
    @classmethod
    def Offset(cls, dx, dy) -> Any: ...
    @overload
    @classmethod
    def Offset(cls, pt) -> Any: ...
    @classmethod
    def SetBottom(cls, bottom) -> Any: ...
    @classmethod
    def SetBottomLeft(cls, p) -> Any: ...
    @classmethod
    def SetBottomRight(cls, p) -> Any: ...
    @classmethod
    def SetHeight(cls, height) -> Any: ...
    @classmethod
    def SetLeft(cls, left) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...
    @classmethod
    def SetRight(cls, right) -> Any: ...
    @classmethod
    def SetSize(cls, s) -> Any: ...
    @classmethod
    def SetTop(cls, top) -> Any: ...
    @classmethod
    def SetTopLeft(cls, p) -> Any: ...
    @classmethod
    def SetTopRight(cls, p) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    @classmethod
    def SetX(cls, x) -> Any: ...
    @classmethod
    def SetY(cls, y) -> Any: ...
    @classmethod
    def Union(cls, rect) -> Rect: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...

class Rect2D(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Bottom: Incomplete
    Centre: Incomplete
    Left: Incomplete
    LeftBottom: Incomplete
    LeftTop: Incomplete
    Right: Incomplete
    RightBottom: Incomplete
    RightTop: Incomplete
    Top: Incomplete
    @classmethod
    def ConstrainTo(cls, rect) -> Any: ...
    @overload
    @classmethod
    def Contains(cls, pt) -> bool: ...
    @overload
    @classmethod
    def Contains(cls, rect) -> bool: ...
    @classmethod
    def CreateIntersection(cls, otherRect) -> Rect2DDouble: ...
    @classmethod
    def CreateUnion(cls, otherRect) -> Rect2DDouble: ...
    @classmethod
    def Get(cls) -> PyObject: ...
    @classmethod
    def GetBottom(cls) -> Double: ...
    @classmethod
    def GetCentre(cls) -> Point2DDouble: ...
    @classmethod
    def GetLeft(cls) -> Double: ...
    @classmethod
    def GetLeftBottom(cls) -> Point2DDouble: ...
    @classmethod
    def GetLeftTop(cls) -> Point2DDouble: ...
    @classmethod
    def GetOutCode(cls, pt) -> OutCode: ...
    @classmethod
    def GetOutcode(cls, pt) -> OutCode: ...
    @classmethod
    def GetPosition(cls) -> Point2DDouble: ...
    @classmethod
    def GetRight(cls) -> Double: ...
    @classmethod
    def GetRightBottom(cls) -> Point2DDouble: ...
    @classmethod
    def GetRightTop(cls) -> Point2DDouble: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetTop(cls) -> Double: ...
    @classmethod
    def HaveEqualSize(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Inset(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def Inset(cls, left, top, right, bottom) -> Any: ...
    @classmethod
    def Interpolate(cls, widthfactor, heightfactor) -> Point2DDouble: ...
    @overload
    @classmethod
    def Intersect(cls, otherRect) -> Any: ...
    @overload
    @classmethod
    def Intersect(cls, src1, src2, dest) -> Any: ...
    @classmethod
    def Intersects(cls, rect) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def MoveBottomTo(cls, n) -> Any: ...
    @classmethod
    def MoveCentreTo(cls, pt) -> Any: ...
    @classmethod
    def MoveLeftBottomTo(cls, pt) -> Any: ...
    @classmethod
    def MoveLeftTo(cls, n) -> Any: ...
    @classmethod
    def MoveLeftTopTo(cls, pt) -> Any: ...
    @classmethod
    def MoveRightBottomTo(cls, pt) -> Any: ...
    @classmethod
    def MoveRightTo(cls, n) -> Any: ...
    @classmethod
    def MoveRightTopTo(cls, pt) -> Any: ...
    @classmethod
    def MoveTopTo(cls, n) -> Any: ...
    @classmethod
    def Offset(cls, pt) -> Any: ...
    @overload
    @classmethod
    def Scale(cls, f) -> Any: ...
    @overload
    @classmethod
    def Scale(cls, num, denum) -> Any: ...
    @classmethod
    def SetBottom(cls, n) -> Any: ...
    @classmethod
    def SetCentre(cls, pt) -> Any: ...
    @classmethod
    def SetLeft(cls, n) -> Any: ...
    @classmethod
    def SetLeftBottom(cls, pt) -> Any: ...
    @classmethod
    def SetLeftTop(cls, pt) -> Any: ...
    @classmethod
    def SetRight(cls, n) -> Any: ...
    @classmethod
    def SetRightBottom(cls, pt) -> Any: ...
    @classmethod
    def SetRightTop(cls, pt) -> Any: ...
    @classmethod
    def SetTop(cls, n) -> Any: ...
    @overload
    @classmethod
    def Union(cls, otherRect) -> Any: ...
    @overload
    @classmethod
    def Union(cls, pt) -> Any: ...
    @overload
    @classmethod
    def Union(cls, src1, src2, dest) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def IM(self): ...
    @property
    def Position(self): ...
    @property
    def Size(self): ...

class RefCounter(sip.wrapper):
    @classmethod
    def DecRef(cls) -> Any: ...
    @classmethod
    def GetRefCount(cls) -> int: ...
    @classmethod
    def IncRef(cls) -> Any: ...
    @property
    def RefCount(self): ...

class Region(GDIObject):
    __iter__: ClassVar[Callable] = ...
    @classmethod
    def Clear(cls) -> Any: ...
    @overload
    @classmethod
    def Contains(cls, x, y) -> RegionContain: ...
    @overload
    @classmethod
    def Contains(cls, pt) -> RegionContain: ...
    @overload
    @classmethod
    def Contains(cls, x, y, width, height) -> RegionContain: ...
    @overload
    @classmethod
    def Contains(cls, rect) -> RegionContain: ...
    @classmethod
    def ConvertToBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetBox(cls) -> Rect: ...
    @overload
    @classmethod
    def Intersect(cls, x, y, width, height) -> bool: ...
    @overload
    @classmethod
    def Intersect(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Intersect(cls, region) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def IsEqual(cls, region) -> bool: ...
    @overload
    @classmethod
    def Offset(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def Offset(cls, pt) -> bool: ...
    @overload
    @classmethod
    def Subtract(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Subtract(cls, region) -> bool: ...
    @overload
    @classmethod
    def Union(cls, x, y, width, height) -> bool: ...
    @overload
    @classmethod
    def Union(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Union(cls, region) -> bool: ...
    @overload
    @classmethod
    def Union(cls, bmp) -> bool: ...
    @overload
    @classmethod
    def Union(cls, bmp, transColour, tolerance=...) -> bool: ...
    @overload
    @classmethod
    def Xor(cls, x, y, width, height) -> bool: ...
    @overload
    @classmethod
    def Xor(cls, rect) -> bool: ...
    @overload
    @classmethod
    def Xor(cls, region) -> bool: ...
    @property
    def Box(self): ...

class RegionContain(int): ...

class RegionIterator(Object):
    @classmethod
    def GetH(cls) -> Coord: ...
    @classmethod
    def GetHeight(cls) -> Coord: ...
    @classmethod
    def GetRect(cls) -> Rect: ...
    @classmethod
    def GetW(cls) -> Coord: ...
    @classmethod
    def GetWidth(cls) -> Coord: ...
    @classmethod
    def GetX(cls) -> Coord: ...
    @classmethod
    def GetY(cls) -> Coord: ...
    @classmethod
    def HaveRects(cls) -> bool: ...
    @classmethod
    def Next(cls) -> Any: ...
    @overload
    @classmethod
    def Reset(cls) -> Any: ...
    @overload
    @classmethod
    def Reset(cls, region) -> Any: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def H(self): ...
    @property
    def Height(self): ...
    @property
    def Rect(self): ...
    @property
    def W(self): ...
    @property
    def Width(self): ...
    @property
    def X(self): ...
    @property
    def Y(self): ...

class Relationship(int): ...

class RendererNative(sip.wrapper):
    @classmethod
    def DrawCheckBox(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawCheckMark(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawChoice(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawCollapseButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawComboBox(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawComboBoxDropButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawDropArrow(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawFocusRect(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawGauge(cls, win, dc, rect, value, max, flags=...) -> Any: ...
    @classmethod
    def DrawHeaderButton(cls, win, dc, rect, flags=..., sortArrow=..., params=...) -> int: ...
    @classmethod
    def DrawHeaderButtonContents(cls, win, dc, rect, flags=..., sortArrow=..., params=...) -> int: ...
    @classmethod
    def DrawItemSelectionRect(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawItemText(cls, win, dc, text, rect, align=..., flags=..., ellipsizeMode=...) -> Any: ...
    @classmethod
    def DrawPushButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawRadioBitmap(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawSplitterBorder(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawSplitterSash(cls, win, dc, size, position, orient, flags=...) -> Any: ...
    @classmethod
    def DrawTextCtrl(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def DrawTitleBarBitmap(cls, win, dc, rect, button, flags=...) -> Any: ...
    @classmethod
    def DrawTreeItemButton(cls, win, dc, rect, flags=...) -> Any: ...
    @classmethod
    def Get(cls) -> RendererNative: ...
    @classmethod
    def GetCheckBoxSize(cls, win, flags=...) -> Size: ...
    @classmethod
    def GetCheckMarkSize(cls, win) -> Size: ...
    @classmethod
    def GetCollapseButtonSize(cls, win, dc) -> Size: ...
    @classmethod
    def GetDefault(cls) -> RendererNative: ...
    @classmethod
    def GetExpanderSize(cls, win) -> Size: ...
    @classmethod
    def GetGeneric(cls) -> RendererNative: ...
    @classmethod
    def GetHeaderButtonHeight(cls, win) -> int: ...
    @classmethod
    def GetHeaderButtonMargin(cls, win) -> int: ...
    @classmethod
    def GetSplitterParams(cls, win) -> SplitterRenderParams: ...
    @classmethod
    def GetVersion(cls) -> RendererVersion: ...
    @classmethod
    def Load(cls, name) -> RendererNative: ...
    @classmethod
    def Set(cls, renderer) -> RendererNative: ...
    @property
    def Version(self): ...

class RendererVersion(sip.wrapper):
    @classmethod
    def IsCompatible(cls, ver) -> bool: ...

class RichMessageDialog(GenericMessageDialog):
    FooterIcon: Incomplete
    FooterText: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddMessageDialogCheckBox(cls, *args, **kwargs): ...
    @classmethod
    def AddMessageDialogDetails(cls, *args, **kwargs): ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetCheckBoxText(cls) -> String: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDetailedText(cls) -> String: ...
    @classmethod
    def GetFooterIcon(cls) -> int: ...
    @classmethod
    def GetFooterText(cls) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsCheckBoxChecked(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetFooterIcon(cls, icon) -> Any: ...
    @classmethod
    def SetFooterText(cls, footerText) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowCheckBox(cls, checkBoxText, checked=...) -> Any: ...
    @classmethod
    def ShowDetailedText(cls, detailedText) -> Any: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def CheckBoxText(self): ...
    @property
    def DetailedText(self): ...

class RotateGestureEvent(GestureEvent):
    RotationAngle: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetRotationAngle(cls) -> double: ...
    @classmethod
    def SetRotationAngle(cls, rotationAngle) -> Any: ...

class SVGBitmapEmbedHandler(SVGBitmapHandler):
    @classmethod
    def ProcessBitmap(cls, bitmap, x, y, stream) -> bool: ...

class SVGBitmapFileHandler(SVGBitmapHandler):
    @classmethod
    def ProcessBitmap(cls, bitmap, x, y, stream) -> bool: ...

class SVGBitmapHandler(sip.wrapper):
    @classmethod
    def ProcessBitmap(cls, bitmap, x, y, stream) -> bool: ...

class SVGFileDC(DC):
    LogicalFunction: Incomplete
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def CrossHair(cls, x, y) -> Any: ...
    @classmethod
    def DestroyClippingRegion(cls) -> Any: ...
    @classmethod
    def EndDoc(cls) -> Any: ...
    @classmethod
    def EndPage(cls) -> Any: ...
    @classmethod
    def FloodFill(cls, x, y, colour, style=...) -> bool: ...
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetLogicalFunction(cls) -> RasterOperationMode: ...
    @classmethod
    def GetPixel(cls, x, y, colour) -> bool: ...
    @classmethod
    def SetBitmapHandler(cls, handler) -> Any: ...
    @classmethod
    def SetLogicalFunction(cls, function) -> Any: ...
    @classmethod
    def SetPalette(cls, palette) -> Any: ...
    @classmethod
    def SetShapeRenderingMode(cls, renderingMode) -> Any: ...
    @classmethod
    def StartDoc(cls, message) -> bool: ...
    @classmethod
    def StartPage(cls) -> Any: ...
    @property
    def Depth(self): ...

class SVGShapeRenderingMode(int): ...

class ScreenDC(DC):
    @classmethod
    def EndDrawingOnTop(cls) -> bool: ...
    @overload
    @classmethod
    def StartDrawingOnTop(cls, window) -> bool: ...
    @overload
    @classmethod
    def StartDrawingOnTop(cls, rect=...) -> bool: ...

class ScrollBar(Control):
    ThumbPosition: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetPageSize(cls) -> int: ...
    @classmethod
    def GetRange(cls) -> int: ...
    @classmethod
    def GetThumbPosition(cls) -> int: ...
    @classmethod
    def GetThumbSize(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsVertical(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetScrollbar(cls, position, thumbSize, range, pageSize, refresh=...) -> Any: ...
    @classmethod
    def SetThumbPosition(cls, viewStart) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def PageSize(self): ...
    @property
    def Range(self): ...
    @property
    def ThumbSize(self): ...

class ScrollEvent(CommandEvent):
    Orientation: Incomplete
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetOrientation(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> int: ...
    @classmethod
    def SetOrientation(cls, orient) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...

class ScrollWinEvent(Event):
    Orientation: Incomplete
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetOrientation(cls) -> int: ...
    @classmethod
    def GetPosition(cls) -> int: ...
    @classmethod
    def SetOrientation(cls, orient) -> Any: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...

class ScrollbarVisibility(int): ...

class ScrolledCanvas(Window):
    TargetRect: Incomplete
    TargetWindow: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AdjustScrollbars(cls) -> Any: ...
    @classmethod
    def CalcScrolledPosition(cls, pt) -> Point: ...
    @classmethod
    def CalcUnscrolledPosition(cls, pt) -> Point: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def DisableKeyboardScrolling(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    @classmethod
    def DoPrepareDC(cls, dc) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableScrolling(cls, xScrolling, yScrolling) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetScaleX(cls) -> double: ...
    @classmethod
    def GetScaleY(cls) -> double: ...
    @classmethod
    def GetScrollLines(cls, orient) -> int: ...
    @classmethod
    def GetScrollPageSize(cls, orient) -> int: ...
    @classmethod
    def GetScrollPixelsPerUnit(cls, *args, **kwargs): ...
    @classmethod
    def GetSizeAvailableForScrollTarget(cls, size) -> Size: ...
    @classmethod
    def GetTargetRect(cls) -> Rect: ...
    @classmethod
    def GetTargetWindow(cls) -> Window: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetViewStart(cls, *args, **kwargs): ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsAutoScrolling(cls) -> bool: ...
    @classmethod
    def IsRetained(cls) -> bool: ...
    @classmethod
    def OnDraw(cls, dc) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PrepareDC(cls, dc) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @overload
    @classmethod
    def Scroll(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def Scroll(cls, pt) -> Any: ...
    @classmethod
    def SendAutoScrollEvents(cls, event) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetScale(cls, xs, ys) -> Any: ...
    @classmethod
    def SetScrollPageSize(cls, orient, pageSize) -> Any: ...
    @classmethod
    def SetScrollRate(cls, xstep, ystep) -> Any: ...
    @classmethod
    def SetScrollbars(cls, pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=..., yPos=..., noRefresh=...) -> Any: ...
    @classmethod
    def SetTargetRect(cls, rect) -> Any: ...
    @classmethod
    def SetTargetWindow(cls, window) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShouldScrollToChildOnFocus(cls, child) -> bool: ...
    @classmethod
    def ShowScrollbars(cls, horz, vert) -> Any: ...
    @classmethod
    def StopAutoScrolling(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ScaleX(self): ...
    @property
    def ScaleY(self): ...

class ScrolledWindow(_ScrolledWindowBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSizeAvailableForScrollTarget(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetFocusIgnoringChildren(cls) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShouldScrollToChildOnFocus(cls, *args, **kwargs): ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class SearchCtrl(Control):
    CancelButtonVisible: Incomplete
    DescriptiveText: Incomplete
    Hint: Incomplete
    InsertionPoint: Incomplete
    Margins: Incomplete
    Menu: Incomplete
    SearchButtonVisible: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AppendText(cls, text) -> Any: ...
    @overload
    @classmethod
    def AutoComplete(cls, choices) -> bool: ...
    @overload
    @classmethod
    def AutoComplete(cls, completer) -> bool: ...
    @classmethod
    def AutoCompleteDirectories(cls) -> bool: ...
    @classmethod
    def AutoCompleteFileNames(cls) -> bool: ...
    @classmethod
    def CanCopy(cls) -> bool: ...
    @classmethod
    def CanCut(cls) -> bool: ...
    @classmethod
    def CanPaste(cls) -> bool: ...
    @classmethod
    def CanRedo(cls) -> bool: ...
    @classmethod
    def CanUndo(cls) -> bool: ...
    @classmethod
    def ChangeValue(cls, value) -> Any: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def Copy(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def Cut(cls) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def ForceUpper(cls) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDescriptiveText(cls) -> String: ...
    @classmethod
    def GetHint(cls) -> String: ...
    @classmethod
    def GetInsertionPoint(cls) -> long: ...
    @classmethod
    def GetLastPosition(cls) -> TextPos: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMargins(cls) -> Point: ...
    @classmethod
    def GetMenu(cls) -> Menu: ...
    @classmethod
    def GetRange(cls, from_, to_) -> String: ...
    @classmethod
    def GetSelection(cls, *args, **kwargs): ...
    @classmethod
    def GetStringSelection(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> String: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsCancelButtonVisible(cls) -> bool: ...
    @classmethod
    def IsEditable(cls) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def IsSearchButtonVisible(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def Paste(cls) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Redo(cls) -> Any: ...
    @classmethod
    def Remove(cls, from_, to_) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Replace(cls, from_, to_, value) -> Any: ...
    @classmethod
    def SelectAll(cls) -> Any: ...
    @classmethod
    def SelectNone(cls) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetCancelBitmap(cls, bmp) -> Any: ...
    @classmethod
    def SetDescriptiveText(cls, text) -> Any: ...
    @classmethod
    def SetEditable(cls, editable) -> Any: ...
    @classmethod
    def SetHint(cls, hint) -> bool: ...
    @classmethod
    def SetInsertionPoint(cls, pos) -> Any: ...
    @classmethod
    def SetInsertionPointEnd(cls) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, pt) -> bool: ...
    @overload
    @classmethod
    def SetMargins(cls, left, top=...) -> bool: ...
    @classmethod
    def SetMaxLength(cls, len) -> Any: ...
    @classmethod
    def SetMenu(cls, menu) -> Any: ...
    @classmethod
    def SetSearchBitmap(cls, bmp) -> Any: ...
    @classmethod
    def SetSearchMenuBitmap(cls, bmp) -> Any: ...
    @classmethod
    def SetSelection(cls, from_, to_) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowCancelButton(cls, show) -> Any: ...
    @classmethod
    def ShowSearchButton(cls, show) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Undo(cls) -> Any: ...
    def Validate(self) -> bool: ...
    @classmethod
    def WriteText(cls, text) -> Any: ...
    @property
    def LastPosition(self): ...
    @property
    def StringSelection(self): ...

class SeekMode(int): ...

class SetCursorEvent(Event):
    Cursor: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetCursor(cls) -> Cursor: ...
    @classmethod
    def GetX(cls) -> Coord: ...
    @classmethod
    def GetY(cls) -> Coord: ...
    @classmethod
    def HasCursor(cls) -> bool: ...
    @classmethod
    def SetCursor(cls, cursor) -> Any: ...
    @property
    def X(self): ...
    @property
    def Y(self): ...

class SettableHeaderColumn(HeaderColumn):
    Alignment: Incomplete
    Bitmap: Incomplete
    Flags: Incomplete
    Hidden: Incomplete
    MinWidth: Incomplete
    Reorderable: Incomplete
    Resizeable: Incomplete
    Sortable: Incomplete
    Title: Incomplete
    Width: Incomplete
    @classmethod
    def ChangeFlag(cls, flag, set) -> Any: ...
    @classmethod
    def ClearFlag(cls, flag) -> Any: ...
    @classmethod
    def SetAlignment(cls, align) -> Any: ...
    @classmethod
    def SetBitmap(cls, bitmap) -> Any: ...
    @classmethod
    def SetFlag(cls, flag) -> Any: ...
    @classmethod
    def SetFlags(cls, flags) -> Any: ...
    @classmethod
    def SetHidden(cls, hidden) -> Any: ...
    @classmethod
    def SetMinWidth(cls, minWidth) -> Any: ...
    @classmethod
    def SetReorderable(cls, reorderable) -> Any: ...
    @classmethod
    def SetResizeable(cls, resizable) -> Any: ...
    @classmethod
    def SetSortOrder(cls, ascending) -> Any: ...
    @classmethod
    def SetSortable(cls, sortable) -> Any: ...
    @classmethod
    def SetTitle(cls, title) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    @classmethod
    def ToggleFlag(cls, flag) -> Any: ...
    @classmethod
    def ToggleSortOrder(cls) -> Any: ...
    @classmethod
    def UnsetAsSortKey(cls) -> Any: ...

class SharedClientDataContainer(sip.wrapper):
    ClientData: Incomplete
    ClientObject: Incomplete
    @classmethod
    def GetClientData(cls) -> void: ...
    @classmethod
    def GetClientObject(cls) -> ClientData: ...
    @classmethod
    def SetClientData(cls, data) -> Any: ...
    @classmethod
    def SetClientObject(cls, data) -> Any: ...

class ShowEffect(int): ...

class ShowEvent(Event):
    Show: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def IsShown(cls) -> bool: ...
    @classmethod
    def SetShow(cls, show) -> Any: ...

class ShutdownFlags(int): ...

class Signal(int): ...

class SimpleHelpProvider(HelpProvider):
    def GetHelp(self, window: WindowBase | None) -> Any: ...

class Simplebook(BookCtrlBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def ChangeSelection(self, page: int) -> int: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetPageImage(self, nPage: int) -> int: ...
    def GetPageText(self, nPage: int) -> Any: ...
    def GetSelection(self) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def InsertPage(self, index: int, page: Window | None, text: Any, select: bool = ..., imageId: int = ...) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetEffect(cls, effect) -> Any: ...
    @classmethod
    def SetEffectTimeout(cls, timeout) -> Any: ...
    @classmethod
    def SetEffects(cls, showEffect, hideEffect) -> Any: ...
    @classmethod
    def SetEffectsTimeouts(cls, showTimeout, hideTimeout) -> Any: ...
    def SetPageImage(self, page: int, image: int) -> bool: ...
    def SetPageText(self, page: int, text: Any) -> bool: ...
    def SetSelection(self, page: int) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowNewPage(cls, page) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class SingleChoiceDialog(Dialog):
    Selection: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetStringSelection(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetSelection(cls, selection) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def StringSelection(self): ...

class SingleInstanceChecker(sip.wrapper):
    @classmethod
    def Create(cls, name, path=...) -> bool: ...
    @classmethod
    def CreateDefault(cls) -> bool: ...
    @classmethod
    def IsAnotherRunning(cls) -> bool: ...

class Size(sip.wrapper):
    GetIM: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    __len__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    __reduce__: ClassVar[Callable] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    __setitem__: ClassVar[Callable] = ...
    Height: Incomplete
    Width: Incomplete
    height: Incomplete
    width: Incomplete
    x: Incomplete
    y: Incomplete
    @overload
    @classmethod
    def DecBy(cls, pt) -> Any: ...
    @overload
    @classmethod
    def DecBy(cls, size) -> Any: ...
    @overload
    @classmethod
    def DecBy(cls, dx, dy) -> Any: ...
    @overload
    @classmethod
    def DecBy(cls, d) -> Any: ...
    @classmethod
    def DecTo(cls, size) -> Any: ...
    @classmethod
    def DecToIfSpecified(cls, size) -> Any: ...
    @classmethod
    def Get(cls, *args, **kwargs): ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @overload
    @classmethod
    def IncBy(cls, pt) -> Any: ...
    @overload
    @classmethod
    def IncBy(cls, size) -> Any: ...
    @overload
    @classmethod
    def IncBy(cls, dx, dy) -> Any: ...
    @overload
    @classmethod
    def IncBy(cls, d) -> Any: ...
    @classmethod
    def IncTo(cls, size) -> Any: ...
    @classmethod
    def IsFullySpecified(cls) -> bool: ...
    @classmethod
    def Scale(cls, xscale, yscale) -> Size: ...
    @classmethod
    def Set(cls, width, height) -> Any: ...
    @classmethod
    def SetDefaults(cls, sizeDefault) -> Any: ...
    @classmethod
    def SetHeight(cls, height) -> Any: ...
    @classmethod
    def SetWidth(cls, width) -> Any: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class SizeEvent(Event):
    Rect: Incomplete
    Size: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetRect(cls) -> Rect: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def SetRect(cls, rect) -> Any: ...
    @classmethod
    def SetSize(cls, size) -> Any: ...

class Sizer(Object):
    AddMany: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __iter__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    ContainingWindow: Incomplete
    MinSize: Incomplete
    @overload
    @classmethod
    def Add(cls, window, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, window, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, sizer, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, sizer, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, width, height, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, width, height, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, item) -> SizerItem: ...
    @overload
    @classmethod
    def Add(cls, size, flags) -> SizerItem: ...
    @classmethod
    def AddSpacer(cls, size) -> SizerItem: ...
    @classmethod
    def AddStretchSpacer(cls, prop=...) -> SizerItem: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def Clear(cls, delete_windows=...) -> Any: ...
    @classmethod
    def ComputeFittingClientSize(cls, window) -> Size: ...
    @classmethod
    def ComputeFittingWindowSize(cls, window) -> Size: ...
    @overload
    @classmethod
    def Detach(cls, window) -> bool: ...
    @overload
    @classmethod
    def Detach(cls, sizer) -> bool: ...
    @overload
    @classmethod
    def Detach(cls, index) -> bool: ...
    @classmethod
    def Fit(cls, window) -> Size: ...
    @classmethod
    def FitInside(cls, window) -> Any: ...
    @classmethod
    def GetChildren(cls) -> SizerItemList: ...
    @classmethod
    def GetContainingWindow(cls) -> Window: ...
    @overload
    @classmethod
    def GetItem(cls, window, recursive=...) -> SizerItem: ...
    @overload
    @classmethod
    def GetItem(cls, sizer, recursive=...) -> SizerItem: ...
    @overload
    @classmethod
    def GetItem(cls, index) -> SizerItem: ...
    @classmethod
    def GetItemById(cls, id, recursive=...) -> SizerItem: ...
    @classmethod
    def GetItemCount(cls) -> size_t: ...
    @classmethod
    def GetMinSize(cls) -> Size: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @overload
    @classmethod
    def Hide(cls, window, recursive=...) -> bool: ...
    @overload
    @classmethod
    def Hide(cls, sizer, recursive=...) -> bool: ...
    @overload
    @classmethod
    def Hide(cls, index) -> bool: ...
    @classmethod
    def InformFirstDirection(cls, direction, size, availableOtherDir) -> bool: ...
    @overload
    @classmethod
    def Insert(cls, index, window, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, window, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, sizer, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, sizer, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, width, height, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, width, height, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, item) -> SizerItem: ...
    @overload
    @classmethod
    def Insert(cls, index, size, flags) -> SizerItem: ...
    @classmethod
    def InsertSpacer(cls, index, size) -> SizerItem: ...
    @classmethod
    def InsertStretchSpacer(cls, index, prop=...) -> SizerItem: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @overload
    @classmethod
    def IsShown(cls, window) -> bool: ...
    @overload
    @classmethod
    def IsShown(cls, sizer) -> bool: ...
    @overload
    @classmethod
    def IsShown(cls, index) -> bool: ...
    @classmethod
    def Layout(cls) -> Any: ...
    @overload
    @classmethod
    def Prepend(cls, window, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, window, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, sizer, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, sizer, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, width, height, proportion=..., flag=..., border=..., userData=...) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, width, height, flags) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, item) -> SizerItem: ...
    @overload
    @classmethod
    def Prepend(cls, size, flags) -> SizerItem: ...
    @classmethod
    def PrependSpacer(cls, size) -> SizerItem: ...
    @classmethod
    def PrependStretchSpacer(cls, prop=...) -> SizerItem: ...
    @classmethod
    def RecalcSizes(cls) -> Any: ...
    @overload
    @classmethod
    def Remove(cls, sizer) -> bool: ...
    @overload
    @classmethod
    def Remove(cls, index) -> bool: ...
    @overload
    @classmethod
    def Replace(cls, oldwin, newwin, recursive=...) -> bool: ...
    @overload
    @classmethod
    def Replace(cls, oldsz, newsz, recursive=...) -> bool: ...
    @overload
    @classmethod
    def Replace(cls, index, newitem) -> bool: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetContainingWindow(cls, window) -> Any: ...
    @overload
    @classmethod
    def SetDimension(cls, x, y, width, height) -> Any: ...
    @overload
    @classmethod
    def SetDimension(cls, pos, size) -> Any: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, window, width, height) -> bool: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, window, size) -> bool: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, sizer, width, height) -> bool: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, sizer, size) -> bool: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, index, width, height) -> bool: ...
    @overload
    @classmethod
    def SetItemMinSize(cls, index, size) -> bool: ...
    @overload
    @classmethod
    def SetMinSize(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetMinSize(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls, window) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls) -> Any: ...
    @overload
    @classmethod
    def Show(cls, window, show=..., recursive=...) -> bool: ...
    @overload
    @classmethod
    def Show(cls, sizer, show=..., recursive=...) -> bool: ...
    @overload
    @classmethod
    def Show(cls, index, show=...) -> bool: ...
    @classmethod
    def ShowItems(cls, show) -> Any: ...
    @property
    def Children(self): ...
    @property
    def ItemCount(self): ...
    @property
    def Position(self): ...
    @property
    def Size(self): ...

class SizerFlagBits(int): ...

class SizerFlags(sip.wrapper):
    @classmethod
    def Align(cls, alignment) -> SizerFlags: ...
    @overload
    @classmethod
    def Border(cls, direction, borderinpixels) -> SizerFlags: ...
    @overload
    @classmethod
    def Border(cls, direction=...) -> SizerFlags: ...
    @classmethod
    def Bottom(cls) -> SizerFlags: ...
    @classmethod
    def Center(cls) -> SizerFlags: ...
    @classmethod
    def CenterHorizontal(cls) -> SizerFlags: ...
    @classmethod
    def CenterVertical(cls) -> SizerFlags: ...
    @classmethod
    def Centre(cls) -> SizerFlags: ...
    @classmethod
    def CentreHorizontal(cls) -> SizerFlags: ...
    @classmethod
    def CentreVertical(cls) -> SizerFlags: ...
    @classmethod
    def DisableConsistencyChecks(cls) -> Any: ...
    @classmethod
    def DoubleBorder(cls, direction=...) -> SizerFlags: ...
    @classmethod
    def DoubleHorzBorder(cls) -> SizerFlags: ...
    @classmethod
    def Expand(cls) -> SizerFlags: ...
    @classmethod
    def FixedMinSize(cls) -> SizerFlags: ...
    @classmethod
    def GetDefaultBorder(cls) -> int: ...
    @classmethod
    def GetDefaultBorderFractional(cls) -> float: ...
    @classmethod
    def HorzBorder(cls) -> SizerFlags: ...
    @classmethod
    def Left(cls) -> SizerFlags: ...
    @classmethod
    def Proportion(cls, proportion) -> SizerFlags: ...
    @classmethod
    def ReserveSpaceEvenIfHidden(cls) -> SizerFlags: ...
    @classmethod
    def Right(cls) -> SizerFlags: ...
    @classmethod
    def Shaped(cls) -> SizerFlags: ...
    @classmethod
    def Top(cls) -> SizerFlags: ...
    @classmethod
    def TripleBorder(cls, direction=...) -> SizerFlags: ...

class SizerItem(Object):
    Border: Incomplete
    Flag: Incomplete
    Id: Incomplete
    MinSize: Incomplete
    Proportion: Incomplete
    Ratio: Incomplete
    UserData: Incomplete
    @classmethod
    def AssignSizer(cls, sizer) -> Any: ...
    @overload
    @classmethod
    def AssignSpacer(cls, size) -> Any: ...
    @overload
    @classmethod
    def AssignSpacer(cls, w, h) -> Any: ...
    @classmethod
    def AssignWindow(cls, window) -> Any: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def DeleteWindows(cls) -> Any: ...
    @classmethod
    def DetachSizer(cls) -> Any: ...
    @classmethod
    def GetBorder(cls) -> int: ...
    @classmethod
    def GetFlag(cls) -> int: ...
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetMinSize(cls) -> Size: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetProportion(cls) -> int: ...
    @classmethod
    def GetRatio(cls) -> float: ...
    @classmethod
    def GetRect(cls) -> Rect: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetSizer(cls) -> Sizer: ...
    @classmethod
    def GetSpacer(cls) -> Size: ...
    @classmethod
    def GetUserData(cls) -> PyUserData: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def IsShown(cls) -> bool: ...
    @classmethod
    def IsSizer(cls) -> bool: ...
    @classmethod
    def IsSpacer(cls) -> bool: ...
    @classmethod
    def IsWindow(cls) -> bool: ...
    @classmethod
    def SetBorder(cls, border) -> Any: ...
    @classmethod
    def SetDimension(cls, pos, size) -> Any: ...
    @classmethod
    def SetFlag(cls, flag) -> Any: ...
    @classmethod
    def SetId(cls, id) -> Any: ...
    @classmethod
    def SetInitSize(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def SetMinSize(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetMinSize(cls, x, y) -> Any: ...
    @classmethod
    def SetProportion(cls, proportion) -> Any: ...
    @overload
    @classmethod
    def SetRatio(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetRatio(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetRatio(cls, ratio) -> Any: ...
    @classmethod
    def SetUserData(cls, userData) -> Any: ...
    @classmethod
    def Show(cls, show) -> Any: ...
    @property
    def Position(self): ...
    @property
    def Rect(self): ...
    @property
    def Size(self): ...
    @property
    def Sizer(self): ...
    @property
    def Spacer(self): ...
    @property
    def Window(self): ...

class SizerItemList(sip.wrapper):
    def index(self, obj: SizerItem | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class SizerItemList_iterator(sip.wrapper):
    def __next__(self): ...

class Slider(Control):
    GetRange: ClassVar[Callable] = ...
    LineSize: Incomplete
    Max: Incomplete
    Min: Incomplete
    PageSize: Incomplete
    ThumbLength: Incomplete
    TickFreq: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ClearSel(cls) -> Any: ...
    @classmethod
    def ClearTicks(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., minValue=..., maxValue=..., point=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetLineSize(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMax(cls) -> int: ...
    @classmethod
    def GetMin(cls) -> int: ...
    @classmethod
    def GetPageSize(cls) -> int: ...
    @classmethod
    def GetSelEnd(cls) -> int: ...
    @classmethod
    def GetSelStart(cls) -> int: ...
    @classmethod
    def GetThumbLength(cls) -> int: ...
    @classmethod
    def GetTickFreq(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetLineSize(cls, lineSize) -> Any: ...
    @classmethod
    def SetMax(cls, maxValue) -> Any: ...
    @classmethod
    def SetMin(cls, minValue) -> Any: ...
    @classmethod
    def SetPageSize(cls, pageSize) -> Any: ...
    @classmethod
    def SetRange(cls, minValue, maxValue) -> Any: ...
    @classmethod
    def SetSelection(cls, startPos, endPos) -> Any: ...
    @classmethod
    def SetThumbLength(cls, len) -> Any: ...
    @classmethod
    def SetTick(cls, tickPos) -> Any: ...
    @classmethod
    def SetTickFreq(cls, freq) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Range(self): ...
    @property
    def SelEnd(self): ...
    @property
    def SelStart(self): ...

class SpinButton(Control):
    GetRange: ClassVar[Callable] = ...
    SetMax: ClassVar[Callable] = ...
    SetMin: ClassVar[Callable] = ...
    Increment: Incomplete
    Max: Incomplete
    Min: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetIncrement(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMax(cls) -> int: ...
    @classmethod
    def GetMin(cls) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetIncrement(cls, value) -> Any: ...
    @classmethod
    def SetRange(cls, min, max) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Range(self): ...

class SpinCtrl(Control):
    GetRange: ClassVar[Callable] = ...
    SetMax: ClassVar[Callable] = ...
    SetMin: ClassVar[Callable] = ...
    Base: Incomplete
    Increment: Incomplete
    Max: Incomplete
    Min: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., style=..., min=..., max=..., initial=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBase(cls) -> int: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetIncrement(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMax(cls) -> int: ...
    @classmethod
    def GetMin(cls) -> int: ...
    @classmethod
    def GetTextValue(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetBase(cls, base) -> bool: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetIncrement(cls, value) -> Any: ...
    @classmethod
    def SetRange(cls, minVal, maxVal) -> Any: ...
    @classmethod
    def SetSelection(cls, from_, to_) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @overload
    @classmethod
    def SetValue(cls, text) -> Any: ...
    @overload
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Range(self): ...
    @property
    def TextValue(self): ...

class SpinCtrlDouble(Control):
    GetRange: ClassVar[Callable] = ...
    SetMax: ClassVar[Callable] = ...
    SetMin: ClassVar[Callable] = ...
    Digits: Incomplete
    Increment: Incomplete
    Max: Incomplete
    Min: Incomplete
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., style=..., min=..., max=..., initial=..., inc=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDigits(cls) -> unsignedint: ...
    @classmethod
    def GetIncrement(cls) -> double: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMax(cls) -> double: ...
    @classmethod
    def GetMin(cls) -> double: ...
    @classmethod
    def GetTextValue(cls) -> String: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> double: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDigits(cls, digits) -> Any: ...
    @classmethod
    def SetIncrement(cls, inc) -> Any: ...
    @classmethod
    def SetRange(cls, minVal, maxVal) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @overload
    @classmethod
    def SetValue(cls, text) -> Any: ...
    @overload
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Range(self): ...
    @property
    def TextValue(self): ...

class SpinDoubleEvent(NotifyEvent):
    Value: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetValue(cls) -> double: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...

class SpinEvent(NotifyEvent):
    Position: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetPosition(cls) -> int: ...
    @classmethod
    def SetPosition(cls, pos) -> Any: ...

class SplitMode(int): ...

class SplitterEvent(NotifyEvent):
    SashPosition: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetOldSize(cls) -> int: ...
    @classmethod
    def GetSashPosition(cls) -> int: ...
    @classmethod
    def GetWindowBeingRemoved(cls) -> Window: ...
    @classmethod
    def GetX(cls) -> int: ...
    @classmethod
    def GetY(cls) -> int: ...
    @classmethod
    def SetSashPosition(cls, pos) -> Any: ...
    @classmethod
    def SetSize(cls, oldSize, newSize) -> Any: ...
    @property
    def OldSize(self): ...
    @property
    def WindowBeingRemoved(self): ...
    @property
    def X(self): ...
    @property
    def Y(self): ...

class SplitterRenderParams(sip.wrapper): ...

class SplitterWindow(Window):
    MinimumPaneSize: Incomplete
    SashGravity: Incomplete
    SashInvisible: Incomplete
    SashPosition: Incomplete
    SplitMode: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., point=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultSashSize(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMinimumPaneSize(cls) -> int: ...
    @classmethod
    def GetSashGravity(cls) -> double: ...
    @classmethod
    def GetSashPosition(cls) -> int: ...
    @classmethod
    def GetSashSize(cls) -> int: ...
    @classmethod
    def GetSplitMode(cls) -> SplitMode: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetWindow1(cls) -> Window: ...
    @classmethod
    def GetWindow2(cls) -> Window: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def Initialize(cls, window) -> Any: ...
    @classmethod
    def IsSashInvisible(cls) -> bool: ...
    @classmethod
    def IsSplit(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ReplaceWindow(cls, winOld, winNew) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetMinimumPaneSize(cls, paneSize) -> Any: ...
    @classmethod
    def SetSashGravity(cls, gravity) -> Any: ...
    @classmethod
    def SetSashInvisible(cls, invisible=...) -> Any: ...
    @classmethod
    def SetSashPosition(cls, position, redraw=...) -> Any: ...
    @classmethod
    def SetSplitMode(cls, mode) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def SplitHorizontally(cls, window1, window2, sashPosition=...) -> bool: ...
    @classmethod
    def SplitVertically(cls, window1, window2, sashPosition=...) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Unsplit(cls, toRemove=...) -> bool: ...
    @classmethod
    def UpdateSize(cls) -> Any: ...
    def Validate(self) -> bool: ...
    @property
    def DefaultSashSize(self): ...
    @property
    def SashSize(self): ...
    @property
    def Window1(self): ...
    @property
    def Window2(self): ...

class StandardID(int): ...

class StandardPaths(sip.wrapper):
    class ConfigFileConv(int):
        def __reduce__(self): ...

    class Dir(int):
        def __reduce__(self): ...

    class FileLayout(int):
        def __reduce__(self): ...

    class ResourceCat(int):
        def __reduce__(self): ...
    ConfigFileConv_Dot: ClassVar[StandardPaths.ConfigFileConv] = ...
    ConfigFileConv_Ext: ClassVar[StandardPaths.ConfigFileConv] = ...
    Dir_Cache: ClassVar[StandardPaths.Dir] = ...
    Dir_Desktop: ClassVar[StandardPaths.Dir] = ...
    Dir_Documents: ClassVar[StandardPaths.Dir] = ...
    Dir_Downloads: ClassVar[StandardPaths.Dir] = ...
    Dir_Music: ClassVar[StandardPaths.Dir] = ...
    Dir_Pictures: ClassVar[StandardPaths.Dir] = ...
    Dir_Videos: ClassVar[StandardPaths.Dir] = ...
    FileLayout_Classic: ClassVar[StandardPaths.FileLayout] = ...
    FileLayout_XDG: ClassVar[StandardPaths.FileLayout] = ...
    ResourceCat_Messages: ClassVar[StandardPaths.ResourceCat] = ...
    ResourceCat_None: ClassVar[StandardPaths.ResourceCat] = ...
    InstallPrefix: Incomplete
    @classmethod
    def Get(cls) -> StandardPaths: ...
    @classmethod
    def GetAppDocumentsDir(cls) -> String: ...
    @classmethod
    def GetConfigDir(cls) -> String: ...
    @classmethod
    def GetDataDir(cls) -> String: ...
    @classmethod
    def GetDocumentsDir(cls) -> String: ...
    @classmethod
    def GetExecutablePath(cls) -> String: ...
    @classmethod
    def GetFileLayout(cls) -> FileLayout: ...
    @classmethod
    def GetInstallPrefix(cls) -> String: ...
    @classmethod
    def GetLocalDataDir(cls) -> String: ...
    @classmethod
    def GetLocalizedResourcesDir(cls, lang, category=...) -> String: ...
    @classmethod
    def GetPluginsDir(cls) -> String: ...
    @classmethod
    def GetResourcesDir(cls) -> String: ...
    @classmethod
    def GetTempDir(cls) -> String: ...
    @classmethod
    def GetUserConfigDir(cls) -> String: ...
    @classmethod
    def GetUserDataDir(cls) -> String: ...
    @classmethod
    def GetUserDir(cls, userDir) -> String: ...
    @classmethod
    def GetUserLocalDataDir(cls) -> String: ...
    @classmethod
    def MSWGetShellDir(cls, csidl) -> String: ...
    @classmethod
    def MakeConfigFileName(cls, basename, conv=...) -> String: ...
    @classmethod
    def SetFileLayout(cls, layout) -> Any: ...
    @classmethod
    def SetInstallPrefix(cls, prefix) -> Any: ...
    @classmethod
    def UseAppInfo(cls, info) -> Any: ...
    @property
    def AppDocumentsDir(self): ...
    @property
    def ConfigDir(self): ...
    @property
    def DataDir(self): ...
    @property
    def DocumentsDir(self): ...
    @property
    def ExecutablePath(self): ...
    @property
    def LocalDataDir(self): ...
    @property
    def PluginsDir(self): ...
    @property
    def ResourcesDir(self): ...
    @property
    def TempDir(self): ...
    @property
    def UserConfigDir(self): ...
    @property
    def UserDataDir(self): ...
    @property
    def UserLocalDataDir(self): ...

class StaticBitmap(Control):
    class ScaleMode(int):
        def __reduce__(self): ...
    Scale_AspectFill: ClassVar[StaticBitmap.ScaleMode] = ...
    Scale_AspectFit: ClassVar[StaticBitmap.ScaleMode] = ...
    Scale_Fill: ClassVar[StaticBitmap.ScaleMode] = ...
    Scale_None: ClassVar[StaticBitmap.ScaleMode] = ...
    Bitmap: Incomplete
    Icon: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., bitmap=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetIcon(cls) -> Icon: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetScaleMode(cls) -> ScaleMode: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetBitmap(cls, label) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetIcon(cls, label) -> Any: ...
    @classmethod
    def SetScaleMode(cls, scaleMode) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class StaticBox(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def Enable(cls, enable=...) -> bool: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBordersForSizer(cls, *args, **kwargs): ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class StaticBoxSizer(BoxSizer):
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def GetStaticBox(cls) -> StaticBox: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @property
    def StaticBox(self): ...

class StaticLine(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultSize(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsVertical(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class StaticText(Control):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsEllipsized(cls) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetLabel(cls, label) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @classmethod
    def Wrap(cls, width) -> Any: ...

class StatusBar(Control):
    FieldsCount: Incomplete
    StatusText: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetBorders(cls) -> Size: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetField(cls, n) -> StatusBarPane: ...
    @classmethod
    def GetFieldRect(cls, i) -> Rect: ...
    @classmethod
    def GetFieldsCount(cls) -> int: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetStatusStyle(cls, n) -> int: ...
    @classmethod
    def GetStatusText(cls, i=...) -> String: ...
    @classmethod
    def GetStatusWidth(cls, n) -> int: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PopStatusText(cls, field=...) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def PushStatusText(cls, string, field=...) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetFieldsCount(cls, number=..., widths=...) -> Any: ...
    @classmethod
    def SetMinHeight(cls, height) -> Any: ...
    @classmethod
    def SetStatusStyles(cls, styles) -> Any: ...
    @classmethod
    def SetStatusText(cls, text, i=...) -> Any: ...
    @classmethod
    def SetStatusWidths(cls, widths) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Borders(self): ...
    @property
    def FieldRect(self): ...

class StatusBarPane(sip.wrapper):
    @classmethod
    def GetStyle(cls) -> int: ...
    @classmethod
    def GetText(cls) -> String: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @property
    def Style(self): ...
    @property
    def Text(self): ...
    @property
    def Width(self): ...

class StdDialogButtonSizer(BoxSizer):
    @classmethod
    def AddButton(cls, button) -> Any: ...
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def Realize(cls) -> Any: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...
    @classmethod
    def SetAffirmativeButton(cls, button) -> Any: ...
    @classmethod
    def SetCancelButton(cls, button) -> Any: ...
    @classmethod
    def SetNegativeButton(cls, button) -> Any: ...

class StockCursor(int): ...

class StockGDI(sip.wrapper):
    class Item(int):
        def __reduce__(self): ...
    BRUSH_BLACK: ClassVar[StockGDI.Item] = ...
    BRUSH_BLUE: ClassVar[StockGDI.Item] = ...
    BRUSH_CYAN: ClassVar[StockGDI.Item] = ...
    BRUSH_GREEN: ClassVar[StockGDI.Item] = ...
    BRUSH_GREY: ClassVar[StockGDI.Item] = ...
    BRUSH_LIGHTGREY: ClassVar[StockGDI.Item] = ...
    BRUSH_MEDIUMGREY: ClassVar[StockGDI.Item] = ...
    BRUSH_RED: ClassVar[StockGDI.Item] = ...
    BRUSH_TRANSPARENT: ClassVar[StockGDI.Item] = ...
    BRUSH_WHITE: ClassVar[StockGDI.Item] = ...
    BRUSH_YELLOW: ClassVar[StockGDI.Item] = ...
    COLOUR_BLACK: ClassVar[StockGDI.Item] = ...
    COLOUR_BLUE: ClassVar[StockGDI.Item] = ...
    COLOUR_CYAN: ClassVar[StockGDI.Item] = ...
    COLOUR_GREEN: ClassVar[StockGDI.Item] = ...
    COLOUR_LIGHTGREY: ClassVar[StockGDI.Item] = ...
    COLOUR_RED: ClassVar[StockGDI.Item] = ...
    COLOUR_WHITE: ClassVar[StockGDI.Item] = ...
    COLOUR_YELLOW: ClassVar[StockGDI.Item] = ...
    CURSOR_CROSS: ClassVar[StockGDI.Item] = ...
    CURSOR_HOURGLASS: ClassVar[StockGDI.Item] = ...
    CURSOR_STANDARD: ClassVar[StockGDI.Item] = ...
    FONT_ITALIC: ClassVar[StockGDI.Item] = ...
    FONT_NORMAL: ClassVar[StockGDI.Item] = ...
    FONT_SMALL: ClassVar[StockGDI.Item] = ...
    FONT_SWISS: ClassVar[StockGDI.Item] = ...
    PEN_BLACK: ClassVar[StockGDI.Item] = ...
    PEN_BLACKDASHED: ClassVar[StockGDI.Item] = ...
    PEN_BLUE: ClassVar[StockGDI.Item] = ...
    PEN_CYAN: ClassVar[StockGDI.Item] = ...
    PEN_GREEN: ClassVar[StockGDI.Item] = ...
    PEN_GREY: ClassVar[StockGDI.Item] = ...
    PEN_LIGHTGREY: ClassVar[StockGDI.Item] = ...
    PEN_MEDIUMGREY: ClassVar[StockGDI.Item] = ...
    PEN_RED: ClassVar[StockGDI.Item] = ...
    PEN_TRANSPARENT: ClassVar[StockGDI.Item] = ...
    PEN_WHITE: ClassVar[StockGDI.Item] = ...
    PEN_YELLOW: ClassVar[StockGDI.Item] = ...
    _initStockObjects: ClassVar[Callable] = ...
    @classmethod
    def DeleteAll(cls) -> Any: ...
    @classmethod
    def GetBrush(cls, item: StockGDI.Item) -> Brush | None: ...
    @classmethod
    def GetColour(cls, item: StockGDI.Item) -> Colour | None: ...
    @classmethod
    def GetCursor(cls, item: StockGDI.Item) -> Cursor | None: ...
    def GetFont(self, item: StockGDI.Item) -> Font | None: ...
    @classmethod
    def GetPen(cls, item: StockGDI.Item) -> Pen | None: ...
    @classmethod
    def instance(cls) -> StockGDI: ...

class StockLabelQueryFlag(int): ...

class StockPreferencesPage(PreferencesPage):
    class Kind(int):
        def __reduce__(self): ...
    Kind_Advanced: ClassVar[StockPreferencesPage.Kind] = ...
    Kind_General: ClassVar[StockPreferencesPage.Kind] = ...
    @classmethod
    def GetIcon(cls) -> BitmapBundle: ...
    @classmethod
    def GetKind(cls) -> Kind: ...
    @classmethod
    def GetName(cls) -> String: ...
    @property
    def Icon(self): ...
    @property
    def Name(self): ...

class StopWatch(sip.wrapper):
    @classmethod
    def Pause(cls) -> Any: ...
    @classmethod
    def Resume(cls) -> Any: ...
    @classmethod
    def Start(cls, milliseconds=...) -> Any: ...
    @classmethod
    def Time(cls) -> long: ...
    @classmethod
    def TimeInMicro(cls) -> LongLong: ...

class StreamBase(sip.wrapper):
    @classmethod
    def GetLastError(cls) -> StreamError: ...
    @classmethod
    def GetLength(cls) -> FileOffset: ...
    @classmethod
    def GetSize(cls) -> size_t: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def IsSeekable(cls) -> bool: ...
    @classmethod
    def Reset(cls, error=...) -> Any: ...
    @property
    def LastError(self): ...
    @property
    def Length(self): ...
    @property
    def Size(self): ...

class StreamError(int): ...

class Stretch(int): ...

class StringCArrayHolder(sip.wrapper): ...

class SysColourChangedEvent(Event):
    def Clone(self) -> Event | None: ...

class SystemAppearance(sip.wrapper):
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def IsDark(cls) -> bool: ...
    @classmethod
    def IsUsingDarkBackground(cls) -> bool: ...
    @property
    def Name(self): ...

class SystemColour(int): ...

class SystemFeature(int): ...

class SystemFont(int): ...

class SystemMetric(int): ...

class SystemOptions(Object):
    @classmethod
    def GetOption(cls, name) -> String: ...
    @classmethod
    def GetOptionInt(cls, name) -> int: ...
    @classmethod
    def HasOption(cls, name) -> bool: ...
    @classmethod
    def IsFalse(cls, name) -> bool: ...
    @overload
    @classmethod
    def SetOption(cls, name, value) -> Any: ...
    @overload
    @classmethod
    def SetOption(cls, name, value) -> Any: ...

class SystemScreenType(int): ...

class SystemSettings(sip.wrapper):
    @classmethod
    def GetAppearance(cls) -> SystemAppearance: ...
    @classmethod
    def GetColour(cls, index) -> Colour: ...
    @classmethod
    def GetFont(cls, index) -> Font: ...
    @classmethod
    def GetMetric(cls, index, win=...) -> int: ...
    @classmethod
    def GetScreenType(cls) -> SystemScreenType: ...
    @classmethod
    def HasFeature(cls, index) -> bool: ...
    @classmethod
    def SelectLightDark(cls, colForLight, colForDark) -> Colour: ...

class TDIChildFrame(MDIChildFrameBase): ...

class TGAHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class TIFFHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...

class TextAttr(sip.wrapper):
    Alignment: Incomplete
    BackgroundColour: Incomplete
    BulletFont: Incomplete
    BulletName: Incomplete
    BulletNumber: Incomplete
    BulletStyle: Incomplete
    BulletText: Incomplete
    CharacterStyleName: Incomplete
    Flags: Incomplete
    Font: Incomplete
    FontEncoding: Incomplete
    FontFaceName: Incomplete
    FontFamily: Incomplete
    FontSize: Incomplete
    FontStyle: Incomplete
    FontUnderlined: Incomplete
    FontWeight: Incomplete
    LeftIndent: Incomplete
    LineSpacing: Incomplete
    ListStyleName: Incomplete
    OutlineLevel: Incomplete
    ParagraphSpacingAfter: Incomplete
    ParagraphSpacingBefore: Incomplete
    ParagraphStyleName: Incomplete
    RightIndent: Incomplete
    Tabs: Incomplete
    TextColour: Incomplete
    TextEffectFlags: Incomplete
    TextEffects: Incomplete
    URL: Incomplete
    @classmethod
    def Apply(cls, style, compareWith=...) -> bool: ...
    @classmethod
    def EqPartial(cls, attr, weakTest=...) -> bool: ...
    @classmethod
    def GetAlignment(cls) -> TextAttrAlignment: ...
    @classmethod
    def GetBackgroundColour(cls) -> Colour: ...
    @classmethod
    def GetBulletFont(cls) -> String: ...
    @classmethod
    def GetBulletName(cls) -> String: ...
    @classmethod
    def GetBulletNumber(cls) -> int: ...
    @classmethod
    def GetBulletStyle(cls) -> int: ...
    @classmethod
    def GetBulletText(cls) -> String: ...
    @classmethod
    def GetCharacterStyleName(cls) -> String: ...
    @classmethod
    def GetFlags(cls) -> long: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetFontAttributes(cls, font, flags=...) -> bool: ...
    @classmethod
    def GetFontEncoding(cls) -> FontEncoding: ...
    @classmethod
    def GetFontFaceName(cls) -> String: ...
    @classmethod
    def GetFontFamily(cls) -> FontFamily: ...
    @classmethod
    def GetFontSize(cls) -> int: ...
    @classmethod
    def GetFontStyle(cls) -> FontStyle: ...
    @classmethod
    def GetFontUnderlined(cls) -> bool: ...
    @classmethod
    def GetFontWeight(cls) -> FontWeight: ...
    @classmethod
    def GetLeftIndent(cls) -> long: ...
    @classmethod
    def GetLeftSubIndent(cls) -> long: ...
    @classmethod
    def GetLineSpacing(cls) -> int: ...
    @classmethod
    def GetListStyleName(cls) -> String: ...
    @classmethod
    def GetOutlineLevel(cls) -> int: ...
    @classmethod
    def GetParagraphSpacingAfter(cls) -> int: ...
    @classmethod
    def GetParagraphSpacingBefore(cls) -> int: ...
    @classmethod
    def GetParagraphStyleName(cls) -> String: ...
    @classmethod
    def GetRightIndent(cls) -> long: ...
    @classmethod
    def GetTabs(cls) -> ArrayInt: ...
    @classmethod
    def GetTextColour(cls) -> Colour: ...
    @classmethod
    def GetTextEffectFlags(cls) -> int: ...
    @classmethod
    def GetTextEffects(cls) -> int: ...
    @classmethod
    def GetURL(cls) -> String: ...
    @classmethod
    def GetUnderlineColour(cls) -> Colour: ...
    @classmethod
    def GetUnderlineType(cls) -> TextAttrUnderlineType: ...
    @classmethod
    def HasAlignment(cls) -> bool: ...
    @classmethod
    def HasBackgroundColour(cls) -> bool: ...
    @classmethod
    def HasBulletName(cls) -> bool: ...
    @classmethod
    def HasBulletNumber(cls) -> bool: ...
    @classmethod
    def HasBulletStyle(cls) -> bool: ...
    @classmethod
    def HasBulletText(cls) -> bool: ...
    @classmethod
    def HasCharacterStyleName(cls) -> bool: ...
    @classmethod
    def HasFlag(cls, flag) -> bool: ...
    @classmethod
    def HasFont(cls) -> bool: ...
    @classmethod
    def HasFontEncoding(cls) -> bool: ...
    @classmethod
    def HasFontFaceName(cls) -> bool: ...
    @classmethod
    def HasFontFamily(cls) -> bool: ...
    @classmethod
    def HasFontItalic(cls) -> bool: ...
    @classmethod
    def HasFontPixelSize(cls) -> bool: ...
    @classmethod
    def HasFontPointSize(cls) -> bool: ...
    @classmethod
    def HasFontSize(cls) -> bool: ...
    @classmethod
    def HasFontUnderlined(cls) -> bool: ...
    @classmethod
    def HasFontWeight(cls) -> bool: ...
    @classmethod
    def HasLeftIndent(cls) -> bool: ...
    @classmethod
    def HasLineSpacing(cls) -> bool: ...
    @classmethod
    def HasListStyleName(cls) -> bool: ...
    @classmethod
    def HasOutlineLevel(cls) -> bool: ...
    @classmethod
    def HasPageBreak(cls) -> bool: ...
    @classmethod
    def HasParagraphSpacingAfter(cls) -> bool: ...
    @classmethod
    def HasParagraphSpacingBefore(cls) -> bool: ...
    @classmethod
    def HasParagraphStyleName(cls) -> bool: ...
    @classmethod
    def HasRightIndent(cls) -> bool: ...
    @classmethod
    def HasTabs(cls) -> bool: ...
    @classmethod
    def HasTextColour(cls) -> bool: ...
    @classmethod
    def HasTextEffects(cls) -> bool: ...
    @classmethod
    def HasURL(cls) -> bool: ...
    @classmethod
    def IsCharacterStyle(cls) -> bool: ...
    @classmethod
    def IsDefault(cls) -> bool: ...
    @classmethod
    def IsParagraphStyle(cls) -> bool: ...
    @overload
    @classmethod
    def Merge(cls, overlay) -> Any: ...
    @overload
    @classmethod
    def Merge(cls, base, overlay) -> TextAttr: ...
    @classmethod
    def SetAlignment(cls, alignment) -> Any: ...
    @classmethod
    def SetBackgroundColour(cls, colBack) -> Any: ...
    @classmethod
    def SetBulletFont(cls, font) -> Any: ...
    @classmethod
    def SetBulletName(cls, name) -> Any: ...
    @classmethod
    def SetBulletNumber(cls, n) -> Any: ...
    @classmethod
    def SetBulletStyle(cls, style) -> Any: ...
    @classmethod
    def SetBulletText(cls, text) -> Any: ...
    @classmethod
    def SetCharacterStyleName(cls, name) -> Any: ...
    @classmethod
    def SetFlags(cls, flags) -> Any: ...
    @classmethod
    def SetFont(cls, font, flags=...) -> Any: ...
    @classmethod
    def SetFontEncoding(cls, encoding) -> Any: ...
    @classmethod
    def SetFontFaceName(cls, faceName) -> Any: ...
    @classmethod
    def SetFontFamily(cls, family) -> Any: ...
    @classmethod
    def SetFontPixelSize(cls, pixelSize) -> Any: ...
    @classmethod
    def SetFontPointSize(cls, pointSize) -> Any: ...
    @classmethod
    def SetFontSize(cls, pointSize) -> Any: ...
    @classmethod
    def SetFontStyle(cls, fontStyle) -> Any: ...
    @classmethod
    def SetFontUnderlineType(cls, type, colour=...) -> Any: ...
    @classmethod
    def SetFontUnderlined(cls, underlined) -> Any: ...
    @classmethod
    def SetFontWeight(cls, fontWeight) -> Any: ...
    @classmethod
    def SetLeftIndent(cls, indent, subIndent=...) -> Any: ...
    @classmethod
    def SetLineSpacing(cls, spacing) -> Any: ...
    @classmethod
    def SetListStyleName(cls, name) -> Any: ...
    @classmethod
    def SetOutlineLevel(cls, level) -> Any: ...
    @classmethod
    def SetPageBreak(cls, pageBreak=...) -> Any: ...
    @classmethod
    def SetParagraphSpacingAfter(cls, spacing) -> Any: ...
    @classmethod
    def SetParagraphSpacingBefore(cls, spacing) -> Any: ...
    @classmethod
    def SetParagraphStyleName(cls, name) -> Any: ...
    @classmethod
    def SetRightIndent(cls, indent) -> Any: ...
    @classmethod
    def SetTabs(cls, tabs) -> Any: ...
    @classmethod
    def SetTextColour(cls, colText) -> Any: ...
    @classmethod
    def SetTextEffectFlags(cls, flags) -> Any: ...
    @classmethod
    def SetTextEffects(cls, effects) -> Any: ...
    @classmethod
    def SetURL(cls, url) -> Any: ...
    @property
    def LeftSubIndent(self): ...
    @property
    def UnderlineColour(self): ...
    @property
    def UnderlineType(self): ...

class TextAttrAlignment(int): ...

class TextAttrBulletStyle(int): ...

class TextAttrEffects(int): ...

class TextAttrFlags(int): ...

class TextAttrLineSpacing(int): ...

class TextAttrUnderlineType(int): ...

class TextCompleter(sip.wrapper):
    @classmethod
    def GetNext(cls) -> String: ...
    @classmethod
    def Start(cls, prefix) -> bool: ...
    @property
    def Next(self): ...

class TextCompleterSimple(TextCompleter):
    @classmethod
    def GetCompletions(cls, prefix) -> res: ...
    @classmethod
    def GetNext(cls) -> String: ...
    @classmethod
    def Start(cls, prefix) -> bool: ...
    @property
    def Next(self): ...

class TextCtrl(Control, TextEntry):
    DefaultStyle: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., value=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def DiscardEdits(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EmptyUndoBuffer(cls) -> Any: ...
    @classmethod
    def EmulateKeyPress(cls, event) -> bool: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultStyle(cls) -> TextAttr: ...
    @classmethod
    def GetLineLength(cls, lineNo) -> int: ...
    @classmethod
    def GetLineText(cls, lineNo) -> String: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNumberOfLines(cls) -> int: ...
    @classmethod
    def GetStyle(cls, position, style) -> bool: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HideNativeCaret(cls) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    @classmethod
    def HitTestPos(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsModified(cls) -> bool: ...
    @classmethod
    def IsMultiLine(cls) -> bool: ...
    @classmethod
    def IsSingleLine(cls) -> bool: ...
    @classmethod
    def LoadFile(cls, filename, fileType=...) -> bool: ...
    @classmethod
    def MacCheckSpelling(cls, check) -> Any: ...
    @classmethod
    def MarkDirty(cls) -> Any: ...
    @classmethod
    def OSXDisableAllSmartSubstitutions(cls) -> Any: ...
    @classmethod
    def OSXEnableAutomaticDashSubstitution(cls, enable) -> Any: ...
    @classmethod
    def OSXEnableAutomaticQuoteSubstitution(cls, enable) -> Any: ...
    @classmethod
    def OSXEnableNewLineReplacement(cls, enable) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PositionToCoords(cls, pos) -> Point: ...
    @classmethod
    def PositionToXY(cls, *args, **kwargs): ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SaveFile(cls, filename=..., fileType=...) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDefaultStyle(cls, style) -> bool: ...
    @classmethod
    def SetModified(cls, modified) -> Any: ...
    @classmethod
    def SetStyle(cls, start, end, style) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowNativeCaret(cls, show=...) -> bool: ...
    @classmethod
    def ShowPosition(cls, pos) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @classmethod
    def XYToPosition(cls, x, y) -> long: ...
    @classmethod
    def flush(cls) -> Any: ...
    @classmethod
    def write(cls, text) -> Any: ...
    @property
    def NumberOfLines(self): ...

class TextCtrlHitTestResult(int): ...

class TextDataObject(DataObjectSimple):
    Text: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    def GetDataHere(self, buf: wx.siplib.voidptr | None) -> bool: ...
    def GetDataSize(self) -> int: ...
    @classmethod
    def GetFormat(cls) -> DataFormat: ...
    @classmethod
    def GetFormatCount(cls, dir=...) -> size_t: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def GetText(cls) -> String: ...
    @classmethod
    def GetTextLength(cls) -> size_t: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @classmethod
    def SetText(cls, strText) -> Any: ...
    @property
    def AllFormats(self): ...
    @property
    def Format(self): ...
    @property
    def FormatCount(self): ...
    @property
    def TextLength(self): ...

class TextDropTarget(DropTarget):
    def OnData(self, x: int, y: int, def_: DragResult) -> DragResult: ...
    @overload
    @classmethod
    def OnDrop(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def OnDrop(cls) -> Any: ...
    @classmethod
    def OnDropText(cls, x, y, data) -> bool: ...

class TextEntry(sip.wrapper):
    Hint: Incomplete
    InsertionPoint: Incomplete
    Margins: Incomplete
    Value: Incomplete
    @classmethod
    def AppendText(cls, text) -> Any: ...
    @overload
    @classmethod
    def AutoComplete(cls, choices) -> bool: ...
    @overload
    @classmethod
    def AutoComplete(cls, completer) -> bool: ...
    @classmethod
    def AutoCompleteDirectories(cls) -> bool: ...
    @classmethod
    def AutoCompleteFileNames(cls) -> bool: ...
    @classmethod
    def CanCopy(cls) -> bool: ...
    @classmethod
    def CanCut(cls) -> bool: ...
    @classmethod
    def CanPaste(cls) -> bool: ...
    @classmethod
    def CanRedo(cls) -> bool: ...
    @classmethod
    def CanUndo(cls) -> bool: ...
    @classmethod
    def ChangeValue(cls, value) -> Any: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def Copy(cls) -> Any: ...
    @classmethod
    def Cut(cls) -> Any: ...
    @classmethod
    def ForceUpper(cls) -> Any: ...
    @classmethod
    def GetHint(cls) -> String: ...
    @classmethod
    def GetInsertionPoint(cls) -> long: ...
    @classmethod
    def GetLastPosition(cls) -> TextPos: ...
    @classmethod
    def GetMargins(cls) -> Point: ...
    @classmethod
    def GetRange(cls, from_, to_) -> String: ...
    @classmethod
    def GetSelection(cls, *args, **kwargs): ...
    @classmethod
    def GetStringSelection(cls) -> String: ...
    @classmethod
    def GetValue(cls) -> String: ...
    @classmethod
    def IsEditable(cls) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def Paste(cls) -> Any: ...
    @classmethod
    def Redo(cls) -> Any: ...
    @classmethod
    def Remove(cls, from_, to_) -> Any: ...
    @classmethod
    def Replace(cls, from_, to_, value) -> Any: ...
    @classmethod
    def SelectAll(cls) -> Any: ...
    @classmethod
    def SelectNone(cls) -> Any: ...
    @classmethod
    def SetEditable(cls, editable) -> Any: ...
    @classmethod
    def SetHint(cls, hint) -> bool: ...
    @classmethod
    def SetInsertionPoint(cls, pos) -> Any: ...
    @classmethod
    def SetInsertionPointEnd(cls) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, pt) -> bool: ...
    @overload
    @classmethod
    def SetMargins(cls, left, top=...) -> bool: ...
    @classmethod
    def SetMaxLength(cls, len) -> Any: ...
    @classmethod
    def SetSelection(cls, from_, to_) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    @classmethod
    def Undo(cls) -> Any: ...
    @classmethod
    def WriteText(cls, text) -> Any: ...
    @property
    def LastPosition(self): ...
    @property
    def StringSelection(self): ...

class TextEntryDialog(Dialog):
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, message, caption=..., value=..., style=..., pos=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def ForceUpper(cls) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> String: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetMaxLength(cls, len) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, value) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShowModal(cls) -> int: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class TextFileType(int): ...

class TextUrlEvent(CommandEvent):
    @classmethod
    def Clone(cls) -> Event: ...
    @classmethod
    def GetMouseEvent(cls) -> MouseEvent: ...
    @classmethod
    def GetURLEnd(cls) -> long: ...
    @classmethod
    def GetURLStart(cls) -> long: ...
    @property
    def MouseEvent(self): ...
    @property
    def URLEnd(self): ...
    @property
    def URLStart(self): ...

class ThreadEvent(Event):
    ExtraLong: Incomplete
    Int: Incomplete
    String: Incomplete
    @classmethod
    def Clone(cls) -> Event: ...
    @classmethod
    def GetEventCategory(cls) -> EventCategory: ...
    @classmethod
    def GetExtraLong(cls) -> long: ...
    @classmethod
    def GetInt(cls) -> int: ...
    @classmethod
    def GetString(cls) -> String: ...
    @classmethod
    def SetExtraLong(cls, extraLong) -> Any: ...
    @classmethod
    def SetInt(cls, intCommand) -> Any: ...
    @classmethod
    def SetString(cls, string) -> Any: ...
    @property
    def EventCategory(self): ...

class TimeSpan(sip.wrapper):
    @classmethod
    def Abs(cls) -> TimeSpan: ...
    @classmethod
    def Add(cls, diff) -> TimeSpan: ...
    @classmethod
    def Day(cls) -> TimeSpan: ...
    @classmethod
    def Days(cls, days) -> TimeSpan: ...
    @classmethod
    def Format(cls, format=...) -> String: ...
    @classmethod
    def GetDays(cls) -> int: ...
    @classmethod
    def GetHours(cls) -> int: ...
    @classmethod
    def GetMilliseconds(cls) -> LongLong: ...
    @classmethod
    def GetMinutes(cls) -> int: ...
    @classmethod
    def GetSeconds(cls) -> LongLong: ...
    @classmethod
    def GetValue(cls) -> LongLong: ...
    @classmethod
    def GetWeeks(cls) -> int: ...
    @classmethod
    def Hour(cls) -> TimeSpan: ...
    @classmethod
    def Hours(cls, hours) -> TimeSpan: ...
    @classmethod
    def IsEqualTo(cls, ts) -> bool: ...
    @classmethod
    def IsLongerThan(cls, ts) -> bool: ...
    @classmethod
    def IsNegative(cls) -> bool: ...
    @classmethod
    def IsNull(cls) -> bool: ...
    @classmethod
    def IsPositive(cls) -> bool: ...
    @classmethod
    def IsShorterThan(cls, ts) -> bool: ...
    @classmethod
    def Millisecond(cls) -> TimeSpan: ...
    @classmethod
    def Milliseconds(cls, ms) -> TimeSpan: ...
    @classmethod
    def Minute(cls) -> TimeSpan: ...
    @classmethod
    def Minutes(cls, min) -> TimeSpan: ...
    @classmethod
    def Multiply(cls, n) -> TimeSpan: ...
    @classmethod
    def Neg(cls) -> TimeSpan: ...
    @classmethod
    def Negate(cls) -> TimeSpan: ...
    @classmethod
    def Second(cls) -> TimeSpan: ...
    @classmethod
    def Seconds(cls, sec) -> TimeSpan: ...
    @classmethod
    def Subtract(cls, diff) -> TimeSpan: ...
    @classmethod
    def Week(cls) -> TimeSpan: ...
    @classmethod
    def Weeks(cls, weeks) -> TimeSpan: ...
    def __add__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...

class Timer(EvtHandler):
    Owner: Incomplete
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetInterval(cls) -> int: ...
    @classmethod
    def GetOwner(cls) -> EvtHandler: ...
    @classmethod
    def IsOneShot(cls) -> bool: ...
    @classmethod
    def IsRunning(cls) -> bool: ...
    @classmethod
    def Notify(cls) -> Any: ...
    @classmethod
    def SetOwner(cls, owner, id=...) -> Any: ...
    @classmethod
    def Start(cls, milliseconds=..., oneShot=...) -> bool: ...
    @classmethod
    def StartOnce(cls, milliseconds=...) -> bool: ...
    @classmethod
    def Stop(cls) -> Any: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @property
    def Id(self): ...
    @property
    def Interval(self): ...

class TimerEvent(Event):
    @classmethod
    def GetInterval(cls) -> int: ...
    @classmethod
    def GetTimer(cls) -> Timer: ...
    @property
    def Interval(self): ...
    @property
    def Timer(self): ...

class TimerRunner(sip.wrapper):
    @classmethod
    def Start(cls, milli, oneShot=...) -> Any: ...

class TipWindow(Window):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    @classmethod
    def SetBoundingRect(cls, rectBound) -> Any: ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class TitleBarButton(int): ...

class ToggleButton(AnyButton):
    Value: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., label=..., pos=..., size=..., style=..., val=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetValue(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetValue(cls, state) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class ToolBar(Control):
    AddLabelTool: ClassVar[Callable] = ...
    AddSimpleTool: ClassVar[Callable] = ...
    InsertLabelTool: ClassVar[Callable] = ...
    InsertSimpleTool: ClassVar[Callable] = ...
    Margins: Incomplete
    ToolBitmapSize: Incomplete
    ToolPacking: Incomplete
    ToolSeparation: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    @classmethod
    def AddCheckTool(cls, toolId, label, bitmap1, bmpDisabled=..., shortHelp=..., longHelp=..., clientData=...) -> ToolBarToolBase: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddControl(cls, control, label=...) -> ToolBarToolBase: ...
    @classmethod
    def AddRadioTool(cls, toolId, label, bitmap1, bmpDisabled=..., shortHelp=..., longHelp=..., clientData=...) -> ToolBarToolBase: ...
    @classmethod
    def AddSeparator(cls) -> ToolBarToolBase: ...
    @classmethod
    def AddStretchableSpace(cls) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def AddTool(cls, tool) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def AddTool(cls, toolId, label, bitmap, shortHelp=..., kind=...) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def AddTool(cls, toolId, label, bitmap, bmpDisabled, kind=..., shortHelp=..., longHelp=..., clientData=...) -> ToolBarToolBase: ...
    @classmethod
    def ClearTools(cls) -> Any: ...
    @classmethod
    def CreateSeparator(cls) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def CreateTool(cls, toolId, label, bmpNormal, bmpDisabled=..., kind=..., clientData=..., shortHelp=..., longHelp=...) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def CreateTool(cls, control, label) -> ToolBarToolBase: ...
    @classmethod
    def DeleteTool(cls, toolId) -> bool: ...
    @classmethod
    def DeleteToolByPos(cls, pos) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableTool(cls, toolId, enable) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def FindById(cls, id) -> ToolBarToolBase: ...
    @classmethod
    def FindControl(cls, id) -> Control: ...
    @classmethod
    def FindToolForPosition(cls, x, y) -> ToolBarToolBase: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMargins(cls) -> Size: ...
    @classmethod
    def GetToolBitmapSize(cls) -> Size: ...
    @classmethod
    def GetToolByPos(cls, pos) -> ToolBarToolBase: ...
    @classmethod
    def GetToolClientData(cls, toolId) -> PyUserData: ...
    @classmethod
    def GetToolEnabled(cls, toolId) -> bool: ...
    @classmethod
    def GetToolLongHelp(cls, toolId) -> String: ...
    @classmethod
    def GetToolPacking(cls) -> int: ...
    @classmethod
    def GetToolPos(cls, toolId) -> int: ...
    @classmethod
    def GetToolSeparation(cls) -> int: ...
    @classmethod
    def GetToolShortHelp(cls, toolId) -> String: ...
    @classmethod
    def GetToolSize(cls) -> Size: ...
    @classmethod
    def GetToolState(cls, toolId) -> bool: ...
    @classmethod
    def GetToolsCount(cls) -> size_t: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def InsertControl(cls, pos, control, label=...) -> ToolBarToolBase: ...
    @classmethod
    def InsertSeparator(cls, pos) -> ToolBarToolBase: ...
    @classmethod
    def InsertStretchableSpace(cls, pos) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def InsertTool(cls, pos, toolId, label, bitmap, bmpDisabled=..., kind=..., shortHelp=..., longHelp=..., clientData=...) -> ToolBarToolBase: ...
    @overload
    @classmethod
    def InsertTool(cls, pos, tool) -> ToolBarToolBase: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def Realize(cls) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def RemoveTool(cls, id) -> ToolBarToolBase: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetDropdownMenu(cls, id, menu) -> bool: ...
    @overload
    @classmethod
    def SetMargins(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, size) -> Any: ...
    @classmethod
    def SetToolBitmapSize(cls, size) -> Any: ...
    @classmethod
    def SetToolClientData(cls, id, clientData) -> Any: ...
    @classmethod
    def SetToolDisabledBitmap(cls, id, bitmap) -> Any: ...
    @classmethod
    def SetToolLongHelp(cls, toolId, helpString) -> Any: ...
    @classmethod
    def SetToolNormalBitmap(cls, id, bitmap) -> Any: ...
    @classmethod
    def SetToolPacking(cls, packing) -> Any: ...
    @classmethod
    def SetToolSeparation(cls, separation) -> Any: ...
    @classmethod
    def SetToolShortHelp(cls, toolId, helpString) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ToggleTool(cls, toolId, toggle) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ToolSize(self): ...
    @property
    def ToolsCount(self): ...

class ToolBarToolBase(Object):
    ClientData: Incomplete
    DisabledBitmap: Incomplete
    DropdownMenu: Incomplete
    Label: Incomplete
    LongHelp: Incomplete
    NormalBitmap: Incomplete
    ShortHelp: Incomplete
    @classmethod
    def Attach(cls, tbar) -> Any: ...
    @classmethod
    def CanBeToggled(cls) -> bool: ...
    @classmethod
    def Detach(cls) -> Any: ...
    @classmethod
    def Enable(cls, enable) -> bool: ...
    @classmethod
    def GetBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetClientData(cls) -> PyUserData: ...
    @classmethod
    def GetControl(cls) -> Control: ...
    @classmethod
    def GetDisabledBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetDisabledBitmapBundle(cls) -> BitmapBundle: ...
    @classmethod
    def GetDropdownMenu(cls) -> Menu: ...
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetKind(cls) -> ItemKind: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    @classmethod
    def GetLongHelp(cls) -> String: ...
    @classmethod
    def GetNormalBitmap(cls) -> Bitmap: ...
    @classmethod
    def GetNormalBitmapBundle(cls) -> BitmapBundle: ...
    @classmethod
    def GetShortHelp(cls) -> String: ...
    @classmethod
    def GetStyle(cls) -> int: ...
    @classmethod
    def GetToolBar(cls) -> ToolBar: ...
    @classmethod
    def IsButton(cls) -> bool: ...
    @classmethod
    def IsControl(cls) -> bool: ...
    @classmethod
    def IsEnabled(cls) -> bool: ...
    @classmethod
    def IsSeparator(cls) -> bool: ...
    @classmethod
    def IsStretchable(cls) -> bool: ...
    @classmethod
    def IsStretchableSpace(cls) -> bool: ...
    @classmethod
    def IsToggled(cls) -> bool: ...
    @classmethod
    def MakeStretchable(cls) -> Any: ...
    @classmethod
    def SetClientData(cls, clientData) -> Any: ...
    @classmethod
    def SetDisabledBitmap(cls, bmp) -> Any: ...
    @classmethod
    def SetDropdownMenu(cls, menu) -> Any: ...
    @classmethod
    def SetLabel(cls, label) -> Any: ...
    @classmethod
    def SetLongHelp(cls, help) -> bool: ...
    @classmethod
    def SetNormalBitmap(cls, bmp) -> Any: ...
    @classmethod
    def SetShortHelp(cls, help) -> bool: ...
    @classmethod
    def SetToggle(cls, toggle) -> bool: ...
    @overload
    @classmethod
    def Toggle(cls, toggle) -> bool: ...
    @overload
    @classmethod
    def Toggle(cls) -> Any: ...
    @property
    def Bitmap(self): ...
    @property
    def Control(self): ...
    @property
    def DisabledBitmapBundle(self): ...
    @property
    def Id(self): ...
    @property
    def Kind(self): ...
    @property
    def NormalBitmapBundle(self): ...
    @property
    def Style(self): ...
    @property
    def ToolBar(self): ...

class ToolBarToolStyle(int): ...

class ToolTip(Object):
    Tip: Incomplete
    @classmethod
    def Enable(cls, flag) -> Any: ...
    @classmethod
    def GetTip(cls) -> String: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def SetAutoPop(cls, msecs) -> Any: ...
    @classmethod
    def SetDelay(cls, msecs) -> Any: ...
    @classmethod
    def SetMaxWidth(cls, width) -> Any: ...
    @classmethod
    def SetReshow(cls, msecs) -> Any: ...
    @classmethod
    def SetTip(cls, tip) -> Any: ...
    @property
    def Window(self): ...

class Toolbook(BookCtrlBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    def ChangeSelection(self, page: int) -> int: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @overload
    @classmethod
    def EnablePage(cls, page, enable) -> bool: ...
    @overload
    @classmethod
    def EnablePage(cls, page, enable) -> bool: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetPageImage(self, nPage: int) -> int: ...
    def GetPageText(self, nPage: int) -> Any: ...
    def GetSelection(self) -> int: ...
    @classmethod
    def GetToolBar(cls) -> ToolBar: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    def InsertPage(self, index: int, page: Window | None, text: Any, select: bool = ..., imageId: int = ...) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetPageImage(self, page: int, image: int) -> bool: ...
    def SetPageText(self, page: int, text: Any) -> bool: ...
    def SetSelection(self, page: int) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ToolBar(self): ...

class TopLevelWindow(NonOwnedWindow):
    class GeometrySerializer(sip.wrapper): ...
    DefaultItem: Incomplete
    Icon: Incomplete
    MacMetalAppearance: Incomplete
    OSXModified: Incomplete
    Title: Incomplete
    TmpDefaultItem: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def CanSetTransparent(cls) -> bool: ...
    @classmethod
    def CenterOnScreen(cls, direction=...) -> Any: ...
    @classmethod
    def CentreOnScreen(cls, direction=...) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., title=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableCloseButton(cls, enable=...) -> bool: ...
    @classmethod
    def EnableFullScreenView(cls, enable=..., style=...) -> bool: ...
    @classmethod
    def EnableMaximizeButton(cls, enable=...) -> bool: ...
    @classmethod
    def EnableMinimizeButton(cls, enable=...) -> bool: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetContentProtection(cls) -> ContentProtection: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDefaultItem(cls) -> Window: ...
    @classmethod
    def GetDefaultSize(cls) -> Size: ...
    @classmethod
    def GetIcon(cls) -> Icon: ...
    @classmethod
    def GetIcons(cls) -> IconBundle: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetTitle(cls) -> String: ...
    @classmethod
    def GetTmpDefaultItem(cls) -> Window: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def Iconize(cls, iconize=...) -> Any: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsActive(cls) -> bool: ...
    @classmethod
    def IsAlwaysMaximized(cls) -> bool: ...
    @classmethod
    def IsFullScreen(cls) -> bool: ...
    @classmethod
    def IsIconized(cls) -> bool: ...
    @classmethod
    def IsMaximized(cls) -> bool: ...
    @classmethod
    def Layout(cls) -> bool: ...
    @classmethod
    def MacGetMetalAppearance(cls) -> bool: ...
    @classmethod
    def MacGetTopLevelWindowRef(cls) -> void: ...
    @classmethod
    def MacGetUnifiedAppearance(cls) -> bool: ...
    @classmethod
    def MacSetMetalAppearance(cls, on) -> Any: ...
    @classmethod
    def Maximize(cls, maximize=...) -> Any: ...
    @classmethod
    def OSXIsModified(cls) -> bool: ...
    @classmethod
    def OSXSetModified(cls, modified) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def RequestUserAttention(cls, flags=...) -> Any: ...
    @classmethod
    def Restore(cls) -> Any: ...
    @classmethod
    def RestoreToGeometry(cls, ser) -> bool: ...
    @classmethod
    def SaveGeometry(cls, ser) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetContentProtection(cls, contentProtection) -> bool: ...
    @classmethod
    def SetDefaultItem(cls, win) -> Window: ...
    @classmethod
    def SetIcon(cls, icon) -> Any: ...
    @classmethod
    def SetIcons(cls, icons) -> Any: ...
    @classmethod
    def SetMaxSize(cls, size) -> Any: ...
    @classmethod
    def SetMinSize(cls, size) -> Any: ...
    @classmethod
    def SetRepresentedFilename(cls, filename) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls, minW, minH, maxW=..., maxH=..., incW=..., incH=...) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls, minSize, maxSize=..., incSize=...) -> Any: ...
    @classmethod
    def SetTitle(cls, title) -> Any: ...
    @classmethod
    def SetTmpDefaultItem(cls, win) -> Window: ...
    @classmethod
    def SetTransparent(cls, alpha) -> bool: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShouldPreventAppExit(cls) -> bool: ...
    @classmethod
    def ShowFullScreen(cls, show, style=...) -> bool: ...
    @classmethod
    def ShowWithoutActivating(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...

class Trackable(sip.wrapper): ...

class Translations(sip.wrapper):
    @classmethod
    def AddAvailableCatalog(cls, domain, msgIdLanguage=...) -> bool: ...
    @classmethod
    def AddCatalog(cls, domain, msgIdLanguage=...) -> bool: ...
    @classmethod
    def AddStdCatalog(cls) -> bool: ...
    @classmethod
    def Get(cls) -> Translations: ...
    @classmethod
    def GetAvailableTranslations(cls, domain) -> ArrayString: ...
    @classmethod
    def GetBestAvailableTranslation(cls, domain) -> String: ...
    @overload
    @classmethod
    def GetBestTranslation(cls, domain, msgIdLanguage) -> String: ...
    @overload
    @classmethod
    def GetBestTranslation(cls, domain, msgIdLanguage=...) -> String: ...
    @classmethod
    def GetHeaderValue(cls, header, domain=...) -> String: ...
    @overload
    @classmethod
    def GetTranslatedString(cls, origString, domain=...) -> String: ...
    @overload
    @classmethod
    def GetTranslatedString(cls, origString, n, domain=...) -> String: ...
    @classmethod
    def IsLoaded(cls, domain) -> bool: ...
    @classmethod
    def Set(cls, t) -> Any: ...
    @overload
    @classmethod
    def SetLanguage(cls, lang) -> Any: ...
    @overload
    @classmethod
    def SetLanguage(cls, lang) -> Any: ...
    @classmethod
    def SetLoader(cls, loader) -> Any: ...

class TranslationsLoader(sip.wrapper):
    @overload
    @classmethod
    def GetAvailableTranslations(cls, domain) -> ArrayString: ...
    @overload
    @classmethod
    def GetAvailableTranslations(cls) -> Any: ...
    @classmethod
    def LoadCatalog(cls, domain, lang) -> MsgCatalog: ...

class TreeCtrl(Control, WithImages):
    GetItemPyData: ClassVar[Callable] = ...
    GetPyData: ClassVar[Callable] = ...
    SetItemPyData: ClassVar[Callable] = ...
    SetPyData: ClassVar[Callable] = ...
    FocusedItem: Incomplete
    Indent: Incomplete
    QuickBestSize: Incomplete
    Spacing: Incomplete
    StateImageList: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddRoot(cls, text, image=..., selImage=..., data=...) -> TreeItemId: ...
    @classmethod
    def AppendItem(cls, parent, text, image=..., selImage=..., data=...) -> TreeItemId: ...
    @classmethod
    def AssignStateImageList(cls, imageList) -> Any: ...
    @classmethod
    def ClearFocusedItem(cls) -> Any: ...
    @classmethod
    def Collapse(cls, item) -> Any: ...
    @classmethod
    def CollapseAll(cls) -> Any: ...
    @classmethod
    def CollapseAllChildren(cls, item) -> Any: ...
    @classmethod
    def CollapseAndReset(cls, item) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., validator=..., name=...) -> bool: ...
    @classmethod
    def Delete(cls, item) -> Any: ...
    @classmethod
    def DeleteAllItems(cls) -> Any: ...
    @classmethod
    def DeleteChildren(cls, item) -> Any: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EditLabel(cls, item) -> TextCtrl: ...
    @classmethod
    def EnableBellOnNoMatch(cls, on=...) -> Any: ...
    @classmethod
    def EnableSystemTheme(cls, enable=...) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EndEditLabel(cls, item, discardChanges=...) -> Any: ...
    @classmethod
    def EnsureVisible(cls, item) -> Any: ...
    @classmethod
    def Expand(cls, item) -> Any: ...
    @classmethod
    def ExpandAll(cls) -> Any: ...
    @classmethod
    def ExpandAllChildren(cls, item) -> Any: ...
    @classmethod
    def GetBoundingRect(cls, item, textOnly=...) -> PyObject: ...
    @classmethod
    def GetChildrenCount(cls, item, recursively=...) -> size_t: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    @classmethod
    def GetCount(cls) -> unsignedint: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetEditControl(cls) -> TextCtrl: ...
    @classmethod
    def GetFirstChild(cls, *args, **kwargs): ...
    @classmethod
    def GetFirstVisibleItem(cls) -> TreeItemId: ...
    @classmethod
    def GetFocusedItem(cls) -> TreeItemId: ...
    @classmethod
    def GetIndent(cls) -> unsignedint: ...
    @classmethod
    def GetItemBackgroundColour(cls, item) -> Colour: ...
    @classmethod
    def GetItemData(cls, item) -> TreeItemData: ...
    @classmethod
    def GetItemFont(cls, item) -> Font: ...
    @classmethod
    def GetItemImage(cls, item, which=...) -> int: ...
    @classmethod
    def GetItemParent(cls, item) -> TreeItemId: ...
    @classmethod
    def GetItemState(cls, item) -> int: ...
    @classmethod
    def GetItemText(cls, item) -> String: ...
    @classmethod
    def GetItemTextColour(cls, item) -> Colour: ...
    @classmethod
    def GetLastChild(cls, item) -> TreeItemId: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNextChild(cls, *args, **kwargs): ...
    @classmethod
    def GetNextSibling(cls, item) -> TreeItemId: ...
    @classmethod
    def GetNextVisible(cls, item) -> TreeItemId: ...
    @classmethod
    def GetPrevSibling(cls, item) -> TreeItemId: ...
    @classmethod
    def GetPrevVisible(cls, item) -> TreeItemId: ...
    @classmethod
    def GetQuickBestSize(cls) -> bool: ...
    @classmethod
    def GetRootItem(cls) -> TreeItemId: ...
    @classmethod
    def GetSelection(cls) -> TreeItemId: ...
    @classmethod
    def GetSelections(cls) -> PyObject: ...
    @classmethod
    def GetSpacing(cls) -> unsignedint: ...
    @classmethod
    def GetStateImageList(cls) -> ImageList: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, point, flags) -> TreeItemId: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @overload
    @classmethod
    def InsertItem(cls, parent, previous, text, image=..., selImage=..., data=...) -> TreeItemId: ...
    @overload
    @classmethod
    def InsertItem(cls, parent, pos, text, image=..., selImage=..., data=...) -> TreeItemId: ...
    @classmethod
    def IsBold(cls, item) -> bool: ...
    @classmethod
    def IsEmpty(cls) -> bool: ...
    @classmethod
    def IsExpanded(cls, item) -> bool: ...
    @classmethod
    def IsSelected(cls, item) -> bool: ...
    @classmethod
    def IsVisible(cls, item) -> bool: ...
    @classmethod
    def ItemHasChildren(cls, item) -> bool: ...
    @classmethod
    def OnCompareItems(cls, item1, item2) -> int: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PrependItem(cls, parent, text, image=..., selImage=..., data=...) -> TreeItemId: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ScrollTo(cls, item) -> Any: ...
    @classmethod
    def SelectChildren(cls, parent) -> Any: ...
    @classmethod
    def SelectItem(cls, item, select=...) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetFocusedItem(cls, item) -> Any: ...
    @classmethod
    def SetIndent(cls, indent) -> Any: ...
    @classmethod
    def SetItemBackgroundColour(cls, item, col) -> Any: ...
    @classmethod
    def SetItemBold(cls, item, bold=...) -> Any: ...
    @classmethod
    def SetItemData(cls, item, data) -> Any: ...
    @classmethod
    def SetItemDropHighlight(cls, item, highlight=...) -> Any: ...
    @classmethod
    def SetItemFont(cls, item, font) -> Any: ...
    @classmethod
    def SetItemHasChildren(cls, item, hasChildren=...) -> Any: ...
    @classmethod
    def SetItemImage(cls, item, image, which=...) -> Any: ...
    @classmethod
    def SetItemState(cls, item, state) -> Any: ...
    @classmethod
    def SetItemText(cls, item, text) -> Any: ...
    @classmethod
    def SetItemTextColour(cls, item, col) -> Any: ...
    @classmethod
    def SetQuickBestSize(cls, quickBestSize) -> Any: ...
    @classmethod
    def SetSpacing(cls, spacing) -> Any: ...
    @classmethod
    def SetStateImageList(cls, imageList) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    @classmethod
    def SetWindowStyle(cls, styles) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def SortChildren(cls, item) -> Any: ...
    @classmethod
    def Toggle(cls, item) -> Any: ...
    @classmethod
    def ToggleItemSelection(cls, item) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def Unselect(cls) -> Any: ...
    @classmethod
    def UnselectAll(cls) -> Any: ...
    @classmethod
    def UnselectItem(cls, item) -> Any: ...
    def Validate(self) -> bool: ...
    @property
    def BoundingRect(self): ...
    @property
    def Count(self): ...
    @property
    def EditControl(self): ...
    @property
    def FirstVisibleItem(self): ...
    @property
    def RootItem(self): ...
    @property
    def Selection(self): ...
    @property
    def Selections(self): ...

class TreeEvent(NotifyEvent):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetItem(cls) -> TreeItemId: ...
    @classmethod
    def GetKeyCode(cls) -> int: ...
    @classmethod
    def GetKeyEvent(cls) -> KeyEvent: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    @classmethod
    def GetOldItem(cls) -> TreeItemId: ...
    @classmethod
    def GetPoint(cls) -> Point: ...
    @classmethod
    def IsEditCancelled(cls) -> bool: ...
    @classmethod
    def SetToolTip(cls, tooltip) -> Any: ...
    @property
    def Item(self): ...
    @property
    def KeyCode(self): ...
    @property
    def KeyEvent(self): ...
    @property
    def Label(self): ...
    @property
    def OldItem(self): ...
    @property
    def Point(self): ...

class TreeItemIcon(int): ...

class TreeItemId(sip.wrapper):
    __hash__: ClassVar[Callable] = ...
    @classmethod
    def GetID(cls) -> void: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def Unset(cls) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def ID(self): ...

class Treebook(BookCtrlBase):
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AddPage(cls, page, text, bSelect=..., imageId=...) -> bool: ...
    @classmethod
    def AddSubPage(cls, page, text, bSelect=..., imageId=...) -> bool: ...
    def ChangeSelection(self, page: int) -> int: ...
    @classmethod
    def CollapseNode(cls, pageId) -> bool: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def DeleteAllPages(self) -> bool: ...
    @classmethod
    def DeletePage(cls, pagePos) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def ExpandNode(cls, pageId, expand=...) -> bool: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    def GetPageImage(self, nPage: int) -> int: ...
    @classmethod
    def GetPageParent(cls, page) -> int: ...
    def GetPageText(self, nPage: int) -> Any: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetTreeCtrl(cls) -> TreeCtrl: ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    @classmethod
    def HitTest(cls, *args, **kwargs): ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def InsertPage(cls, pagePos, page, text, bSelect=..., imageId=...) -> bool: ...
    @classmethod
    def InsertSubPage(cls, pagePos, page, text, bSelect=..., imageId=...) -> bool: ...
    @classmethod
    def IsNodeExpanded(cls, pageId) -> bool: ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    def SetPageImage(self, page: int, image: int) -> bool: ...
    def SetPageText(self, page: int, text: Any) -> bool: ...
    def SetSelection(self, page: int) -> int: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def Selection(self): ...
    @property
    def TreeCtrl(self): ...

class TwoFingerTapEvent(GestureEvent):
    def Clone(self) -> Event | None: ...

class UIActionSimulator(sip.wrapper):
    @classmethod
    def Char(cls, keycode, modifiers=...) -> bool: ...
    @classmethod
    def KeyDown(cls, keycode, modifiers=...) -> bool: ...
    @classmethod
    def KeyUp(cls, keycode, modifiers=...) -> bool: ...
    @classmethod
    def MouseClick(cls, button=...) -> bool: ...
    @classmethod
    def MouseDblClick(cls, button=...) -> bool: ...
    @classmethod
    def MouseDown(cls, button=...) -> bool: ...
    @classmethod
    def MouseDragDrop(cls, x1, y1, x2, y2, button=...) -> bool: ...
    @overload
    @classmethod
    def MouseMove(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def MouseMove(cls, point) -> bool: ...
    @classmethod
    def MouseUp(cls, button=...) -> bool: ...
    @classmethod
    def Select(cls, text) -> bool: ...
    @classmethod
    def Text(cls, text) -> bool: ...

class URLDataObject(DataObject):
    URL: Incomplete
    @classmethod
    def GetAllFormats(cls, dir=...) -> Any: ...
    @classmethod
    def GetDataHere(cls, *args, **kwargs): ...
    @classmethod
    def GetDataSize(cls, *args, **kwargs): ...
    def GetFormatCount(self, dir: DataObject.Direction = ...) -> int: ...
    def GetPreferredFormat(self, dir: DataObject.Direction = ...) -> DataFormat: ...
    @classmethod
    def GetURL(cls) -> String: ...
    @classmethod
    def SetData(cls, format, buf) -> bool: ...
    @classmethod
    def SetURL(cls, url) -> Any: ...
    @property
    def AllFormats(self): ...

class UniChar(sip.wrapper):
    @classmethod
    def GetAsChar(cls, c) -> bool: ...
    @classmethod
    def GetValue(cls) -> value_type: ...
    @overload
    @classmethod
    def HighSurrogate(cls) -> Uint16: ...
    @overload
    @classmethod
    def HighSurrogate(cls, value) -> Uint16: ...
    @classmethod
    def IsAscii(cls) -> bool: ...
    @overload
    @classmethod
    def IsBMP(cls) -> bool: ...
    @overload
    @classmethod
    def IsBMP(cls, value) -> bool: ...
    @overload
    @classmethod
    def IsSupplementary(cls) -> bool: ...
    @overload
    @classmethod
    def IsSupplementary(cls, value) -> bool: ...
    @overload
    @classmethod
    def LowSurrogate(cls) -> Uint16: ...
    @overload
    @classmethod
    def LowSurrogate(cls, value) -> Uint16: ...
    @property
    def Value(self): ...

class UpdateUI(int): ...

class UpdateUIEvent(CommandEvent):
    Checked: Incomplete
    Enabled: Incomplete
    Shown: Incomplete
    Text: Incomplete
    @classmethod
    def CanUpdate(cls, window) -> bool: ...
    @classmethod
    def Check(cls, check) -> Any: ...
    def Clone(self) -> Event | None: ...
    @classmethod
    def Enable(cls, enable) -> Any: ...
    @classmethod
    def GetChecked(cls) -> bool: ...
    @classmethod
    def GetEnabled(cls) -> bool: ...
    @classmethod
    def GetMode(cls) -> UpdateUIMode: ...
    @classmethod
    def GetSetChecked(cls) -> bool: ...
    @classmethod
    def GetSetEnabled(cls) -> bool: ...
    @classmethod
    def GetSetShown(cls) -> bool: ...
    @classmethod
    def GetSetText(cls) -> bool: ...
    @classmethod
    def GetShown(cls) -> bool: ...
    @classmethod
    def GetText(cls) -> String: ...
    @classmethod
    def GetUpdateInterval(cls) -> long: ...
    @classmethod
    def IsCheckable(cls) -> bool: ...
    @classmethod
    def ResetUpdateTime(cls) -> Any: ...
    @classmethod
    def SetMode(cls, mode) -> Any: ...
    @classmethod
    def SetText(cls, text) -> Any: ...
    @classmethod
    def SetUpdateInterval(cls, updateInterval) -> Any: ...
    @classmethod
    def Show(cls, show) -> Any: ...

class UpdateUIMode(int): ...

class VListBox(VScrolledWindow):
    ItemCount: Incomplete
    Margins: Incomplete
    Selection: Incomplete
    SelectionBackground: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Clear(cls) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    @classmethod
    def DeselectAll(cls) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EstimateTotalHeight(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalSize(cls, *args, **kwargs): ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFirstSelected(cls, *args, **kwargs): ...
    @classmethod
    def GetItemCount(cls) -> size_t: ...
    @classmethod
    def GetItemRect(cls, item) -> Rect: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMargins(cls) -> Point: ...
    @classmethod
    def GetNextSelected(cls, *args, **kwargs): ...
    @classmethod
    def GetNonOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientation(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetSelectedCount(cls) -> size_t: ...
    @classmethod
    def GetSelection(cls) -> int: ...
    @classmethod
    def GetSelectionBackground(cls) -> Colour: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def HasMultipleSelection(cls) -> bool: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsCurrent(cls, item) -> bool: ...
    @classmethod
    def IsSelected(cls, item) -> bool: ...
    @classmethod
    def OnDrawBackground(cls, dc, rect, n) -> Any: ...
    @classmethod
    def OnDrawItem(cls, dc, rect, n) -> Any: ...
    @classmethod
    def OnDrawSeparator(cls, dc, rect, n) -> Any: ...
    def OnGetRowHeight(self, n: int) -> int: ...
    @classmethod
    def OnGetRowsHeightHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitSize(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitsSizeHint(cls, *args, **kwargs): ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def OnMeasureItem(cls, n) -> Coord: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Select(cls, item, select=...) -> bool: ...
    @classmethod
    def SelectAll(cls) -> bool: ...
    @classmethod
    def SelectRange(cls, from_, to_) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetItemCount(cls, count) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, pt) -> Any: ...
    @overload
    @classmethod
    def SetMargins(cls, x, y) -> Any: ...
    @classmethod
    def SetSelection(cls, selection) -> Any: ...
    @classmethod
    def SetSelectionBackground(cls, col) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def Toggle(cls, item) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def SelectedCount(self): ...

class VScrolledWindow(Panel, VarVScrollHelper):
    HitTest: ClassVar[Callable] = ...
    LineCount: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def EstimateTotalHeight(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalSize(cls, *args, **kwargs): ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetFirstVisibleLine(cls) -> unsignedlong: ...
    @classmethod
    def GetLastVisibleLine(cls) -> unsignedlong: ...
    @classmethod
    def GetLineCount(cls) -> unsignedlong: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetNonOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientation(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientationTargetSize(cls, *args, **kwargs): ...
    def GetValidator(self) -> Validator | None: ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def OnGetRowHeight(cls, *args, **kwargs): ...
    @classmethod
    def OnGetRowsHeightHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitSize(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitsSizeHint(cls, *args, **kwargs): ...
    def OnInternalIdle(self) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    @classmethod
    def RefreshLine(cls, line) -> Any: ...
    @classmethod
    def RefreshLines(cls, from_, to_) -> Any: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def ScrollLines(cls, lines) -> bool: ...
    @classmethod
    def ScrollPages(cls, pages) -> bool: ...
    @classmethod
    def ScrollToLine(cls, line) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetLineCount(cls, count) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def FirstVisibleLine(self): ...
    @property
    def LastVisibleLine(self): ...

class Validator(EvtHandler):
    Window: Incomplete
    @overload
    @classmethod
    def Clone(cls) -> Object: ...
    @overload
    @classmethod
    def Clone(cls) -> Any: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @classmethod
    def IsSilent(cls) -> bool: ...
    @classmethod
    def SetWindow(cls, window) -> Any: ...
    @classmethod
    def SuppressBellOnError(cls, suppress=...) -> Any: ...
    @classmethod
    def TransferFromWindow(cls) -> bool: ...
    @classmethod
    def TransferToWindow(cls) -> bool: ...
    @classmethod
    def TryAfter(cls, *args, **kwargs): ...
    @classmethod
    def TryBefore(cls, *args, **kwargs): ...
    @classmethod
    def Validate(cls, parent) -> bool: ...

class VarHScrollHelper(VarScrollHelperBase):
    ColumnCount: Incomplete
    def EstimateTotalSize(self) -> int: ...
    @classmethod
    def EstimateTotalWidth(cls) -> Coord: ...
    @classmethod
    def GetColumnCount(cls) -> size_t: ...
    def GetNonOrientationTargetSize(self) -> int: ...
    def GetOrientation(self) -> Orientation: ...
    def GetOrientationTargetSize(self) -> int: ...
    @classmethod
    def GetVisibleColumnsBegin(cls) -> size_t: ...
    @classmethod
    def GetVisibleColumnsEnd(cls) -> size_t: ...
    @classmethod
    def IsColumnVisible(cls, column) -> bool: ...
    @classmethod
    def OnGetColumnWidth(cls, column) -> Coord: ...
    @classmethod
    def OnGetColumnsWidthHint(cls, columnMin, columnMax) -> Any: ...
    def OnGetUnitSize(self, unit: int) -> int: ...
    def OnGetUnitsSizeHint(self, unitMin: int, unitMax: int) -> Any: ...
    @classmethod
    def RefreshColumn(cls, column) -> Any: ...
    @classmethod
    def RefreshColumns(cls, from_, to_) -> Any: ...
    @classmethod
    def ScrollColumnPages(cls, pages) -> bool: ...
    @classmethod
    def ScrollColumns(cls, columns) -> bool: ...
    @classmethod
    def ScrollToColumn(cls, column) -> bool: ...
    @classmethod
    def SetColumnCount(cls, columnCount) -> Any: ...
    @property
    def VisibleColumnsBegin(self): ...
    @property
    def VisibleColumnsEnd(self): ...

class VarHVScrollHelper(VarVScrollHelper, VarHScrollHelper):
    RowColumnCount: Incomplete
    @classmethod
    def EnablePhysicalScrolling(cls, vscrolling=..., hscrolling=...) -> Any: ...
    @classmethod
    def EstimateTotalHeight(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalSize(cls, *args, **kwargs): ...
    @classmethod
    def EstimateTotalWidth(cls, *args, **kwargs): ...
    @classmethod
    def GetNonOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientation(cls, *args, **kwargs): ...
    @classmethod
    def GetOrientationTargetSize(cls, *args, **kwargs): ...
    @classmethod
    def GetRowColumnCount(cls) -> Size: ...
    @classmethod
    def GetVisibleBegin(cls) -> Position: ...
    @classmethod
    def GetVisibleEnd(cls) -> Position: ...
    @overload
    @classmethod
    def IsVisible(cls, row, column) -> bool: ...
    @overload
    @classmethod
    def IsVisible(cls, pos) -> bool: ...
    @classmethod
    def OnGetColumnWidth(cls, *args, **kwargs): ...
    @classmethod
    def OnGetColumnsWidthHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetRowHeight(cls, *args, **kwargs): ...
    @classmethod
    def OnGetRowsHeightHint(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitSize(cls, *args, **kwargs): ...
    @classmethod
    def OnGetUnitsSizeHint(cls, *args, **kwargs): ...
    @overload
    @classmethod
    def RefreshRowColumn(cls, row, column) -> Any: ...
    @overload
    @classmethod
    def RefreshRowColumn(cls, pos) -> Any: ...
    @overload
    @classmethod
    def RefreshRowsColumns(cls, fromRow, toRow, fromColumn, toColumn) -> Any: ...
    @overload
    @classmethod
    def RefreshRowsColumns(cls, _from, to) -> Any: ...
    @overload
    @classmethod
    def ScrollToRowColumn(cls, row, column) -> bool: ...
    @overload
    @classmethod
    def ScrollToRowColumn(cls, pos) -> bool: ...
    @classmethod
    def SetRowColumnCount(cls, rowCount, columnCount) -> Any: ...
    @overload
    @classmethod
    def VirtualHitTest(cls, x, y) -> Position: ...
    @overload
    @classmethod
    def VirtualHitTest(cls, pos) -> Position: ...
    @property
    def VisibleBegin(self): ...
    @property
    def VisibleEnd(self): ...

class VarScrollHelperBase(sip.wrapper):
    TargetWindow: Incomplete
    @classmethod
    def CalcScrolledPosition(cls, coord) -> int: ...
    @classmethod
    def CalcUnscrolledPosition(cls, coord) -> int: ...
    @classmethod
    def EnablePhysicalScrolling(cls, scrolling=...) -> Any: ...
    @classmethod
    def GetNonOrientationTargetSize(cls) -> int: ...
    @classmethod
    def GetOrientation(cls) -> Orientation: ...
    @classmethod
    def GetOrientationTargetSize(cls) -> int: ...
    @classmethod
    def GetTargetWindow(cls) -> Window: ...
    @classmethod
    def GetVisibleBegin(cls) -> size_t: ...
    @classmethod
    def GetVisibleEnd(cls) -> size_t: ...
    @classmethod
    def IsVisible(cls, unit) -> bool: ...
    @classmethod
    def RefreshAll(cls) -> Any: ...
    @classmethod
    def SetTargetWindow(cls, target) -> Any: ...
    @classmethod
    def UpdateScrollbar(cls) -> Any: ...
    @classmethod
    def VirtualHitTest(cls, coord) -> int: ...
    @property
    def NonOrientationTargetSize(self): ...
    @property
    def Orientation(self): ...
    @property
    def OrientationTargetSize(self): ...
    @property
    def VisibleBegin(self): ...
    @property
    def VisibleEnd(self): ...

class VarVScrollHelper(VarScrollHelperBase):
    RowCount: Incomplete
    @classmethod
    def EstimateTotalHeight(cls) -> Coord: ...
    def EstimateTotalSize(self) -> int: ...
    def GetNonOrientationTargetSize(self) -> int: ...
    def GetOrientation(self) -> Orientation: ...
    def GetOrientationTargetSize(self) -> int: ...
    @classmethod
    def GetRowCount(cls) -> size_t: ...
    @classmethod
    def GetVisibleRowsBegin(cls) -> size_t: ...
    @classmethod
    def GetVisibleRowsEnd(cls) -> size_t: ...
    @classmethod
    def IsRowVisible(cls, row) -> bool: ...
    @classmethod
    def OnGetRowHeight(cls, row) -> Coord: ...
    @classmethod
    def OnGetRowsHeightHint(cls, rowMin, rowMax) -> Any: ...
    def OnGetUnitSize(self, unit: int) -> int: ...
    def OnGetUnitsSizeHint(self, unitMin: int, unitMax: int) -> Any: ...
    @classmethod
    def RefreshRow(cls, row) -> Any: ...
    @classmethod
    def RefreshRows(cls, from_, to_) -> Any: ...
    @classmethod
    def ScrollRowPages(cls, pages) -> bool: ...
    @classmethod
    def ScrollRows(cls, rows) -> bool: ...
    @classmethod
    def ScrollToRow(cls, row) -> bool: ...
    @classmethod
    def SetRowCount(cls, rowCount) -> Any: ...
    @property
    def VisibleRowsBegin(self): ...
    @property
    def VisibleRowsEnd(self): ...

class VersionInfo(sip.wrapper):
    @classmethod
    def GetCopyright(cls) -> String: ...
    @classmethod
    def GetDescription(cls) -> String: ...
    @classmethod
    def GetMajor(cls) -> int: ...
    @classmethod
    def GetMicro(cls) -> int: ...
    @classmethod
    def GetMinor(cls) -> int: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetRevision(cls) -> int: ...
    @classmethod
    def GetVersionString(cls) -> String: ...
    @classmethod
    def HasCopyright(cls) -> bool: ...
    @classmethod
    def HasDescription(cls) -> bool: ...
    @classmethod
    def ToString(cls) -> String: ...
    @property
    def Copyright(self): ...
    @property
    def Description(self): ...
    @property
    def Major(self): ...
    @property
    def Micro(self): ...
    @property
    def Minor(self): ...
    @property
    def Name(self): ...
    @property
    def Revision(self): ...
    @property
    def VersionString(self): ...

class VideoMode(sip.wrapper):
    @classmethod
    def GetDepth(cls) -> int: ...
    @classmethod
    def GetHeight(cls) -> int: ...
    @classmethod
    def GetWidth(cls) -> int: ...
    @classmethod
    def IsOk(cls) -> bool: ...
    @classmethod
    def Matches(cls, other) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classmethod
    def __nonzero__(cls) -> int: ...
    @property
    def Depth(self): ...
    @property
    def Height(self): ...
    @property
    def Width(self): ...

class VisualAttributes(sip.wrapper): ...

class Window(WindowBase):
    class ChildrenRepositioningGuard(sip.wrapper): ...
    ConvertDialogPointToPixels: ClassVar[Callable] = ...
    ConvertDialogSizeToPixels: ClassVar[Callable] = ...
    DLG_UNIT: ClassVar[Callable] = ...
    DestroyLater: ClassVar[Callable] = ...
    GetPositionTuple: ClassVar[Callable] = ...
    GetSizeTuple: ClassVar[Callable] = ...
    GetVirtualSizeTuple: ClassVar[Callable] = ...
    MoveXY: ClassVar[Callable] = ...
    PostCreate: ClassVar[Callable] = ...
    SetClientRect: ClassVar[Callable] = ...
    SetDimensions: ClassVar[Callable] = ...
    SetRect: ClassVar[Callable] = ...
    SetSizeHintsSz: ClassVar[Callable] = ...
    SetSizeWH: ClassVar[Callable] = ...
    SetToolTipString: ClassVar[Callable] = ...
    SetVirtualSizeWH: ClassVar[Callable] = ...
    __bool__: ClassVar[Callable] = ...
    __nonzero__: ClassVar[Callable] = ...
    AcceleratorTable: Incomplete
    AutoLayout: Incomplete
    BackgroundColour: Incomplete
    BackgroundStyle: Incomplete
    Caret: Incomplete
    ClientRect: Incomplete
    ClientSize: Incomplete
    Constraints: Incomplete
    ContainingSizer: Incomplete
    Cursor: Incomplete
    DropTarget: Incomplete
    Enabled: Incomplete
    EventHandler: Incomplete
    ExtraStyle: Incomplete
    Font: Incomplete
    ForegroundColour: Incomplete
    HelpText: Incomplete
    Id: Incomplete
    Label: Incomplete
    LayoutDirection: Incomplete
    MaxClientSize: Incomplete
    MaxSize: Incomplete
    MinClientSize: Incomplete
    MinSize: Incomplete
    Name: Incomplete
    Position: Incomplete
    Rect: Incomplete
    Shown: Incomplete
    Size: Incomplete
    Sizer: Incomplete
    ThemeEnabled: Incomplete
    ToolTip: Incomplete
    Validator: Incomplete
    VirtualSize: Incomplete
    WindowStyle: Incomplete
    WindowStyleFlag: Incomplete
    WindowVariant: Incomplete
    @classmethod
    def AcceptsFocus(cls) -> bool: ...
    @classmethod
    def AcceptsFocusFromKeyboard(cls) -> bool: ...
    @classmethod
    def AcceptsFocusRecursively(cls) -> bool: ...
    @classmethod
    def AddChild(cls, child) -> Any: ...
    @classmethod
    def AdjustForLayoutDirection(cls, x, width, widthTotal) -> Coord: ...
    @classmethod
    def AlwaysShowScrollbars(cls, hflag=..., vflag=...) -> Any: ...
    @classmethod
    def AssociateHandle(cls, handle) -> Any: ...
    @classmethod
    def BeginRepositioningChildren(cls) -> bool: ...
    @classmethod
    def CacheBestSize(cls, size) -> Any: ...
    @classmethod
    def CanAcceptFocus(cls) -> bool: ...
    @classmethod
    def CanAcceptFocusFromKeyboard(cls) -> bool: ...
    @classmethod
    def CanScroll(cls, orient) -> bool: ...
    @classmethod
    def CanSetTransparent(cls) -> bool: ...
    @classmethod
    def CaptureMouse(cls) -> Any: ...
    @classmethod
    def Center(cls, dir=...) -> Any: ...
    @classmethod
    def CenterOnParent(cls, dir=...) -> Any: ...
    @classmethod
    def Centre(cls, direction=...) -> Any: ...
    @classmethod
    def CentreOnParent(cls, direction=...) -> Any: ...
    @classmethod
    def ClearBackground(cls) -> Any: ...
    @classmethod
    def ClientToScreen(cls, pt) -> Point: ...
    @classmethod
    def ClientToWindowSize(cls, size) -> Size: ...
    @classmethod
    def Close(cls, force=...) -> bool: ...
    @overload
    @classmethod
    def ConvertDialogToPixels(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ConvertDialogToPixels(cls, sz) -> Size: ...
    @overload
    @classmethod
    def ConvertPixelsToDialog(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ConvertPixelsToDialog(cls, sz) -> Size: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    @classmethod
    def CreateAccessible(cls) -> Accessible: ...
    @classmethod
    def Destroy(cls) -> bool: ...
    @classmethod
    def DestroyChildren(cls) -> bool: ...
    @classmethod
    def Disable(cls) -> bool: ...
    @classmethod
    def DisableFocusFromKeyboard(cls) -> Any: ...
    @classmethod
    def DissociateHandle(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    @classmethod
    def DoGetBestClientSize(cls) -> Size: ...
    @classmethod
    def DoGetBestSize(cls) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def DoUpdateWindowUI(cls, event) -> Any: ...
    @classmethod
    def DragAcceptFiles(cls, accept) -> Any: ...
    @classmethod
    def Enable(cls, enable=...) -> bool: ...
    @classmethod
    def EnableTouchEvents(cls, eventsMask) -> bool: ...
    @classmethod
    def EnableVisibleFocus(cls, enable) -> Any: ...
    @classmethod
    def EndRepositioningChildren(cls) -> Any: ...
    @classmethod
    def FindFocus(cls) -> Window: ...
    @overload
    @classmethod
    def FindWindow(cls, id) -> Window: ...
    @overload
    @classmethod
    def FindWindow(cls, name) -> Window: ...
    @classmethod
    def FindWindowById(cls, id, parent=...) -> Window: ...
    @classmethod
    def FindWindowByLabel(cls, label, parent=...) -> Window: ...
    @classmethod
    def FindWindowByName(cls, name, parent=...) -> Window: ...
    @classmethod
    def Fit(cls) -> Any: ...
    @classmethod
    def FitInside(cls) -> Any: ...
    @classmethod
    def Freeze(cls) -> Any: ...
    @overload
    @classmethod
    def FromDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def FromDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def FromDIP(cls, d) -> int: ...
    @overload
    @classmethod
    def FromDIP(cls, sz, w) -> Size: ...
    @overload
    @classmethod
    def FromDIP(cls, pt, w) -> Point: ...
    @overload
    @classmethod
    def FromDIP(cls, d, w) -> int: ...
    @overload
    @classmethod
    def FromPhys(cls, sz) -> Size: ...
    @overload
    @classmethod
    def FromPhys(cls, pt) -> Point: ...
    @overload
    @classmethod
    def FromPhys(cls, d) -> int: ...
    @overload
    @classmethod
    def FromPhys(cls, sz, w) -> Size: ...
    @overload
    @classmethod
    def FromPhys(cls, pt, w) -> Point: ...
    @overload
    @classmethod
    def FromPhys(cls, d, w) -> int: ...
    @classmethod
    def GetAcceleratorTable(cls) -> AcceleratorTable: ...
    @classmethod
    def GetAccessible(cls) -> Accessible: ...
    @classmethod
    def GetAutoLayout(cls) -> bool: ...
    @classmethod
    def GetBackgroundColour(cls) -> Colour: ...
    @classmethod
    def GetBackgroundStyle(cls) -> BackgroundStyle: ...
    @classmethod
    def GetBestHeight(cls, width) -> int: ...
    @classmethod
    def GetBestSize(cls) -> Size: ...
    @classmethod
    def GetBestVirtualSize(cls) -> Size: ...
    @classmethod
    def GetBestWidth(cls, height) -> int: ...
    @overload
    @classmethod
    def GetBorder(cls, flags) -> Border: ...
    @overload
    @classmethod
    def GetBorder(cls) -> Border: ...
    @classmethod
    def GetCapture(cls) -> Window: ...
    @classmethod
    def GetCaret(cls) -> Caret: ...
    @classmethod
    def GetCharHeight(cls) -> int: ...
    @classmethod
    def GetCharWidth(cls) -> int: ...
    @classmethod
    def GetChildren(cls) -> WindowList: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    @classmethod
    def GetClientAreaOrigin(cls) -> Point: ...
    @classmethod
    def GetClientRect(cls) -> Rect: ...
    @classmethod
    def GetClientSize(cls) -> Size: ...
    @classmethod
    def GetConstraints(cls) -> LayoutConstraints: ...
    @classmethod
    def GetContainingSizer(cls) -> Sizer: ...
    @classmethod
    def GetContentScaleFactor(cls) -> double: ...
    @classmethod
    def GetCursor(cls) -> Cursor: ...
    @classmethod
    def GetDPI(cls) -> Size: ...
    @classmethod
    def GetDPIScaleFactor(cls) -> double: ...
    @classmethod
    def GetDefaultAttributes(cls) -> VisualAttributes: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    @classmethod
    def GetDropTarget(cls) -> DropTarget: ...
    @classmethod
    def GetEffectiveMinSize(cls) -> Size: ...
    @classmethod
    def GetEventHandler(cls) -> EvtHandler: ...
    @classmethod
    def GetExtraStyle(cls) -> long: ...
    @classmethod
    def GetFont(cls) -> Font: ...
    @classmethod
    def GetForegroundColour(cls) -> Colour: ...
    @classmethod
    def GetFullTextExtent(cls, *args, **kwargs): ...
    @classmethod
    def GetGrandParent(cls) -> Window: ...
    @classmethod
    def GetGtkWidget(cls) -> void: ...
    @classmethod
    def GetHandle(cls) -> UIntPtr: ...
    @classmethod
    def GetHelpText(cls) -> String: ...
    @classmethod
    def GetHelpTextAtPoint(cls, point, origin) -> String: ...
    @classmethod
    def GetId(cls) -> WindowID: ...
    @classmethod
    def GetLabel(cls) -> String: ...
    @classmethod
    def GetLayoutDirection(cls) -> LayoutDirection: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetMaxClientSize(cls) -> Size: ...
    @classmethod
    def GetMaxHeight(cls) -> int: ...
    @classmethod
    def GetMaxSize(cls) -> Size: ...
    @classmethod
    def GetMaxWidth(cls) -> int: ...
    @classmethod
    def GetMinClientSize(cls) -> Size: ...
    @classmethod
    def GetMinHeight(cls) -> int: ...
    @classmethod
    def GetMinSize(cls) -> Size: ...
    @classmethod
    def GetMinWidth(cls) -> int: ...
    @classmethod
    def GetName(cls) -> String: ...
    @classmethod
    def GetNextSibling(cls) -> Window: ...
    @classmethod
    def GetOrCreateAccessible(cls) -> Accessible: ...
    @classmethod
    def GetParent(cls) -> Window: ...
    @overload
    @classmethod
    def GetPopupMenuSelectionFromUser(cls, menu, pos=...) -> int: ...
    @overload
    @classmethod
    def GetPopupMenuSelectionFromUser(cls, menu, x, y) -> int: ...
    @classmethod
    def GetPosition(cls) -> Point: ...
    @classmethod
    def GetPrevSibling(cls) -> Window: ...
    @classmethod
    def GetRect(cls) -> Rect: ...
    @classmethod
    def GetScreenPosition(cls) -> Point: ...
    @classmethod
    def GetScreenRect(cls) -> Rect: ...
    @classmethod
    def GetScrollPos(cls, orientation) -> int: ...
    @classmethod
    def GetScrollRange(cls, orientation) -> int: ...
    @classmethod
    def GetScrollThumb(cls, orientation) -> int: ...
    @classmethod
    def GetSize(cls) -> Size: ...
    @classmethod
    def GetSizer(cls) -> Sizer: ...
    @classmethod
    def GetTextExtent(cls, string) -> Size: ...
    @classmethod
    def GetThemeEnabled(cls) -> bool: ...
    @classmethod
    def GetToolTip(cls) -> ToolTip: ...
    @classmethod
    def GetToolTipText(cls) -> String: ...
    @classmethod
    def GetTopLevelParent(cls) -> Window: ...
    @classmethod
    def GetUpdateClientRect(cls) -> Rect: ...
    @classmethod
    def GetUpdateRegion(cls) -> Region: ...
    @classmethod
    def GetValidator(cls) -> Validator: ...
    @classmethod
    def GetVirtualSize(cls) -> Size: ...
    @classmethod
    def GetWindowBorderSize(cls) -> Size: ...
    @classmethod
    def GetWindowStyle(cls) -> long: ...
    @classmethod
    def GetWindowStyleFlag(cls) -> long: ...
    @classmethod
    def GetWindowVariant(cls) -> WindowVariant: ...
    @classmethod
    def HandleAsNavigationKey(cls, event) -> bool: ...
    @classmethod
    def HandleWindowEvent(cls, event) -> bool: ...
    @classmethod
    def HasCapture(cls) -> bool: ...
    @classmethod
    def HasExtraStyle(cls, exFlag) -> bool: ...
    @classmethod
    def HasFlag(cls, flag) -> bool: ...
    @classmethod
    def HasFocus(cls) -> bool: ...
    @classmethod
    def HasMultiplePages(cls) -> bool: ...
    @classmethod
    def HasScrollbar(cls, orient) -> bool: ...
    @classmethod
    def HasTransparentBackground(cls) -> bool: ...
    @classmethod
    def Hide(cls) -> bool: ...
    @classmethod
    def HideWithEffect(cls, effect, timeout=...) -> bool: ...
    @overload
    @classmethod
    def HitTest(cls, x, y) -> HitTest: ...
    @overload
    @classmethod
    def HitTest(cls, pt) -> HitTest: ...
    @classmethod
    def InformFirstDirection(cls, direction, size, availableOtherDir) -> bool: ...
    @classmethod
    def InheritAttributes(cls) -> Any: ...
    @classmethod
    def InheritsBackgroundColour(cls) -> bool: ...
    @classmethod
    def InheritsForegroundColour(cls) -> bool: ...
    @classmethod
    def InitDialog(cls) -> Any: ...
    @classmethod
    def InvalidateBestSize(cls) -> Any: ...
    @classmethod
    def IsBeingDeleted(cls) -> bool: ...
    @classmethod
    def IsDescendant(cls, win) -> bool: ...
    @classmethod
    def IsDoubleBuffered(cls) -> bool: ...
    @classmethod
    def IsEnabled(cls) -> bool: ...
    @overload
    @classmethod
    def IsExposed(cls, x, y) -> bool: ...
    @overload
    @classmethod
    def IsExposed(cls, pt) -> bool: ...
    @overload
    @classmethod
    def IsExposed(cls, x, y, w, h) -> bool: ...
    @overload
    @classmethod
    def IsExposed(cls, rect) -> bool: ...
    @classmethod
    def IsFocusable(cls) -> bool: ...
    @classmethod
    def IsFrozen(cls) -> bool: ...
    @classmethod
    def IsRetained(cls) -> bool: ...
    @classmethod
    def IsScrollbarAlwaysShown(cls, orient) -> bool: ...
    @classmethod
    def IsShown(cls) -> bool: ...
    @classmethod
    def IsShownOnScreen(cls) -> bool: ...
    @classmethod
    def IsThisEnabled(cls) -> bool: ...
    @classmethod
    def IsTopLevel(cls) -> bool: ...
    @classmethod
    def IsTransparentBackgroundSupported(cls, reason=...) -> bool: ...
    @classmethod
    def Layout(cls) -> bool: ...
    @classmethod
    def LineDown(cls) -> bool: ...
    @classmethod
    def LineUp(cls) -> bool: ...
    @classmethod
    def Lower(cls) -> Any: ...
    @classmethod
    def MacIsWindowScrollbar(cls, sb) -> Any: ...
    @overload
    @classmethod
    def Move(cls, x, y, flags=...) -> Any: ...
    @overload
    @classmethod
    def Move(cls, pt, flags=...) -> Any: ...
    @classmethod
    def MoveAfterInTabOrder(cls, win) -> Any: ...
    @classmethod
    def MoveBeforeInTabOrder(cls, win) -> Any: ...
    @classmethod
    def Navigate(cls, flags=...) -> bool: ...
    @classmethod
    def NavigateIn(cls, flags=...) -> bool: ...
    @classmethod
    def NewControlId(cls, count=...) -> WindowID: ...
    @classmethod
    def OnInternalIdle(cls) -> Any: ...
    @classmethod
    def PageDown(cls) -> bool: ...
    @classmethod
    def PageUp(cls) -> bool: ...
    @classmethod
    def PopEventHandler(cls, deleteHandler=...) -> EvtHandler: ...
    @overload
    @classmethod
    def PopupMenu(cls, menu, pos=...) -> bool: ...
    @overload
    @classmethod
    def PopupMenu(cls, menu, x, y) -> bool: ...
    @classmethod
    def PostSizeEvent(cls) -> Any: ...
    @classmethod
    def PostSizeEventToParent(cls) -> Any: ...
    @overload
    @classmethod
    def ProcessEvent(cls, event) -> bool: ...
    @overload
    @classmethod
    def ProcessEvent(cls) -> Any: ...
    @classmethod
    def ProcessWindowEvent(cls, event) -> bool: ...
    @classmethod
    def ProcessWindowEventLocally(cls, event) -> bool: ...
    @classmethod
    def PushEventHandler(cls, handler) -> Any: ...
    @classmethod
    def Raise(cls) -> Any: ...
    @classmethod
    def Refresh(cls, eraseBackground=..., rect=...) -> Any: ...
    @classmethod
    def RefreshRect(cls, rect, eraseBackground=...) -> Any: ...
    @classmethod
    def RegisterHotKey(cls, hotkeyId, modifiers, virtualKeyCode) -> bool: ...
    @classmethod
    def ReleaseMouse(cls) -> Any: ...
    @classmethod
    def RemoveChild(cls, child) -> Any: ...
    @classmethod
    def RemoveEventHandler(cls, handler) -> bool: ...
    @classmethod
    def Reparent(cls, newParent) -> bool: ...
    @classmethod
    def ScreenToClient(cls, pt) -> Point: ...
    @classmethod
    def ScrollLines(cls, lines) -> bool: ...
    @classmethod
    def ScrollPages(cls, pages) -> bool: ...
    @classmethod
    def ScrollWindow(cls, dx, dy, rect=...) -> Any: ...
    @classmethod
    def SendDestroyEvent(cls) -> Any: ...
    @classmethod
    def SendIdleEvents(cls, event) -> bool: ...
    @classmethod
    def SendSizeEvent(cls, flags=...) -> Any: ...
    @classmethod
    def SendSizeEventToParent(cls, flags=...) -> Any: ...
    @classmethod
    def SetAcceleratorTable(cls, accel) -> Any: ...
    @classmethod
    def SetAccessible(cls, accessible) -> Any: ...
    @classmethod
    def SetAutoLayout(cls, autoLayout) -> Any: ...
    @classmethod
    def SetBackgroundColour(cls, colour) -> bool: ...
    @classmethod
    def SetBackgroundStyle(cls, style) -> bool: ...
    @classmethod
    def SetCanFocus(cls, canFocus) -> Any: ...
    @classmethod
    def SetCaret(cls, caret) -> Any: ...
    @overload
    @classmethod
    def SetClientSize(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetClientSize(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetClientSize(cls, rect) -> Any: ...
    @classmethod
    def SetConstraints(cls, constraints) -> Any: ...
    @classmethod
    def SetContainingSizer(cls, sizer) -> Any: ...
    @classmethod
    def SetCursor(cls, cursor) -> bool: ...
    @classmethod
    def SetDoubleBuffered(cls, on) -> Any: ...
    @classmethod
    def SetDropTarget(cls, target) -> Any: ...
    @classmethod
    def SetEventHandler(cls, handler) -> Any: ...
    @classmethod
    def SetExtraStyle(cls, exStyle) -> Any: ...
    @classmethod
    def SetFocus(cls) -> Any: ...
    @classmethod
    def SetFocusFromKbd(cls) -> Any: ...
    @classmethod
    def SetFont(cls, font) -> bool: ...
    @classmethod
    def SetForegroundColour(cls, colour) -> bool: ...
    @classmethod
    def SetHelpText(cls, helpText) -> Any: ...
    @classmethod
    def SetId(cls, winid) -> Any: ...
    @classmethod
    def SetInitialSize(cls, size=...) -> Any: ...
    @classmethod
    def SetLabel(cls, label) -> Any: ...
    @classmethod
    def SetLayoutDirection(cls, dir) -> Any: ...
    @classmethod
    def SetMaxClientSize(cls, size) -> Any: ...
    @classmethod
    def SetMaxSize(cls, size) -> Any: ...
    @classmethod
    def SetMinClientSize(cls, size) -> Any: ...
    @classmethod
    def SetMinSize(cls, size) -> Any: ...
    @classmethod
    def SetName(cls, name) -> Any: ...
    @classmethod
    def SetNextHandler(cls, handler) -> Any: ...
    @classmethod
    def SetOwnBackgroundColour(cls, colour) -> Any: ...
    @classmethod
    def SetOwnFont(cls, font) -> Any: ...
    @classmethod
    def SetOwnForegroundColour(cls, colour) -> Any: ...
    @classmethod
    def SetPalette(cls, pal) -> Any: ...
    @classmethod
    def SetPosition(cls, pt) -> Any: ...
    @classmethod
    def SetPreviousHandler(cls, handler) -> Any: ...
    @classmethod
    def SetScrollPos(cls, orientation, pos, refresh=...) -> Any: ...
    @classmethod
    def SetScrollbar(cls, orientation, position, thumbSize, range, refresh=...) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, x, y, width, height, sizeFlags=...) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, rect) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, size) -> Any: ...
    @overload
    @classmethod
    def SetSize(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls, minSize, maxSize=..., incSize=...) -> Any: ...
    @overload
    @classmethod
    def SetSizeHints(cls, minW, minH, maxW=..., maxH=..., incW=..., incH=...) -> Any: ...
    @classmethod
    def SetSizer(cls, sizer, deleteOld=...) -> Any: ...
    @classmethod
    def SetSizerAndFit(cls, sizer, deleteOld=...) -> Any: ...
    @classmethod
    def SetThemeEnabled(cls, enable) -> Any: ...
    @overload
    @classmethod
    def SetToolTip(cls, tipString) -> Any: ...
    @overload
    @classmethod
    def SetToolTip(cls, tip) -> Any: ...
    @classmethod
    def SetTransparent(cls, alpha) -> bool: ...
    @classmethod
    def SetValidator(cls, validator) -> Any: ...
    @overload
    @classmethod
    def SetVirtualSize(cls, width, height) -> Any: ...
    @overload
    @classmethod
    def SetVirtualSize(cls, size) -> Any: ...
    @classmethod
    def SetWindowStyle(cls, style) -> Any: ...
    @classmethod
    def SetWindowStyleFlag(cls, style) -> Any: ...
    @classmethod
    def SetWindowVariant(cls, variant) -> Any: ...
    @classmethod
    def ShouldInheritColours(cls) -> bool: ...
    @classmethod
    def Show(cls, show=...) -> bool: ...
    @classmethod
    def ShowWithEffect(cls, effect, timeout=...) -> bool: ...
    @classmethod
    def Thaw(cls) -> Any: ...
    @overload
    @classmethod
    def ToDIP(cls, sz) -> Size: ...
    @overload
    @classmethod
    def ToDIP(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ToDIP(cls, d) -> int: ...
    @overload
    @classmethod
    def ToDIP(cls, sz, w) -> Size: ...
    @overload
    @classmethod
    def ToDIP(cls, pt, w) -> Point: ...
    @overload
    @classmethod
    def ToDIP(cls, d, w) -> int: ...
    @overload
    @classmethod
    def ToPhys(cls, sz) -> Size: ...
    @overload
    @classmethod
    def ToPhys(cls, pt) -> Point: ...
    @overload
    @classmethod
    def ToPhys(cls, d) -> int: ...
    @overload
    @classmethod
    def ToPhys(cls, sz, w) -> Size: ...
    @overload
    @classmethod
    def ToPhys(cls, pt, w) -> Point: ...
    @overload
    @classmethod
    def ToPhys(cls, d, w) -> int: ...
    @classmethod
    def ToggleWindowStyle(cls, flag) -> bool: ...
    @classmethod
    def TransferDataFromWindow(cls) -> bool: ...
    @classmethod
    def TransferDataToWindow(cls) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    @classmethod
    def UnregisterHotKey(cls, hotkeyId) -> bool: ...
    @classmethod
    def UnreserveControlId(cls, id, count=...) -> Any: ...
    @classmethod
    def UnsetToolTip(cls) -> Any: ...
    @classmethod
    def Update(cls) -> Any: ...
    @classmethod
    def UpdateWindowUI(cls, flags=...) -> Any: ...
    @classmethod
    def UseBackgroundColour(cls) -> bool: ...
    @classmethod
    def UseBgCol(cls) -> bool: ...
    @classmethod
    def UseForegroundColour(cls) -> bool: ...
    @classmethod
    def Validate(cls) -> bool: ...
    @classmethod
    def WarpPointer(cls, x, y) -> Any: ...
    @classmethod
    def WindowToClientSize(cls, size) -> Size: ...
    @property
    def BestSize(self): ...
    @property
    def BestVirtualSize(self): ...
    @property
    def Border(self): ...
    @property
    def CharHeight(self): ...
    @property
    def CharWidth(self): ...
    @property
    def Children(self): ...
    @property
    def ClientAreaOrigin(self): ...
    @property
    def DefaultAttributes(self): ...
    @property
    def EffectiveMinSize(self): ...
    @property
    def GrandParent(self): ...
    @property
    def Handle(self): ...
    @property
    def MaxHeight(self): ...
    @property
    def MaxWidth(self): ...
    @property
    def MinHeight(self): ...
    @property
    def MinWidth(self): ...
    @property
    def Parent(self): ...
    @property
    def ScreenPosition(self): ...
    @property
    def ScreenRect(self): ...
    @property
    def TopLevel(self): ...
    @property
    def TopLevelParent(self): ...
    @property
    def UpdateClientRect(self): ...
    @property
    def UpdateRegion(self): ...

class WindowBase(EvtHandler):
    @classmethod
    def AddChild(cls, child) -> Any: ...
    @classmethod
    def RemoveChild(cls, child) -> Any: ...

class WindowCreateEvent(CommandEvent):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @property
    def Window(self): ...

class WindowDC(DC): ...

class WindowDestroyEvent(CommandEvent):
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetWindow(cls) -> Window: ...
    @property
    def Window(self): ...

class WindowDisabler(sip.wrapper):
    __enter__: ClassVar[Callable] = ...
    __exit__: ClassVar[Callable] = ...

class WindowIDRef(sip.wrapper):
    __hash__: ClassVar[Callable] = ...
    @classmethod
    def GetId(cls) -> int: ...
    @classmethod
    def GetValue(cls) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def Id(self): ...
    @property
    def Value(self): ...

class WindowList(sip.wrapper):
    def index(self, obj: Window | None) -> int: ...
    def __contains__(self, other) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class WindowList_iterator(sip.wrapper):
    def __next__(self): ...

class WindowModalDialogEvent(CommandEvent):
    @classmethod
    def Clone(cls) -> Event: ...
    @classmethod
    def GetDialog(cls) -> Dialog: ...
    @classmethod
    def GetReturnCode(cls) -> int: ...
    @property
    def Dialog(self): ...
    @property
    def ReturnCode(self): ...

class WindowVariant(int): ...

class WithImages(sip.wrapper):
    NO_IMAGE: ClassVar[int] = ...
    ImageList: Incomplete
    @classmethod
    def AssignImageList(cls, imageList) -> Any: ...
    @classmethod
    def GetImageCount(cls) -> int: ...
    @classmethod
    def GetImageList(cls) -> ImageList: ...
    @classmethod
    def GetUpdatedImageListFor(cls, win) -> ImageList: ...
    @classmethod
    def HasImages(cls) -> bool: ...
    @classmethod
    def SetImageList(cls, imageList) -> Any: ...
    @classmethod
    def SetImages(cls, images) -> Any: ...
    @property
    def ImageCount(self): ...

class WrapSizer(BoxSizer):
    @classmethod
    def CalcMin(cls) -> Size: ...
    @classmethod
    def InformFirstDirection(cls, direction, size, availableOtherDir) -> bool: ...
    @classmethod
    def IsSpaceItem(cls, item) -> bool: ...
    @classmethod
    def RepositionChildren(cls, minSize) -> Any: ...

class XPMHandler(ImageHandler):
    @classmethod
    def DoCanRead(cls, stream) -> bool: ...
    @classmethod
    def DoGetImageCount(cls, *args, **kwargs): ...
    @classmethod
    def LoadFile(cls, image, stream, verbose=..., index=...) -> bool: ...
    @classmethod
    def SaveFile(cls, image, stream, verbose=...) -> bool: ...

class ZoomGestureEvent(GestureEvent):
    ZoomFactor: Incomplete
    def Clone(self) -> Event | None: ...
    @classmethod
    def GetZoomFactor(cls) -> double: ...
    @classmethod
    def SetZoomFactor(cls, zoomFactor) -> Any: ...

class _ScrolledWindowBase(Panel):
    TargetRect: Incomplete
    TargetWindow: Incomplete
    def AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase | None) -> Any: ...
    @classmethod
    def AdjustScrollbars(cls) -> Any: ...
    @classmethod
    def CalcScrolledPosition(cls, pt) -> Point: ...
    @classmethod
    def CalcUnscrolledPosition(cls, pt) -> Point: ...
    @classmethod
    def Create(cls, parent, id=..., pos=..., size=..., style=..., name=...) -> bool: ...
    def Destroy(self) -> bool: ...
    @classmethod
    def DisableKeyboardScrolling(cls) -> Any: ...
    def DoEnable(self, enable: bool) -> Any: ...
    def DoFreeze(self) -> Any: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    @classmethod
    def DoGetClientSize(cls, *args, **kwargs): ...
    @classmethod
    def DoGetPosition(cls, *args, **kwargs): ...
    @classmethod
    def DoGetSize(cls, *args, **kwargs): ...
    def DoMoveWindow(self, x: int, y: int, width: int, height: int) -> Any: ...
    @classmethod
    def DoPrepareDC(cls, dc) -> Any: ...
    def DoSetClientSize(self, width: int, height: int) -> Any: ...
    def DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int) -> Any: ...
    def DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int) -> Any: ...
    def DoSetWindowVariant(self, variant: WindowVariant) -> Any: ...
    def DoThaw(self) -> Any: ...
    @classmethod
    def EnableScrolling(cls, xScrolling, yScrolling) -> Any: ...
    def EnableVisibleFocus(self, enabled: bool) -> Any: ...
    @classmethod
    def GetClassDefaultAttributes(cls, variant=...) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetDefaultBorder(self) -> Border: ...
    def GetDefaultBorderForControl(self) -> Border: ...
    def GetMainWindowOfCompositeControl(self) -> Window | None: ...
    @classmethod
    def GetScaleX(cls) -> double: ...
    @classmethod
    def GetScaleY(cls) -> double: ...
    @classmethod
    def GetScrollLines(cls, orient) -> int: ...
    @classmethod
    def GetScrollPageSize(cls, orient) -> int: ...
    @classmethod
    def GetScrollPixelsPerUnit(cls, *args, **kwargs): ...
    @classmethod
    def GetSizeAvailableForScrollTarget(cls, size) -> Size: ...
    @classmethod
    def GetTargetRect(cls) -> Rect: ...
    @classmethod
    def GetTargetWindow(cls) -> Window: ...
    def GetValidator(self) -> Validator | None: ...
    @classmethod
    def GetViewStart(cls, *args, **kwargs): ...
    def HasTransparentBackground(self) -> bool: ...
    def InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool: ...
    def InheritAttributes(self) -> Any: ...
    def InitDialog(self) -> Any: ...
    @classmethod
    def IsAutoScrolling(cls) -> bool: ...
    @classmethod
    def IsRetained(cls) -> bool: ...
    @classmethod
    def OnDraw(cls, dc) -> Any: ...
    def OnInternalIdle(self) -> Any: ...
    @classmethod
    def PrepareDC(cls, dc) -> Any: ...
    def ProcessEvent(self, event: Event) -> bool: ...
    def RemoveChild(self, child: WindowBase | None) -> Any: ...
    @overload
    @classmethod
    def Scroll(cls, x, y) -> Any: ...
    @overload
    @classmethod
    def Scroll(cls, pt) -> Any: ...
    @classmethod
    def SendAutoScrollEvents(cls, event) -> bool: ...
    @classmethod
    def SendDestroyEvent(cls, *args, **kwargs): ...
    def SetCanFocus(self, canFocus: bool) -> Any: ...
    @classmethod
    def SetScale(cls, xs, ys) -> Any: ...
    @classmethod
    def SetScrollPageSize(cls, orient, pageSize) -> Any: ...
    @classmethod
    def SetScrollRate(cls, xstep, ystep) -> Any: ...
    @classmethod
    def SetScrollbars(cls, pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=..., yPos=..., noRefresh=...) -> Any: ...
    @classmethod
    def SetTargetRect(cls, rect) -> Any: ...
    @classmethod
    def SetTargetWindow(cls, window) -> Any: ...
    def SetValidator(self, validator: Validator) -> Any: ...
    def ShouldInheritColours(self) -> bool: ...
    @classmethod
    def ShouldScrollToChildOnFocus(cls, child) -> bool: ...
    @classmethod
    def ShowScrollbars(cls, horz, vert) -> Any: ...
    @classmethod
    def StopAutoScrolling(cls) -> Any: ...
    def TransferDataFromWindow(self) -> bool: ...
    def TransferDataToWindow(self) -> bool: ...
    def TryAfter(self, event: Event) -> bool: ...
    def TryBefore(self, event: Event) -> bool: ...
    def Validate(self) -> bool: ...
    @property
    def ScaleX(self): ...
    @property
    def ScaleY(self): ...

class wxAssertionError(AssertionError): ...

def Abort() -> Any: ...
def AutoBufferedPaintDCFactory(window) -> DC: ...
def BeginBusyCursor(cursor=...) -> Any: ...
def Bell() -> Any: ...
def CheckOsVersion(majorVsn, minorVsn=..., microVsn=...) -> bool: ...
def ClientDisplayRect(*args, **kwargs): ...
def ColourDisplay() -> bool: ...
@overload
def DecToHex(dec, buf) -> Any: ...
@overload
def DecToHex(dec) -> String: ...
@overload
def DecToHex(dec, ch1, ch2) -> Any: ...
def DirSelector(message=..., default_path=..., style=..., pos=..., parent=...) -> String: ...
def DisableAsserts() -> Any: ...
def DisplayDepth() -> int: ...
def DisplaySize(*args, **kwargs): ...
def DisplaySizeMM(*args, **kwargs): ...
def DumpWindow(window) -> String: ...
def EnableTopLevelWindows(enable=...) -> Any: ...
def EndBusyCursor() -> Any: ...
def Execute(command, flags=..., callback=..., env=...) -> long: ...
def Exit() -> Any: ...
def FFont(pointSize, family, flags=..., faceName=..., encoding=...) -> Any: ...
def FileSelector(message, default_path=..., default_filename=..., default_extension=..., wildcard=..., flags=..., parent=..., x=..., y=...) -> String: ...
def FileSelectorEx(message=..., default_path=..., default_filename=..., indexDefaultExtension=..., wildcard=..., flags=..., parent=..., x=..., y=...) -> String: ...
def FindMenuItemId(frame, menuString, itemString) -> int: ...
def FindWindowAtPoint(pt) -> Window: ...
def FindWindowAtPointer(*args, **kwargs): ...
@overload
def FindWindowById(id, parent=...) -> Window: ...
@overload
def FindWindowById(id, parent=...) -> Window: ...
@overload
def FindWindowByLabel(label, parent=...) -> Window: ...
@overload
def FindWindowByLabel(label, parent=...) -> Window: ...
@overload
def FindWindowByLabel(label, parent=...) -> Window: ...
@overload
def FindWindowByName(name, parent=...) -> Window: ...
@overload
def FindWindowByName(name, parent=...) -> Window: ...
@overload
def FindWindowByName(name, parent=...) -> Window: ...
def GetActiveWindow() -> Window: ...
def GetApp() -> AppConsole: ...
def GetBatteryState() -> BatteryState: ...
def GetClientDisplayRect() -> Rect: ...
def GetColourFromUser(parent, colInit, caption=..., data=...) -> Colour: ...
def GetCpuArchitectureName() -> String: ...
def GetDisplayPPI() -> Size: ...
def GetDisplaySize() -> Size: ...
def GetDisplaySizeMM() -> Size: ...
def GetEmailAddress() -> String: ...
def GetFontFromUser(parent, fontInit, caption=...) -> Font: ...
def GetFullHostName() -> String: ...
def GetHomeDir() -> String: ...
def GetHostName() -> String: ...
def GetKeyState(key) -> bool: ...
def GetLibraryVersionInfo() -> VersionInfo: ...
def GetLocale() -> Locale: ...
def GetMousePosition() -> Point: ...
def GetMouseState() -> MouseState: ...
def GetNativeCpuArchitectureName() -> String: ...
def GetNumberFromUser(message, prompt, caption, value, min=..., max=..., parent=..., pos=...) -> long: ...
def GetOsDescription() -> String: ...
def GetOsVersion(*args, **kwargs): ...
def GetPasswordFromUser(message, caption=..., default_value=..., parent=..., x=..., y=..., centre=...) -> String: ...
def GetPowerType() -> PowerType: ...
def GetProcessId() -> unsignedlong: ...
@overload
def GetSingleChoice(message, caption, aChoices, parent=..., x=..., y=..., centre=..., width=..., height=..., initialSelection=...) -> String: ...
@overload
def GetSingleChoice(message, caption, choices, initialSelection, parent=...) -> String: ...
def GetStockLabel(id, flags=...) -> String: ...
def GetTextFromUser(message, caption=..., default_value=..., parent=..., x=..., y=..., centre=...) -> String: ...
def GetTopLevelParent(window) -> Window: ...
def GetTopLevelWindows() -> WindowList: ...
@overload
def GetTranslation(string, domain=..., context=...) -> String: ...
@overload
def GetTranslation(string, plural, n, domain=..., context=...) -> String: ...
def GetUserHome(user=...) -> String: ...
def GetUserId() -> String: ...
def GetUserName() -> String: ...
def HandleFatalExceptions(doIt=...) -> bool: ...
@overload
def HexToDec(buf) -> int: ...
@overload
def HexToDec(buf) -> int: ...
def InfoMessageBox(parent) -> Any: ...
def InitAllImageHandlers() -> Any: ...
def IntersectRect(r1, r2) -> PyObject: ...
def IsBusy() -> bool: ...
def IsDragResultOk(res) -> bool: ...
def IsMainThread() -> bool: ...
def IsPlatform64Bit() -> bool: ...
def IsPlatformLittleEndian() -> bool: ...
def IsRunningUnderWine() -> bool: ...
def Kill(pid, sig=..., rc=..., flags=...) -> int: ...
def LaunchDefaultApplication(document, flags=...) -> bool: ...
def LaunchDefaultBrowser(url, flags=...) -> bool: ...
def LoadFileSelector(what, extension, default_name=..., parent=...) -> String: ...
def LogDebug(message) -> Any: ...
def LogError(message) -> Any: ...
def LogFatalError(message) -> Any: ...
def LogGeneric(level, message) -> Any: ...
def LogInfo(formatString) -> Any: ...
def LogMessage(message) -> Any: ...
@overload
def LogStatus(frame, message) -> Any: ...
@overload
def LogStatus(message) -> Any: ...
def LogSysError(message) -> Any: ...
def LogVerbose(message) -> Any: ...
def LogWarning(message) -> Any: ...
def MacThemeColour(themeBrushID) -> Colour: ...
def MessageBox(message, caption=..., style=..., parent=..., x=..., y=...) -> int: ...
def MicroSleep(microseconds) -> Any: ...
def MilliSleep(milliseconds) -> Any: ...
def NewEventType() -> EventType: ...
def NewId() -> WindowID: ...
def Now() -> String: ...
def PostEvent(dest, event) -> Any: ...
def QueueEvent(dest, event) -> Any: ...
def RegisterId(id) -> Any: ...
def SafeShowMessage(title, text) -> bool: ...
def SafeYield(win=..., onlyIfNeeded=...) -> bool: ...
def SaveFileSelector(what, extension, default_name=..., parent=...) -> String: ...
def SecureZeroMemory(p, n) -> Any: ...
def SetCursor(cursor) -> Any: ...
@overload
def Setlocale(category: int, locale: bytes | None) -> bytes | None: ...
@overload
def Setlocale(category: int, locale: Any) -> bytes | None: ...
def Shell(command=...) -> bool: ...
def Shutdown(flags=...) -> bool: ...
def Sleep(secs) -> Any: ...
def StripMenuCodes(str, flags=...) -> String: ...
def SysErrorCode() -> unsignedlong: ...
def SysErrorMsg(errCode=...) -> String: ...
def SysErrorMsgStr(errCode=...) -> String: ...
def Trap() -> Any: ...
def WakeUpIdle() -> Any: ...
def Yield() -> bool: ...
def testArrayDoubleTypemap(arr: Any) -> Any: ...
def testArrayIntTypemap(arr: Any) -> Any: ...
def testArrayStringTypemap(arr: Any) -> Any: ...
def testColourTypeMap(c: Colour | None) -> Colour | None: ...
def testCppClone(evt: Event) -> Event | None: ...
def testIntPtrTypemap(value: Any) -> Any: ...
def testSizetTypemap(value: int) -> int: ...
def testStringTypemap(str: Any) -> Any: ...
def testUIntPtrTypemap(value: Any) -> Any: ...
def testVariantTypeName(var: Any | None) -> Any: ...
def testVariantTypemap(var: Any | None) -> Any | None: ...
