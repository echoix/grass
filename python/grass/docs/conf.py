# wxGUI documentation build configuration file, created by
# sphinx-quickstart on Tue Jun  3 09:20:51 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
from datetime import date
import string
from shutil import copy

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
if not os.getenv("GISBASE"):
    sys.exit("GISBASE not defined")
sys.path.insert(
    0, os.path.abspath(os.path.join(os.environ["GISBASE"], "etc", "python", "grass"))
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "ctypes")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "exceptions")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "gunittest")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "imaging")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "pydispatch")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "pygrass")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "script")
    ),
)
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.environ["GISBASE"], "etc", "python", "grass", "temporal")
    ),
)

from grass.script import core  # noqa: E402

footer_tmpl = string.Template(
    r"""
{% block footer %}<hr class="header">
<p><a href="../index.html">Help Index</a>
 | <a href="../topics.html">Topics Index</a>
 | <a href="../keywords.html">Keywords Index</a>
 | <a href="../full_index.html">Full Index</a></p>
<p>&copy; 2003-${year} <a href="https://grass.osgeo.org">
GRASS Development Team</a>, GRASS ${grass_version} Documentation</p>
{% endblock %}
"""
)

grass_version = core.version()["version"]
# today = date.today()

copy("_templates/layout.html.template", "_templates/layout.html")

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "5.1"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    # "sphinx_immaterial",
    # "sphinx_toolbox",
    # "sphinx_toolbox.more_autodoc",
    # "sphinx_toolbox.more_autosummary",
    # "sphinx_toolbox.documentation_summary",
    # "sphinx_toolbox.tweaks.param_dash",
    # "sphinx.ext.autodoc",
    "sphinx.ext.doctest",
    "sphinx.ext.duration",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx_sitemap",
    "sphinx_immaterial",
    # "sphinx_toolbox",
    # "sphinx_toolbox.more_autodoc.typevars",
    # "sphinx_toolbox.more_autodoc.typehints",
    # "sphinx_toolbox.more_autodoc.autonamedtuple",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "GRASS Python Library"
copyright = "2025, GRASS Development Team"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = grass_version
# The full version, including alpha/beta/rc tags.
# release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = "en"

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_build"]

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_immaterial"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    "icon": {
        "repo": "fontawesome/brands/github",
        "edit": "material/file-edit-outline",
    },
    # "nav_title": "GRASS Python Docs",
    "repo_url": "https://github.com/OSGeo/grass/",
    "repo_name": "GRASS",
    # "repo_type": "github",
    # "logo": "grass_logo.svg",
    # # Visible levels of the global TOC; -1 means unlimited
    # "globaltoc_depth": 1,
    # If False, expand all TOC entries
    "globaltoc_collapse": True,
    # If True, show hidden TOC entries
    "globaltoc_includehidden": False,
    # "touch_icon": "grass_logo.png",
    # "color_primary": "grass-green",
    # "color_accent": "grass-green",
    "version_dropdown": False,
    # "localtoc_label_text": "Table of contents",
    "nav_links": [
        {
            "href": "script_intro",
            "title": "Scripting API",
            "internal": True,
        },
        {
            "href": "pygrass_index",
            "title": "PyGRASS API",
            "internal": True,
        },
        {
            "href": "temporal_framework",
            "title": "Temporal Framework",
            "internal": True,
        },
        {
            "href": "grass.jupyter",
            "title": "Jupyter API",
            "internal": True,
        },
        {
            "href": "gunittest_testing",
            "title": "Testing",
            "internal": True,
        },
        {
            "href": "exceptions",
            "title": "Exceptions",
            "internal": True,
        },
    ],
    "features": [
        "navigation.expand",
        "navigation.tabs",
        # "navigation.tabs.sticky",
        # "toc.integrate",
        "navigation.sections",
        # "navigation.instant",
        # "header.autohide",
        "navigation.top",
        "navigation.footer",
        "navigation.tracking",
        # "search.highlight",
        "search.share",
        "search.suggest",
        "toc.follow",
        "toc.sticky",
        "content.tabs.link",
        "content.code.copy",
        "content.action.edit",
        "content.action.view",
        "content.tooltips",
        "announce.dismiss",
    ],
    # The "social" section is a 1:1 equivalent to the mkdocs.yml config
    # BEGIN: social icons
    "social": [
        {
            "icon": "simple/opencollective",
            "link": "https://opencollective.com/grass",
            "name": "Support us on OpenCollective",
        },
        {
            "icon": "fontawesome/brands/gitter",
            "link": "https://gitter.im/grassgis/community",
            "name": "Join our Gitter chatroom",
        },
        {
            "icon": "fontawesome/brands/mastodon",
            "link": "https://fosstodon.org/@grassgis/",
            "name": "GRASS on Mastodon",
        },
        {
            "icon": "fontawesome/brands/discourse",
            "link": "https://discourse.osgeo.org/c/grass/62",
            "name": "OSGeo Discourse forum for GRASS",
        },
        {
            "icon": "fontawesome/brands/linkedin",
            "link": "https://linkedin.com/company/grass-gis",
            "name": "GRASS on LinkedIn",
        },
        {
            "icon": "fontawesome/brands/x-twitter",
            "link": "https://x.com/GRASSGIS",
            "name": "GRASS on X",
        },
        {
            "icon": "fontawesome/brands/youtube",
            "link": "https://www.youtube.com/@grass-gis",
            "name": "GRASS YouTube Channel",
        },
    ],
    # END: social icons
}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "GRASS Python Library Documentation"

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = "Get Started"

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_static/grass_logo.svg"
logo_url = "_static/grass_logo.svg"
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/favicon.ico"

# The base URL which points to the root of the HTML documentation. It is used
# to indicate the location of document using the Canonical Link Relation.
html_baseurl = "https://grass.osgeo.org/grass-stable/manuals/libpython/"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    "**": [
        "logo-text.html",
        "globaltoc.html",
        "localtoc.html",
        "relations.html",
        "searchbox.html",
    ]
}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = "PythonLibdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    "papersize": "a4paper",
    # The font size ('10pt', '11pt' or '12pt').
    "pointsize": "10pt",
    # Additional stuff for the LaTeX preamble.
    # "preamble": "",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        "index",
        "PythonLib.tex",
        "Python Library Documentation",
        "GRASS Development Team",
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        "index",
        "PythonLib",
        "Python Library Documentation",
        ["GRASS Development Team"],
        1,
    )
]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        "PythonLib",
        project,
        "GRASS Development Team",
        "PythonLib",
        "Documentation for Python API of GRASS GIS",
        "Miscellaneous",
    ),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = "GRASS Development Team"
epub_publisher = epub_author
epub_copyright = copyright

# The basename for the epub file. It defaults to the project name.
# epub_basename = u'wxGUI'

# The HTML theme for the epub output. Since the default themes are not optimized
# for small screen space, using the same theme for HTML and epub output is
# usually not wise. This defaults to 'epub', a theme designed to save visual
# space.
# epub_theme = 'epub'

# The language of the text. It defaults to the language option
# or en if the language is not set.
# epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
# epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
# epub_identifier = ''

# A unique identification for the text.
# epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
# epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
# epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
# epub_pre_files = []

# HTML files that should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
# epub_post_files = []

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]

# The depth of the table of contents in toc.ncx.
# epub_tocdepth = 3

# Allow duplicate toc entries.
# epub_tocdup = True

# Choose between 'default' and 'includehidden'.
# epub_tocscope = 'default'

# Fix unsupported image types using the PIL.
# epub_fix_images = False

# Scale large images.
# epub_max_image_width = 0

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# epub_show_urls = 'inline'

# If false, no index is generated.
# epub_use_index = True

# Where class documentation comes from (class or __init__ docstring).
autoclass_content = "both"
# Render todo boxes instead of hiding them
todo_include_todos = True

# autodoc_member_order = "groupwise"
autodoc_member_order = "bysource"

# autodoc_typehints = "both"
autodoc_class_signature = "separated"

# autodoc_typehints_description_target = "documented_params"

# python_type_aliases = {
#     "AnyStr": "typing.AnyStr",
#     "TypeVar": "typing.TypeVar",
# }
# autodoc_typehints_format = "fully-qualified"
# sphinx-sitemap extension config
# https://sphinx-sitemap.readthedocs.io/en/latest/advanced-configuration.html
sitemap_filename = "sitemap.xml"
html_baseurl = "https://grass.osgeo.org/"
sitemap_url_scheme = "grass{version}manuals/libpython/{link}"

sitemap_excludes = [
    "search.html",
    "genindex.html",
]

# Intersphinx config
intersphinx_mapping = {
    "numpy": ("https://numpy.org/doc/stable/", None),
    "python": ("https://docs.python.org/3", None),
}


# # Configuration file for the Sphinx documentation builder.
# #
# # This file only contains a selection of the most common options. For a full
# # list see the documentation:
# # http://www.sphinx-doc.org/en/master/config

# # -- Path setup --------------------------------------------------------------

# # add docs path to python sys.path to allow autodoc-ing a test_py_module
# import os
# import re
# import string
# import sys
# import typing
# from pathlib import Path

# from sphinx.util.docutils import SphinxRole

# # sys.path.insert(0, os.path.abspath("."))

# import docutils
# import sphinx
# import sphinx.domains.python
# import sphinx.environment
# import sphinx.util.logging
# import sphinx.util.typing

# from sphinx_immaterial import DEFAULT_THEME_OPTIONS
# from sphinx_immaterial.apidoc import (
#     object_description_options as _object_description_options,
# )
# from sphinx_immaterial.apidoc.python import (
#     apigen as python_apigen,
# )
# from sphinx_immaterial.apidoc.python import (
#     type_annotation_transforms,
# )

# logger = sphinx.util.logging.getLogger(__name__)

# # -- Project information -----------------------------------------------------

# # project = "Sphinx-Immaterial"
# # copyright = "2021 The Sphinx-Immaterial Authors"
# author = "Jeremy Maitin-Shepard"

# # The full version, including alpha/beta/rc tags
# release = "8.5.0-dev"

# # -- General configuration ---------------------------------------------------

# # Add any Sphinx extension module names here, as strings. They can be
# # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# # ones.
# extensions = [
#     "sphinx.ext.autodoc",
#     "sphinx.ext.doctest",
#     "sphinx.ext.extlinks",
#     "sphinx.ext.intersphinx",
#     "sphinx.ext.napoleon",
#     "sphinx.ext.todo",
#     "sphinx.ext.mathjax",
#     "sphinx.ext.viewcode",
#     "sphinx_immaterial.theme_result",
#     # "sphinx_immaterial.kbd_keys",
#     # "sphinx_immaterial.apidoc.format_signatures",
#     # "sphinx_immaterial.apidoc.cpp.cppreference",
#     # "sphinx_immaterial.apidoc.json.domain",
#     "sphinx_immaterial.apidoc.python.apigen",
#     # "sphinx_immaterial.apidoc.cpp.apigen",
#     # "sphinx_immaterial.graphviz",
#     "sphinx_jinja",
#     # "myst_parser",
# ]

# intersphinx_mapping = {
#     "python": ("https://docs.python.org/3", None),
#     "sphinx_docs": ("https://www.sphinx-doc.org/en/master", None),
#     # "MyST parser docs": ("https://myst-parser.readthedocs.io/en/latest", None),
# }

# # The reST default role (used for this markup: `text`) to use for all
# # documents.
# default_role = "any"

# # Add any paths that contain templates here, relative to this directory.
# templates_path = ["_templates"]

# # List of patterns, relative to source directory, that match files and
# # directories to ignore when looking for source files.
# # This pattern also affects html_static_path and html_extra_path.
# exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# # # -- sphinx_immaterial.keys extension options
# # #
# # # optional key_map for example purposes
# # keys_map = {"my-special-key": "Awesome Key", "git": ""}

# # -- Options for HTML output -------------------------------------------------

# # Add any paths that contain custom static files (such as style sheets) here,
# # relative to this directory. They are copied after the builtin static files,
# # so a file named 'default.css' will overwrite the builtin 'default.css'.
# html_static_path = ["_static"]
# html_css_files = ["extra_css.css", "custom_font_example.css"]
# html_last_updated_fmt = ""
# # html_title = "Sphinx-Immaterial"
# # html_favicon = "_static/favicon.ico"  # colored version of material/bookshelf.svg
# # html_logo = "_static/images/Ybin.gif"  # from https://gifer.com/en/Ybin

# # -- HTML theme specific settings ------------------------------------------------

# extensions.append("sphinx_immaterial")
# html_theme = "sphinx_immaterial"

# # material theme options (see theme.conf for more information)
# html_theme_options = {
#     "icon": {
#         "repo": "fontawesome/brands/github",
#         "edit": "material/file-edit-outline",
#     },
#     "site_url": "https://jbms.github.io/sphinx-immaterial/",
#     "repo_url": "https://github.com/OSGeo/grass/",
#     "repo_name": "GRASS",
#     "edit_uri": "blob/main/docs",
#     "globaltoc_collapse": True,
#     "features": [
#         "navigation.expand",
#         # "navigation.tabs",
#         # "navigation.tabs.sticky",
#         # "toc.integrate",
#         "navigation.sections",
#         # "navigation.instant",
#         # "header.autohide",
#         "navigation.top",
#         "navigation.footer",
#         # "navigation.tracking",
#         # "search.highlight",
#         "search.share",
#         "search.suggest",
#         "toc.follow",
#         "toc.sticky",
#         "content.tabs.link",
#         "content.code.copy",
#         "content.action.edit",
#         "content.action.view",
#         "content.tooltips",
#         "announce.dismiss",
#     ],
#     "palette": [
#         {
#             "media": "(prefers-color-scheme)",
#             "toggle": {
#                 "icon": "material/brightness-auto",
#                 "name": "Switch to light mode",
#             },
#         },
#         {
#             "media": "(prefers-color-scheme: light)",
#             "scheme": "default",
#             "primary": "light-green",
#             "accent": "light-blue",
#             "toggle": {
#                 "icon": "material/lightbulb",
#                 "name": "Switch to dark mode",
#             },
#         },
#         {
#             "media": "(prefers-color-scheme: dark)",
#             "scheme": "slate",
#             "primary": "deep-orange",
#             "accent": "lime",
#             "toggle": {
#                 "icon": "material/lightbulb-outline",
#                 "name": "Switch to system preference",
#             },
#         },
#     ],
#     # BEGIN: version_dropdown
#     "version_dropdown": False,
#     # "version_info": [
#     #     {
#     #         "version": "https://sphinx-immaterial.rtfd.io",
#     #         "title": "ReadTheDocs",
#     #         "aliases": [],
#     #     },
#     #     {
#     #         "version": "https://jbms.github.io/sphinx-immaterial",
#     #         "title": "Github Pages",
#     #         "aliases": [],
#     #     },
#     # ],
#     # END: version_dropdown
#     "toc_title_is_page_title": True,
#     # BEGIN: social icons
#     "social": [
#         {
#             "icon": "fontawesome/brands/github",
#             "link": "https://github.com/jbms/sphinx-immaterial",
#             "name": "Source on github.com",
#         },
#         {
#             "icon": "fontawesome/brands/python",
#             "link": "https://pypi.org/project/sphinx-immaterial/",
#         },
#     ],
#     # END: social icons
# }
# # end html_theme_options

# # ---- Other documentation options -------------------------

# todo_include_todos = True

# extlinks = {
#     "duref": (
#         "http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#%s",
#         "rST %s",
#     ),
#     "durole": (
#         "http://docutils.sourceforge.net/docs/ref/rst/roles.html#%s",
#         "rST role %s",
#     ),
#     "dudir": (
#         "http://docutils.sourceforge.net/docs/ref/rst/directives.html#%s",
#         "rST directive %s",
#     ),
#     "graphvizattr": (
#         "https://graphviz.org/docs/attrs/%s/",
#         "%s attribute",
#     ),
#     "dutree": (
#         "https://docutils.sourceforge.io/docs/ref/doctree.html#%s",
#         "%s",
#     ),
# }

# object_description_options = []

# # BEGIN: sphinx_immaterial.apidoc.format_signatures extension options
# # object_description_options.append(
# #     ("cpp:.*", dict(clang_format_style={"BasedOnStyle": "LLVM"}))
# # )
# object_description_options.append(("py:.*", dict(black_format_style={})))
# # END: sphinx_immaterial.apidoc.format_signatures extension options

# # object_description_options.append(("py:.*", dict(wrap_signatures_with_css=True)))
# # object_description_options.append(("py:.*", dict(wrap_signatures_with_css=True)))

# # # BEGIN: sphinx_immaterial.apidoc.cpp.external_cpp_references extension options
# # external_cpp_references = {
# #     "nlohmann::json": {
# #         "url": "https://json.nlohmann.me/api/json/",
# #         "object_type": "type alias",
# #         "desc": "C++ type alias",
# #     },
# #     "nlohmann::basic_json": {
# #         "url": "https://json.nlohmann.me/api/basic_json/",
# #         "object_type": "class",
# #         "desc": "C++ class",
# #     },
# # }
# # # END: sphinx_immaterial.apidoc.cpp.external_cpp_references extension options

# # # BEGIN: cpp_strip_namespaces_from_signatures option
# # cpp_strip_namespaces_from_signatures = [
# #     "my_ns1",
# #     "my_ns2",
# #     "my_ns2::my_nested_ns",
# # ]
# # # END: cpp_strip_namespaces_from_signatures option

# rst_prolog = """
# .. role:: python(code)
#    :language: python
#    :class: highlight

# .. role:: cpp(code)
#    :language: cpp
#    :class: highlight

# .. role:: json(code)
#    :language: json
#    :class: highlight

# .. role:: rst(code)
#    :language: rst
#    :class: highlight

# .. role:: css(code)
#    :language: css
#    :class: highlight

# .. role:: dot(code)
#    :language: dot
#    :class: highlight

# .. role:: html(code)
#    :language: html
#    :class: highlight
# """


# object_description_options.append(
#     (
#         "std:confval",
#         dict(
#             toc_icon_class="data", toc_icon_text="C", generate_synopses="first_sentence"
#         ),
#     )
# )

# object_description_options.append(
#     (
#         "std:objconf",
#         dict(
#             toc_icon_class="data",
#             toc_icon_text="O",
#             generate_synopses=None,
#         ),
#     )
# )

# object_description_options.append(
#     (
#         "std:themeconf",
#         dict(
#             toc_icon_class="data", toc_icon_text="T", generate_synopses="first_sentence"
#         ),
#     )
# )

# object_description_options.append(
#     (
#         "std:filemeta",
#         dict(
#             toc_icon_class="data", toc_icon_text="M", generate_synopses="first_sentence"
#         ),
#     )
# )

# python_type_aliases = {}

# # BEGIN: python_type_aliases example
# python_type_aliases = {
#     "MyUnqualifiedType": "alias_ex.MyUnqualifiedType",
#     "example_mod._internal.": "example_mod.",
# }
# # END: python_type_aliases example

# # BEGIN: python_module_names_to_strip_from_xrefs example
# python_module_names_to_strip_from_xrefs = ["tensorstore_demo"]
# # END: python_module_names_to_strip_from_xrefs example

# # BEGIN CUSTOM ADMONITIONS
# sphinx_immaterial_custom_admonitions = [
#     {
#         "name": "legacy",
#         "color": (236, 64, 11),
#         "icon": "fontawesome/solid/recycle",
#     },
# ]
# # END CUSTOM ADMONITIONS
# sphinx_immaterial_icon_path = html_static_path

# # sphinx_immaterial_bundle_source_maps = True
# sphinx_immaterial_bundle_source_maps = False

# # CSS_PALETTE_BUNDLE = (
# #     Path(__file__).parent.parent / "sphinx_immaterial/bundles/stylesheets/palette.css"
# # )


# # def get_colors(color_t: str):
# #     unique_colors = []
# #     for m in re.finditer(
# #         r"\}\s*\[data-md-color-"
# #         + color_t
# #         + r"=([a-z\-]+)\]\s*\{\s*[^}]*?-fg-color:[^};]*?;\s*[^}]*?-bg-color:[^};]*?;",
# #         CSS_PALETTE_BUNDLE.read_text(encoding="utf-8"),
# #     ):
# #         unique_colors.append(m.group(1))
# #     return unique_colors


# # jinja contexts
# example_python_apigen_modules = {
#     "my_module": "my_api/",
#     "my_other_module": "other_api/my_other_module.",
# }
# example_python_apigen_objects = [
#     ("my_module.foo", ""),
#     ("my_module.Foo", ""),
#     ("my_module.Foo.method", ""),
#     ("my_module.Foo.__init__", "json"),
#     ("my_module.Foo.__init__", "values"),
#     ("my_module.Bar", ""),
#     ("my_other_module.Baz", ""),
# ]
# jinja_contexts = {
#     "python_apigen_path_examples": {
#         "example_python_apigen_objects": [
#             (
#                 full_name,
#                 overload_id,
#                 python_apigen._get_docname(
#                     example_python_apigen_modules, full_name, overload_id, False
#                 ),
#                 python_apigen._get_docname(
#                     example_python_apigen_modules, full_name, overload_id, True
#                 ),
#             )
#             for full_name, overload_id in example_python_apigen_objects
#         ],
#     },
#     "typing_names": {"TYPING_NAMES": type_annotation_transforms.TYPING_NAMES},
#     "pep685_aliases": {"aliases": type_annotation_transforms.PEP585_ALIASES},
#     # "colors": {
#     #     "supported_primary": get_colors("primary"),
#     #     "supported_accent": get_colors("accent"),
#     # },
#     "default_theme_options": {"DEFAULT_THEME_OPTIONS": DEFAULT_THEME_OPTIONS},
# }


# # json_schemas = [
# #     "apidoc/json/index_transform_schema.yml",
# #     "apidoc/json/inheritance_schema.yml",
# # ]

# # json_schema_rst_prolog = """
# # .. default-role:: json:schema

# # .. default-literal-role:: json

# # .. highlight:: json
# # """

# python_apigen_modules = {
#     # "tensorstore_demo": "python_apigen_generated/",
#     "grass.script.core": "python_apigen_generated/",
#     # "type_param_demo": "python_apigen_generated/",
# }

# python_apigen_default_groups = [
#     ("class:.*", "Classes"),
#     (r".*:.*\.__(init|new)__", "Constructors"),
#     (r".*:.*\.__eq__", "Comparison operators"),
#     (r".*:.*\.__(str|repr)__", "String representation"),
# ]

# python_apigen_rst_prolog = """
# .. default-role:: py:obj

# .. default-literal-role:: python

# .. highlight:: python
# """

# # cpp_demo_include_dir = os.path.join(os.path.dirname(__file__))

# # cpp_apigen_configs = [
# #     dict(
# #         document_prefix="cpp_apigen_generated/",
# #         api_parser_config=dict(
# #             input_content="""
# # #include "cpp_apigen_demo/index_interval.h"
# # #include "cpp_apigen_demo/array.h"
# # """,
# #             compiler_flags=["-std=c++17", "-I", cpp_demo_include_dir, "-x", "c++"],
# #             include_directory_map={
# #                 f"{cpp_demo_include_dir}/": "",
# #             },
# #             allow_paths=["^cpp_apigen_demo/"],
# #             disallow_namespaces=["^std$"],
# #             verbose=True,
# #         ),
# #     ),
# # ]

# # cpp_apigen_rst_prolog = """
# # .. default-role:: cpp:expr

# # .. default-literal-role:: cpp

# # .. highlight:: cpp
# # """

# autodoc_class_signature = "separated"

# nitpicky = True
# nitpick_ignore = [
#     # Python standard library types not present in object inventory.
#     ("py:class", "Pattern"),
#     ("py:class", "re.Pattern"),
#     # Example Python types
#     ("py:class", "example_mod.Foo"),
#     ("py:class", "alias_ex.MyUnqualifiedType"),
#     # # Example C++ types
#     # ("cpp:identifier", "Sphinx"),
#     # ("cpp:identifier", "RF24_SPI_SPEED"),
#     # # C++ namespaces referenced in the documentation
#     # #
#     # # It is a bug in the C++ domain that a reference to `ns::symbol` will
#     # # ultimately generate a reference to both `ns` and `ns::symbol`.  However,
#     # # because the C++ domain does not actually define "namespace" objects, the
#     # # `ns` reference will always fail to be resolved, leading to a spurious
#     # # warning.
#     # ("cpp:identifier", "::nlohmann"),
#     # ("cpp:identifier", "std"),
#     # ("cpp:identifier", "synopses_ex"),
#     # ("cpp:identifier", "my_ns1"),
#     # ("cpp:identifier", "my_ns2"),
#     # ("cpp:identifier", "my_ns2::my_nested_ns"),
#     # ("cpp:identifier", "my_ns3"),
#     # ("cpp:identifier", "cpp_apigen_demo"),
#     # Example JavaScript types
#     ("js:func", "string"),
#     ("js:func", "SomeError"),
#     # pydantic_extra_types.color not present in object inventory
#     ("py:class", "pydantic_extra_types.color.Color"),
# ]


# graphviz_ignore_incorrect_font_metrics = True

# # # MyST parser config options
# # myst_enable_extensions = [
# #     "deflist",
# #     "fieldlist",
# #     "smartquotes",
# #     "replacements",
# #     "strikethrough",
# #     "substitution",
# #     "tasklist",
# #     "attrs_inline",
# #     "attrs_block",
# # ]

# # myst_enable_checkboxes = True
# # myst_substitutions = {
# #     "role": "[role](#syntax/roles)",
# # }

# # # Myst parser's strikethrough plugin seems to think that sphinx-immaterial doesn't use
# # # HTML output (probably due to the custom translator mixin used).
# # suppress_warnings = ["myst.strikethrough"]


# def _validate_parallel_build(app):
#     # Verifies that all of the extensions defined by this theme support parallel
#     # building.
#     assert app.is_parallel_allowed("read")
#     assert app.is_parallel_allowed("write")


# if sphinx.version_info >= (6, 1):
#     stringify = sphinx.util.typing.stringify_annotation
# else:
#     stringify = sphinx.util.typing.stringify


# # def _parse_object_description_signature(
# #     env: sphinx.environment.BuildEnvironment, signature: str, node: docutils.nodes.Node
# # ) -> str:
# #     registry = _object_description_options.get_object_description_option_registry(
# #         env.app
# #     )
# #     registry_option = registry.get(signature)
# #     node += sphinx.addnodes.desc_name(signature, signature)
# #     if registry_option is None:
# #         logger.error("Invalid object description option: %r", signature, location=node)
# #     else:
# #         node += sphinx.addnodes.desc_sig_punctuation(" : ", " : ")
# #         annotations = sphinx.domains.python._parse_annotation(
# #             stringify(registry_option.type_constraint), env
# #         )
# #         node += sphinx.addnodes.desc_type("", "", *annotations)
# #         node += sphinx.addnodes.desc_sig_punctuation(" = ", " = ")
# #         default_repr = repr(registry_option.default)
# #         node += docutils.nodes.literal(
# #             default_repr,
# #             default_repr,
# #             language="python",
# #             classes=["python", "code", "highlight"],
# #         )
# #     return signature


# # def _parse_confval_signature(
# #     env: sphinx.environment.BuildEnvironment, signature: str, node: docutils.nodes.Node
# # ) -> str:
# #     values = env.config.values
# #     registry_option = values.get(signature)
# #     node += sphinx.addnodes.desc_name(signature, signature)
# #     if registry_option is None:
# #         logger.error("Invalid config option: %r", signature, location=node)
# #     else:
# #         default = registry_option.default
# #         types = registry_option.valid_types
# #         if isinstance(types, sphinx.config.ENUM):
# #             types = (
# #                 typing.Literal[
# #                     tuple(
# #                         getattr(types, "candidates", None)
# #                         # Attribute renamed to "_candidates" in Sphinx>=8.2
# #                         or getattr(types, "_candidates", None)
# #                     )
# #                 ],
# #             )
# #         if isinstance(types, type):
# #             types = (types,)
# #         if types:
# #             type_constraint = typing.Union[tuple(types)]
# #             node += sphinx.addnodes.desc_sig_punctuation(" : ", " : ")
# #             annotations = sphinx.domains.python._parse_annotation(
# #                 stringify(type_constraint), env
# #             )
# #             node += sphinx.addnodes.desc_type("", "", *annotations)
# #         if not callable(default):
# #             node += sphinx.addnodes.desc_sig_punctuation(" = ", " = ")
# #             default_repr = repr(default)
# #             node += docutils.nodes.literal(
# #                 default_repr,
# #                 default_repr,
# #                 language="python",
# #                 classes=["python", "code", "highlight"],
# #             )
# #     return signature


# # class TestColor(SphinxRole):
# #     color_type: str
# #     style = (
# #         "background-color: %s;"
# #         "color: %s;"
# #         "padding: 0.05rem 0.3rem;"
# #         "border-radius: 0.25rem;"
# #         "cursor: pointer;"
# #     )
# #     style_params: typing.Tuple[str, str]
# #     on_click = (
# #         "document.body.setAttribute(`data-md-color-$color_type`, `$attr`);"
# #         "var name = document.querySelector("
# #         "`#$color_type-color-conf-example code span:nth-last-child(3)`);"
# #         "name.textContent = `&quot;$attr&quot;`;"
# #     )

# #     def run(self):
# #         if self.color_type == "primary":
# #             self.style_params = (
# #                 f"var(--md-{self.color_type}-fg-color)",
# #                 f"var(--md-{self.color_type}-bg-color)",
# #             )
# #         elif self.color_type == "accent":
# #             self.style_params = (
# #                 "var(--md-code-bg-color)",
# #                 f"var(--md-{self.color_type}-fg-color)",
# #             )
# #         color_attr = ""
# #         if self.color_type in ("primary", "accent"):
# #             color_attr = f'data-md-color-{self.color_type}="{self.text}"'
# #         el_style = self.style % self.style_params
# #         click_func = string.Template(self.on_click).substitute(
# #             color_type=self.color_type, attr=self.text
# #         )
# #         node = docutils.nodes.raw(
# #             self.rawtext,
# #             f"<button {color_attr} style="
# #             f'"{el_style}" onclick="{click_func}">{self.text}</button>',
# #             format="html",
# #         )
# #         return ([node], [])


# # class TestColorPrimary(TestColor):
# #     color_type = "primary"


# # class TestColorAccent(TestColor):
# #     color_type = "accent"


# # class TestColorScheme(TestColor):
# #     color_type = "scheme"
# #     style_params = ("var(--md-primary-fg-color)", "var(--md-primary-bg-color)")
# #     on_click = (
# #         "document.body.setAttribute('data-md-color-switching', '');"
# #         + TestColor.on_click
# #         + "setTimeout(function() {document.body.removeAttribute"
# #         "('data-md-color-switching')});"
# #     )


# def setup(app):
#     # app.add_role("test-color-primary", TestColorPrimary())
#     # app.add_role("test-color-accent", TestColorAccent())
#     # app.add_role("test-color-scheme", TestColorScheme())

#     # app.add_object_type(
#     #     "confval",
#     #     "confval",
#     #     objname="configuration value",
#     #     indextemplate="pair: %s; configuration value",
#     #     parse_node=_parse_confval_signature,
#     # )

#     app.add_object_type(
#         "themeconf",
#         "themeconf",
#         objname="theme configuration option",
#         indextemplate="pair: %s; theme option",
#     )

#     app.add_object_type(
#         "filemeta",
#         "filemeta",
#         objname="file-wide metadata option",
#         indextemplate="pair: %s; file-wide metadata option",
#     )

#     # app.add_object_type(
#     #     "objconf",
#     #     "objconf",
#     #     objname="object description option",
#     #     indextemplate="pair: %s; object description option",
#     #     parse_node=_parse_object_description_signature,
#     # )

#     # Add `event` type from Sphinx's own documentation, to allow intersphinx
#     # references to Sphinx events.
#     app.add_object_type(
#         "event",
#         "event",
#         objname="Sphinx event",
#         indextemplate="pair: %s; event",
#     )
#     app.connect("builder-inited", _validate_parallel_build)
