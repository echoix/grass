# SPDX-License-Identifier: GPL-2.0-or-later
# Author: Edouard Choini√®re (2025-06-14 rewrite)
#
# Minimal makefile for Sphinx documentation
#

# This file allows to use sphinx-build without repeating build and
# source dirs. It uses sphinx-build's make-mode (-M) to simplify calls.
# The conf.py configuration file needs environment variables
# available when running inside a grass session.
# To allow usage of this sphinx makefile with a cmake-based build,
# a second makefile is invoked for "libpython*" targets, and that
# makefile includes the GRASS autotools-based make modules in order
# to run a command in a grass session:
# a call to make for this makefile, that will succeed.

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?= --jobs auto
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = .
BUILDDIR      = _build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Note: catch-all target generated by sphinx-quickstart doesn't work
# when using our included Make libraries.
# Instead, redirect the calls with targets starting with libpython
# to another .make file, that can include our Make libraries,
# and call make from inside GRASS with @$(call run_grass,$(MAKE) $@)
# This leaves this current file useable (inside a GRASS shell, or with
# the appropriate variables available) without using an autotools-based
# build, like cmake.
# Of course, these "libpython%" targets shouldn't work with cmake.
libpython%:
	$(MAKE) -C . -f libpython.make $*

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
# Note: The conf.py configuration file needs environment variables
# available when running inside a grass session.
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
