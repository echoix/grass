{
    "messages": [
        {
            "type": "refactor",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
            "messageId": "R0022",
            "confidence": "HIGH",
            "module": "/workspace/grass/pyproject.toml",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "pyproject.toml",
            "absolutePath": "/workspace/grass/pyproject.toml"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"results\": data}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.benchmark.results",
            "obj": "save_results",
            "line": 41,
            "column": 15,
            "endLine": 41,
            "endColumn": 33,
            "path": "python/grass/benchmark/results.py",
            "absolutePath": "/workspace/grass/python/grass/benchmark/results.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-exception-statement",
            "message": "Exception statement has no effect",
            "messageId": "W0133",
            "confidence": "INFERENCE",
            "module": "grass.grassdb.manage",
            "obj": "split_mapset_path",
            "line": 111,
            "column": 8,
            "endLine": 113,
            "endColumn": 9,
            "path": "python/grass/grassdb/manage.py",
            "absolutePath": "/workspace/grass/python/grass/grassdb/manage.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"map\": map, \"column\": column, \"flags\": 'g'}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.case",
            "obj": "TestCase.assertVectorFitsUnivar",
            "line": 488,
            "column": 21,
            "endLine": 488,
            "endColumn": 60,
            "path": "python/grass/gunittest/case.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/case.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"min\": -precision, \"max\": precision}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.case",
            "obj": "TestCase.assertRastersNoDifference",
            "line": 906,
            "column": 29,
            "endLine": 906,
            "endColumn": 64,
            "path": "python/grass/gunittest/case.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/case.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"min\": -precision, \"max\": precision}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.case",
            "obj": "TestCase.assertRasters3dNoDifference",
            "line": 973,
            "column": 29,
            "endLine": 973,
            "endColumn": 64,
            "path": "python/grass/gunittest/case.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/case.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.gunittest.case",
            "obj": "",
            "line": 1254,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/gunittest/case.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/case.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.gunittest.case",
            "obj": "",
            "line": 1456,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/gunittest/case.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/case.py"
        },
        {
            "type": "error",
            "symbol": "unsupported-membership-test",
            "message": "Value 'b_keys' doesn't support membership test",
            "messageId": "E1135",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.checkers",
            "obj": "keyvalue_equals",
            "line": 379,
            "column": 38,
            "endLine": 379,
            "endColumn": 44,
            "path": "python/grass/gunittest/checkers.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/checkers.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'regexp' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.gunittest.checkers",
            "obj": "text_file_md5",
            "line": 652,
            "column": 30,
            "endLine": 652,
            "endColumn": 36,
            "path": "python/grass/gunittest/checkers.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/checkers.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"location\": location, \"location_type\": location_type}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.invoker",
            "obj": "GrassTestFilesInvoker.run_in_location",
            "line": 308,
            "column": 25,
            "endLine": 308,
            "endColumn": 77,
            "path": "python/grass/gunittest/invoker.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/invoker.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.invoker",
            "obj": "GrassTestFilesInvoker",
            "line": 70,
            "column": 0,
            "endLine": 70,
            "endColumn": 27,
            "path": "python/grass/gunittest/invoker.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/invoker.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.multireport",
            "obj": "TestResultSummary",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 23,
            "path": "python/grass/gunittest/multireport.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/multireport.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for function call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.multirunner",
            "obj": "main",
            "line": 148,
            "column": 4,
            "endLine": 148,
            "endColumn": 51,
            "path": "python/grass/gunittest/multirunner.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/multirunner.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "NoopFileAnonymizer",
            "line": 66,
            "column": 0,
            "endLine": 66,
            "endColumn": 24,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "FileAnonymizer",
            "line": 72,
            "column": 0,
            "endLine": 72,
            "endColumn": 20,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'tracurl'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "get_source_url",
            "line": 112,
            "column": 4,
            "endLine": 112,
            "endColumn": 11,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.gunittest.reporters",
            "obj": "",
            "line": 280,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesHtmlReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesHtmlReporter.end_file_test",
            "line": 663,
            "column": 4,
            "endLine": 663,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesHtmlReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesHtmlReporter.end_file_test",
            "line": 663,
            "column": 4,
            "endLine": 663,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesKeyValueReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesKeyValueReporter.end_file_test",
            "line": 914,
            "column": 4,
            "endLine": 914,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesKeyValueReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesKeyValueReporter.end_file_test",
            "line": 914,
            "column": 4,
            "endLine": 914,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method 'start'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.start",
            "line": 980,
            "column": 4,
            "endLine": 980,
            "endColumn": 13,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 3 in 'GrassTestFilesCountingReporter.end_file_test' and is now 8 in overriding 'GrassTestFilesTextReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.end_file_test",
            "line": 1013,
            "column": 4,
            "endLine": 1013,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Variadics removed in overriding 'GrassTestFilesTextReporter.end_file_test' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.reporters",
            "obj": "GrassTestFilesTextReporter.end_file_test",
            "line": 1013,
            "column": 4,
            "endLine": 1013,
            "endColumn": 21,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.gunittest.reporters",
            "obj": "",
            "line": 1242,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/gunittest/reporters.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/reporters.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.gunittest.runner",
            "obj": "GrassTestRunner",
            "line": 456,
            "column": 0,
            "endLine": 456,
            "endColumn": 21,
            "path": "python/grass/gunittest/runner.py",
            "absolutePath": "/workspace/grass/python/grass/gunittest/runner.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2gif",
            "obj": "GifWriter.getAppExt",
            "line": 216,
            "column": 11,
            "endLine": 216,
            "endColumn": 15,
            "path": "python/grass/imaging/images2gif.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2gif.py"
        },
        {
            "type": "warning",
            "symbol": "using-constant-test",
            "message": "Using a conditional statement with a constant value",
            "messageId": "W0125",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2gif",
            "obj": "GifWriter.writeGifToFile",
            "line": 445,
            "column": 15,
            "endLine": 445,
            "endColumn": 19,
            "path": "python/grass/imaging/images2gif.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2gif.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'ProcessTag' is abstract in class 'Tag' but is not overridden in child class 'ControlTag'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "ControlTag",
            "line": 456,
            "column": 0,
            "endLine": 456,
            "endColumn": 16,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "super-init-not-called",
            "message": "__init__ method from base class 'ControlTag' is not called",
            "messageId": "W0231",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "SetBackgroundTag.__init__",
            "line": 482,
            "column": 4,
            "endLine": 482,
            "endColumn": 16,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "abstract-method",
            "message": "Method 'ProcessTag' is abstract in class 'Tag' but is not overridden in child class 'DefinitionTag'",
            "messageId": "W0223",
            "confidence": "INFERENCE",
            "module": "grass.imaging.images2swf",
            "obj": "DefinitionTag",
            "line": 526,
            "column": 0,
            "endLine": 526,
            "endColumn": 19,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.imaging.images2swf",
            "obj": "writeSwf",
            "line": 832,
            "column": 4,
            "endLine": 833,
            "endColumn": 13,
            "path": "python/grass/imaging/images2swf.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/images2swf.py"
        },
        {
            "type": "warning",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for 'disable', expected a valid pylint message and got 'redefined-variable-type'",
            "messageId": "W0012",
            "confidence": "HIGH",
            "module": "grass.imaging.operations",
            "obj": "",
            "line": 129,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/imaging/operations.py",
            "absolutePath": "/workspace/grass/python/grass/imaging/operations.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.jupyter.interactivemap",
            "obj": "Raster",
            "line": 72,
            "column": 0,
            "endLine": 72,
            "endColumn": 12,
            "path": "python/grass/jupyter/interactivemap.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/interactivemap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.jupyter.interactivemap",
            "obj": "Vector",
            "line": 131,
            "column": 0,
            "endLine": 131,
            "endColumn": 12,
            "path": "python/grass/jupyter/interactivemap.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/interactivemap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.jupyter.region",
            "obj": "RegionManagerFor3D",
            "line": 290,
            "column": 0,
            "endLine": 290,
            "endColumn": 24,
            "path": "python/grass/jupyter/region.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/region.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.jupyter.region",
            "obj": "RegionManagerForTimeSeries",
            "line": 328,
            "column": 0,
            "endLine": 328,
            "endColumn": 32,
            "path": "python/grass/jupyter/region.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/region.py"
        },
        {
            "type": "refactor",
            "symbol": "useless-option-value",
            "message": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
            "messageId": "R0022",
            "confidence": "HIGH",
            "module": "grass.jupyter.setup",
            "obj": "",
            "line": 75,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/jupyter/setup.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/setup.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'dates' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.jupyter.timeseriesmap",
            "obj": "collect_layers",
            "line": 102,
            "column": 18,
            "endLine": 102,
            "endColumn": 23,
            "path": "python/grass/jupyter/timeseriesmap.py",
            "absolutePath": "/workspace/grass/python/grass/jupyter/timeseriesmap.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "_Parameter",
            "line": 37,
            "column": 0,
            "endLine": 37,
            "endColumn": 16,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "_Any",
            "line": 44,
            "column": 0,
            "endLine": 44,
            "endColumn": 10,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "_Anonymous",
            "line": 57,
            "column": 0,
            "endLine": 57,
            "endColumn": 16,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of send function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "send",
            "line": 306,
            "column": 0,
            "endLine": 306,
            "endColumn": 8,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of sendExact function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.dispatcher",
            "obj": "sendExact",
            "line": 351,
            "column": 0,
            "endLine": 351,
            "endColumn": 13,
            "path": "python/grass/pydispatch/dispatcher.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/dispatcher.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of sendRobust function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.robust",
            "obj": "sendRobust",
            "line": 7,
            "column": 0,
            "endLine": 7,
            "endColumn": 14,
            "path": "python/grass/pydispatch/robust.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/robust.py"
        },
        {
            "type": "convention",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "messageId": "C0325",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.robustapply",
            "obj": "",
            "line": 55,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pydispatch/robustapply.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/robustapply.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __new__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref.__new__",
            "line": 75,
            "column": 4,
            "endLine": 75,
            "endColumn": 15,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "warning",
            "symbol": "protected-access",
            "message": "Access to a protected member _allInstances of a client class",
            "messageId": "W0212",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref.__init__.remove",
            "line": 118,
            "column": 20,
            "endLine": 118,
            "endColumn": 48,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "refactor",
            "symbol": "no-classmethod-decorator",
            "message": "Consider using a decorator instead of calling classmethod",
            "messageId": "R0202",
            "confidence": "UNDEFINED",
            "module": "grass.pydispatch.saferef",
            "obj": "BoundMethodWeakref",
            "line": 150,
            "column": 4,
            "endLine": 150,
            "endColumn": 16,
            "path": "python/grass/pydispatch/saferef.py",
            "absolutePath": "/workspace/grass/python/grass/pydispatch/saferef.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.errors",
            "obj": "",
            "line": 28,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/errors.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/errors.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'result' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.utils",
            "obj": "get_raster_for_points",
            "line": 337,
            "column": 16,
            "endLine": 337,
            "endColumn": 22,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "table_exist",
            "line": 440,
            "column": 11,
            "endLine": 440,
            "endColumn": 44,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "import-self",
            "message": "Module import itself",
            "messageId": "W0406",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "",
            "line": 598,
            "column": 4,
            "endLine": 598,
            "endColumn": 35,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.utils",
            "obj": "",
            "line": 607,
            "column": 4,
            "endLine": 607,
            "endColumn": 51,
            "path": "python/grass/pygrass/utils.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/utils.py"
        },
        {
            "type": "warning",
            "symbol": "reimported",
            "message": "Reimport 'getenv' (imported line 13)",
            "messageId": "W0404",
            "confidence": "HIGH",
            "module": "grass.pygrass.gis",
            "obj": "_check_raise",
            "line": 76,
            "column": 8,
            "endLine": 76,
            "endColumn": 46,
            "path": "python/grass/pygrass/gis/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.gis.region",
            "obj": "Region.items",
            "line": 373,
            "column": 20,
            "endLine": 373,
            "endColumn": 44,
            "path": "python/grass/pygrass/gis/region.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/region.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.gis.region",
            "obj": "",
            "line": 678,
            "column": 4,
            "endLine": 678,
            "endColumn": 51,
            "path": "python/grass/pygrass/gis/region.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/gis/region.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.messages",
            "obj": "get_msgr",
            "line": 336,
            "column": 0,
            "endLine": 336,
            "endColumn": 12,
            "path": "python/grass/pygrass/messages/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/messages/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of get_msgr function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.messages",
            "obj": "get_msgr",
            "line": 336,
            "column": 0,
            "endLine": 336,
            "endColumn": 12,
            "path": "python/grass/pygrass/messages/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/messages/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "read_gisrc",
            "line": 125,
            "column": 14,
            "endLine": 127,
            "endColumn": 9,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "copy_groups",
            "line": 186,
            "column": 9,
            "endLine": 186,
            "endColumn": 44,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "cmd_exe",
            "line": 379,
            "column": 12,
            "endLine": 379,
            "endColumn": 54,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (16/15)",
            "messageId": "R0913",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.__init__",
            "line": 445,
            "column": 4,
            "endLine": 445,
            "endColumn": 16,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.__init__",
            "line": 445,
            "column": 4,
            "endLine": 445,
            "endColumn": 16,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.grid.grid",
            "obj": "GridModule.get_works",
            "line": 606,
            "column": 23,
            "endLine": 606,
            "endColumn": 74,
            "path": "python/grass/pygrass/modules/grid/grid.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/grid.py"
        },
        {
            "type": "warning",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'rrasts' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "messageId": "W4701",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.modules.grid.patch",
            "obj": "rpatch_map",
            "line": 103,
            "column": 12,
            "endLine": 103,
            "endColumn": 19,
            "path": "python/grass/pygrass/modules/grid/patch.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/grid/patch.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-dict-comprehension",
            "message": "Consider using a dictionary comprehension",
            "messageId": "R1717",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.env",
            "obj": "get_env",
            "line": 17,
            "column": 14,
            "endLine": 22,
            "endColumn": 9,
            "path": "python/grass/pygrass/modules/interface/env.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/env.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.flag",
            "obj": "Flag.__init__",
            "line": 30,
            "column": 12,
            "endLine": 30,
            "endColumn": 84,
            "path": "python/grass/pygrass/modules/interface/flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/flag.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.flag",
            "obj": "Flag.__init__",
            "line": 35,
            "column": 33,
            "endLine": 35,
            "endColumn": 78,
            "path": "python/grass/pygrass/modules/interface/flag.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/flag.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "",
            "line": 38,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 167,
            "column": 24,
            "endLine": 167,
            "endColumn": 67,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 168,
            "column": 24,
            "endLine": 168,
            "endColumn": 67,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'not test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__init__",
            "line": 221,
            "column": 25,
            "endLine": 221,
            "endColumn": 76,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'keydescvals' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.modules.interface.parameter",
            "obj": "Parameter.__doc__",
            "line": 358,
            "column": 26,
            "endLine": 358,
            "endColumn": 37,
            "path": "python/grass/pygrass/modules/interface/parameter.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/parameter.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattr__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.modules.interface.typedict",
            "obj": "TypeDict.used",
            "line": 67,
            "column": 15,
            "endLine": 67,
            "endColumn": 36,
            "path": "python/grass/pygrass/modules/interface/typedict.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/typedict.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattr__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.modules.interface.typedict",
            "obj": "TypeDict.used",
            "line": 68,
            "column": 32,
            "endLine": 68,
            "endColumn": 53,
            "path": "python/grass/pygrass/modules/interface/typedict.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/modules/interface/typedict.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.raster",
            "obj": "RasterRow.__init__",
            "line": 133,
            "column": 4,
            "endLine": 133,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "RasterRow.__init__",
            "line": 133,
            "column": 4,
            "endLine": 133,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.__init__",
            "obj": "",
            "line": 210,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.__init__",
            "obj": "",
            "line": 217,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "RasterSegment.__init__",
            "line": 308,
            "column": 4,
            "endLine": 308,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster",
            "obj": "",
            "line": 755,
            "column": 4,
            "endLine": 755,
            "endColumn": 51,
            "path": "python/grass/pygrass/raster/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "Info.items",
            "line": 250,
            "column": 20,
            "endLine": 250,
            "endColumn": 44,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.__init__",
            "line": 273,
            "column": 4,
            "endLine": 273,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.exist",
            "line": 435,
            "column": 23,
            "endLine": 435,
            "endColumn": 48,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.is_open",
            "line": 448,
            "column": 15,
            "endLine": 448,
            "endColumn": 72,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.set_region_from_rast",
            "line": 510,
            "column": 12,
            "endLine": 510,
            "endColumn": 17,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.set_region",
            "line": 529,
            "column": 12,
            "endLine": 529,
            "endColumn": 17,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.read_cats",
            "line": 584,
            "column": 8,
            "endLine": 584,
            "endColumn": 28,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase.write_cats",
            "line": 589,
            "column": 8,
            "endLine": 589,
            "endColumn": 29,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "RasterAbstractBase",
            "line": 259,
            "column": 0,
            "endLine": 259,
            "endColumn": 24,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.abstract",
            "obj": "",
            "line": 637,
            "column": 4,
            "endLine": 637,
            "endColumn": 51,
            "path": "python/grass/pygrass/raster/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/abstract.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'obj' has been renamed to 'out_arr' in overriding 'Buffer.__array_wrap__' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.buffer",
            "obj": "Buffer.__array_wrap__",
            "line": 47,
            "column": 4,
            "endLine": 47,
            "endColumn": 22,
            "path": "python/grass/pygrass/raster/buffer.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/buffer.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for unbound method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.buffer",
            "obj": "Buffer.__array_wrap__",
            "line": 55,
            "column": 15,
            "endLine": 55,
            "endColumn": 64,
            "path": "python/grass/pygrass/raster/buffer.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/buffer.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.__init__",
            "line": 56,
            "column": 4,
            "endLine": 56,
            "endColumn": 16,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.__dict__",
            "line": 96,
            "column": 14,
            "endLine": 96,
            "endColumn": 20,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getitem__. Access item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.get_cat",
            "line": 198,
            "column": 15,
            "endLine": 198,
            "endColumn": 38,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.set_cat",
            "line": 203,
            "column": 21,
            "endLine": 203,
            "endColumn": 35,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __setitem__. Set item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.set_cat",
            "line": 204,
            "column": 12,
            "endLine": 204,
            "endColumn": 42,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category._write_cats",
            "line": 223,
            "column": 19,
            "endLine": 223,
            "endColumn": 34,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.ncats",
            "line": 275,
            "column": 15,
            "endLine": 275,
            "endColumn": 29,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.raster.category",
            "obj": "Category.write_rules",
            "line": 330,
            "column": 23,
            "endLine": 330,
            "endColumn": 38,
            "path": "python/grass/pygrass/raster/category.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/raster/category.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc",
            "obj": "RPCDefs",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 13,
            "path": "python/grass/pygrass/rpc/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc",
            "obj": "",
            "line": 479,
            "column": 4,
            "endLine": 479,
            "endColumn": 45,
            "path": "python/grass/pygrass/rpc/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.rpc.base",
            "obj": "dummy_server",
            "line": 40,
            "column": 12,
            "endLine": 40,
            "endColumn": 79,
            "path": "python/grass/pygrass/rpc/base.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/base.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.rpc.base",
            "obj": "RPCServerBase._check_restart_server",
            "line": 156,
            "column": 12,
            "endLine": 158,
            "endColumn": 13,
            "path": "python/grass/pygrass/rpc/base.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/rpc/base.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.tests.benchmark",
            "obj": "",
            "line": 7,
            "column": 0,
            "endLine": 7,
            "endColumn": 15,
            "path": "python/grass/pygrass/tests/benchmark.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/benchmark.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'loc' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.tests.benchmark",
            "obj": "get_testdict",
            "line": 326,
            "column": 52,
            "endLine": 326,
            "endColumn": 55,
            "path": "python/grass/pygrass/tests/benchmark.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/benchmark.py"
        },
        {
            "type": "warning",
            "symbol": "deprecated-module",
            "message": "Deprecated module 'optparse'",
            "messageId": "W4901",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.tests.set_mapset",
            "obj": "",
            "line": 10,
            "column": 0,
            "endLine": 10,
            "endColumn": 15,
            "path": "python/grass/pygrass/tests/set_mapset.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/tests/set_mapset.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "Vector.__init__",
            "line": 62,
            "column": 4,
            "endLine": 62,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __next__. Use next built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector",
            "obj": "Vector.next",
            "line": 111,
            "column": 15,
            "endLine": 111,
            "endColumn": 30,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "Vector.has_color_table",
            "line": 261,
            "column": 15,
            "endLine": 261,
            "endColumn": 46,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "VectorTopo.__init__",
            "line": 290,
            "column": 4,
            "endLine": 290,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector",
            "obj": "",
            "line": 977,
            "column": 4,
            "endLine": 977,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/__init__.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/__init__.py"
        },
        {
            "type": "warning",
            "symbol": "keyword-arg-before-vararg",
            "message": "Keyword argument before variable positional arguments list in the definition of __init__ function",
            "messageId": "W1113",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.__init__",
            "line": 74,
            "column": 4,
            "endLine": 74,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'bool(test)'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.exist",
            "line": 303,
            "column": 23,
            "endLine": 303,
            "endColumn": 48,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'openvect' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.pygrass.vector.abstract",
            "obj": "Info.open",
            "line": 413,
            "column": 11,
            "endLine": 413,
            "endColumn": 19,
            "path": "python/grass/pygrass/vector/abstract.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/abstract.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "Bbox.items",
            "line": 142,
            "column": 20,
            "endLine": 142,
            "endColumn": 44,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "BoxList.append",
            "line": 220,
            "column": 15,
            "endLine": 220,
            "endColumn": 29,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.basic",
            "obj": "Ilist.append",
            "line": 342,
            "column": 12,
            "endLine": 342,
            "endColumn": 17,
            "path": "python/grass/pygrass/vector/basic.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/basic.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.find",
            "obj": "AbstractFinder",
            "line": 18,
            "column": 0,
            "endLine": 18,
            "endColumn": 20,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "PointFinder.__init__",
            "line": 51,
            "column": 4,
            "endLine": 51,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "BboxFinder.__init__",
            "line": 400,
            "column": 4,
            "endLine": 400,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "useless-parent-delegation",
            "message": "Useless parent or super() delegation in method '__init__'",
            "messageId": "W0246",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.find",
            "obj": "PolygonFinder.__init__",
            "line": 668,
            "column": 4,
            "endLine": 668,
            "endColumn": 16,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.find",
            "obj": "",
            "line": 685,
            "column": 4,
            "endLine": 685,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/find.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/find.py"
        },
        {
            "type": "refactor",
            "symbol": "simplifiable-if-expression",
            "message": "The if expression can be replaced with 'test'",
            "messageId": "R1719",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Point.__init__",
            "line": 462,
            "column": 24,
            "endLine": 462,
            "endColumn": 52,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __getitem__. Access item via subscript.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.pop",
            "line": 964,
            "column": 14,
            "endLine": 964,
            "endColumn": 36,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.remove",
            "line": 1034,
            "column": 37,
            "endLine": 1034,
            "endColumn": 52,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.to_list",
            "line": 1092,
            "column": 40,
            "endLine": 1092,
            "endColumn": 55,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __iter__. Use iter built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line.to_wkt_p",
            "line": 1120,
            "column": 27,
            "endLine": 1120,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (24/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Line",
            "line": 629,
            "column": 0,
            "endLine": 629,
            "endColumn": 10,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Node.to_wkb",
            "line": 1313,
            "column": 8,
            "endLine": 1313,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Isle.to_wkb",
            "line": 1526,
            "column": 8,
            "endLine": 1526,
            "endColumn": 42,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "Isles.isles_ids",
            "line": 1599,
            "column": 27,
            "endLine": 1599,
            "endColumn": 41,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.geometry",
            "obj": "c_read_next_line",
            "line": 1882,
            "column": 8,
            "endLine": 1882,
            "endColumn": 13,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.geometry",
            "obj": "",
            "line": 1974,
            "column": 4,
            "endLine": 1974,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/geometry.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/geometry.py"
        },
        {
            "type": "error",
            "symbol": "too-many-function-args",
            "message": "Too many positional arguments for method call",
            "messageId": "E1121",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.table",
            "obj": "Columns.__setitem__",
            "line": 220,
            "column": 8,
            "endLine": 220,
            "endColumn": 31,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "convention",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __len__. Use len built-in function.",
            "messageId": "C2801",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.table",
            "obj": "Columns.update_odict",
            "line": 300,
            "column": 14,
            "endLine": 300,
            "endColumn": 28,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.table",
            "obj": "",
            "line": 440,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.table",
            "obj": "",
            "line": 1143,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.pygrass.vector.table",
            "obj": "",
            "line": 1149,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "messageId": "W0105",
            "confidence": "UNDEFINED",
            "module": "grass.pygrass.vector.table",
            "obj": "",
            "line": 1298,
            "column": 4,
            "endLine": 1298,
            "endColumn": 51,
            "path": "python/grass/pygrass/vector/table.py",
            "absolutePath": "/workspace/grass/python/grass/pygrass/vector/table.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.script.array",
            "obj": "_tempfile",
            "line": 122,
            "column": 0,
            "endLine": 122,
            "endColumn": 15,
            "path": "python/grass/script/array.py",
            "absolutePath": "/workspace/grass/python/grass/script/array.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2060/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.script.core",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.script.core",
            "obj": "",
            "line": 1166,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.script.core",
            "obj": "create_project",
            "line": 1810,
            "column": 13,
            "endLine": 1810,
            "endColumn": 19,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ps' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.script.core",
            "obj": "create_project",
            "line": 1872,
            "column": 16,
            "endLine": 1872,
            "endColumn": 18,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.script.core",
            "obj": "",
            "line": 2012,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/core.py",
            "absolutePath": "/workspace/grass/python/grass/script/core.py"
        },
        {
            "type": "warning",
            "symbol": "duplicate-key",
            "message": "Duplicate key 'map' in dictionary",
            "messageId": "W0109",
            "confidence": "UNDEFINED",
            "module": "grass.script.raster",
            "obj": "raster_history",
            "line": 68,
            "column": 14,
            "endLine": 68,
            "endColumn": 38,
            "path": "python/grass/script/raster.py",
            "absolutePath": "/workspace/grass/python/grass/script/raster.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.script.raster",
            "obj": "",
            "line": 147,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/raster.py",
            "absolutePath": "/workspace/grass/python/grass/script/raster.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.script.raster3d",
            "obj": "",
            "line": 113,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/raster3d.py",
            "absolutePath": "/workspace/grass/python/grass/script/raster3d.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.script.task",
            "obj": "processTask",
            "line": 287,
            "column": 0,
            "endLine": 287,
            "endColumn": 17,
            "path": "python/grass/script/task.py",
            "absolutePath": "/workspace/grass/python/grass/script/task.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.script.task",
            "obj": "",
            "line": 536,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/script/task.py",
            "absolutePath": "/workspace/grass/python/grass/script/task.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'node'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_node_pid",
            "line": 557,
            "column": 4,
            "endLine": 557,
            "endColumn": 8,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'pid'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_node_pid",
            "line": 558,
            "column": 4,
            "endLine": 558,
            "endColumn": 7,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'suffix'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_uuid",
            "line": 581,
            "column": 4,
            "endLine": 581,
            "endColumn": 10,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "warning",
            "symbol": "possibly-unused-variable",
            "message": "Possibly unused variable 'suffix'",
            "messageId": "W0641",
            "confidence": "UNDEFINED",
            "module": "grass.script.utils",
            "obj": "append_random",
            "line": 622,
            "column": 4,
            "endLine": 622,
            "endColumn": 10,
            "path": "python/grass/script/utils.py",
            "absolutePath": "/workspace/grass/python/grass/script/utils.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.script.vector",
            "obj": "vector_columns",
            "line": 133,
            "column": 17,
            "endLine": 133,
            "endColumn": 23,
            "path": "python/grass/script/vector.py",
            "absolutePath": "/workspace/grass/python/grass/script/vector.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'key_index' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.script.vector",
            "obj": "vector_db_select",
            "line": 286,
            "column": 30,
            "endLine": 286,
            "endColumn": 39,
            "path": "python/grass/script/vector.py",
            "absolutePath": "/workspace/grass/python/grass/script/vector.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"quiet\": True, \"flags\": flags, \"map\": ','.join(map_list), \"layer\": ','.join(layer_list), ... }' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.script.vector",
            "obj": "vector_what",
            "line": 412,
            "column": 16,
            "endLine": 419,
            "endColumn": 5,
            "path": "python/grass/script/vector.py",
            "absolutePath": "/workspace/grass/python/grass/script/vector.py"
        },
        {
            "type": "refactor",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "messageId": "R1735",
            "confidence": "INFERENCE",
            "module": "grass.semantic_label.reader",
            "obj": "SemanticLabelReader._read_config",
            "line": 35,
            "column": 22,
            "endLine": 35,
            "endColumn": 28,
            "path": "python/grass/semantic_label/reader.py",
            "absolutePath": "/workspace/grass/python/grass/semantic_label/reader.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (44/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_dataset",
            "obj": "AbstractDataset",
            "line": 25,
            "column": 0,
            "endLine": 25,
            "endColumn": 21,
            "path": "python/grass/temporal/abstract_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 4 in 'AbstractDataset.update' and is now 3 in overriding 'AbstractMapDataset.update' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.update",
            "line": 367,
            "column": 4,
            "endLine": 367,
            "endColumn": 14,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 4 in 'AbstractDataset.update_all' and is now 3 in overriding 'AbstractMapDataset.update_all' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.update_all",
            "line": 386,
            "column": 4,
            "endLine": 386,
            "endColumn": 18,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "",
            "line": 470,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "",
            "line": 1026,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.get_registered_stds",
            "line": 1133,
            "column": 12,
            "endLine": 1133,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.add_stds_to_register",
            "line": 1169,
            "column": 16,
            "endLine": 1169,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.add_stds_to_register",
            "line": 1184,
            "column": 12,
            "endLine": 1184,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1211,
            "column": 16,
            "endLine": 1211,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1217,
            "column": 16,
            "endLine": 1217,
            "endColumn": 26,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset.remove_stds_from_register",
            "line": 1232,
            "column": 12,
            "endLine": 1232,
            "endColumn": 22,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (39/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_map_dataset",
            "obj": "AbstractMapDataset",
            "line": 33,
            "column": 0,
            "endLine": 33,
            "endColumn": 24,
            "path": "python/grass/temporal/abstract_map_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_map_dataset.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3001/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 422,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (13/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.check_temporal_topology",
            "line": 550,
            "column": 4,
            "endLine": 550,
            "endColumn": 31,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 740,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 746,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-out-of-order",
            "message": "Positional arguments appear to be out of order",
            "messageId": "W1114",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.sample_by_dataset",
            "line": 795,
            "column": 8,
            "endLine": 795,
            "endColumn": 39,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 987,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 993,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "error",
            "symbol": "misplaced-bare-raise",
            "message": "The raise statement is not inside an except clause",
            "messageId": "E0704",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset._update_where_statement_by_spatial_extent",
            "line": 1734,
            "column": 12,
            "endLine": 1734,
            "endColumn": 17,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in assignment",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 1740,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 2316,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 2386,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 2542,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 2600,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "",
            "line": 2640,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'gran' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset.update_from_registered_maps",
            "line": 2982,
            "column": 49,
            "endLine": 2982,
            "endColumn": 53,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (43/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.abstract_space_time_dataset",
            "obj": "AbstractSpaceTimeDataset",
            "line": 46,
            "column": 0,
            "endLine": 46,
            "endColumn": 30,
            "path": "python/grass/temporal/abstract_space_time_dataset.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/abstract_space_time_dataset.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.aggregation",
            "obj": "",
            "line": 324,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/aggregation.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/aggregation.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2054/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "messageId": "R0903",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "RPCDefs",
            "line": 34,
            "column": 0,
            "endLine": 34,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_full_info",
            "line": 82,
            "column": 4,
            "endLine": 83,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_get_database_name",
            "line": 297,
            "column": 4,
            "endLine": 298,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_available_mapsets",
            "line": 355,
            "column": 4,
            "endLine": 356,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_has_timestamp",
            "line": 389,
            "column": 4,
            "endLine": 390,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_timestamp",
            "line": 439,
            "column": 4,
            "endLine": 440,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_timestamp",
            "line": 483,
            "column": 4,
            "endLine": 484,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_timestamp",
            "line": 474,
            "column": 12,
            "endLine": 474,
            "endColumn": 75,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_timestamp",
            "line": 520,
            "column": 4,
            "endLine": 521,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_semantic_label",
            "line": 560,
            "column": 4,
            "endLine": 561,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_semantic_label",
            "line": 556,
            "column": 12,
            "endLine": 558,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_semantic_label",
            "line": 597,
            "column": 4,
            "endLine": 598,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_write_semantic_label",
            "line": 593,
            "column": 12,
            "endLine": 595,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_semantic_label",
            "line": 631,
            "column": 4,
            "endLine": 632,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "logging-not-lazy",
            "message": "Use lazy % formatting in logging functions",
            "messageId": "W1201",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_remove_semantic_label",
            "line": 627,
            "column": 12,
            "endLine": 629,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_map_exists",
            "line": 665,
            "column": 4,
            "endLine": 666,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_info",
            "line": 693,
            "column": 4,
            "endLine": 694,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_map_history",
            "line": 1003,
            "column": 4,
            "endLine": 1004,
            "endColumn": 13,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "_read_vector_history",
            "line": 1112,
            "column": 8,
            "endLine": 1112,
            "endColumn": 12,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (34/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.c_libraries_interface",
            "obj": "CLibrariesInterface",
            "line": 1279,
            "column": 0,
            "endLine": 1279,
            "endColumn": 25,
            "path": "python/grass/temporal/c_libraries_interface.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/c_libraries_interface.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.core",
            "obj": "",
            "line": 672,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/core.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/core.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'dbmi' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.core",
            "obj": "init",
            "line": 679,
            "column": 27,
            "endLine": 679,
            "endColumn": 31,
            "path": "python/grass/temporal/core.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/core.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.datetime_math",
            "obj": "modify_datetime",
            "line": 327,
            "column": 8,
            "endLine": 328,
            "endColumn": 17,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "try-except-raise",
            "message": "The except handler raises immediately",
            "messageId": "W0706",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.datetime_math",
            "obj": "modify_datetime",
            "line": 354,
            "column": 8,
            "endLine": 355,
            "endColumn": 17,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "bad-chained-comparison",
            "message": "Suspicious 2-part chained comparison using semantically incompatible operators ('>' and 'in')",
            "messageId": "W3601",
            "confidence": "HIGH",
            "module": "grass.temporal.datetime_math",
            "obj": "check_datetime_string",
            "line": 811,
            "column": 7,
            "endLine": 811,
            "endColumn": 30,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.datetime_math",
            "obj": "datetime_to_grass_datetime_string",
            "line": 917,
            "column": 8,
            "endLine": 917,
            "endColumn": 85,
            "path": "python/grass/temporal/datetime_math.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/datetime_math.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "messageId": "R1722",
            "confidence": "HIGH",
            "module": "grass.temporal.extract",
            "obj": "run_mapcalc2d",
            "line": 323,
            "column": 8,
            "endLine": 323,
            "endColumn": 15,
            "path": "python/grass/temporal/extract.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/extract.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "messageId": "R1722",
            "confidence": "HIGH",
            "module": "grass.temporal.extract",
            "obj": "run_mapcalc3d",
            "line": 333,
            "column": 8,
            "endLine": 333,
            "endColumn": 15,
            "path": "python/grass/temporal/extract.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/extract.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "messageId": "R1722",
            "confidence": "HIGH",
            "module": "grass.temporal.extract",
            "obj": "run_vector_extraction",
            "line": 350,
            "column": 8,
            "endLine": 350,
            "endColumn": 15,
            "path": "python/grass/temporal/extract.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/extract.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'type'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.gui_support",
            "obj": "tlist_grouped",
            "line": 46,
            "column": 8,
            "endLine": 46,
            "endColumn": 12,
            "path": "python/grass/temporal/gui_support.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/gui_support.py"
        },
        {
            "type": "refactor",
            "symbol": "redefined-argument-from-local",
            "message": "Redefining argument with the local name 'type'",
            "messageId": "R1704",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.gui_support",
            "obj": "tlist",
            "line": 100,
            "column": 8,
            "endLine": 100,
            "endColumn": 12,
            "path": "python/grass/temporal/gui_support.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/gui_support.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (60/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.mapcalc",
            "obj": "dataset_mapcalculator",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 25,
            "path": "python/grass/temporal/mapcalc.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/mapcalc.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "messageId": "R1722",
            "confidence": "HIGH",
            "module": "grass.temporal.mapcalc",
            "obj": "_run_mapcalc2d",
            "line": 415,
            "column": 8,
            "endLine": 415,
            "endColumn": 15,
            "path": "python/grass/temporal/mapcalc.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/mapcalc.py"
        },
        {
            "type": "refactor",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "messageId": "R1722",
            "confidence": "HIGH",
            "module": "grass.temporal.mapcalc",
            "obj": "_run_mapcalc3d",
            "line": 428,
            "column": 8,
            "endLine": 428,
            "endColumn": 15,
            "path": "python/grass/temporal/mapcalc.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/mapcalc.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (28/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.metadata",
            "obj": "VectorMetadata",
            "line": 559,
            "column": 0,
            "endLine": 559,
            "endColumn": 20,
            "path": "python/grass/temporal/metadata.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/metadata.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.open_stds",
            "obj": "",
            "line": 122,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/open_stds.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/open_stds.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.open_stds",
            "obj": "",
            "line": 130,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/open_stds.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/open_stds.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'ds' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.register",
            "obj": "register_maps_in_space_time_dataset",
            "line": 458,
            "column": 12,
            "endLine": 458,
            "endColumn": 14,
            "path": "python/grass/temporal/register.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/register.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (80/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.register",
            "obj": "register_maps_in_space_time_dataset",
            "line": 35,
            "column": 0,
            "endLine": 35,
            "endColumn": 39,
            "path": "python/grass/temporal/register.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/register.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeRasterDataset.get_new_map_instance",
            "line": 1285,
            "column": 4,
            "endLine": 1285,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeRaster3DDataset.get_new_map_instance",
            "line": 1394,
            "column": 4,
            "endLine": 1394,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "warning",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'get_new_map_instance' method",
            "messageId": "W0222",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.space_time_datasets",
            "obj": "SpaceTimeVectorDataset.get_new_map_instance",
            "line": 1520,
            "column": 4,
            "endLine": 1520,
            "endColumn": 28,
            "path": "python/grass/temporal/space_time_datasets.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/space_time_datasets.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2136/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (11/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.cover",
            "line": 926,
            "column": 4,
            "endLine": 926,
            "endColumn": 13,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (10/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.overlap_2d",
            "line": 1052,
            "column": 4,
            "endLine": 1052,
            "endColumn": 18,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (12/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent.overlap",
            "line": 1122,
            "column": 4,
            "endLine": 1122,
            "endColumn": 15,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.spatial_extent",
            "obj": "",
            "line": 1906,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.spatial_extent",
            "obj": "",
            "line": 1925,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (52/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_extent",
            "obj": "SpatialExtent",
            "line": 76,
            "column": 0,
            "endLine": 76,
            "endColumn": 19,
            "path": "python/grass/temporal/spatial_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (22/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.spatial_topology_dataset_connector",
            "obj": "SpatialTopologyDatasetConnector",
            "line": 20,
            "column": 0,
            "endLine": 20,
            "endColumn": 37,
            "path": "python/grass/temporal/spatial_topology_dataset_connector.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/spatial_topology_dataset_connector.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 92,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 105,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 135,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 166,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 197,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-locals",
            "message": "Too many local variables (56/50)",
            "messageId": "R0914",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.stds_import",
            "obj": "import_stds",
            "line": 207,
            "column": 0,
            "endLine": 207,
            "endColumn": 15,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 327,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 338,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 373,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 457,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 473,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 481,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 489,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 497,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "warning",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "messageId": "W1404",
            "confidence": "HIGH",
            "module": "grass.temporal.stds_import",
            "obj": "",
            "line": 508,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (56/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.stds_import",
            "obj": "import_stds",
            "line": 207,
            "column": 0,
            "endLine": 207,
            "endColumn": 15,
            "path": "python/grass/temporal/stds_import.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/stds_import.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (3441/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "convention",
            "symbol": "use-implicit-booleaness-not-comparison",
            "message": "\"self.topology != []\" can be simplified to \"self.topology\", if it is strictly a sequence, as an empty list is falsey",
            "messageId": "C1803",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_algebra",
            "obj": "GlobalTemporalVar.get_type",
            "line": 730,
            "column": 45,
            "endLine": 730,
            "endColumn": 64,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (30/25)",
            "messageId": "R0902",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser",
            "line": 762,
            "column": 0,
            "endLine": 762,
            "endColumn": 27,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.set_temporal_extent_list",
            "line": 1107,
            "column": 4,
            "endLine": 1107,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_spatio_temporal_topology_list",
            "line": 1407,
            "column": 4,
            "endLine": 1407,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.assign_bool_value",
            "line": 1646,
            "column": 4,
            "endLine": 1646,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.assign_bool_value",
            "line": 1646,
            "column": 4,
            "endLine": 1646,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.compare_bool_value",
            "line": 1690,
            "column": 4,
            "endLine": 1690,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.compare_bool_value",
            "line": 1690,
            "column": 4,
            "endLine": 1690,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.perform_temporal_selection",
            "line": 1784,
            "column": 4,
            "endLine": 1784,
            "endColumn": 34,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.set_granularity",
            "line": 1876,
            "column": 4,
            "endLine": 1876,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'boolname' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.eval_datetime_str",
            "line": 2140,
            "column": 15,
            "endLine": 2140,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.eval_map_list",
            "line": 2185,
            "column": 4,
            "endLine": 2185,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_condition_list",
            "line": 2211,
            "column": 4,
            "endLine": 2211,
            "endColumn": 28,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'resultlist' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.build_condition_list",
            "line": 2287,
            "column": 28,
            "endLine": 2287,
            "endColumn": 38,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (8/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_statement_assign",
            "line": 2375,
            "column": 8,
            "endLine": 2595,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'td' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_t_td_var",
            "line": 2818,
            "column": 30,
            "endLine": 2818,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'increment' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_expr_t_buff",
            "line": 3307,
            "column": 36,
            "endLine": 3307,
            "endColumn": 45,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'increment' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser.p_expr_t_shift",
            "line": 3365,
            "column": 73,
            "endLine": 3365,
            "endColumn": 82,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (52/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_algebra",
            "obj": "TemporalAlgebraParser",
            "line": 762,
            "column": 0,
            "endLine": 762,
            "endColumn": 27,
            "path": "python/grass/temporal/temporal_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (19/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "TemporalExtent.temporal_relation",
            "line": 955,
            "column": 4,
            "endLine": 955,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (26/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "TemporalExtent",
            "line": 28,
            "column": 0,
            "endLine": 28,
            "endColumn": 20,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'extent' has been renamed to 'map' in overriding 'RelativeTemporalExtent.temporal_relation' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_extent",
            "obj": "RelativeTemporalExtent.temporal_relation",
            "line": 1335,
            "column": 4,
            "endLine": 1335,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_extent.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_extent.py"
        },
        {
            "type": "warning",
            "symbol": "pointless-statement",
            "message": "Statement seems to have no effect",
            "messageId": "W0104",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "check_granularity_string",
            "line": 85,
            "column": 4,
            "endLine": 85,
            "endColumn": 17,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'time_tuple' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_granularity",
            "obj": "get_time_tuple_function._get_map_time_tuple",
            "line": 139,
            "column": 15,
            "endLine": 139,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-return-statements",
            "message": "Too many return statements (17/9)",
            "messageId": "R0911",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "compute_common_absolute_time_granularity",
            "line": 581,
            "column": 0,
            "endLine": 581,
            "endColumn": 44,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (47/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_granularity",
            "obj": "compute_common_absolute_time_granularity_simple",
            "line": 847,
            "column": 0,
            "endLine": 847,
            "endColumn": 51,
            "path": "python/grass/temporal/temporal_granularity.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_granularity.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalRaster3DAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster3d_algebra",
            "obj": "TemporalRaster3DAlgebraParser.parse",
            "line": 54,
            "column": 4,
            "endLine": 54,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_raster3d_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster3d_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmdstring' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster3d_algebra",
            "obj": "TemporalRaster3DAlgebraParser.p_ts_neighbor_operation",
            "line": 151,
            "column": 39,
            "endLine": 151,
            "endColumn": 48,
            "path": "python/grass/temporal/temporal_raster3d_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster3d_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalRasterAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.parse",
            "line": 100,
            "column": 4,
            "endLine": 100,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 't_neighbour' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.p_ts_neighbour_operation",
            "line": 167,
            "column": 40,
            "endLine": 167,
            "endColumn": 51,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'cmdstring' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_algebra",
            "obj": "TemporalRasterAlgebraParser.p_ts_neighbour_operation",
            "line": 193,
            "column": 39,
            "endLine": 193,
            "endColumn": 48,
            "path": "python/grass/temporal/temporal_raster_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_algebra.py"
        },
        {
            "type": "convention",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2064/2000)",
            "messageId": "C0302",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'compop' has been renamed to 'compare_cmd' in overriding 'TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'aggregate' has been renamed to 'compop' in overriding 'TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_spatio_temporal_topology_list",
            "line": 199,
            "column": 4,
            "endLine": 199,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.compare_cmd_value",
            "line": 416,
            "column": 4,
            "endLine": 416,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.compare_cmd_value",
            "line": 416,
            "column": 4,
            "endLine": 416,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.operator_cmd_value",
            "line": 500,
            "column": 4,
            "endLine": 500,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.operator_cmd_value",
            "line": 500,
            "column": 4,
            "endLine": 500,
            "endColumn": 26,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.set_temporal_extent_list",
            "line": 550,
            "column": 4,
            "endLine": 550,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_condition_cmd_list",
            "line": 642,
            "column": 4,
            "endLine": 642,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.build_condition_cmd_list",
            "line": 642,
            "column": 4,
            "endLine": 642,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_arith1_operation_relation",
            "line": 1356,
            "column": 15,
            "endLine": 1356,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_arith2_operation_relation",
            "line": 1395,
            "column": 15,
            "endLine": 1395,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'numinput' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_if",
            "line": 1713,
            "column": 57,
            "endLine": 1713,
            "endColumn": 65,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'numthen' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_elif",
            "line": 1813,
            "column": 22,
            "endLine": 1813,
            "endColumn": 29,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'numelse' before assignment",
            "messageId": "E0601",
            "confidence": "HIGH",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_condition_elif",
            "line": 1814,
            "column": 22,
            "endLine": 1814,
            "endColumn": 29,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'theninput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif",
            "line": 1875,
            "column": 12,
            "endLine": 1875,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'elseinput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif",
            "line": 1876,
            "column": 12,
            "endLine": 1876,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'theninput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif_relation",
            "line": 1933,
            "column": 12,
            "endLine": 1933,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "used-before-assignment",
            "message": "Using variable 'elseinput' before assignment",
            "messageId": "E0601",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_s_numeric_expr_condition_elif_relation",
            "line": 1934,
            "column": 12,
            "endLine": 1934,
            "endColumn": 21,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'resultlist' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_ts_var_expr1",
            "line": 2027,
            "column": 15,
            "endLine": 2027,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'n_maps' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser.p_hash_operation",
            "line": 2048,
            "column": 38,
            "endLine": 2048,
            "endColumn": 44,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (37/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_raster_base_algebra",
            "obj": "TemporalRasterBaseAlgebraParser",
            "line": 147,
            "column": 0,
            "endLine": 147,
            "endColumn": 37,
            "path": "python/grass/temporal/temporal_raster_base_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_raster_base_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (34/20)",
            "messageId": "R0904",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_topology_dataset_connector",
            "obj": "TemporalTopologyDatasetConnector",
            "line": 22,
            "column": 0,
            "endLine": 22,
            "endColumn": 38,
            "path": "python/grass/temporal/temporal_topology_dataset_connector.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_topology_dataset_connector.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-differ",
            "message": "Number of parameters was 7 in 'TemporalAlgebraParser.parse' and is now 4 in overriding 'TemporalVectorAlgebraParser.parse' method",
            "messageId": "W0221",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.parse",
            "line": 153,
            "column": 4,
            "endLine": 153,
            "endColumn": 13,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'compop' has been renamed to 'compare_cmd' in overriding 'TemporalVectorAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "arguments-renamed",
            "message": "Parameter 'aggregate' has been renamed to 'compop' in overriding 'TemporalVectorAlgebraParser.build_spatio_temporal_topology_list' method",
            "messageId": "W0237",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.build_spatio_temporal_topology_list",
            "line": 180,
            "column": 4,
            "endLine": 180,
            "endColumn": 43,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.overlay_cmd_value",
            "line": 297,
            "column": 4,
            "endLine": 297,
            "endColumn": 25,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "dangerous-default-value",
            "message": "Dangerous default value [] as argument",
            "messageId": "W0102",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.set_temporal_extent_list",
            "line": 360,
            "column": 4,
            "endLine": 360,
            "endColumn": 32,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 462,
            "column": 44,
            "endLine": 462,
            "endColumn": 59,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "warning",
            "symbol": "broad-exception-raised",
            "message": "Raising too general exception: Exception",
            "messageId": "W0719",
            "confidence": "INFERENCE",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 467,
            "column": 44,
            "endLine": 467,
            "endColumn": 59,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (9/7)",
            "messageId": "R1702",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_statement_assign",
            "line": 423,
            "column": 8,
            "endLine": 589,
            "endColumn": 23,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'buff_type' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.temporal_vector_algebra",
            "obj": "TemporalVectorAlgebraParser.p_buffer_operation",
            "line": 697,
            "column": 41,
            "endLine": 697,
            "endColumn": 50,
            "path": "python/grass/temporal/temporal_vector_algebra.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/temporal_vector_algebra.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (222/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_compute_datetime_delta",
            "line": 227,
            "column": 0,
            "endLine": 227,
            "endColumn": 31,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (248/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_compute_absolute_time_granularity",
            "line": 570,
            "column": 0,
            "endLine": 570,
            "endColumn": 42,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-branches",
            "message": "Too many branches (48/44)",
            "messageId": "R0912",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_spatial_relations",
            "line": 974,
            "column": 0,
            "endLine": 974,
            "endColumn": 26,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "refactor",
            "symbol": "too-many-statements",
            "message": "Too many statements (297/220)",
            "messageId": "R0915",
            "confidence": "UNDEFINED",
            "module": "grass.temporal.unit_tests",
            "obj": "test_spatial_relations",
            "line": 974,
            "column": 0,
            "endLine": 974,
            "endColumn": 26,
            "path": "python/grass/temporal/unit_tests.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/unit_tests.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'zone' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.univar_statistics",
            "obj": "compute_univar_stats",
            "line": 90,
            "column": 29,
            "endLine": 90,
            "endColumn": 33,
            "path": "python/grass/temporal/univar_statistics.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/univar_statistics.py"
        },
        {
            "type": "error",
            "symbol": "possibly-used-before-assignment",
            "message": "Possibly using variable 'out_file' before assignment",
            "messageId": "E0606",
            "confidence": "CONTROL_FLOW",
            "module": "grass.temporal.univar_statistics",
            "obj": "print_vector_dataset_univar_statistics",
            "line": 390,
            "column": 12,
            "endLine": 390,
            "endColumn": 20,
            "path": "python/grass/temporal/univar_statistics.py",
            "absolutePath": "/workspace/grass/python/grass/temporal/univar_statistics.py"
        },
        {
            "type": "fatal",
            "symbol": "parse-error",
            "message": "error while code parsing: Unable to load file gui/wxpython/__init__.py:\n[Errno 2] No such file or directory: 'gui/wxpython/__init__.py'",
            "messageId": "F0010",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.vector -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.script -> grass.script.vector -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.vector -> grass.script.core -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.script -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.setup -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.setup)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.vector.abstract -> grass.pygrass.vector.find)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.find -> grass.pygrass.vector.geometry)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis -> grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.table)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis -> grass.pygrass.utils -> grass.pygrass.vector)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis -> grass.pygrass.utils)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector.geometry)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.find)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.gis.region -> grass.pygrass.vector -> grass.pygrass.vector.abstract -> grass.pygrass.vector.find -> grass.pygrass.vector.geometry -> grass.pygrass.utils)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.pygrass.utils -> grass.pygrass.vector -> grass.pygrass.vector.geometry)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.raster -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.db -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "cyclic-import",
            "message": "Cyclic import (grass.grassdb.checks -> grass.script -> grass.script.raster3d -> grass.script.core -> grass.grassdb.manage)",
            "messageId": "R0401",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2ims:[52:92]\n==grass.imaging.images2swf:[98:140]\n    images2 = []\n\n    for im in images:\n        if PIL and isinstance(im, PIL.Image.Image):\n            # We assume PIL images are alright\n            images2.append(im)\n\n        elif np and isinstance(im, np.ndarray):\n            # Check and convert dtype\n            if im.dtype == np.uint8:\n                images2.append(im)  # Ok\n            elif im.dtype in [np.float32, np.float64]:\n                theMax = im.max()\n                if theMax > 128 and theMax < 300:\n                    pass  # assume 0:255\n                else:\n                    im = im.copy()\n                    im[im < 0] = 0\n                    im[im > 1] = 1\n                    im *= 255\n                images2.append(im.astype(np.uint8))\n            else:\n                im = im.astype(np.uint8)\n                images2.append(im)\n            # Check size\n            if im.ndim == 2:\n                pass  # ok\n            elif im.ndim == 3:\n                if im.shape[2] not in [3, 4]:\n                    raise ValueError(\"This array can not represent an image.\")\n            else:\n                raise ValueError(\"This array can not represent an image.\")\n        else:\n            raise ValueError(\"Invalid image type: \" + str(type(im)))\n\n    # Done\n    return images2\n\n\ndef _getFilenameParts(filename):",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1119:1152]\n==grass.temporal.temporal_raster_base_algebra:[574:611]\n        resultdict = {}\n        temporal_topo_list, spatial_topo_list = self._check_topology(topolist=topolist)\n\n        for map_i in maplist:\n            # Loop over temporal related maps and create overlay modules.\n            tbrelations = map_i.get_temporal_relations()\n            # Generate an intermediate map for the result map list.\n            map_new = self.generate_new_map(\n                base_map=map_i, bool_op=\"and\", copy=True, rename=True\n            )\n            # Combine temporal and spatial extents of intermediate map with related\n            # maps.\n            for topo in topolist:\n                if topo in tbrelations.keys():\n                    for map_j in tbrelations[topo]:\n                        if (\n                            self._check_spatial_topology_relation(\n                                spatial_topo_list, map_i, map_j\n                            )\n                            is True\n                        ):\n                            if temporal == \"r\":\n                                # Generate an intermediate map for the result map list.\n                                map_new = self.generate_new_map(\n                                    base_map=map_i,\n                                    bool_op=\"and\",\n                                    copy=True,\n                                    rename=True,\n                                )\n                            # Create overlaid map extent.\n                            returncode = self.overlay_map_extent(\n                                map_new, map_j, \"and\", temp_op=temporal\n                            )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1613:1660]\n==grass.temporal.temporal_raster_base_algebra:[324:378]\n                )\n\n            temporal_relations = map_i.get_temporal_relations()\n            spatial_relations = map_i.get_spatial_relations()\n\n            for temporal_topology in temporal_topo_list:\n                if temporal_topology.upper() in temporal_relations.keys():\n                    if (\n                        self._check_spatial_topology_entries(\n                            spatial_topo_list, spatial_relations\n                        )\n                        is True\n                    ):\n                        if count_map:\n                            relationmaplist = temporal_relations[\n                                temporal_topology.upper()\n                            ]\n                            gvar = GlobalTemporalVar()\n                            gvar.td = len(relationmaplist)\n                            if \"map_value\" in dir(map_i):\n                                map_i.map_value.append(gvar)\n                            else:\n                                map_i.map_value = gvar\n                        # Use unique identifier, since map names may be equal\n                        resultdict[map_i.uid] = map_i\n        resultlist = resultdict.values()\n\n        # Sort list of maps chronological.\n        resultlist = sorted(resultlist, key=AbstractDatasetComparisonKeyStartTime)\n\n        return resultlist\n\n    def assign_bool_value(\n        self, map_i, temporal_topo_list=[\"EQUAL\"], spatial_topo_list=[]\n    ):\n        \"\"\"Function to assign boolean map value based on the map_values from the\n        compared map list by topological relationships.\n\n          :param map_i: Map object with temporal extent.\n          :param temporal_topo_list: List of strings for given temporal relations.\n          :param spatial_topo_list: List of strings for given spatial relations.\n\n          :return: Map object with conditional value that has been assigned by\n                        relation maps that fulfil the topological relationships to\n                        maplistB specified in temporal_topo_list.\n        \"\"\"\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2gif:[122:148]\n==grass.imaging.images2ims:[68:92]\n                im = im.copy()\n                im[im < 0] = 0\n                im[im > 1] = 1\n                im *= 255\n                images2.append(im.astype(np.uint8))\n            else:\n                im = im.astype(np.uint8)\n                images2.append(im)\n            # Check size\n            if im.ndim == 2:\n                pass  # ok\n            elif im.ndim == 3:\n                if im.shape[2] not in [3, 4]:\n                    raise ValueError(\"This array can not represent an image.\")\n            else:\n                raise ValueError(\"This array can not represent an image.\")\n        else:\n            raise ValueError(\"Invalid image type: \" + str(type(im)))\n\n    # Done\n    return images2\n\n\ndef intToBin(i):\n    \"\"\"Integer to two bytes\"\"\"\n    # divide in two parts (bytes)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.extract:[288:304]\n==grass.temporal.mapcalc:[384:401]\n            names = \"\"\n            count = 0\n            for map in empty_maps:\n                if count == 0:\n                    names += \"%s\" % (map.get_name())\n                else:\n                    names += \",%s\" % (map.get_name())\n                count += 1\n            if type == \"raster\":\n                gscript.run_command(\n                    \"g.remove\", flags=\"f\", type=\"raster\", name=names, quiet=True\n                )\n            elif type == \"raster3d\":\n                gscript.run_command(\n                    \"g.remove\", flags=\"f\", type=\"raster_3d\", name=names, quiet=True\n                )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[675:702]\n==grass.temporal.temporal_operator:[261:291]\n        return t\n\n    # Handle errors.\n    def t_error(self, t):\n        raise SyntaxError(\n            \"syntax error on line %d position %i near '%s'\"\n            % (t.lineno, t.lexpos, t.value)\n        )\n\n    # Build the lexer\n    def build(self, **kwargs):\n        self.lexer = lex.lex(\n            module=self, optimize=False, nowarn=True, debug=0, **kwargs\n        )\n\n    # Just for testing\n    def test(self, data):\n        self.name_list = {}\n        print(data)\n        self.lexer.input(data)\n        while True:\n            tok = self.lexer.token()\n            if not tok:\n                break\n            print(tok)\n\n\n###############################################################################\n\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[51:73]\n==grass.temporal.temporal_raster_algebra:[97:119]\n        self.m_mremove = pymod.Module(\"g.remove\")\n\n    def parse(self, expression, basename=None, overwrite=False):\n        # Check for space time dataset type definitions from temporal algebra\n        l = TemporalRasterAlgebraLexer()\n        l.build()\n        l.lexer.input(expression)\n\n        while True:\n            tok = l.lexer.token()\n            if not tok:\n                break\n\n            if tok.type == \"STVDS\" or tok.type == \"STRDS\" or tok.type == \"STR3DS\":\n                raise SyntaxError(\"Syntax error near '%s'\" % (tok.type))\n\n        self.lexer = TemporalRasterAlgebraLexer()\n        self.lexer.build()\n        self.parser = yacc.yacc(module=self, debug=self.debug, write_tables=False)\n\n        self.overwrite = overwrite\n        self.count = 0",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2666:2686]\n==grass.temporal.temporal_raster_base_algebra:[963:984]\n        if self.run:\n            # Check input map.\n            input = t[3]\n            if not isinstance(input, list):\n                # Check for mapset in given stds input.\n                if input.find(\"@\") >= 0:\n                    id_input = input\n                else:\n                    id_input = input + \"@\" + self.mapset\n                # Create empty map dataset.\n                map_i = dataset_factory(self.maptype, id_input)\n                # Check for occurrence of space time dataset.\n                if map_i.map_exists() is False:\n                    raise FatalError(\n                        _(\"%s map <%s> not found in GRASS spatial database\")\n                        % (map_i.get_type(), id_input)\n                    )\n                else:\n                    # Select dataset entry from database.\n                    map_i.select(dbif=self.dbif)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1593:1615]\n==grass.temporal.temporal_raster_base_algebra:[291:312]\n        temporal_topo_list, spatial_topo_list = self._check_topology(topolist=topolist)\n\n        resultdict = {}\n\n        # Create spatio-temporal topology for maplistA to maplistB.\n        tb = SpatioTemporalTopologyBuilder()\n        if len(spatial_topo_list) > 0:\n            # Dictionary with different spatial variables used for topology builder.\n            spatialdict = {\"strds\": \"2D\", \"stvds\": \"2D\", \"str3ds\": \"3D\"}\n            tb.build(maplistA, maplistB, spatial=spatialdict[self.stdstype])\n        else:\n            tb.build(maplistA, maplistB)\n        # Iterate through maps in maplistA and search for relationships given\n        # in topolist.\n        for map_i in maplistA:\n            if assign_val:\n                self.assign_bool_value(map_i, temporal_topo_list, spatial_topo_list)\n            elif compare_bool:\n                self.compare_bool_value(\n                    map_i, compop, aggregate, temporal_topo_list, spatial_topo_list\n                )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.extract:[307:337]\n==grass.temporal.mapcalc:[399:474]\n                )\n\n    dbif.close()\n\n\n###############################################################################\n\n\ndef _run_mapcalc2d(expr):\n    \"\"\"Helper function to run r.mapcalc in parallel\"\"\"\n    try:\n        gscript.run_command(\n            \"r.mapcalc\", expression=expr, overwrite=gscript.overwrite(), quiet=True\n        )\n    except CalledModuleError:\n        exit(1)\n\n\n###############################################################################\n\n\ndef _run_mapcalc3d(expr):\n    \"\"\"Helper function to run r3.mapcalc in parallel\"\"\"\n    try:\n        gscript.run_command(\n            \"r3.mapcalc\", expression=expr, overwrite=gscript.overwrite(), quiet=True\n        )\n    except CalledModuleError:\n        exit(1)\n\n\n###############################################################################\n\n\ndef _operator_parser(expr, first, current):\n    \"\"\"This method parses the expression string and substitutes\n    the temporal operators with numerical values.\n\n    Supported operators for relative and absolute time are:\n\n    - td() - the time delta of the current interval in days\n      and fractions of days or the unit in case of relative time\n    - start_time() - The start time of the interval from the begin of the\n                     time series in days and fractions of days or the unit\n                     in case of relative time\n    - end_time() - The end time of the current interval from the begin of\n                   the time series in days and fractions of days or the\n                   unit in case of relative time\n\n    Supported operators for absolute time:\n\n    - start_doy() - Day of year (doy) from the start time [1 - 366]\n    - start_dow() - Day of week (dow) from the start time [1 - 7],\n                    the start of the week is monday == 1\n    - start_year() - The year of the start time [0 - 9999]\n    - start_month() - The month of the start time [1 - 12]\n    - start_week() - Week of year of the start time [1 - 54]\n    - start_day() - Day of month from the start time [1 - 31]\n    - start_hour() - The hour of the start time [0 - 23]\n    - start_minute() - The minute of the start time [0 - 59]\n    - start_second() - The second of the start time [0 - 59]\n    - end_doy() - Day of year (doy) from the end time [1 - 366]\n    - end_dow() - Day of week (dow) from the end time [1 - 7],\n                  the start of the week is monday == 1\n    - end_year() - The year of the end time [0 - 9999]\n    - end_month() - The month of the end time [1 - 12]\n    - end_week() - Week of year of the end time [1 - 54]\n    - end_day() - Day of month from the end time [1 - 31]\n    - end_hour() - The hour of the end time [0 - 23]\n    - end_minute() - The minute of the end time [0 - 59]\n    - end_second() - The minute of the end time [0 - 59]\n\n    The modified expression is returned.\n\n    \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.gunittest.checkers:[123:141]\n==grass.script.core:[1087:1105]\n            not_float = False\n            not_int = False\n\n            # Convert values into correct types\n            # We first try integer then float\n            try:\n                value_converted = int(value)\n            except ValueError:\n                not_int = True\n            if not_int:\n                try:\n                    value_converted = float(value)\n                except ValueError:\n                    not_float = True\n\n            if not_int and not_float:\n                value_converted = value.strip()\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1927:1941]\n==grass.temporal.temporal_vector_algebra:[220:233]\n        topologylist = [\n            \"EQUAL\",\n            \"FOLLOWS\",\n            \"PRECEDES\",\n            \"OVERLAPS\",\n            \"OVERLAPPED\",\n            \"DURING\",\n            \"STARTS\",\n            \"FINISHES\",\n            \"CONTAINS\",\n            \"STARTED\",\n            \"FINISHED\",\n        ]",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.spatial_topology_dataset_connector:[295:310]\n==grass.temporal.temporal_topology_dataset_connector:[478:493]\n        count = 0\n        string = \"\"\n        for map_ in map_list:\n            if line_wrap and count > 0 and count % 3 == 0:\n                string += \"\\n | ............................ \"\n                count = 0\n            if count == 0:\n                string += map_.get_id()\n            else:\n                string += \",%s\" % map_.get_id()\n            count += 1\n\n        return string\n\n    # Set the properties",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2531:2547]\n==grass.temporal.temporal_raster_base_algebra:[916:931]\n                                if (\n                                    map_i.metadata.get_min() is None\n                                    and map_i.metadata.get_max() is None\n                                ):\n                                    if not self.register_null:\n                                        self.removable_maps[map_i.get_name()] = map_i\n                                        continue\n\n                            if map_i.is_in_db(dbif) and self.overwrite:\n                                # Update map in temporal database.\n                                if self.dry_run is False:\n                                    map_i.update_all(dbif)\n                            elif map_i.is_in_db(dbif) and self.overwrite is False:\n                                # Raise error if map exists and no overwrite flag is\n                                # given.\n                                self.msgr.fatal(",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[825:837]\n==grass.temporal.temporal_vector_algebra:[221:233]\n            \"EQUAL\",\n            \"FOLLOWS\",\n            \"PRECEDES\",\n            \"OVERLAPS\",\n            \"OVERLAPPED\",\n            \"DURING\",\n            \"STARTS\",\n            \"FINISHES\",\n            \"CONTAINS\",\n            \"STARTED\",\n            \"FINISHED\",\n        ]",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.gis.__init__:[493:512]\n==grass.pygrass.gis.region:[665:684]\nif __name__ == \"__main__\":\n    import doctest\n    from grass.pygrass import utils\n    from grass.script.core import run_command\n\n    utils.create_test_vector_map(test_vector_name)\n    run_command(\"g.region\", n=50, s=0, e=60, w=0, res=1)\n    run_command(\"r.mapcalc\", expression=\"%s = 1\" % (test_raster_name), overwrite=True)\n    run_command(\"g.region\", n=40, s=0, e=40, w=0, res=2)\n\n    doctest.testmod()\n\n    # Remove the generated vector map, if exist\n    mset = utils.get_mapset_vector(test_vector_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"vector\", name=test_vector_name)\n    mset = utils.get_mapset_raster(test_raster_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"raster\", name=test_raster_name)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[1020:1032]\n==grass.temporal.aggregation:[86:98]\n            where = create_temporal_relation_sql_where_statement(\n                start,\n                end,\n                use_start,\n                use_during,\n                use_overlap,\n                use_contain,\n                use_equal,\n                use_follows,\n                use_precedes,\n            )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster_algebra:[82:93]\n==grass.temporal.temporal_raster_base_algebra:[180:192]\n            self,\n            pid=pid,\n            run=run,\n            debug=debug,\n            spatial=spatial,\n            register_null=register_null,\n            dry_run=dry_run,\n            nprocs=nprocs,\n            time_suffix=time_suffix,\n        )\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.script.raster3d:[101:111]\n==grass.script.raster:[136:146]\n            file=\"-\",\n            stdin=e,\n            env=env,\n            seed=seed,\n            quiet=quiet,\n            superquiet=superquiet,\n            verbose=verbose,\n            overwrite=overwrite,\n        )\n    except CalledModuleError:",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.jupyter.setup:[98:111]\n==grass.script.setup:[312:324]\n        mapset_path = resolve_mapset_path(path=path, location=location, mapset=mapset)\n        if not is_mapset_valid(mapset_path):\n            raise ValueError(\n                _(\"Mapset {path} is not valid: {reason}\").format(\n                    path=mapset_path.path,\n                    reason=get_mapset_invalid_reason(\n                        mapset_path.directory, mapset_path.location, mapset_path.mapset\n                    ),\n                )\n            )\n        # This requires direct session file modification using g.gisenv because\n        # g.mapset locks the mapset which is not how init and finish behave.\n        # For code simplicity, we just change all even when only mapset is changed.",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2434:2445]\n==grass.temporal.temporal_raster_base_algebra:[778:789]\n                    )\n\n                    if (\n                        map_i.is_time_absolute() is True\n                        and self.time_suffix\n                        and granularity is not None\n                        and self.time_suffix == \"gran\"\n                    ):\n                        suffix = create_suffix_from_datetime(\n                            map_i.temporal_extent.get_start_time(), granularity\n                        )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1630:1660]\n==grass.temporal.temporal_vector_algebra:[281:309]\n                        gvar = GlobalTemporalVar()\n                        gvar.td = len(relationmaplist)\n                        if \"map_value\" in dir(map_i):\n                            map_i.map_value.append(gvar)\n                        else:\n                            map_i.map_value = gvar\n                    # Use unique identifier, since map names may be equal\n                    resultdict[map_i.uid] = map_i\n        resultlist = resultdict.values()\n\n        # Sort list of maps chronological.\n        resultlist = sorted(resultlist, key=AbstractDatasetComparisonKeyStartTime)\n\n        return resultlist\n\n    def overlay_cmd_value(self, map_i, tbrelations, function, topolist=[\"EQUAL\"]):\n        \"\"\"Function to evaluate two map lists by given overlay operator.\n\n        :param map_i: Map object with temporal extent.\n        :param tbrelations: List of temporal relation to map_i.\n        :param topolist: List of strings for given temporal relations.\n        :param function: Overlay operator, &|+^~.\n\n        :return: Map object with command list with  operators that has been\n                      evaluated by implicit aggregration.\n        \"\"\"\n        # Build comandlist list with elements from related maps and given relation\n        # operator.",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[123:135]\n==grass.temporal.temporal_raster_algebra:[167:179]\n                if new_index < max_index and new_index >= 0:\n                    map_i_t_extent = map_i.get_temporal_extent()\n                    # Get neighbouring map and set temporal extent.\n                    map_n = maplist[new_index]\n                    # Generate an intermediate map for the result map list.\n                    map_new = self.generate_new_map(map_n, bool_op=\"and\", copy=True)\n                    map_new.set_temporal_extent(map_i_t_extent)\n                    # Create r.mapcalc expression string for the operation.\n                    if \"cmd_list\" in dir(map_new) and len(t) == 5:\n                        cmdstring = \"%s\" % (map_new.cmd_list)\n                    elif \"cmd_list\" not in dir(map_new) and len(t) == 5:\n                        cmdstring = \"%s\" % (map_n.get_id())",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[39:48]\n==grass.temporal.temporal_raster_algebra:[81:90]\n        TemporalRasterBaseAlgebraParser.__init__(\n            self,\n            pid=pid,\n            run=run,\n            debug=debug,\n            spatial=spatial,\n            register_null=register_null,\n            dry_run=dry_run,\n            nprocs=nprocs,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1156:1185]\n==grass.temporal.temporal_vector_algebra:[399:422]\n                            if returncode == 0:\n                                break\n                            # Append map to result map list.\n                            elif returncode == 1:\n                                # print(map_new.get_id() + \" \" +\n                                #       str(map_new.get_temporal_extent_as_tuple()))\n                                # print(map_new.condition_value)\n                                # print(map_new.cmd_list)\n                                # resultlist.append(map_new)\n                                resultdict[map_new.get_id()] = map_new\n\n                            # Create r.mapcalc expression string for the operation.\n                            # cmdstring = self.build_command_string(\n                            # s_expr_a = map_new, s_expr_b = map_j, operator = function)\n                            # Conditional append of module command.\n                            # map_new.cmd_list = cmdstring\n                    if returncode == 0:\n                        break\n            # Append map to result map list.\n            # if returncode == 1:\n            #    resultlist.append(map_new)\n        # Get sorted map objects as values from result dictionary.\n        resultlist = resultdict.values()\n        resultlist = sorted(resultlist, key=AbstractDatasetComparisonKeyStartTime)\n        return resultlist\n\n    def remove_maps(self):\n        \"\"\"Removes empty or intermediate maps of different type.\"\"\"\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1941:1954]\n==grass.temporal.temporal_vector_algebra:[248:263]\n        for topo in topolist:\n            if topo.upper() not in topologylist:\n                raise SyntaxError(\"Unpermitted temporal relation name '\" + topo + \"'\")\n\n        # Create temporal topology for maplistA to maplistB.\n        tb = SpatioTemporalTopologyBuilder()\n        # Dictionary with different spatial variables used for topology builder.\n        spatialdict = {\"strds\": \"2D\", \"stvds\": \"2D\", \"str3ds\": \"3D\"}\n        # Build spatial temporal topology\n        if self.spatial:\n            tb.build(maplistA, maplistB, spatial=spatialdict[self.stdstype])\n        else:\n            tb.build(maplistA, maplistB)\n        # Iterate through maps in maplistA and search for relationships given\n        # in topolist.",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[768:777]\n==grass.temporal.temporal_vector_algebra:[122:131]\n    precedence = (\n        (\n            \"left\",\n            \"T_SELECT_OPERATOR\",\n            \"T_SELECT\",\n            \"T_NOT_SELECT\",\n            \"T_HASH_OPERATOR\",\n            \"HASH\",\n        ),  # 1",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[40:48]\n==grass.temporal.temporal_raster_base_algebra:[180:188]\n            self,\n            pid=pid,\n            run=run,\n            debug=debug,\n            spatial=spatial,\n            register_null=register_null,\n            dry_run=dry_run,\n            nprocs=nprocs,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2gif:[110:122]\n==grass.imaging.images2ims:[52:64]\n    images2 = []\n\n    for im in images:\n        if PIL and isinstance(im, PIL.Image.Image):\n            # We assume PIL images are alright\n            images2.append(im)\n\n        elif np and isinstance(im, np.ndarray):\n            # Check and convert dtype\n            if im.dtype == np.uint8:\n                images2.append(im)  # Ok\n            elif im.dtype in [np.float32, np.float64]:",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2505:2515]\n==grass.temporal.temporal_raster_base_algebra:[897:906]\n                            \"absolute\",\n                            t[1],\n                            t[1],\n                            \"mean\",\n                            self.dbif,\n                            overwrite=self.overwrite,\n                        )\n\n                    for map_i in register_list:\n                        # Get meta data from grass database.",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2578:2586]\n==grass.temporal.temporal_raster_base_algebra:[893:901]\n                if self.dry_run is False:\n                    resultstds = open_new_stds(\n                        t[1],\n                        self.stdstype,\n                        \"absolute\",\n                        t[1],\n                        t[1],\n                        \"mean\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[56:67]\n==grass.temporal.temporal_vector_algebra:[155:166]\n        l.build()\n        l.lexer.input(expression)\n\n        while True:\n            tok = l.lexer.token()\n            if not tok:\n                break\n\n            if tok.type == \"STVDS\" or tok.type == \"STRDS\" or tok.type == \"STR3DS\":\n                raise SyntaxError(\"Syntax error near '%s'\" % (tok.type))\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.extract:[249:256]\n==grass.temporal.mapcalc:[360:369]\n            if (\n                new_map.metadata.get_min() is None\n                and new_map.metadata.get_max() is None\n            ):\n                if not register_null:\n                    empty_maps.append(new_map)\n                    continue\n\n            # Insert map in temporal database",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.extract:[195:202]\n==grass.temporal.mapcalc:[312:320]\n                    proc_count = 0\n                    exitcodes = 0\n                    for proc in proc_list:\n                        proc.join()\n                        exitcodes += proc.exitcode\n                    if exitcodes != 0:\n                        dbif.close()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.rpc.__init__:[211:223]\n==grass.temporal.c_libraries_interface:[1233:1245]\n        conn.close()\n        lock.release()\n\n    CALLBACK = CFUNCTYPE(c_void_p, c_void_p)\n    CALLBACK.restype = c_void_p\n    CALLBACK.argtypes = c_void_p\n\n    cerror_handler = CALLBACK(error_handler)\n\n    libgis.G_add_error_handler(cerror_handler, None)\n\n    # Crerate the function array",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.script.raster3d:[103:110]\n==grass.script.raster:[198:205]\n        env=env,\n        seed=seed,\n        quiet=quiet,\n        superquiet=superquiet,\n        verbose=verbose,\n        overwrite=overwrite,\n    )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.script.raster3d:[66:100]\n==grass.script.raster:[101:135]\n    return kv\n\n\ndef mapcalc3d(\n    exp,\n    quiet=False,\n    superquiet=False,\n    verbose=False,\n    overwrite=False,\n    seed=None,\n    env=None,\n    **kwargs,\n):\n    \"\"\"Interface to r3.mapcalc.\n\n    :param str exp: expression\n    :param bool quiet: True to run quietly (<tt>--q</tt>)\n    :param bool superquiet: True to run extra quietly (<tt>--qq</tt>)\n    :param bool verbose: True to run verbosely (<tt>--v</tt>)\n    :param bool overwrite: True to enable overwriting the output (<tt>--o</tt>)\n    :param seed: an integer used to seed the random-number generator for the\n                 rand() function, or 'auto' to generate a random seed\n    :param dict env: dictionary of environment variables for child process\n    :param kwargs:\n    \"\"\"\n\n    if seed == \"auto\":\n        seed = hash((os.getpid(), time.time())) % (2**32)\n\n    t = string.Template(exp)\n    e = t.substitute(**kwargs)\n\n    try:\n        write_command(",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.jupyter.map3d:[99:110]\n==grass.jupyter.map:[104:115]\n        self._tmpdir = (\n            tempfile.TemporaryDirectory()  # pylint: disable=consider-using-with\n        )\n\n        def cleanup(tmpdir):\n            tmpdir.cleanup()\n\n        weakref.finalize(self, cleanup, self._tmpdir)\n\n        if filename:\n            self._filename = filename",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2548:2558]\n==grass.temporal.temporal_raster_base_algebra:[932:942]\n                                    \"Use overwrite flag.\" % map_i.get_map_id()\n                                )\n                            else:\n                                # Insert map into temporal database.\n                                if self.dry_run is False:\n                                    map_i.insert(dbif)\n\n                        # Register map in result space time dataset.\n                        if self.dry_run is False:\n                            success = resultstds.register_map(map_i, dbif)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1662:1672]\n==grass.temporal.temporal_raster_base_algebra:[520:531]\n        for topo in temporal_topo_list:\n            if topo.upper() in temporal_relations.keys():\n                relationmaplist = temporal_relations[topo.upper()]\n                for relationmap in relationmaplist:\n                    if (\n                        self._check_spatial_topology_relation(\n                            spatial_topo_list, map_i, relationmap\n                        )\n                        is True\n                    ):",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1665:1672]\n==grass.temporal.temporal_raster_base_algebra:[466:473]\n                for relationmap in relationmaplist:\n                    if (\n                        self._check_spatial_topology_relation(\n                            spatial_topo_list, map_i, relationmap\n                        )\n                        is True\n                    ):",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster_base_algebra:[603:617]\n==grass.temporal.temporal_vector_algebra:[393:404]\n                                )\n                            # Create overlaid map extent.\n                            returncode = self.overlay_map_extent(\n                                map_new, map_j, \"and\", temp_op=temporal\n                            )\n\n                            # Stop the loop if no temporal or spatial relationship\n                            # exist.\n                            if returncode == 0:\n                                break\n                            # Append map to result map list.\n                            elif returncode == 1:\n                                # print(map_new.cmd_list)\n                                # resultlist.append(map_new)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[953:962]\n==grass.temporal.aggregation:[48:57]\n        use_start = False\n        use_during = False\n        use_overlap = False\n        use_contain = False\n        use_equal = False\n        use_follows = False\n        use_precedes = False\n\n        # Initialize the methods",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_map_dataset:[320:330]\n==grass.temporal.abstract_space_time_dataset:[169:184]\n        print(\n            \" +----------------------------------------------------------------------------+\"  # noqa: E501\n        )\n\n    def print_shell_info(self):\n        \"\"\"Print information about this class in shell style\"\"\"\n        self.base.print_shell_info()\n        self.temporal_extent.print_shell_info()\n        self.spatial_extent.print_shell_info()\n        self.metadata.print_shell_info()\n\n    def print_history(self):\n        \"\"\"Print history information about this class in human readable\n        shell style\n        \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.gunittest.multirunner:[19:30]\n==grass.script.utils:[160:188]\n    try:\n        # Python >= 3.11\n        encoding = locale.getencoding()\n    except AttributeError:\n        encoding = locale.getdefaultlocale()[1]\n    if not encoding:\n        encoding = \"UTF-8\"\n    return encoding\n\n\ndef decode(bytes_, encoding=None):\n    \"\"\"Decode bytes with default locale and return (unicode) string\n\n    No-op if parameter is not bytes (assumed unicode string).\n\n    :param bytes bytes_: the bytes to decode\n    :param encoding: encoding to be used, default value is None\n\n    Example\n    -------\n\n    >>> decode(b'S\\xc3\\xbcdtirol')\n    u'S\u00fcdtirol'\n    >>> decode(u'S\u00fcdtirol')\n    u'S\u00fcdtirol'\n    >>> decode(1234)\n    u'1234'\n    \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.raster.__init__:[717:727]\n==grass.pygrass.raster.abstract:[623:634]\nif __name__ == \"__main__\":\n    import doctest\n    from grass.pygrass.modules import Module\n\n    Module(\"g.region\", n=40, s=0, e=40, w=0, res=10)\n    Module(\n        \"r.mapcalc\",\n        expression=\"%s = row() + (10 * col())\" % (test_raster_name),\n        overwrite=True,\n    )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.extract:[217:225]\n==grass.temporal.mapcalc:[339:345]\n            title,\n            description,\n            semantic_type,\n            dbif,\n            gscript.overwrite(),\n        )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[148:161]\n==grass.temporal.temporal_raster_algebra:[190:203]\n                        )\n                    # Set new command list for map.\n                    map_new.cmd_list = cmdstring\n                    # Append map with updated command list to result list.\n                    resultlist.append(map_new)\n\n            t[0] = resultlist\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[76:101]\n==grass.temporal.temporal_raster_algebra:[122:148]\n        self.basename = basename\n        self.expression = expression\n        self.parser.parse(expression)\n\n        return self.process_chain_dict\n\n    def p_statement_assign(self, t):\n        # The expression should always return a list of maps.\n        \"\"\"\n        statement : stds EQUALS expr\n        \"\"\"\n        TemporalRasterBaseAlgebraParser.p_statement_assign(self, t)\n\n    def p_ts_neighbour_operation(self, t):\n        # Spatial and temporal neighbour operations via indexing\n        # Examples:\n        # A[1,0]\n        # B[-2]\n        # C[-2,1,3]\n        \"\"\"\n        expr : stds L_SPAREN number COMMA number R_SPAREN\n             | stds L_SPAREN number R_SPAREN\n             | stds L_SPAREN number COMMA number COMMA number R_SPAREN\n        \"\"\"\n        # Check input stds.\n        maplist = self.check_stds(t[1])",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2gif:[669:679]\n==grass.imaging.images2swf:[974:982]\n    if not asNumpy:\n        images2 = images\n        images = []\n        for im in images2:\n            images.append(PIL.Image.fromarray(im))\n\n    # Done\n    return images",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.rpc.__init__:[230:239]\n==grass.temporal.c_libraries_interface:[1269:1278]\n    while True:\n        # Avoid busy waiting\n        conn.poll(None)\n        data = conn.recv()\n        lock.acquire()\n        functions[data[0]](lock, conn, data)\n        lock.release()\n\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.vector.__init__:[969:983]\n==grass.pygrass.vector.find:[677:691]\nif __name__ == \"__main__\":\n    import doctest\n    from grass.pygrass import utils\n\n    utils.create_test_vector_map(test_vector_name)\n    doctest.testmod()\n\n    \"\"\"Remove the generated vector map, if exist\"\"\"\n    from grass.pygrass.utils import get_mapset_vector\n    from grass.script.core import run_command\n\n    mset = get_mapset_vector(test_vector_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"vector\", name=test_vector_name)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.experimental.mapset:[105:119]\n==grass.script.setup:[405:424]\n        if not self.active:\n            raise ValueError(\n                \"Attempt to use inactive (finished) session as a context manager\"\n            )\n        return self\n\n    def __exit__(self, type, value, traceback):\n        \"\"\"Exit the context manager context.\n\n        Finishes the existing session.\n        \"\"\"\n        self.finish()\n\n    def finish(self):\n        \"\"\"Finish the session.\n\n        If not used as a context manager, call explicitly to clean and close the mapset\n        and finish the session. No GRASS modules can be called afterwards.\n        \"\"\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2ims:[34:52]\n==grass.imaging.images2swf:[71:82]\ntry:\n    import numpy as np\nexcept ImportError:\n    np = None\n\ntry:\n    import PIL.Image\nexcept ImportError:\n    PIL = None\n\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.gis.region:[633:639]\n==grass.pygrass.raster.abstract:[212:218]\n            north=self.north,\n            south=self.south,\n            east=self.east,\n            west=self.west,\n            top=self.top,\n            bottom=self.bottom,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2432:2445]\n==grass.temporal.temporal_raster_base_algebra:[817:830]\n                    newident = create_numeric_suffix(\n                        self.basename, count, \"%0\" + str(leadzero)\n                    )\n\n                    if (\n                        map_i.is_time_absolute() is True\n                        and self.time_suffix\n                        and granularity is not None\n                        and self.time_suffix == \"gran\"\n                    ):\n                        suffix = create_suffix_from_datetime(\n                            map_i.temporal_extent.get_start_time(), granularity\n                        )",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2449:2455]\n==grass.temporal.temporal_raster_base_algebra:[791:797]\n                    elif (\n                        map_i.is_time_absolute() is True\n                        and self.time_suffix\n                        and self.time_suffix == \"time\"\n                    ):\n                        suffix = create_time_suffix(map_i)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2383:2391]\n==grass.temporal.temporal_raster_base_algebra:[761:770]\n                    granularity = None\n                    if len(t[3]) > 0 and self.time_suffix == \"gran\":\n                        map_i = t[3][0]\n                        if map_i.is_time_absolute() is True:\n                            granularity = compute_absolute_time_granularity(t[3])\n\n                    # compute the size of the numerical suffix\n                    num = len(t[3])",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.script.raster:[226:233]\n==grass.script.vector:[399:406]\n    coord_list = list()\n    if isinstance(coord, tuple):\n        coord_list.append(\"%f,%f\" % (coord[0], coord[1]))\n    else:\n        for e, n in coord:\n            coord_list.append(\"%f,%f\" % (e, n))\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2579:2585]\n==grass.temporal.temporal_vector_algebra:[544:550]\n                    resultstds = open_new_stds(\n                        t[1],\n                        self.stdstype,\n                        \"absolute\",\n                        t[1],\n                        t[1],",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[973:979]\n==grass.temporal.aggregation:[68:75]\n                use_equal = True\n            if name == \"follows\":\n                use_follows = True\n            if name == \"precedes\":\n                use_precedes = True\n\n    else:",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[964:970]\n==grass.temporal.aggregation:[59:65]\n            if name == \"start\":\n                use_start = True\n            if name == \"during\":\n                use_during = True\n            if name == \"overlap\":\n                use_overlap = True",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[1000:1007]\n==grass.temporal.aggregation:[49:57]\n    use_during = False\n    use_overlap = False\n    use_contain = False\n    use_equal = False\n    use_follows = False\n    use_precedes = False\n\n    # Initialize the methods",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[954:962]\n==grass.temporal.aggregation:[79:86]\n        use_during = False\n        use_overlap = False\n        use_contain = False\n        use_equal = False\n        use_follows = False\n        use_precedes = False\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.vector.geometry:[1966:1980]\n==grass.pygrass.vector.table:[1290:1304]\nif __name__ == \"__main__\":\n    import doctest\n    from grass.pygrass import utils\n\n    utils.create_test_vector_map(test_vector_name)\n    doctest.testmod()\n\n    \"\"\"Remove the generated vector map, if exist\"\"\"\n    from grass.pygrass.utils import get_mapset_vector\n    from grass.script.core import run_command\n\n    mset = get_mapset_vector(test_vector_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"vector\", name=test_vector_name)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.gis.__init__:[506:512]\n==grass.pygrass.utils:[607:613]\n    mset = utils.get_mapset_vector(test_vector_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"vector\", name=test_vector_name)\n    mset = utils.get_mapset_raster(test_raster_name, mapset=\"\")\n    if mset:\n        run_command(\"g.remove\", flags=\"f\", type=\"raster\", name=test_raster_name)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster3d_algebra:[116:122]\n==grass.temporal.temporal_raster_algebra:[160:166]\n        if self.run:\n            resultlist = []\n            max_index = len(maplist)\n            for map_i in maplist:\n                # Get map index and temporal extent.\n                map_index = maplist.index(map_i)",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_operator:[219:224]\n==grass.temporal.temporal_raster_base_algebra:[116:121]\n    t_MOD = r\"[\\%]\"\n    t_DIV = r\"[\\/]\"\n    t_MULT = r\"[\\*]\"\n    t_ADD = r\"[\\+]\"\n    t_SUB = r\"[-]\"",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_operator:[190:195]\n==grass.temporal.temporal_raster_base_algebra:[96:101]\n        \"MOD\",\n        \"DIV\",\n        \"MULT\",\n        \"ADD\",\n        \"SUB\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.imaging.images2gif:[81:91]\n==grass.imaging.images2ims:[34:42]\ntry:\n    import numpy as np\nexcept ImportError:\n    np = None\n\ntry:\n    import PIL\nexcept ImportError:",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.pygrass.gis.region:[322:327]\n==grass.pygrass.raster.abstract:[237:242]\n            \"top\",\n            \"bottom\",\n            \"nsres\",\n            \"ewres\",\n            \"tbres\",",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.jupyter.baseseriesmap:[62:70]\n==grass.jupyter.map:[173:183]\n        if not name.startswith(\"d_\"):\n            raise AttributeError(_(\"Module must begin with 'd_'\"))\n        # Reformat string\n        grass_module = name.replace(\"_\", \".\")\n        # Assert module exists\n        if not shutil.which(grass_module):\n            raise AttributeError(_(\"Cannot find GRASS module {}\").format(grass_module))\n\n        def wrapper(**kwargs):\n            # Run module",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2974:2980]\n==grass.temporal.temporal_raster_base_algebra:[1609:1615]\n            relations = [\"EQUAL\"]\n            temporal = \"l\"\n            function = t[2] + t[3]\n            aggregate = t[2]\n            # Build conditional values based on topological relationships.\n            complist = self.build_spatio_temporal_topology_list(",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[2564:2571]\n==grass.temporal.temporal_raster_base_algebra:[942:949]\n                    if self.dry_run is False:\n                        resultstds.update_from_registered_maps(dbif)\n\n                    self.process_chain_dict[\"STDS\"][\"name\"] = t[1]\n                    self.process_chain_dict[\"STDS\"][\"stdstype\"] = self.stdstype\n                    self.process_chain_dict[\"STDS\"][\"temporal_type\"] = \"absolute\"\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.list_stds:[327:333]\n==grass.temporal.sampling:[158:164]\n            if end:\n                delta = end - start\n            else:\n                delta = None\n            delta_first = start - first_time\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_raster_base_algebra:[630:670]\n==grass.temporal.temporal_vector_algebra:[405:422]\n                    if returncode == 0:\n                        break\n            # Append map to result map list.\n            # if returncode == 1:\n            #    resultlist.append(map_new)\n        # Get sorted map objects as values from result dictionary.\n        resultlist = resultdict.values()\n        resultlist = sorted(resultlist, key=AbstractDatasetComparisonKeyStartTime)\n        return resultlist\n\n    def p_statement_assign(self, t):\n        # The expression should always return a list of maps.\n        \"\"\"\n        statement : stds EQUALS expr\n\n        \"\"\"\n        # Execute the command lists",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.temporal_algebra:[1140:1146]\n==grass.temporal.temporal_vector_algebra:[385:391]\n                        if temporal == \"r\":\n                            # Generate an intermediate map for the result map list.\n                            map_new = self.generate_new_map(\n                                base_map=map_i,\n                                bool_op=\"and\",\n                                copy=True,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_space_time_dataset:[999:1007]\n==grass.temporal.aggregation:[78:86]\n            use_start = True\n            use_during = False\n            use_overlap = False\n            use_contain = False\n            use_equal = False\n            use_follows = False\n            use_precedes = False\n",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.temporal.abstract_map_dataset:[1103:1110]\n==grass.temporal.abstract_space_time_dataset:[2746:2754]\n        if execute:\n            dbif.execute_transaction(statement, mapset=mapset)\n            statement = \"\"\n\n        if connection_state_changed:\n            dbif.close()\n\n        # decrease the counter",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        },
        {
            "type": "refactor",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==grass.grassdb.data:[31:36]\n==grass.script.core:[1427:1432]\n        \"g.findfile\",\n        flags=\"n\",\n        element=element,\n        file=name,\n        mapset=mapset,",
            "messageId": "R0801",
            "confidence": "UNDEFINED",
            "module": "wxpython",
            "obj": "",
            "line": 1,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "gui/wxpython/__init__.py",
            "absolutePath": "gui/wxpython/__init__.py"
        }
    ],
    "statistics": {
        "messageTypeCount": {
            "fatal": 1,
            "error": 45,
            "warning": 174,
            "refactor": 183,
            "convention": 27,
            "info": 0
        },
        "modulesLinted": 155,
        "score": 0
    }
}
